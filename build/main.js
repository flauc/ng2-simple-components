/**
 * core-js 2.4.1
 * https://github.com/zloirock/core-js
 * License: http://rock.mit-license.org
 * Â© 2016 Denis Pushkarev
 */
!function(a,b,c){"use strict";!function(a){function __webpack_require__(c){if(b[c])return b[c].exports;var d=b[c]={exports:{},id:c,loaded:!1};return a[c].call(d.exports,d,d.exports,__webpack_require__),d.loaded=!0,d.exports}var b={};return __webpack_require__.m=a,__webpack_require__.c=b,__webpack_require__.p="",__webpack_require__(0)}([function(a,b,c){c(1),c(50),c(51),c(52),c(54),c(55),c(58),c(59),c(60),c(61),c(62),c(63),c(64),c(65),c(66),c(68),c(70),c(72),c(74),c(77),c(78),c(79),c(83),c(86),c(87),c(88),c(89),c(91),c(92),c(93),c(94),c(95),c(97),c(99),c(100),c(101),c(103),c(104),c(105),c(107),c(108),c(109),c(111),c(112),c(113),c(114),c(115),c(116),c(117),c(118),c(119),c(120),c(121),c(122),c(123),c(124),c(126),c(130),c(131),c(132),c(133),c(137),c(139),c(140),c(141),c(142),c(143),c(144),c(145),c(146),c(147),c(148),c(149),c(150),c(151),c(152),c(158),c(159),c(161),c(162),c(163),c(167),c(168),c(169),c(170),c(171),c(173),c(174),c(175),c(176),c(179),c(181),c(182),c(183),c(185),c(187),c(189),c(190),c(191),c(193),c(194),c(195),c(196),c(203),c(206),c(207),c(209),c(210),c(211),c(212),c(213),c(214),c(215),c(216),c(217),c(218),c(219),c(220),c(222),c(223),c(224),c(225),c(226),c(227),c(228),c(229),c(231),c(234),c(235),c(237),c(238),c(239),c(240),c(241),c(242),c(243),c(244),c(245),c(246),c(247),c(249),c(250),c(251),c(252),c(253),c(254),c(255),c(256),c(258),c(259),c(261),c(262),c(263),c(264),c(267),c(268),c(269),c(270),c(271),c(272),c(273),c(274),c(276),c(277),c(278),c(279),c(280),c(281),c(282),c(283),c(284),c(285),c(286),c(287),a.exports=c(288)},function(a,b,d){var e=d(2),f=d(3),g=d(4),h=d(6),i=d(16),j=d(20).KEY,k=d(5),l=d(21),m=d(22),n=d(17),o=d(23),p=d(24),q=d(25),r=d(27),s=d(40),t=d(43),u=d(10),v=d(30),w=d(14),x=d(15),y=d(44),z=d(47),A=d(49),B=d(9),C=d(28),D=A.f,E=B.f,F=z.f,G=e.Symbol,H=e.JSON,I=H&&H.stringify,J="prototype",K=o("_hidden"),L=o("toPrimitive"),M={}.propertyIsEnumerable,N=l("symbol-registry"),O=l("symbols"),P=l("op-symbols"),Q=Object[J],R="function"==typeof G,S=e.QObject,T=!S||!S[J]||!S[J].findChild,U=g&&k(function(){return 7!=y(E({},"a",{get:function(){return E(this,"a",{value:7}).a}})).a})?function(a,b,c){var d=D(Q,b);d&&delete Q[b],E(a,b,c),d&&a!==Q&&E(Q,b,d)}:E,V=function(a){var b=O[a]=y(G[J]);return b._k=a,b},W=R&&"symbol"==typeof G.iterator?function(a){return"symbol"==typeof a}:function(a){return a instanceof G},X=function defineProperty(a,b,c){return a===Q&&X(P,b,c),u(a),b=w(b,!0),u(c),f(O,b)?(c.enumerable?(f(a,K)&&a[K][b]&&(a[K][b]=!1),c=y(c,{enumerable:x(0,!1)})):(f(a,K)||E(a,K,x(1,{})),a[K][b]=!0),U(a,b,c)):E(a,b,c)},Y=function defineProperties(a,b){u(a);for(var c,d=s(b=v(b)),e=0,f=d.length;f>e;)X(a,c=d[e++],b[c]);return a},Z=function create(a,b){return b===c?y(a):Y(y(a),b)},$=function propertyIsEnumerable(a){var b=M.call(this,a=w(a,!0));return!(this===Q&&f(O,a)&&!f(P,a))&&(!(b||!f(this,a)||!f(O,a)||f(this,K)&&this[K][a])||b)},_=function getOwnPropertyDescriptor(a,b){if(a=v(a),b=w(b,!0),a!==Q||!f(O,b)||f(P,b)){var c=D(a,b);return!c||!f(O,b)||f(a,K)&&a[K][b]||(c.enumerable=!0),c}},aa=function getOwnPropertyNames(a){for(var b,c=F(v(a)),d=[],e=0;c.length>e;)f(O,b=c[e++])||b==K||b==j||d.push(b);return d},ba=function getOwnPropertySymbols(a){for(var b,c=a===Q,d=F(c?P:v(a)),e=[],g=0;d.length>g;)!f(O,b=d[g++])||c&&!f(Q,b)||e.push(O[b]);return e};R||(G=function Symbol(){if(this instanceof G)throw TypeError("Symbol is not a constructor!");var a=n(arguments.length>0?arguments[0]:c),b=function(c){this===Q&&b.call(P,c),f(this,K)&&f(this[K],a)&&(this[K][a]=!1),U(this,a,x(1,c))};return g&&T&&U(Q,a,{configurable:!0,set:b}),V(a)},i(G[J],"toString",function toString(){return this._k}),A.f=_,B.f=X,d(48).f=z.f=aa,d(42).f=$,d(41).f=ba,g&&!d(26)&&i(Q,"propertyIsEnumerable",$,!0),p.f=function(a){return V(o(a))}),h(h.G+h.W+h.F*!R,{Symbol:G});for(var ca="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),da=0;ca.length>da;)o(ca[da++]);for(var ca=C(o.store),da=0;ca.length>da;)q(ca[da++]);h(h.S+h.F*!R,"Symbol",{"for":function(a){return f(N,a+="")?N[a]:N[a]=G(a)},keyFor:function keyFor(a){if(W(a))return r(N,a);throw TypeError(a+" is not a symbol!")},useSetter:function(){T=!0},useSimple:function(){T=!1}}),h(h.S+h.F*!R,"Object",{create:Z,defineProperty:X,defineProperties:Y,getOwnPropertyDescriptor:_,getOwnPropertyNames:aa,getOwnPropertySymbols:ba}),H&&h(h.S+h.F*(!R||k(function(){var a=G();return"[null]"!=I([a])||"{}"!=I({a:a})||"{}"!=I(Object(a))})),"JSON",{stringify:function stringify(a){if(a!==c&&!W(a)){for(var b,d,e=[a],f=1;arguments.length>f;)e.push(arguments[f++]);return b=e[1],"function"==typeof b&&(d=b),!d&&t(b)||(b=function(a,b){if(d&&(b=d.call(this,a,b)),!W(b))return b}),e[1]=b,I.apply(H,e)}}}),G[J][L]||d(8)(G[J],L,G[J].valueOf),m(G,"Symbol"),m(Math,"Math",!0),m(e.JSON,"JSON",!0)},function(a,c){var d=a.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof b&&(b=d)},function(a,b){var c={}.hasOwnProperty;a.exports=function(a,b){return c.call(a,b)}},function(a,b,c){a.exports=!c(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(a,b){a.exports=function(a){try{return!!a()}catch(b){return!0}}},function(a,b,d){var e=d(2),f=d(7),g=d(8),h=d(16),i=d(18),j="prototype",k=function(a,b,d){var l,m,n,o,p=a&k.F,q=a&k.G,r=a&k.S,s=a&k.P,t=a&k.B,u=q?e:r?e[b]||(e[b]={}):(e[b]||{})[j],v=q?f:f[b]||(f[b]={}),w=v[j]||(v[j]={});q&&(d=b);for(l in d)m=!p&&u&&u[l]!==c,n=(m?u:d)[l],o=t&&m?i(n,e):s&&"function"==typeof n?i(Function.call,n):n,u&&h(u,l,n,a&k.U),v[l]!=n&&g(v,l,o),s&&w[l]!=n&&(w[l]=n)};e.core=f,k.F=1,k.G=2,k.S=4,k.P=8,k.B=16,k.W=32,k.U=64,k.R=128,a.exports=k},function(b,c){var d=b.exports={version:"2.4.0"};"number"==typeof a&&(a=d)},function(a,b,c){var d=c(9),e=c(15);a.exports=c(4)?function(a,b,c){return d.f(a,b,e(1,c))}:function(a,b,c){return a[b]=c,a}},function(a,b,c){var d=c(10),e=c(12),f=c(14),g=Object.defineProperty;b.f=c(4)?Object.defineProperty:function defineProperty(a,b,c){if(d(a),b=f(b,!0),d(c),e)try{return g(a,b,c)}catch(h){}if("get"in c||"set"in c)throw TypeError("Accessors not supported!");return"value"in c&&(a[b]=c.value),a}},function(a,b,c){var d=c(11);a.exports=function(a){if(!d(a))throw TypeError(a+" is not an object!");return a}},function(a,b){a.exports=function(a){return"object"==typeof a?null!==a:"function"==typeof a}},function(a,b,c){a.exports=!c(4)&&!c(5)(function(){return 7!=Object.defineProperty(c(13)("div"),"a",{get:function(){return 7}}).a})},function(a,b,c){var d=c(11),e=c(2).document,f=d(e)&&d(e.createElement);a.exports=function(a){return f?e.createElement(a):{}}},function(a,b,c){var d=c(11);a.exports=function(a,b){if(!d(a))return a;var c,e;if(b&&"function"==typeof(c=a.toString)&&!d(e=c.call(a)))return e;if("function"==typeof(c=a.valueOf)&&!d(e=c.call(a)))return e;if(!b&&"function"==typeof(c=a.toString)&&!d(e=c.call(a)))return e;throw TypeError("Can't convert object to primitive value")}},function(a,b){a.exports=function(a,b){return{enumerable:!(1&a),configurable:!(2&a),writable:!(4&a),value:b}}},function(a,b,c){var d=c(2),e=c(8),f=c(3),g=c(17)("src"),h="toString",i=Function[h],j=(""+i).split(h);c(7).inspectSource=function(a){return i.call(a)},(a.exports=function(a,b,c,h){var i="function"==typeof c;i&&(f(c,"name")||e(c,"name",b)),a[b]!==c&&(i&&(f(c,g)||e(c,g,a[b]?""+a[b]:j.join(String(b)))),a===d?a[b]=c:h?a[b]?a[b]=c:e(a,b,c):(delete a[b],e(a,b,c)))})(Function.prototype,h,function toString(){return"function"==typeof this&&this[g]||i.call(this)})},function(a,b){var d=0,e=Math.random();a.exports=function(a){return"Symbol(".concat(a===c?"":a,")_",(++d+e).toString(36))}},function(a,b,d){var e=d(19);a.exports=function(a,b,d){if(e(a),b===c)return a;switch(d){case 1:return function(c){return a.call(b,c)};case 2:return function(c,d){return a.call(b,c,d)};case 3:return function(c,d,e){return a.call(b,c,d,e)}}return function(){return a.apply(b,arguments)}}},function(a,b){a.exports=function(a){if("function"!=typeof a)throw TypeError(a+" is not a function!");return a}},function(a,b,c){var d=c(17)("meta"),e=c(11),f=c(3),g=c(9).f,h=0,i=Object.isExtensible||function(){return!0},j=!c(5)(function(){return i(Object.preventExtensions({}))}),k=function(a){g(a,d,{value:{i:"O"+ ++h,w:{}}})},l=function(a,b){if(!e(a))return"symbol"==typeof a?a:("string"==typeof a?"S":"P")+a;if(!f(a,d)){if(!i(a))return"F";if(!b)return"E";k(a)}return a[d].i},m=function(a,b){if(!f(a,d)){if(!i(a))return!0;if(!b)return!1;k(a)}return a[d].w},n=function(a){return j&&o.NEED&&i(a)&&!f(a,d)&&k(a),a},o=a.exports={KEY:d,NEED:!1,fastKey:l,getWeak:m,onFreeze:n}},function(a,b,c){var d=c(2),e="__core-js_shared__",f=d[e]||(d[e]={});a.exports=function(a){return f[a]||(f[a]={})}},function(a,b,c){var d=c(9).f,e=c(3),f=c(23)("toStringTag");a.exports=function(a,b,c){a&&!e(a=c?a:a.prototype,f)&&d(a,f,{configurable:!0,value:b})}},function(a,b,c){var d=c(21)("wks"),e=c(17),f=c(2).Symbol,g="function"==typeof f,h=a.exports=function(a){return d[a]||(d[a]=g&&f[a]||(g?f:e)("Symbol."+a))};h.store=d},function(a,b,c){b.f=c(23)},function(a,b,c){var d=c(2),e=c(7),f=c(26),g=c(24),h=c(9).f;a.exports=function(a){var b=e.Symbol||(e.Symbol=f?{}:d.Symbol||{});"_"==a.charAt(0)||a in b||h(b,a,{value:g.f(a)})}},function(a,b){a.exports=!1},function(a,b,c){var d=c(28),e=c(30);a.exports=function(a,b){for(var c,f=e(a),g=d(f),h=g.length,i=0;h>i;)if(f[c=g[i++]]===b)return c}},function(a,b,c){var d=c(29),e=c(39);a.exports=Object.keys||function keys(a){return d(a,e)}},function(a,b,c){var d=c(3),e=c(30),f=c(34)(!1),g=c(38)("IE_PROTO");a.exports=function(a,b){var c,h=e(a),i=0,j=[];for(c in h)c!=g&&d(h,c)&&j.push(c);for(;b.length>i;)d(h,c=b[i++])&&(~f(j,c)||j.push(c));return j}},function(a,b,c){var d=c(31),e=c(33);a.exports=function(a){return d(e(a))}},function(a,b,c){var d=c(32);a.exports=Object("z").propertyIsEnumerable(0)?Object:function(a){return"String"==d(a)?a.split(""):Object(a)}},function(a,b){var c={}.toString;a.exports=function(a){return c.call(a).slice(8,-1)}},function(a,b){a.exports=function(a){if(a==c)throw TypeError("Can't call method on  "+a);return a}},function(a,b,c){var d=c(30),e=c(35),f=c(37);a.exports=function(a){return function(b,c,g){var h,i=d(b),j=e(i.length),k=f(g,j);if(a&&c!=c){for(;j>k;)if(h=i[k++],h!=h)return!0}else for(;j>k;k++)if((a||k in i)&&i[k]===c)return a||k||0;return!a&&-1}}},function(a,b,c){var d=c(36),e=Math.min;a.exports=function(a){return a>0?e(d(a),9007199254740991):0}},function(a,b){var c=Math.ceil,d=Math.floor;a.exports=function(a){return isNaN(a=+a)?0:(a>0?d:c)(a)}},function(a,b,c){var d=c(36),e=Math.max,f=Math.min;a.exports=function(a,b){return a=d(a),a<0?e(a+b,0):f(a,b)}},function(a,b,c){var d=c(21)("keys"),e=c(17);a.exports=function(a){return d[a]||(d[a]=e(a))}},function(a,b){a.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(a,b,c){var d=c(28),e=c(41),f=c(42);a.exports=function(a){var b=d(a),c=e.f;if(c)for(var g,h=c(a),i=f.f,j=0;h.length>j;)i.call(a,g=h[j++])&&b.push(g);return b}},function(a,b){b.f=Object.getOwnPropertySymbols},function(a,b){b.f={}.propertyIsEnumerable},function(a,b,c){var d=c(32);a.exports=Array.isArray||function isArray(a){return"Array"==d(a)}},function(a,b,d){var e=d(10),f=d(45),g=d(39),h=d(38)("IE_PROTO"),i=function(){},j="prototype",k=function(){var a,b=d(13)("iframe"),c=g.length,e="<",f=">";for(b.style.display="none",d(46).appendChild(b),b.src="javascript:",a=b.contentWindow.document,a.open(),a.write(e+"script"+f+"document.F=Object"+e+"/script"+f),a.close(),k=a.F;c--;)delete k[j][g[c]];return k()};a.exports=Object.create||function create(a,b){var d;return null!==a?(i[j]=e(a),d=new i,i[j]=null,d[h]=a):d=k(),b===c?d:f(d,b)}},function(a,b,c){var d=c(9),e=c(10),f=c(28);a.exports=c(4)?Object.defineProperties:function defineProperties(a,b){e(a);for(var c,g=f(b),h=g.length,i=0;h>i;)d.f(a,c=g[i++],b[c]);return a}},function(a,b,c){a.exports=c(2).document&&document.documentElement},function(a,b,c){var d=c(30),e=c(48).f,f={}.toString,g="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],h=function(a){try{return e(a)}catch(b){return g.slice()}};a.exports.f=function getOwnPropertyNames(a){return g&&"[object Window]"==f.call(a)?h(a):e(d(a))}},function(a,b,c){var d=c(29),e=c(39).concat("length","prototype");b.f=Object.getOwnPropertyNames||function getOwnPropertyNames(a){return d(a,e)}},function(a,b,c){var d=c(42),e=c(15),f=c(30),g=c(14),h=c(3),i=c(12),j=Object.getOwnPropertyDescriptor;b.f=c(4)?j:function getOwnPropertyDescriptor(a,b){if(a=f(a),b=g(b,!0),i)try{return j(a,b)}catch(c){}if(h(a,b))return e(!d.f.call(a,b),a[b])}},function(a,b,c){var d=c(6);d(d.S+d.F*!c(4),"Object",{defineProperty:c(9).f})},function(a,b,c){var d=c(6);d(d.S+d.F*!c(4),"Object",{defineProperties:c(45)})},function(a,b,c){var d=c(30),e=c(49).f;c(53)("getOwnPropertyDescriptor",function(){return function getOwnPropertyDescriptor(a,b){return e(d(a),b)}})},function(a,b,c){var d=c(6),e=c(7),f=c(5);a.exports=function(a,b){var c=(e.Object||{})[a]||Object[a],g={};g[a]=b(c),d(d.S+d.F*f(function(){c(1)}),"Object",g)}},function(a,b,c){var d=c(6);d(d.S,"Object",{create:c(44)})},function(a,b,c){var d=c(56),e=c(57);c(53)("getPrototypeOf",function(){return function getPrototypeOf(a){return e(d(a))}})},function(a,b,c){var d=c(33);a.exports=function(a){return Object(d(a))}},function(a,b,c){var d=c(3),e=c(56),f=c(38)("IE_PROTO"),g=Object.prototype;a.exports=Object.getPrototypeOf||function(a){return a=e(a),d(a,f)?a[f]:"function"==typeof a.constructor&&a instanceof a.constructor?a.constructor.prototype:a instanceof Object?g:null}},function(a,b,c){var d=c(56),e=c(28);c(53)("keys",function(){return function keys(a){return e(d(a))}})},function(a,b,c){c(53)("getOwnPropertyNames",function(){return c(47).f})},function(a,b,c){var d=c(11),e=c(20).onFreeze;c(53)("freeze",function(a){return function freeze(b){return a&&d(b)?a(e(b)):b}})},function(a,b,c){var d=c(11),e=c(20).onFreeze;c(53)("seal",function(a){return function seal(b){return a&&d(b)?a(e(b)):b}})},function(a,b,c){var d=c(11),e=c(20).onFreeze;c(53)("preventExtensions",function(a){return function preventExtensions(b){return a&&d(b)?a(e(b)):b}})},function(a,b,c){var d=c(11);c(53)("isFrozen",function(a){return function isFrozen(b){return!d(b)||!!a&&a(b)}})},function(a,b,c){var d=c(11);c(53)("isSealed",function(a){return function isSealed(b){return!d(b)||!!a&&a(b)}})},function(a,b,c){var d=c(11);c(53)("isExtensible",function(a){return function isExtensible(b){return!!d(b)&&(!a||a(b))}})},function(a,b,c){var d=c(6);d(d.S+d.F,"Object",{assign:c(67)})},function(a,b,c){var d=c(28),e=c(41),f=c(42),g=c(56),h=c(31),i=Object.assign;a.exports=!i||c(5)(function(){var a={},b={},c=Symbol(),d="abcdefghijklmnopqrst";return a[c]=7,d.split("").forEach(function(a){b[a]=a}),7!=i({},a)[c]||Object.keys(i({},b)).join("")!=d})?function assign(a,b){for(var c=g(a),i=arguments.length,j=1,k=e.f,l=f.f;i>j;)for(var m,n=h(arguments[j++]),o=k?d(n).concat(k(n)):d(n),p=o.length,q=0;p>q;)l.call(n,m=o[q++])&&(c[m]=n[m]);return c}:i},function(a,b,c){var d=c(6);d(d.S,"Object",{is:c(69)})},function(a,b){a.exports=Object.is||function is(a,b){return a===b?0!==a||1/a===1/b:a!=a&&b!=b}},function(a,b,c){var d=c(6);d(d.S,"Object",{setPrototypeOf:c(71).set})},function(a,b,d){var e=d(11),f=d(10),g=function(a,b){if(f(a),!e(b)&&null!==b)throw TypeError(b+": can't set as prototype!")};a.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(a,b,c){try{c=d(18)(Function.call,d(49).f(Object.prototype,"__proto__").set,2),c(a,[]),b=!(a instanceof Array)}catch(e){b=!0}return function setPrototypeOf(a,d){return g(a,d),b?a.__proto__=d:c(a,d),a}}({},!1):c),check:g}},function(a,b,c){var d=c(73),e={};e[c(23)("toStringTag")]="z",e+""!="[object z]"&&c(16)(Object.prototype,"toString",function toString(){return"[object "+d(this)+"]"},!0)},function(a,b,d){var e=d(32),f=d(23)("toStringTag"),g="Arguments"==e(function(){return arguments}()),h=function(a,b){try{return a[b]}catch(c){}};a.exports=function(a){var b,d,i;return a===c?"Undefined":null===a?"Null":"string"==typeof(d=h(b=Object(a),f))?d:g?e(b):"Object"==(i=e(b))&&"function"==typeof b.callee?"Arguments":i}},function(a,b,c){var d=c(6);d(d.P,"Function",{bind:c(75)})},function(a,b,c){var d=c(19),e=c(11),f=c(76),g=[].slice,h={},i=function(a,b,c){if(!(b in h)){for(var d=[],e=0;e<b;e++)d[e]="a["+e+"]";h[b]=Function("F,a","return new F("+d.join(",")+")")}return h[b](a,c)};a.exports=Function.bind||function bind(a){var b=d(this),c=g.call(arguments,1),h=function(){var d=c.concat(g.call(arguments));return this instanceof h?i(b,d.length,d):f(b,d,a)};return e(b.prototype)&&(h.prototype=b.prototype),h}},function(a,b){a.exports=function(a,b,d){var e=d===c;switch(b.length){case 0:return e?a():a.call(d);case 1:return e?a(b[0]):a.call(d,b[0]);case 2:return e?a(b[0],b[1]):a.call(d,b[0],b[1]);case 3:return e?a(b[0],b[1],b[2]):a.call(d,b[0],b[1],b[2]);case 4:return e?a(b[0],b[1],b[2],b[3]):a.call(d,b[0],b[1],b[2],b[3])}return a.apply(d,b)}},function(a,b,c){var d=c(9).f,e=c(15),f=c(3),g=Function.prototype,h=/^\s*function ([^ (]*)/,i="name",j=Object.isExtensible||function(){return!0};i in g||c(4)&&d(g,i,{configurable:!0,get:function(){try{var a=this,b=(""+a).match(h)[1];return f(a,i)||!j(a)||d(a,i,e(5,b)),b}catch(c){return""}}})},function(a,b,c){var d=c(11),e=c(57),f=c(23)("hasInstance"),g=Function.prototype;f in g||c(9).f(g,f,{value:function(a){if("function"!=typeof this||!d(a))return!1;if(!d(this.prototype))return a instanceof this;for(;a=e(a);)if(this.prototype===a)return!0;return!1}})},function(a,b,c){var d=c(2),e=c(3),f=c(32),g=c(80),h=c(14),i=c(5),j=c(48).f,k=c(49).f,l=c(9).f,m=c(81).trim,n="Number",o=d[n],p=o,q=o.prototype,r=f(c(44)(q))==n,s="trim"in String.prototype,t=function(a){var b=h(a,!1);if("string"==typeof b&&b.length>2){b=s?b.trim():m(b,3);var c,d,e,f=b.charCodeAt(0);if(43===f||45===f){if(c=b.charCodeAt(2),88===c||120===c)return NaN}else if(48===f){switch(b.charCodeAt(1)){case 66:case 98:d=2,e=49;break;case 79:case 111:d=8,e=55;break;default:return+b}for(var g,i=b.slice(2),j=0,k=i.length;j<k;j++)if(g=i.charCodeAt(j),g<48||g>e)return NaN;return parseInt(i,d)}}return+b};if(!o(" 0o1")||!o("0b1")||o("+0x1")){o=function Number(a){var b=arguments.length<1?0:a,c=this;return c instanceof o&&(r?i(function(){q.valueOf.call(c)}):f(c)!=n)?g(new p(t(b)),c,o):t(b)};for(var u,v=c(4)?j(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;v.length>w;w++)e(p,u=v[w])&&!e(o,u)&&l(o,u,k(p,u));o.prototype=q,q.constructor=o,c(16)(d,n,o)}},function(a,b,c){var d=c(11),e=c(71).set;a.exports=function(a,b,c){var f,g=b.constructor;return g!==c&&"function"==typeof g&&(f=g.prototype)!==c.prototype&&d(f)&&e&&e(a,f),a}},function(a,b,c){var d=c(6),e=c(33),f=c(5),g=c(82),h="["+g+"]",i="âÂ",j=RegExp("^"+h+h+"*"),k=RegExp(h+h+"*$"),l=function(a,b,c){var e={},h=f(function(){return!!g[a]()||i[a]()!=i}),j=e[a]=h?b(m):g[a];c&&(e[c]=j),d(d.P+d.F*h,"String",e)},m=l.trim=function(a,b){return a=String(e(a)),1&b&&(a=a.replace(j,"")),2&b&&(a=a.replace(k,"")),a};a.exports=l},function(a,b){a.exports="\t\n\x0B\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff"},function(a,b,c){var d=c(6),e=c(36),f=c(84),g=c(85),h=1..toFixed,i=Math.floor,j=[0,0,0,0,0,0],k="Number.toFixed: incorrect invocation!",l="0",m=function(a,b){for(var c=-1,d=b;++c<6;)d+=a*j[c],j[c]=d%1e7,d=i(d/1e7)},n=function(a){for(var b=6,c=0;--b>=0;)c+=j[b],j[b]=i(c/a),c=c%a*1e7},o=function(){for(var a=6,b="";--a>=0;)if(""!==b||0===a||0!==j[a]){var c=String(j[a]);b=""===b?c:b+g.call(l,7-c.length)+c}return b},p=function(a,b,c){return 0===b?c:b%2===1?p(a,b-1,c*a):p(a*a,b/2,c)},q=function(a){for(var b=0,c=a;c>=4096;)b+=12,c/=4096;for(;c>=2;)b+=1,c/=2;return b};d(d.P+d.F*(!!h&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!c(5)(function(){h.call({})})),"Number",{toFixed:function toFixed(a){var b,c,d,h,i=f(this,k),j=e(a),r="",s=l;if(j<0||j>20)throw RangeError(k);if(i!=i)return"NaN";if(i<=-1e21||i>=1e21)return String(i);if(i<0&&(r="-",i=-i),i>1e-21)if(b=q(i*p(2,69,1))-69,c=b<0?i*p(2,-b,1):i/p(2,b,1),c*=4503599627370496,b=52-b,b>0){for(m(0,c),d=j;d>=7;)m(1e7,0),d-=7;for(m(p(10,d,1),0),d=b-1;d>=23;)n(1<<23),d-=23;n(1<<d),m(1,1),n(2),s=o()}else m(0,c),m(1<<-b,0),s=o()+g.call(l,j);return j>0?(h=s.length,s=r+(h<=j?"0."+g.call(l,j-h)+s:s.slice(0,h-j)+"."+s.slice(h-j))):s=r+s,s}})},function(a,b,c){var d=c(32);a.exports=function(a,b){if("number"!=typeof a&&"Number"!=d(a))throw TypeError(b);return+a}},function(a,b,c){var d=c(36),e=c(33);a.exports=function repeat(a){var b=String(e(this)),c="",f=d(a);if(f<0||f==1/0)throw RangeError("Count can't be negative");for(;f>0;(f>>>=1)&&(b+=b))1&f&&(c+=b);return c}},function(a,b,d){var e=d(6),f=d(5),g=d(84),h=1..toPrecision;e(e.P+e.F*(f(function(){return"1"!==h.call(1,c)})||!f(function(){h.call({})})),"Number",{toPrecision:function toPrecision(a){var b=g(this,"Number#toPrecision: incorrect invocation!");return a===c?h.call(b):h.call(b,a)}})},function(a,b,c){var d=c(6);d(d.S,"Number",{EPSILON:Math.pow(2,-52)})},function(a,b,c){var d=c(6),e=c(2).isFinite;d(d.S,"Number",{isFinite:function isFinite(a){return"number"==typeof a&&e(a)}})},function(a,b,c){var d=c(6);d(d.S,"Number",{isInteger:c(90)})},function(a,b,c){var d=c(11),e=Math.floor;a.exports=function isInteger(a){return!d(a)&&isFinite(a)&&e(a)===a}},function(a,b,c){var d=c(6);d(d.S,"Number",{isNaN:function isNaN(a){return a!=a}})},function(a,b,c){var d=c(6),e=c(90),f=Math.abs;d(d.S,"Number",{isSafeInteger:function isSafeInteger(a){return e(a)&&f(a)<=9007199254740991}})},function(a,b,c){var d=c(6);d(d.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(a,b,c){var d=c(6);d(d.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(a,b,c){var d=c(6),e=c(96);d(d.S+d.F*(Number.parseFloat!=e),"Number",{parseFloat:e})},function(a,b,c){var d=c(2).parseFloat,e=c(81).trim;a.exports=1/d(c(82)+"-0")!==-(1/0)?function parseFloat(a){var b=e(String(a),3),c=d(b);return 0===c&&"-"==b.charAt(0)?-0:c}:d},function(a,b,c){var d=c(6),e=c(98);d(d.S+d.F*(Number.parseInt!=e),"Number",{parseInt:e})},function(a,b,c){var d=c(2).parseInt,e=c(81).trim,f=c(82),g=/^[\-+]?0[xX]/;a.exports=8!==d(f+"08")||22!==d(f+"0x16")?function parseInt(a,b){var c=e(String(a),3);return d(c,b>>>0||(g.test(c)?16:10))}:d},function(a,b,c){var d=c(6),e=c(98);d(d.G+d.F*(parseInt!=e),{parseInt:e})},function(a,b,c){var d=c(6),e=c(96);d(d.G+d.F*(parseFloat!=e),{parseFloat:e})},function(a,b,c){var d=c(6),e=c(102),f=Math.sqrt,g=Math.acosh;d(d.S+d.F*!(g&&710==Math.floor(g(Number.MAX_VALUE))&&g(1/0)==1/0),"Math",{acosh:function acosh(a){return(a=+a)<1?NaN:a>94906265.62425156?Math.log(a)+Math.LN2:e(a-1+f(a-1)*f(a+1))}})},function(a,b){a.exports=Math.log1p||function log1p(a){return(a=+a)>-1e-8&&a<1e-8?a-a*a/2:Math.log(1+a)}},function(a,b,c){function asinh(a){return isFinite(a=+a)&&0!=a?a<0?-asinh(-a):Math.log(a+Math.sqrt(a*a+1)):a}var d=c(6),e=Math.asinh;d(d.S+d.F*!(e&&1/e(0)>0),"Math",{asinh:asinh})},function(a,b,c){var d=c(6),e=Math.atanh;d(d.S+d.F*!(e&&1/e(-0)<0),"Math",{atanh:function atanh(a){return 0==(a=+a)?a:Math.log((1+a)/(1-a))/2}})},function(a,b,c){var d=c(6),e=c(106);d(d.S,"Math",{cbrt:function cbrt(a){return e(a=+a)*Math.pow(Math.abs(a),1/3)}})},function(a,b){a.exports=Math.sign||function sign(a){return 0==(a=+a)||a!=a?a:a<0?-1:1}},function(a,b,c){var d=c(6);d(d.S,"Math",{clz32:function clz32(a){return(a>>>=0)?31-Math.floor(Math.log(a+.5)*Math.LOG2E):32}})},function(a,b,c){var d=c(6),e=Math.exp;d(d.S,"Math",{cosh:function cosh(a){return(e(a=+a)+e(-a))/2}})},function(a,b,c){var d=c(6),e=c(110);d(d.S+d.F*(e!=Math.expm1),"Math",{expm1:e})},function(a,b){var c=Math.expm1;a.exports=!c||c(10)>22025.465794806718||c(10)<22025.465794806718||c(-2e-17)!=-2e-17?function expm1(a){return 0==(a=+a)?a:a>-1e-6&&a<1e-6?a+a*a/2:Math.exp(a)-1}:c},function(a,b,c){var d=c(6),e=c(106),f=Math.pow,g=f(2,-52),h=f(2,-23),i=f(2,127)*(2-h),j=f(2,-126),k=function(a){return a+1/g-1/g};d(d.S,"Math",{fround:function fround(a){var b,c,d=Math.abs(a),f=e(a);return d<j?f*k(d/j/h)*j*h:(b=(1+h/g)*d,c=b-(b-d),c>i||c!=c?f*(1/0):f*c)}})},function(a,b,c){var d=c(6),e=Math.abs;d(d.S,"Math",{hypot:function hypot(a,b){for(var c,d,f=0,g=0,h=arguments.length,i=0;g<h;)c=e(arguments[g++]),i<c?(d=i/c,f=f*d*d+1,i=c):c>0?(d=c/i,f+=d*d):f+=c;return i===1/0?1/0:i*Math.sqrt(f)}})},function(a,b,c){var d=c(6),e=Math.imul;d(d.S+d.F*c(5)(function(){return e(4294967295,5)!=-5||2!=e.length}),"Math",{imul:function imul(a,b){var c=65535,d=+a,e=+b,f=c&d,g=c&e;return 0|f*g+((c&d>>>16)*g+f*(c&e>>>16)<<16>>>0)}})},function(a,b,c){var d=c(6);d(d.S,"Math",{log10:function log10(a){return Math.log(a)/Math.LN10}})},function(a,b,c){var d=c(6);d(d.S,"Math",{log1p:c(102)})},function(a,b,c){var d=c(6);d(d.S,"Math",{log2:function log2(a){return Math.log(a)/Math.LN2}})},function(a,b,c){var d=c(6);d(d.S,"Math",{sign:c(106)})},function(a,b,c){var d=c(6),e=c(110),f=Math.exp;d(d.S+d.F*c(5)(function(){return!Math.sinh(-2e-17)!=-2e-17}),"Math",{sinh:function sinh(a){return Math.abs(a=+a)<1?(e(a)-e(-a))/2:(f(a-1)-f(-a-1))*(Math.E/2)}})},function(a,b,c){var d=c(6),e=c(110),f=Math.exp;d(d.S,"Math",{tanh:function tanh(a){var b=e(a=+a),c=e(-a);return b==1/0?1:c==1/0?-1:(b-c)/(f(a)+f(-a))}})},function(a,b,c){var d=c(6);d(d.S,"Math",{trunc:function trunc(a){return(a>0?Math.floor:Math.ceil)(a)}})},function(a,b,c){var d=c(6),e=c(37),f=String.fromCharCode,g=String.fromCodePoint;d(d.S+d.F*(!!g&&1!=g.length),"String",{fromCodePoint:function fromCodePoint(a){for(var b,c=[],d=arguments.length,g=0;d>g;){if(b=+arguments[g++],e(b,1114111)!==b)throw RangeError(b+" is not a valid code point");c.push(b<65536?f(b):f(((b-=65536)>>10)+55296,b%1024+56320))}return c.join("")}})},function(a,b,c){var d=c(6),e=c(30),f=c(35);d(d.S,"String",{raw:function raw(a){for(var b=e(a.raw),c=f(b.length),d=arguments.length,g=[],h=0;c>h;)g.push(String(b[h++])),h<d&&g.push(String(arguments[h]));return g.join("")}})},function(a,b,c){c(81)("trim",function(a){return function trim(){return a(this,3)}})},function(a,b,c){var d=c(6),e=c(125)(!1);d(d.P,"String",{codePointAt:function codePointAt(a){return e(this,a)}})},function(a,b,d){var e=d(36),f=d(33);a.exports=function(a){return function(b,d){var g,h,i=String(f(b)),j=e(d),k=i.length;return j<0||j>=k?a?"":c:(g=i.charCodeAt(j),g<55296||g>56319||j+1===k||(h=i.charCodeAt(j+1))<56320||h>57343?a?i.charAt(j):g:a?i.slice(j,j+2):(g-55296<<10)+(h-56320)+65536)}}},function(a,b,d){var e=d(6),f=d(35),g=d(127),h="endsWith",i=""[h];e(e.P+e.F*d(129)(h),"String",{endsWith:function endsWith(a){var b=g(this,a,h),d=arguments.length>1?arguments[1]:c,e=f(b.length),j=d===c?e:Math.min(f(d),e),k=String(a);return i?i.call(b,k,j):b.slice(j-k.length,j)===k}})},function(a,b,c){var d=c(128),e=c(33);a.exports=function(a,b,c){if(d(b))throw TypeError("String#"+c+" doesn't accept regex!");return String(e(a))}},function(a,b,d){var e=d(11),f=d(32),g=d(23)("match");a.exports=function(a){var b;return e(a)&&((b=a[g])!==c?!!b:"RegExp"==f(a))}},function(a,b,c){var d=c(23)("match");a.exports=function(a){var b=/./;try{"/./"[a](b)}catch(c){try{return b[d]=!1,!"/./"[a](b)}catch(e){}}return!0}},function(a,b,d){var e=d(6),f=d(127),g="includes";e(e.P+e.F*d(129)(g),"String",{includes:function includes(a){return!!~f(this,a,g).indexOf(a,arguments.length>1?arguments[1]:c)}})},function(a,b,c){var d=c(6);d(d.P,"String",{repeat:c(85)})},function(a,b,d){var e=d(6),f=d(35),g=d(127),h="startsWith",i=""[h];e(e.P+e.F*d(129)(h),"String",{startsWith:function startsWith(a){var b=g(this,a,h),d=f(Math.min(arguments.length>1?arguments[1]:c,b.length)),e=String(a);return i?i.call(b,e,d):b.slice(d,d+e.length)===e}})},function(a,b,d){var e=d(125)(!0);d(134)(String,"String",function(a){this._t=String(a),this._i=0},function(){var a,b=this._t,d=this._i;return d>=b.length?{value:c,done:!0}:(a=e(b,d),this._i+=a.length,{value:a,done:!1})})},function(a,b,d){var e=d(26),f=d(6),g=d(16),h=d(8),i=d(3),j=d(135),k=d(136),l=d(22),m=d(57),n=d(23)("iterator"),o=!([].keys&&"next"in[].keys()),p="@@iterator",q="keys",r="values",s=function(){return this};a.exports=function(a,b,d,t,u,v,w){k(d,b,t);var x,y,z,A=function(a){if(!o&&a in E)return E[a];switch(a){case q:return function keys(){return new d(this,a)};case r:return function values(){return new d(this,a)}}return function entries(){return new d(this,a)}},B=b+" Iterator",C=u==r,D=!1,E=a.prototype,F=E[n]||E[p]||u&&E[u],G=F||A(u),H=u?C?A("entries"):G:c,I="Array"==b?E.entries||F:F;if(I&&(z=m(I.call(new a)),z!==Object.prototype&&(l(z,B,!0),e||i(z,n)||h(z,n,s))),C&&F&&F.name!==r&&(D=!0,G=function values(){return F.call(this)}),e&&!w||!o&&!D&&E[n]||h(E,n,G),j[b]=G,j[B]=s,u)if(x={values:C?G:A(r),keys:v?G:A(q),entries:H},w)for(y in x)y in E||g(E,y,x[y]);else f(f.P+f.F*(o||D),b,x);return x}},function(a,b){a.exports={}},function(a,b,c){var d=c(44),e=c(15),f=c(22),g={};c(8)(g,c(23)("iterator"),function(){return this}),a.exports=function(a,b,c){a.prototype=d(g,{next:e(1,c)}),f(a,b+" Iterator")}},function(a,b,c){c(138)("anchor",function(a){return function anchor(b){return a(this,"a","name",b)}})},function(a,b,c){var d=c(6),e=c(5),f=c(33),g=/"/g,h=function(a,b,c,d){var e=String(f(a)),h="<"+b;return""!==c&&(h+=" "+c+'="'+String(d).replace(g,"&quot;")+'"'),h+">"+e+"</"+b+">"};a.exports=function(a,b){var c={};c[a]=b(h),d(d.P+d.F*e(function(){var b=""[a]('"');return b!==b.toLowerCase()||b.split('"').length>3}),"String",c)}},function(a,b,c){c(138)("big",function(a){return function big(){return a(this,"big","","")}})},function(a,b,c){c(138)("blink",function(a){return function blink(){return a(this,"blink","","")}})},function(a,b,c){c(138)("bold",function(a){return function bold(){return a(this,"b","","")}})},function(a,b,c){c(138)("fixed",function(a){return function fixed(){return a(this,"tt","","")}})},function(a,b,c){c(138)("fontcolor",function(a){return function fontcolor(b){return a(this,"font","color",b)}})},function(a,b,c){c(138)("fontsize",function(a){return function fontsize(b){return a(this,"font","size",b)}})},function(a,b,c){c(138)("italics",function(a){return function italics(){return a(this,"i","","")}})},function(a,b,c){c(138)("link",function(a){return function link(b){return a(this,"a","href",b)}})},function(a,b,c){c(138)("small",function(a){return function small(){return a(this,"small","","")}})},function(a,b,c){c(138)("strike",function(a){return function strike(){return a(this,"strike","","")}})},function(a,b,c){c(138)("sub",function(a){return function sub(){return a(this,"sub","","")}})},function(a,b,c){c(138)("sup",function(a){return function sup(){return a(this,"sup","","")}})},function(a,b,c){var d=c(6);d(d.S,"Array",{isArray:c(43)})},function(a,b,d){var e=d(18),f=d(6),g=d(56),h=d(153),i=d(154),j=d(35),k=d(155),l=d(156);f(f.S+f.F*!d(157)(function(a){Array.from(a)}),"Array",{from:function from(a){var b,d,f,m,n=g(a),o="function"==typeof this?this:Array,p=arguments.length,q=p>1?arguments[1]:c,r=q!==c,s=0,t=l(n);if(r&&(q=e(q,p>2?arguments[2]:c,2)),t==c||o==Array&&i(t))for(b=j(n.length),d=new o(b);b>s;s++)k(d,s,r?q(n[s],s):n[s]);else for(m=t.call(n),d=new o;!(f=m.next()).done;s++)k(d,s,r?h(m,q,[f.value,s],!0):f.value);return d.length=s,d}})},function(a,b,d){var e=d(10);a.exports=function(a,b,d,f){try{return f?b(e(d)[0],d[1]):b(d)}catch(g){var h=a["return"];throw h!==c&&e(h.call(a)),g}}},function(a,b,d){var e=d(135),f=d(23)("iterator"),g=Array.prototype;a.exports=function(a){return a!==c&&(e.Array===a||g[f]===a)}},function(a,b,c){var d=c(9),e=c(15);a.exports=function(a,b,c){b in a?d.f(a,b,e(0,c)):a[b]=c}},function(a,b,d){var e=d(73),f=d(23)("iterator"),g=d(135);a.exports=d(7).getIteratorMethod=function(a){if(a!=c)return a[f]||a["@@iterator"]||g[e(a)]}},function(a,b,c){var d=c(23)("iterator"),e=!1;
try{var f=[7][d]();f["return"]=function(){e=!0},Array.from(f,function(){throw 2})}catch(g){}a.exports=function(a,b){if(!b&&!e)return!1;var c=!1;try{var f=[7],g=f[d]();g.next=function(){return{done:c=!0}},f[d]=function(){return g},a(f)}catch(h){}return c}},function(a,b,c){var d=c(6),e=c(155);d(d.S+d.F*c(5)(function(){function F(){}return!(Array.of.call(F)instanceof F)}),"Array",{of:function of(){for(var a=0,b=arguments.length,c=new("function"==typeof this?this:Array)(b);b>a;)e(c,a,arguments[a++]);return c.length=b,c}})},function(a,b,d){var e=d(6),f=d(30),g=[].join;e(e.P+e.F*(d(31)!=Object||!d(160)(g)),"Array",{join:function join(a){return g.call(f(this),a===c?",":a)}})},function(a,b,c){var d=c(5);a.exports=function(a,b){return!!a&&d(function(){b?a.call(null,function(){},1):a.call(null)})}},function(a,b,d){var e=d(6),f=d(46),g=d(32),h=d(37),i=d(35),j=[].slice;e(e.P+e.F*d(5)(function(){f&&j.call(f)}),"Array",{slice:function slice(a,b){var d=i(this.length),e=g(this);if(b=b===c?d:b,"Array"==e)return j.call(this,a,b);for(var f=h(a,d),k=h(b,d),l=i(k-f),m=Array(l),n=0;n<l;n++)m[n]="String"==e?this.charAt(f+n):this[f+n];return m}})},function(a,b,d){var e=d(6),f=d(19),g=d(56),h=d(5),i=[].sort,j=[1,2,3];e(e.P+e.F*(h(function(){j.sort(c)})||!h(function(){j.sort(null)})||!d(160)(i)),"Array",{sort:function sort(a){return a===c?i.call(g(this)):i.call(g(this),f(a))}})},function(a,b,c){var d=c(6),e=c(164)(0),f=c(160)([].forEach,!0);d(d.P+d.F*!f,"Array",{forEach:function forEach(a){return e(this,a,arguments[1])}})},function(a,b,d){var e=d(18),f=d(31),g=d(56),h=d(35),i=d(165);a.exports=function(a,b){var d=1==a,j=2==a,k=3==a,l=4==a,m=6==a,n=5==a||m,o=b||i;return function(b,i,p){for(var q,r,s=g(b),t=f(s),u=e(i,p,3),v=h(t.length),w=0,x=d?o(b,v):j?o(b,0):c;v>w;w++)if((n||w in t)&&(q=t[w],r=u(q,w,s),a))if(d)x[w]=r;else if(r)switch(a){case 3:return!0;case 5:return q;case 6:return w;case 2:x.push(q)}else if(l)return!1;return m?-1:k||l?l:x}}},function(a,b,c){var d=c(166);a.exports=function(a,b){return new(d(a))(b)}},function(a,b,d){var e=d(11),f=d(43),g=d(23)("species");a.exports=function(a){var b;return f(a)&&(b=a.constructor,"function"!=typeof b||b!==Array&&!f(b.prototype)||(b=c),e(b)&&(b=b[g],null===b&&(b=c))),b===c?Array:b}},function(a,b,c){var d=c(6),e=c(164)(1);d(d.P+d.F*!c(160)([].map,!0),"Array",{map:function map(a){return e(this,a,arguments[1])}})},function(a,b,c){var d=c(6),e=c(164)(2);d(d.P+d.F*!c(160)([].filter,!0),"Array",{filter:function filter(a){return e(this,a,arguments[1])}})},function(a,b,c){var d=c(6),e=c(164)(3);d(d.P+d.F*!c(160)([].some,!0),"Array",{some:function some(a){return e(this,a,arguments[1])}})},function(a,b,c){var d=c(6),e=c(164)(4);d(d.P+d.F*!c(160)([].every,!0),"Array",{every:function every(a){return e(this,a,arguments[1])}})},function(a,b,c){var d=c(6),e=c(172);d(d.P+d.F*!c(160)([].reduce,!0),"Array",{reduce:function reduce(a){return e(this,a,arguments.length,arguments[1],!1)}})},function(a,b,c){var d=c(19),e=c(56),f=c(31),g=c(35);a.exports=function(a,b,c,h,i){d(b);var j=e(a),k=f(j),l=g(j.length),m=i?l-1:0,n=i?-1:1;if(c<2)for(;;){if(m in k){h=k[m],m+=n;break}if(m+=n,i?m<0:l<=m)throw TypeError("Reduce of empty array with no initial value")}for(;i?m>=0:l>m;m+=n)m in k&&(h=b(h,k[m],m,j));return h}},function(a,b,c){var d=c(6),e=c(172);d(d.P+d.F*!c(160)([].reduceRight,!0),"Array",{reduceRight:function reduceRight(a){return e(this,a,arguments.length,arguments[1],!0)}})},function(a,b,c){var d=c(6),e=c(34)(!1),f=[].indexOf,g=!!f&&1/[1].indexOf(1,-0)<0;d(d.P+d.F*(g||!c(160)(f)),"Array",{indexOf:function indexOf(a){return g?f.apply(this,arguments)||0:e(this,a,arguments[1])}})},function(a,b,c){var d=c(6),e=c(30),f=c(36),g=c(35),h=[].lastIndexOf,i=!!h&&1/[1].lastIndexOf(1,-0)<0;d(d.P+d.F*(i||!c(160)(h)),"Array",{lastIndexOf:function lastIndexOf(a){if(i)return h.apply(this,arguments)||0;var b=e(this),c=g(b.length),d=c-1;for(arguments.length>1&&(d=Math.min(d,f(arguments[1]))),d<0&&(d=c+d);d>=0;d--)if(d in b&&b[d]===a)return d||0;return-1}})},function(a,b,c){var d=c(6);d(d.P,"Array",{copyWithin:c(177)}),c(178)("copyWithin")},function(a,b,d){var e=d(56),f=d(37),g=d(35);a.exports=[].copyWithin||function copyWithin(a,b){var d=e(this),h=g(d.length),i=f(a,h),j=f(b,h),k=arguments.length>2?arguments[2]:c,l=Math.min((k===c?h:f(k,h))-j,h-i),m=1;for(j<i&&i<j+l&&(m=-1,j+=l-1,i+=l-1);l-- >0;)j in d?d[i]=d[j]:delete d[i],i+=m,j+=m;return d}},function(a,b,d){var e=d(23)("unscopables"),f=Array.prototype;f[e]==c&&d(8)(f,e,{}),a.exports=function(a){f[e][a]=!0}},function(a,b,c){var d=c(6);d(d.P,"Array",{fill:c(180)}),c(178)("fill")},function(a,b,d){var e=d(56),f=d(37),g=d(35);a.exports=function fill(a){for(var b=e(this),d=g(b.length),h=arguments.length,i=f(h>1?arguments[1]:c,d),j=h>2?arguments[2]:c,k=j===c?d:f(j,d);k>i;)b[i++]=a;return b}},function(a,b,d){var e=d(6),f=d(164)(5),g="find",h=!0;g in[]&&Array(1)[g](function(){h=!1}),e(e.P+e.F*h,"Array",{find:function find(a){return f(this,a,arguments.length>1?arguments[1]:c)}}),d(178)(g)},function(a,b,d){var e=d(6),f=d(164)(6),g="findIndex",h=!0;g in[]&&Array(1)[g](function(){h=!1}),e(e.P+e.F*h,"Array",{findIndex:function findIndex(a){return f(this,a,arguments.length>1?arguments[1]:c)}}),d(178)(g)},function(a,b,d){var e=d(178),f=d(184),g=d(135),h=d(30);a.exports=d(134)(Array,"Array",function(a,b){this._t=h(a),this._i=0,this._k=b},function(){var a=this._t,b=this._k,d=this._i++;return!a||d>=a.length?(this._t=c,f(1)):"keys"==b?f(0,d):"values"==b?f(0,a[d]):f(0,[d,a[d]])},"values"),g.Arguments=g.Array,e("keys"),e("values"),e("entries")},function(a,b){a.exports=function(a,b){return{value:b,done:!!a}}},function(a,b,c){c(186)("Array")},function(a,b,c){var d=c(2),e=c(9),f=c(4),g=c(23)("species");a.exports=function(a){var b=d[a];f&&b&&!b[g]&&e.f(b,g,{configurable:!0,get:function(){return this}})}},function(a,b,d){var e=d(2),f=d(80),g=d(9).f,h=d(48).f,i=d(128),j=d(188),k=e.RegExp,l=k,m=k.prototype,n=/a/g,o=/a/g,p=new k(n)!==n;if(d(4)&&(!p||d(5)(function(){return o[d(23)("match")]=!1,k(n)!=n||k(o)==o||"/a/i"!=k(n,"i")}))){k=function RegExp(a,b){var d=this instanceof k,e=i(a),g=b===c;return!d&&e&&a.constructor===k&&g?a:f(p?new l(e&&!g?a.source:a,b):l((e=a instanceof k)?a.source:a,e&&g?j.call(a):b),d?this:m,k)};for(var q=(function(a){a in k||g(k,a,{configurable:!0,get:function(){return l[a]},set:function(b){l[a]=b}})}),r=h(l),s=0;r.length>s;)q(r[s++]);m.constructor=k,k.prototype=m,d(16)(e,"RegExp",k)}d(186)("RegExp")},function(a,b,c){var d=c(10);a.exports=function(){var a=d(this),b="";return a.global&&(b+="g"),a.ignoreCase&&(b+="i"),a.multiline&&(b+="m"),a.unicode&&(b+="u"),a.sticky&&(b+="y"),b}},function(a,b,d){d(190);var e=d(10),f=d(188),g=d(4),h="toString",i=/./[h],j=function(a){d(16)(RegExp.prototype,h,a,!0)};d(5)(function(){return"/a/b"!=i.call({source:"a",flags:"b"})})?j(function toString(){var a=e(this);return"/".concat(a.source,"/","flags"in a?a.flags:!g&&a instanceof RegExp?f.call(a):c)}):i.name!=h&&j(function toString(){return i.call(this)})},function(a,b,c){c(4)&&"g"!=/./g.flags&&c(9).f(RegExp.prototype,"flags",{configurable:!0,get:c(188)})},function(a,b,d){d(192)("match",1,function(a,b,d){return[function match(d){var e=a(this),f=d==c?c:d[b];return f!==c?f.call(d,e):new RegExp(d)[b](String(e))},d]})},function(a,b,c){var d=c(8),e=c(16),f=c(5),g=c(33),h=c(23);a.exports=function(a,b,c){var i=h(a),j=c(g,i,""[a]),k=j[0],l=j[1];f(function(){var b={};return b[i]=function(){return 7},7!=""[a](b)})&&(e(String.prototype,a,k),d(RegExp.prototype,i,2==b?function(a,b){return l.call(a,this,b)}:function(a){return l.call(a,this)}))}},function(a,b,d){d(192)("replace",2,function(a,b,d){return[function replace(e,f){var g=a(this),h=e==c?c:e[b];return h!==c?h.call(e,g,f):d.call(String(g),e,f)},d]})},function(a,b,d){d(192)("search",1,function(a,b,d){return[function search(d){var e=a(this),f=d==c?c:d[b];return f!==c?f.call(d,e):new RegExp(d)[b](String(e))},d]})},function(a,b,d){d(192)("split",2,function(a,b,e){var f=d(128),g=e,h=[].push,i="split",j="length",k="lastIndex";if("c"=="abbc"[i](/(b)*/)[1]||4!="test"[i](/(?:)/,-1)[j]||2!="ab"[i](/(?:ab)*/)[j]||4!="."[i](/(.?)(.?)/)[j]||"."[i](/()()/)[j]>1||""[i](/.?/)[j]){var l=/()??/.exec("")[1]===c;e=function(a,b){var d=String(this);if(a===c&&0===b)return[];if(!f(a))return g.call(d,a,b);var e,i,m,n,o,p=[],q=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(a.sticky?"y":""),r=0,s=b===c?4294967295:b>>>0,t=new RegExp(a.source,q+"g");for(l||(e=new RegExp("^"+t.source+"$(?!\\s)",q));(i=t.exec(d))&&(m=i.index+i[0][j],!(m>r&&(p.push(d.slice(r,i.index)),!l&&i[j]>1&&i[0].replace(e,function(){for(o=1;o<arguments[j]-2;o++)arguments[o]===c&&(i[o]=c)}),i[j]>1&&i.index<d[j]&&h.apply(p,i.slice(1)),n=i[0][j],r=m,p[j]>=s)));)t[k]===i.index&&t[k]++;return r===d[j]?!n&&t.test("")||p.push(""):p.push(d.slice(r)),p[j]>s?p.slice(0,s):p}}else"0"[i](c,0)[j]&&(e=function(a,b){return a===c&&0===b?[]:g.call(this,a,b)});return[function split(d,f){var g=a(this),h=d==c?c:d[b];return h!==c?h.call(d,g,f):e.call(String(g),d,f)},e]})},function(a,b,d){var e,f,g,h=d(26),i=d(2),j=d(18),k=d(73),l=d(6),m=d(11),n=d(19),o=d(197),p=d(198),q=d(199),r=d(200).set,s=d(201)(),t="Promise",u=i.TypeError,v=i.process,w=i[t],v=i.process,x="process"==k(v),y=function(){},z=!!function(){try{var a=w.resolve(1),b=(a.constructor={})[d(23)("species")]=function(a){a(y,y)};return(x||"function"==typeof PromiseRejectionEvent)&&a.then(y)instanceof b}catch(c){}}(),A=function(a,b){return a===b||a===w&&b===g},B=function(a){var b;return!(!m(a)||"function"!=typeof(b=a.then))&&b},C=function(a){return A(w,a)?new D(a):new f(a)},D=f=function(a){var b,d;this.promise=new a(function(a,e){if(b!==c||d!==c)throw u("Bad Promise constructor");b=a,d=e}),this.resolve=n(b),this.reject=n(d)},E=function(a){try{a()}catch(b){return{error:b}}},F=function(a,b){if(!a._n){a._n=!0;var c=a._c;s(function(){for(var d=a._v,e=1==a._s,f=0,g=function(b){var c,f,g=e?b.ok:b.fail,h=b.resolve,i=b.reject,j=b.domain;try{g?(e||(2==a._h&&I(a),a._h=1),g===!0?c=d:(j&&j.enter(),c=g(d),j&&j.exit()),c===b.promise?i(u("Promise-chain cycle")):(f=B(c))?f.call(c,h,i):h(c)):i(d)}catch(k){i(k)}};c.length>f;)g(c[f++]);a._c=[],a._n=!1,b&&!a._h&&G(a)})}},G=function(a){r.call(i,function(){var b,d,e,f=a._v;if(H(a)&&(b=E(function(){x?v.emit("unhandledRejection",f,a):(d=i.onunhandledrejection)?d({promise:a,reason:f}):(e=i.console)&&e.error&&e.error("Unhandled promise rejection",f)}),a._h=x||H(a)?2:1),a._a=c,b)throw b.error})},H=function(a){if(1==a._h)return!1;for(var b,c=a._a||a._c,d=0;c.length>d;)if(b=c[d++],b.fail||!H(b.promise))return!1;return!0},I=function(a){r.call(i,function(){var b;x?v.emit("rejectionHandled",a):(b=i.onrejectionhandled)&&b({promise:a,reason:a._v})})},J=function(a){var b=this;b._d||(b._d=!0,b=b._w||b,b._v=a,b._s=2,b._a||(b._a=b._c.slice()),F(b,!0))},K=function(a){var b,c=this;if(!c._d){c._d=!0,c=c._w||c;try{if(c===a)throw u("Promise can't be resolved itself");(b=B(a))?s(function(){var d={_w:c,_d:!1};try{b.call(a,j(K,d,1),j(J,d,1))}catch(e){J.call(d,e)}}):(c._v=a,c._s=1,F(c,!1))}catch(d){J.call({_w:c,_d:!1},d)}}};z||(w=function Promise(a){o(this,w,t,"_h"),n(a),e.call(this);try{a(j(K,this,1),j(J,this,1))}catch(b){J.call(this,b)}},e=function Promise(a){this._c=[],this._a=c,this._s=0,this._d=!1,this._v=c,this._h=0,this._n=!1},e.prototype=d(202)(w.prototype,{then:function then(a,b){var d=C(q(this,w));return d.ok="function"!=typeof a||a,d.fail="function"==typeof b&&b,d.domain=x?v.domain:c,this._c.push(d),this._a&&this._a.push(d),this._s&&F(this,!1),d.promise},"catch":function(a){return this.then(c,a)}}),D=function(){var a=new e;this.promise=a,this.resolve=j(K,a,1),this.reject=j(J,a,1)}),l(l.G+l.W+l.F*!z,{Promise:w}),d(22)(w,t),d(186)(t),g=d(7)[t],l(l.S+l.F*!z,t,{reject:function reject(a){var b=C(this),c=b.reject;return c(a),b.promise}}),l(l.S+l.F*(h||!z),t,{resolve:function resolve(a){if(a instanceof w&&A(a.constructor,this))return a;var b=C(this),c=b.resolve;return c(a),b.promise}}),l(l.S+l.F*!(z&&d(157)(function(a){w.all(a)["catch"](y)})),t,{all:function all(a){var b=this,d=C(b),e=d.resolve,f=d.reject,g=E(function(){var d=[],g=0,h=1;p(a,!1,function(a){var i=g++,j=!1;d.push(c),h++,b.resolve(a).then(function(a){j||(j=!0,d[i]=a,--h||e(d))},f)}),--h||e(d)});return g&&f(g.error),d.promise},race:function race(a){var b=this,c=C(b),d=c.reject,e=E(function(){p(a,!1,function(a){b.resolve(a).then(c.resolve,d)})});return e&&d(e.error),c.promise}})},function(a,b){a.exports=function(a,b,d,e){if(!(a instanceof b)||e!==c&&e in a)throw TypeError(d+": incorrect invocation!");return a}},function(a,b,c){var d=c(18),e=c(153),f=c(154),g=c(10),h=c(35),i=c(156),j={},k={},b=a.exports=function(a,b,c,l,m){var n,o,p,q,r=m?function(){return a}:i(a),s=d(c,l,b?2:1),t=0;if("function"!=typeof r)throw TypeError(a+" is not iterable!");if(f(r)){for(n=h(a.length);n>t;t++)if(q=b?s(g(o=a[t])[0],o[1]):s(a[t]),q===j||q===k)return q}else for(p=r.call(a);!(o=p.next()).done;)if(q=e(p,s,o.value,b),q===j||q===k)return q};b.BREAK=j,b.RETURN=k},function(a,b,d){var e=d(10),f=d(19),g=d(23)("species");a.exports=function(a,b){var d,h=e(a).constructor;return h===c||(d=e(h)[g])==c?b:f(d)}},function(a,b,c){var d,e,f,g=c(18),h=c(76),i=c(46),j=c(13),k=c(2),l=k.process,m=k.setImmediate,n=k.clearImmediate,o=k.MessageChannel,p=0,q={},r="onreadystatechange",s=function(){var a=+this;if(q.hasOwnProperty(a)){var b=q[a];delete q[a],b()}},t=function(a){s.call(a.data)};m&&n||(m=function setImmediate(a){for(var b=[],c=1;arguments.length>c;)b.push(arguments[c++]);return q[++p]=function(){h("function"==typeof a?a:Function(a),b)},d(p),p},n=function clearImmediate(a){delete q[a]},"process"==c(32)(l)?d=function(a){l.nextTick(g(s,a,1))}:o?(e=new o,f=e.port2,e.port1.onmessage=t,d=g(f.postMessage,f,1)):k.addEventListener&&"function"==typeof postMessage&&!k.importScripts?(d=function(a){k.postMessage(a+"","*")},k.addEventListener("message",t,!1)):d=r in j("script")?function(a){i.appendChild(j("script"))[r]=function(){i.removeChild(this),s.call(a)}}:function(a){setTimeout(g(s,a,1),0)}),a.exports={set:m,clear:n}},function(a,b,d){var e=d(2),f=d(200).set,g=e.MutationObserver||e.WebKitMutationObserver,h=e.process,i=e.Promise,j="process"==d(32)(h);a.exports=function(){var a,b,d,k=function(){var e,f;for(j&&(e=h.domain)&&e.exit();a;){f=a.fn,a=a.next;try{f()}catch(g){throw a?d():b=c,g}}b=c,e&&e.enter()};if(j)d=function(){h.nextTick(k)};else if(g){var l=!0,m=document.createTextNode("");new g(k).observe(m,{characterData:!0}),d=function(){m.data=l=!l}}else if(i&&i.resolve){var n=i.resolve();d=function(){n.then(k)}}else d=function(){f.call(e,k)};return function(e){var f={fn:e,next:c};b&&(b.next=f),a||(a=f,d()),b=f}}},function(a,b,c){var d=c(16);a.exports=function(a,b,c){for(var e in b)d(a,e,b[e],c);return a}},function(a,b,d){var e=d(204);a.exports=d(205)("Map",function(a){return function Map(){return a(this,arguments.length>0?arguments[0]:c)}},{get:function get(a){var b=e.getEntry(this,a);return b&&b.v},set:function set(a,b){return e.def(this,0===a?0:a,b)}},e,!0)},function(a,b,d){var e=d(9).f,f=d(44),g=d(202),h=d(18),i=d(197),j=d(33),k=d(198),l=d(134),m=d(184),n=d(186),o=d(4),p=d(20).fastKey,q=o?"_s":"size",r=function(a,b){var c,d=p(b);if("F"!==d)return a._i[d];for(c=a._f;c;c=c.n)if(c.k==b)return c};a.exports={getConstructor:function(a,b,d,l){var m=a(function(a,e){i(a,m,b,"_i"),a._i=f(null),a._f=c,a._l=c,a[q]=0,e!=c&&k(e,d,a[l],a)});return g(m.prototype,{clear:function clear(){for(var a=this,b=a._i,d=a._f;d;d=d.n)d.r=!0,d.p&&(d.p=d.p.n=c),delete b[d.i];a._f=a._l=c,a[q]=0},"delete":function(a){var b=this,c=r(b,a);if(c){var d=c.n,e=c.p;delete b._i[c.i],c.r=!0,e&&(e.n=d),d&&(d.p=e),b._f==c&&(b._f=d),b._l==c&&(b._l=e),b[q]--}return!!c},forEach:function forEach(a){i(this,m,"forEach");for(var b,d=h(a,arguments.length>1?arguments[1]:c,3);b=b?b.n:this._f;)for(d(b.v,b.k,this);b&&b.r;)b=b.p},has:function has(a){return!!r(this,a)}}),o&&e(m.prototype,"size",{get:function(){return j(this[q])}}),m},def:function(a,b,d){var e,f,g=r(a,b);return g?g.v=d:(a._l=g={i:f=p(b,!0),k:b,v:d,p:e=a._l,n:c,r:!1},a._f||(a._f=g),e&&(e.n=g),a[q]++,"F"!==f&&(a._i[f]=g)),a},getEntry:r,setStrong:function(a,b,d){l(a,b,function(a,b){this._t=a,this._k=b,this._l=c},function(){for(var a=this,b=a._k,d=a._l;d&&d.r;)d=d.p;return a._t&&(a._l=d=d?d.n:a._t._f)?"keys"==b?m(0,d.k):"values"==b?m(0,d.v):m(0,[d.k,d.v]):(a._t=c,m(1))},d?"entries":"values",!d,!0),n(b)}}},function(a,b,d){var e=d(2),f=d(6),g=d(16),h=d(202),i=d(20),j=d(198),k=d(197),l=d(11),m=d(5),n=d(157),o=d(22),p=d(80);a.exports=function(a,b,d,q,r,s){var t=e[a],u=t,v=r?"set":"add",w=u&&u.prototype,x={},y=function(a){var b=w[a];g(w,a,"delete"==a?function(a){return!(s&&!l(a))&&b.call(this,0===a?0:a)}:"has"==a?function has(a){return!(s&&!l(a))&&b.call(this,0===a?0:a)}:"get"==a?function get(a){return s&&!l(a)?c:b.call(this,0===a?0:a)}:"add"==a?function add(a){return b.call(this,0===a?0:a),this}:function set(a,c){return b.call(this,0===a?0:a,c),this})};if("function"==typeof u&&(s||w.forEach&&!m(function(){(new u).entries().next()}))){var z=new u,A=z[v](s?{}:-0,1)!=z,B=m(function(){z.has(1)}),C=n(function(a){new u(a)}),D=!s&&m(function(){for(var a=new u,b=5;b--;)a[v](b,b);return!a.has(-0)});C||(u=b(function(b,d){k(b,u,a);var e=p(new t,b,u);return d!=c&&j(d,r,e[v],e),e}),u.prototype=w,w.constructor=u),(B||D)&&(y("delete"),y("has"),r&&y("get")),(D||A)&&y(v),s&&w.clear&&delete w.clear}else u=q.getConstructor(b,a,r,v),h(u.prototype,d),i.NEED=!0;return o(u,a),x[a]=u,f(f.G+f.W+f.F*(u!=t),x),s||q.setStrong(u,a,r),u}},function(a,b,d){var e=d(204);a.exports=d(205)("Set",function(a){return function Set(){return a(this,arguments.length>0?arguments[0]:c)}},{add:function add(a){return e.def(this,a=0===a?0:a,a)}},e)},function(a,b,d){var e,f=d(164)(0),g=d(16),h=d(20),i=d(67),j=d(208),k=d(11),l=h.getWeak,m=Object.isExtensible,n=j.ufstore,o={},p=function(a){return function WeakMap(){return a(this,arguments.length>0?arguments[0]:c)}},q={get:function get(a){if(k(a)){var b=l(a);return b===!0?n(this).get(a):b?b[this._i]:c}},set:function set(a,b){return j.def(this,a,b)}},r=a.exports=d(205)("WeakMap",p,q,j,!0,!0);7!=(new r).set((Object.freeze||Object)(o),7).get(o)&&(e=j.getConstructor(p),i(e.prototype,q),h.NEED=!0,f(["delete","has","get","set"],function(a){var b=r.prototype,c=b[a];g(b,a,function(b,d){if(k(b)&&!m(b)){this._f||(this._f=new e);var f=this._f[a](b,d);return"set"==a?this:f}return c.call(this,b,d)})}))},function(a,b,d){var e=d(202),f=d(20).getWeak,g=d(10),h=d(11),i=d(197),j=d(198),k=d(164),l=d(3),m=k(5),n=k(6),o=0,p=function(a){return a._l||(a._l=new q)},q=function(){this.a=[]},r=function(a,b){return m(a.a,function(a){return a[0]===b})};q.prototype={get:function(a){var b=r(this,a);if(b)return b[1]},has:function(a){return!!r(this,a)},set:function(a,b){var c=r(this,a);c?c[1]=b:this.a.push([a,b])},"delete":function(a){var b=n(this.a,function(b){return b[0]===a});return~b&&this.a.splice(b,1),!!~b}},a.exports={getConstructor:function(a,b,d,g){var k=a(function(a,e){i(a,k,b,"_i"),a._i=o++,a._l=c,e!=c&&j(e,d,a[g],a)});return e(k.prototype,{"delete":function(a){if(!h(a))return!1;var b=f(a);return b===!0?p(this)["delete"](a):b&&l(b,this._i)&&delete b[this._i]},has:function has(a){if(!h(a))return!1;var b=f(a);return b===!0?p(this).has(a):b&&l(b,this._i)}}),k},def:function(a,b,c){var d=f(g(b),!0);return d===!0?p(a).set(b,c):d[a._i]=c,a},ufstore:p}},function(a,b,d){var e=d(208);d(205)("WeakSet",function(a){return function WeakSet(){return a(this,arguments.length>0?arguments[0]:c)}},{add:function add(a){return e.def(this,a,!0)}},e,!1,!0)},function(a,b,c){var d=c(6),e=c(19),f=c(10),g=(c(2).Reflect||{}).apply,h=Function.apply;d(d.S+d.F*!c(5)(function(){g(function(){})}),"Reflect",{apply:function apply(a,b,c){var d=e(a),i=f(c);return g?g(d,b,i):h.call(d,b,i)}})},function(a,b,c){var d=c(6),e=c(44),f=c(19),g=c(10),h=c(11),i=c(5),j=c(75),k=(c(2).Reflect||{}).construct,l=i(function(){function F(){}return!(k(function(){},[],F)instanceof F)}),m=!i(function(){k(function(){})});d(d.S+d.F*(l||m),"Reflect",{construct:function construct(a,b){f(a),g(b);var c=arguments.length<3?a:f(arguments[2]);if(m&&!l)return k(a,b,c);if(a==c){switch(b.length){case 0:return new a;case 1:return new a(b[0]);case 2:return new a(b[0],b[1]);case 3:return new a(b[0],b[1],b[2]);case 4:return new a(b[0],b[1],b[2],b[3])}var d=[null];return d.push.apply(d,b),new(j.apply(a,d))}var i=c.prototype,n=e(h(i)?i:Object.prototype),o=Function.apply.call(a,n,b);return h(o)?o:n}})},function(a,b,c){var d=c(9),e=c(6),f=c(10),g=c(14);e(e.S+e.F*c(5)(function(){Reflect.defineProperty(d.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function defineProperty(a,b,c){f(a),b=g(b,!0),f(c);try{return d.f(a,b,c),!0}catch(e){return!1}}})},function(a,b,c){var d=c(6),e=c(49).f,f=c(10);d(d.S,"Reflect",{deleteProperty:function deleteProperty(a,b){var c=e(f(a),b);return!(c&&!c.configurable)&&delete a[b]}})},function(a,b,d){var e=d(6),f=d(10),g=function(a){this._t=f(a),this._i=0;var b,c=this._k=[];for(b in a)c.push(b)};d(136)(g,"Object",function(){var a,b=this,d=b._k;do if(b._i>=d.length)return{value:c,done:!0};while(!((a=d[b._i++])in b._t));return{value:a,done:!1}}),e(e.S,"Reflect",{enumerate:function enumerate(a){return new g(a)}})},function(a,b,d){function get(a,b){var d,h,k=arguments.length<3?a:arguments[2];return j(a)===k?a[b]:(d=e.f(a,b))?g(d,"value")?d.value:d.get!==c?d.get.call(k):c:i(h=f(a))?get(h,b,k):void 0}var e=d(49),f=d(57),g=d(3),h=d(6),i=d(11),j=d(10);h(h.S,"Reflect",{get:get})},function(a,b,c){var d=c(49),e=c(6),f=c(10);e(e.S,"Reflect",{getOwnPropertyDescriptor:function getOwnPropertyDescriptor(a,b){return d.f(f(a),b)}})},function(a,b,c){var d=c(6),e=c(57),f=c(10);d(d.S,"Reflect",{getPrototypeOf:function getPrototypeOf(a){return e(f(a))}})},function(a,b,c){var d=c(6);d(d.S,"Reflect",{has:function has(a,b){return b in a}})},function(a,b,c){var d=c(6),e=c(10),f=Object.isExtensible;d(d.S,"Reflect",{isExtensible:function isExtensible(a){return e(a),!f||f(a)}})},function(a,b,c){var d=c(6);d(d.S,"Reflect",{ownKeys:c(221)})},function(a,b,c){var d=c(48),e=c(41),f=c(10),g=c(2).Reflect;a.exports=g&&g.ownKeys||function ownKeys(a){var b=d.f(f(a)),c=e.f;return c?b.concat(c(a)):b}},function(a,b,c){var d=c(6),e=c(10),f=Object.preventExtensions;d(d.S,"Reflect",{preventExtensions:function preventExtensions(a){e(a);try{return f&&f(a),!0}catch(b){return!1}}})},function(a,b,d){function set(a,b,d){var i,m,n=arguments.length<4?a:arguments[3],o=f.f(k(a),b);if(!o){if(l(m=g(a)))return set(m,b,d,n);o=j(0)}return h(o,"value")?!(o.writable===!1||!l(n))&&(i=f.f(n,b)||j(0),i.value=d,e.f(n,b,i),!0):o.set!==c&&(o.set.call(n,d),!0)}var e=d(9),f=d(49),g=d(57),h=d(3),i=d(6),j=d(15),k=d(10),l=d(11);i(i.S,"Reflect",{set:set})},function(a,b,c){var d=c(6),e=c(71);e&&d(d.S,"Reflect",{setPrototypeOf:function setPrototypeOf(a,b){e.check(a,b);try{return e.set(a,b),!0}catch(c){return!1}}})},function(a,b,c){var d=c(6);d(d.S,"Date",{now:function(){return(new Date).getTime()}})},function(a,b,c){var d=c(6),e=c(56),f=c(14);d(d.P+d.F*c(5)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function toJSON(a){var b=e(this),c=f(b);return"number"!=typeof c||isFinite(c)?b.toISOString():null}})},function(a,b,c){var d=c(6),e=c(5),f=Date.prototype.getTime,g=function(a){return a>9?a:"0"+a};d(d.P+d.F*(e(function(){return"0385-07-25T07:06:39.999Z"!=new Date(-5e13-1).toISOString()})||!e(function(){new Date(NaN).toISOString()})),"Date",{toISOString:function toISOString(){if(!isFinite(f.call(this)))throw RangeError("Invalid time value");var a=this,b=a.getUTCFullYear(),c=a.getUTCMilliseconds(),d=b<0?"-":b>9999?"+":"";return d+("00000"+Math.abs(b)).slice(d?-6:-4)+"-"+g(a.getUTCMonth()+1)+"-"+g(a.getUTCDate())+"T"+g(a.getUTCHours())+":"+g(a.getUTCMinutes())+":"+g(a.getUTCSeconds())+"."+(c>99?c:"0"+g(c))+"Z"}})},function(a,b,c){var d=Date.prototype,e="Invalid Date",f="toString",g=d[f],h=d.getTime;new Date(NaN)+""!=e&&c(16)(d,f,function toString(){var a=h.call(this);return a===a?g.call(this):e})},function(a,b,c){var d=c(23)("toPrimitive"),e=Date.prototype;d in e||c(8)(e,d,c(230))},function(a,b,c){var d=c(10),e=c(14),f="number";a.exports=function(a){if("string"!==a&&a!==f&&"default"!==a)throw TypeError("Incorrect hint");return e(d(this),a!=f)}},function(a,b,d){var e=d(6),f=d(232),g=d(233),h=d(10),i=d(37),j=d(35),k=d(11),l=d(2).ArrayBuffer,m=d(199),n=g.ArrayBuffer,o=g.DataView,p=f.ABV&&l.isView,q=n.prototype.slice,r=f.VIEW,s="ArrayBuffer";e(e.G+e.W+e.F*(l!==n),{ArrayBuffer:n}),e(e.S+e.F*!f.CONSTR,s,{isView:function isView(a){return p&&p(a)||k(a)&&r in a}}),e(e.P+e.U+e.F*d(5)(function(){return!new n(2).slice(1,c).byteLength}),s,{slice:function slice(a,b){if(q!==c&&b===c)return q.call(h(this),a);for(var d=h(this).byteLength,e=i(a,d),f=i(b===c?d:b,d),g=new(m(this,n))(j(f-e)),k=new o(this),l=new o(g),p=0;e<f;)l.setUint8(p++,k.getUint8(e++));return g}}),d(186)(s)},function(a,b,c){for(var d,e=c(2),f=c(8),g=c(17),h=g("typed_array"),i=g("view"),j=!(!e.ArrayBuffer||!e.DataView),k=j,l=0,m=9,n="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<m;)(d=e[n[l++]])?(f(d.prototype,h,!0),f(d.prototype,i,!0)):k=!1;a.exports={ABV:j,CONSTR:k,TYPED:h,VIEW:i}},function(a,b,d){var e=d(2),f=d(4),g=d(26),h=d(232),i=d(8),j=d(202),k=d(5),l=d(197),m=d(36),n=d(35),o=d(48).f,p=d(9).f,q=d(180),r=d(22),s="ArrayBuffer",t="DataView",u="prototype",v="Wrong length!",w="Wrong index!",x=e[s],y=e[t],z=e.Math,A=e.RangeError,B=e.Infinity,C=x,D=z.abs,E=z.pow,F=z.floor,G=z.log,H=z.LN2,I="buffer",J="byteLength",K="byteOffset",L=f?"_b":I,M=f?"_l":J,N=f?"_o":K,O=function(a,b,c){var d,e,f,g=Array(c),h=8*c-b-1,i=(1<<h)-1,j=i>>1,k=23===b?E(2,-24)-E(2,-77):0,l=0,m=a<0||0===a&&1/a<0?1:0;for(a=D(a),a!=a||a===B?(e=a!=a?1:0,d=i):(d=F(G(a)/H),a*(f=E(2,-d))<1&&(d--,f*=2),a+=d+j>=1?k/f:k*E(2,1-j),a*f>=2&&(d++,f/=2),d+j>=i?(e=0,d=i):d+j>=1?(e=(a*f-1)*E(2,b),d+=j):(e=a*E(2,j-1)*E(2,b),d=0));b>=8;g[l++]=255&e,e/=256,b-=8);for(d=d<<b|e,h+=b;h>0;g[l++]=255&d,d/=256,h-=8);return g[--l]|=128*m,g},P=function(a,b,c){var d,e=8*c-b-1,f=(1<<e)-1,g=f>>1,h=e-7,i=c-1,j=a[i--],k=127&j;for(j>>=7;h>0;k=256*k+a[i],i--,h-=8);for(d=k&(1<<-h)-1,k>>=-h,h+=b;h>0;d=256*d+a[i],i--,h-=8);if(0===k)k=1-g;else{if(k===f)return d?NaN:j?-B:B;d+=E(2,b),k-=g}return(j?-1:1)*d*E(2,k-b)},Q=function(a){return a[3]<<24|a[2]<<16|a[1]<<8|a[0]},R=function(a){return[255&a]},S=function(a){return[255&a,a>>8&255]},T=function(a){return[255&a,a>>8&255,a>>16&255,a>>24&255]},U=function(a){return O(a,52,8)},V=function(a){return O(a,23,4)},W=function(a,b,c){p(a[u],b,{get:function(){return this[c]}})},X=function(a,b,c,d){var e=+c,f=m(e);if(e!=f||f<0||f+b>a[M])throw A(w);var g=a[L]._b,h=f+a[N],i=g.slice(h,h+b);return d?i:i.reverse()},Y=function(a,b,c,d,e,f){var g=+c,h=m(g);if(g!=h||h<0||h+b>a[M])throw A(w);for(var i=a[L]._b,j=h+a[N],k=d(+e),l=0;l<b;l++)i[j+l]=k[f?l:b-l-1]},Z=function(a,b){l(a,x,s);var c=+b,d=n(c);if(c!=d)throw A(v);return d};if(h.ABV){if(!k(function(){new x})||!k(function(){new x(.5)})){x=function ArrayBuffer(a){return new C(Z(this,a))};for(var $,_=x[u]=C[u],aa=o(C),ba=0;aa.length>ba;)($=aa[ba++])in x||i(x,$,C[$]);g||(_.constructor=x)}var ca=new y(new x(2)),da=y[u].setInt8;ca.setInt8(0,2147483648),ca.setInt8(1,2147483649),!ca.getInt8(0)&&ca.getInt8(1)||j(y[u],{setInt8:function setInt8(a,b){da.call(this,a,b<<24>>24)},setUint8:function setUint8(a,b){da.call(this,a,b<<24>>24)}},!0)}else x=function ArrayBuffer(a){var b=Z(this,a);this._b=q.call(Array(b),0),this[M]=b},y=function DataView(a,b,d){l(this,y,t),l(a,x,t);var e=a[M],f=m(b);if(f<0||f>e)throw A("Wrong offset!");if(d=d===c?e-f:n(d),f+d>e)throw A(v);this[L]=a,this[N]=f,this[M]=d},f&&(W(x,J,"_l"),W(y,I,"_b"),W(y,J,"_l"),W(y,K,"_o")),j(y[u],{getInt8:function getInt8(a){return X(this,1,a)[0]<<24>>24},getUint8:function getUint8(a){return X(this,1,a)[0]},getInt16:function getInt16(a){var b=X(this,2,a,arguments[1]);return(b[1]<<8|b[0])<<16>>16},getUint16:function getUint16(a){var b=X(this,2,a,arguments[1]);return b[1]<<8|b[0]},getInt32:function getInt32(a){return Q(X(this,4,a,arguments[1]))},getUint32:function getUint32(a){return Q(X(this,4,a,arguments[1]))>>>0},getFloat32:function getFloat32(a){return P(X(this,4,a,arguments[1]),23,4)},getFloat64:function getFloat64(a){return P(X(this,8,a,arguments[1]),52,8)},setInt8:function setInt8(a,b){Y(this,1,a,R,b)},setUint8:function setUint8(a,b){Y(this,1,a,R,b)},setInt16:function setInt16(a,b){Y(this,2,a,S,b,arguments[2])},setUint16:function setUint16(a,b){Y(this,2,a,S,b,arguments[2])},setInt32:function setInt32(a,b){Y(this,4,a,T,b,arguments[2])},setUint32:function setUint32(a,b){Y(this,4,a,T,b,arguments[2])},setFloat32:function setFloat32(a,b){Y(this,4,a,V,b,arguments[2])},setFloat64:function setFloat64(a,b){Y(this,8,a,U,b,arguments[2])}});r(x,s),r(y,t),i(y[u],h.VIEW,!0),b[s]=x,b[t]=y},function(a,b,c){var d=c(6);d(d.G+d.W+d.F*!c(232).ABV,{DataView:c(233).DataView})},function(a,b,c){c(236)("Int8",1,function(a){return function Int8Array(b,c,d){return a(this,b,c,d)}})},function(a,b,d){if(d(4)){var e=d(26),f=d(2),g=d(5),h=d(6),i=d(232),j=d(233),k=d(18),l=d(197),m=d(15),n=d(8),o=d(202),p=d(36),q=d(35),r=d(37),s=d(14),t=d(3),u=d(69),v=d(73),w=d(11),x=d(56),y=d(154),z=d(44),A=d(57),B=d(48).f,C=d(156),D=d(17),E=d(23),F=d(164),G=d(34),H=d(199),I=d(183),J=d(135),K=d(157),L=d(186),M=d(180),N=d(177),O=d(9),P=d(49),Q=O.f,R=P.f,S=f.RangeError,T=f.TypeError,U=f.Uint8Array,V="ArrayBuffer",W="Shared"+V,X="BYTES_PER_ELEMENT",Y="prototype",Z=Array[Y],$=j.ArrayBuffer,_=j.DataView,aa=F(0),ba=F(2),ca=F(3),da=F(4),ea=F(5),fa=F(6),ga=G(!0),ha=G(!1),ia=I.values,ja=I.keys,ka=I.entries,la=Z.lastIndexOf,ma=Z.reduce,na=Z.reduceRight,oa=Z.join,pa=Z.sort,qa=Z.slice,ra=Z.toString,sa=Z.toLocaleString,ta=E("iterator"),ua=E("toStringTag"),va=D("typed_constructor"),wa=D("def_constructor"),xa=i.CONSTR,ya=i.TYPED,za=i.VIEW,Aa="Wrong length!",Ba=F(1,function(a,b){return Ha(H(a,a[wa]),b)}),Ca=g(function(){return 1===new U(new Uint16Array([1]).buffer)[0]}),Da=!!U&&!!U[Y].set&&g(function(){new U(1).set({})}),Ea=function(a,b){if(a===c)throw T(Aa);var d=+a,e=q(a);if(b&&!u(d,e))throw S(Aa);return e},Fa=function(a,b){var c=p(a);if(c<0||c%b)throw S("Wrong offset!");return c},Ga=function(a){if(w(a)&&ya in a)return a;throw T(a+" is not a typed array!")},Ha=function(a,b){if(!(w(a)&&va in a))throw T("It is not a typed array constructor!");return new a(b)},Ia=function(a,b){return Ja(H(a,a[wa]),b)},Ja=function(a,b){for(var c=0,d=b.length,e=Ha(a,d);d>c;)e[c]=b[c++];return e},Ka=function(a,b,c){Q(a,b,{get:function(){return this._d[c]}})},La=function from(a){var b,d,e,f,g,h,i=x(a),j=arguments.length,l=j>1?arguments[1]:c,m=l!==c,n=C(i);if(n!=c&&!y(n)){for(h=n.call(i),e=[],b=0;!(g=h.next()).done;b++)e.push(g.value);i=e}for(m&&j>2&&(l=k(l,arguments[2],2)),b=0,d=q(i.length),f=Ha(this,d);d>b;b++)f[b]=m?l(i[b],b):i[b];return f},Ma=function of(){for(var a=0,b=arguments.length,c=Ha(this,b);b>a;)c[a]=arguments[a++];return c},Na=!!U&&g(function(){sa.call(new U(1))}),Oa=function toLocaleString(){return sa.apply(Na?qa.call(Ga(this)):Ga(this),arguments)},Pa={copyWithin:function copyWithin(a,b){return N.call(Ga(this),a,b,arguments.length>2?arguments[2]:c)},every:function every(a){return da(Ga(this),a,arguments.length>1?arguments[1]:c)},fill:function fill(a){return M.apply(Ga(this),arguments)},filter:function filter(a){return Ia(this,ba(Ga(this),a,arguments.length>1?arguments[1]:c))},find:function find(a){return ea(Ga(this),a,arguments.length>1?arguments[1]:c)},findIndex:function findIndex(a){return fa(Ga(this),a,arguments.length>1?arguments[1]:c)},forEach:function forEach(a){aa(Ga(this),a,arguments.length>1?arguments[1]:c)},indexOf:function indexOf(a){return ha(Ga(this),a,arguments.length>1?arguments[1]:c)},includes:function includes(a){return ga(Ga(this),a,arguments.length>1?arguments[1]:c)},join:function join(a){return oa.apply(Ga(this),arguments)},lastIndexOf:function lastIndexOf(a){
return la.apply(Ga(this),arguments)},map:function map(a){return Ba(Ga(this),a,arguments.length>1?arguments[1]:c)},reduce:function reduce(a){return ma.apply(Ga(this),arguments)},reduceRight:function reduceRight(a){return na.apply(Ga(this),arguments)},reverse:function reverse(){for(var a,b=this,c=Ga(b).length,d=Math.floor(c/2),e=0;e<d;)a=b[e],b[e++]=b[--c],b[c]=a;return b},some:function some(a){return ca(Ga(this),a,arguments.length>1?arguments[1]:c)},sort:function sort(a){return pa.call(Ga(this),a)},subarray:function subarray(a,b){var d=Ga(this),e=d.length,f=r(a,e);return new(H(d,d[wa]))(d.buffer,d.byteOffset+f*d.BYTES_PER_ELEMENT,q((b===c?e:r(b,e))-f))}},Qa=function slice(a,b){return Ia(this,qa.call(Ga(this),a,b))},Ra=function set(a){Ga(this);var b=Fa(arguments[1],1),c=this.length,d=x(a),e=q(d.length),f=0;if(e+b>c)throw S(Aa);for(;f<e;)this[b+f]=d[f++]},Sa={entries:function entries(){return ka.call(Ga(this))},keys:function keys(){return ja.call(Ga(this))},values:function values(){return ia.call(Ga(this))}},Ta=function(a,b){return w(a)&&a[ya]&&"symbol"!=typeof b&&b in a&&String(+b)==String(b)},Ua=function getOwnPropertyDescriptor(a,b){return Ta(a,b=s(b,!0))?m(2,a[b]):R(a,b)},Va=function defineProperty(a,b,c){return!(Ta(a,b=s(b,!0))&&w(c)&&t(c,"value"))||t(c,"get")||t(c,"set")||c.configurable||t(c,"writable")&&!c.writable||t(c,"enumerable")&&!c.enumerable?Q(a,b,c):(a[b]=c.value,a)};xa||(P.f=Ua,O.f=Va),h(h.S+h.F*!xa,"Object",{getOwnPropertyDescriptor:Ua,defineProperty:Va}),g(function(){ra.call({})})&&(ra=sa=function toString(){return oa.call(this)});var Wa=o({},Pa);o(Wa,Sa),n(Wa,ta,Sa.values),o(Wa,{slice:Qa,set:Ra,constructor:function(){},toString:ra,toLocaleString:Oa}),Ka(Wa,"buffer","b"),Ka(Wa,"byteOffset","o"),Ka(Wa,"byteLength","l"),Ka(Wa,"length","e"),Q(Wa,ua,{get:function(){return this[ya]}}),a.exports=function(a,b,d,j){j=!!j;var k=a+(j?"Clamped":"")+"Array",m="Uint8Array"!=k,o="get"+a,p="set"+a,r=f[k],s=r||{},t=r&&A(r),u=!r||!i.ABV,x={},y=r&&r[Y],C=function(a,c){var d=a._d;return d.v[o](c*b+d.o,Ca)},D=function(a,c,d){var e=a._d;j&&(d=(d=Math.round(d))<0?0:d>255?255:255&d),e.v[p](c*b+e.o,d,Ca)},E=function(a,b){Q(a,b,{get:function(){return C(this,b)},set:function(a){return D(this,b,a)},enumerable:!0})};u?(r=d(function(a,d,e,f){l(a,r,k,"_d");var g,h,i,j,m=0,o=0;if(w(d)){if(!(d instanceof $||(j=v(d))==V||j==W))return ya in d?Ja(r,d):La.call(r,d);g=d,o=Fa(e,b);var p=d.byteLength;if(f===c){if(p%b)throw S(Aa);if(h=p-o,h<0)throw S(Aa)}else if(h=q(f)*b,h+o>p)throw S(Aa);i=h/b}else i=Ea(d,!0),h=i*b,g=new $(h);for(n(a,"_d",{b:g,o:o,l:h,e:i,v:new _(g)});m<i;)E(a,m++)}),y=r[Y]=z(Wa),n(y,"constructor",r)):K(function(a){new r(null),new r(a)},!0)||(r=d(function(a,d,e,f){l(a,r,k);var g;return w(d)?d instanceof $||(g=v(d))==V||g==W?f!==c?new s(d,Fa(e,b),f):e!==c?new s(d,Fa(e,b)):new s(d):ya in d?Ja(r,d):La.call(r,d):new s(Ea(d,m))}),aa(t!==Function.prototype?B(s).concat(B(t)):B(s),function(a){a in r||n(r,a,s[a])}),r[Y]=y,e||(y.constructor=r));var F=y[ta],G=!!F&&("values"==F.name||F.name==c),H=Sa.values;n(r,va,!0),n(y,ya,k),n(y,za,!0),n(y,wa,r),(j?new r(1)[ua]==k:ua in y)||Q(y,ua,{get:function(){return k}}),x[k]=r,h(h.G+h.W+h.F*(r!=s),x),h(h.S,k,{BYTES_PER_ELEMENT:b,from:La,of:Ma}),X in y||n(y,X,b),h(h.P,k,Pa),L(k),h(h.P+h.F*Da,k,{set:Ra}),h(h.P+h.F*!G,k,Sa),h(h.P+h.F*(y.toString!=ra),k,{toString:ra}),h(h.P+h.F*g(function(){new r(1).slice()}),k,{slice:Qa}),h(h.P+h.F*(g(function(){return[1,2].toLocaleString()!=new r([1,2]).toLocaleString()})||!g(function(){y.toLocaleString.call([1,2])})),k,{toLocaleString:Oa}),J[k]=G?F:H,e||G||n(y,ta,H)}}else a.exports=function(){}},function(a,b,c){c(236)("Uint8",1,function(a){return function Uint8Array(b,c,d){return a(this,b,c,d)}})},function(a,b,c){c(236)("Uint8",1,function(a){return function Uint8ClampedArray(b,c,d){return a(this,b,c,d)}},!0)},function(a,b,c){c(236)("Int16",2,function(a){return function Int16Array(b,c,d){return a(this,b,c,d)}})},function(a,b,c){c(236)("Uint16",2,function(a){return function Uint16Array(b,c,d){return a(this,b,c,d)}})},function(a,b,c){c(236)("Int32",4,function(a){return function Int32Array(b,c,d){return a(this,b,c,d)}})},function(a,b,c){c(236)("Uint32",4,function(a){return function Uint32Array(b,c,d){return a(this,b,c,d)}})},function(a,b,c){c(236)("Float32",4,function(a){return function Float32Array(b,c,d){return a(this,b,c,d)}})},function(a,b,c){c(236)("Float64",8,function(a){return function Float64Array(b,c,d){return a(this,b,c,d)}})},function(a,b,d){var e=d(6),f=d(34)(!0);e(e.P,"Array",{includes:function includes(a){return f(this,a,arguments.length>1?arguments[1]:c)}}),d(178)("includes")},function(a,b,c){var d=c(6),e=c(125)(!0);d(d.P,"String",{at:function at(a){return e(this,a)}})},function(a,b,d){var e=d(6),f=d(248);e(e.P,"String",{padStart:function padStart(a){return f(this,a,arguments.length>1?arguments[1]:c,!0)}})},function(a,b,d){var e=d(35),f=d(85),g=d(33);a.exports=function(a,b,d,h){var i=String(g(a)),j=i.length,k=d===c?" ":String(d),l=e(b);if(l<=j||""==k)return i;var m=l-j,n=f.call(k,Math.ceil(m/k.length));return n.length>m&&(n=n.slice(0,m)),h?n+i:i+n}},function(a,b,d){var e=d(6),f=d(248);e(e.P,"String",{padEnd:function padEnd(a){return f(this,a,arguments.length>1?arguments[1]:c,!1)}})},function(a,b,c){c(81)("trimLeft",function(a){return function trimLeft(){return a(this,1)}},"trimStart")},function(a,b,c){c(81)("trimRight",function(a){return function trimRight(){return a(this,2)}},"trimEnd")},function(a,b,c){var d=c(6),e=c(33),f=c(35),g=c(128),h=c(188),i=RegExp.prototype,j=function(a,b){this._r=a,this._s=b};c(136)(j,"RegExp String",function next(){var a=this._r.exec(this._s);return{value:a,done:null===a}}),d(d.P,"String",{matchAll:function matchAll(a){if(e(this),!g(a))throw TypeError(a+" is not a regexp!");var b=String(this),c="flags"in i?String(a.flags):h.call(a),d=new RegExp(a.source,~c.indexOf("g")?c:"g"+c);return d.lastIndex=f(a.lastIndex),new j(d,b)}})},function(a,b,c){c(25)("asyncIterator")},function(a,b,c){c(25)("observable")},function(a,b,c){var d=c(6),e=c(221),f=c(30),g=c(49),h=c(155);d(d.S,"Object",{getOwnPropertyDescriptors:function getOwnPropertyDescriptors(a){for(var b,c=f(a),d=g.f,i=e(c),j={},k=0;i.length>k;)h(j,b=i[k++],d(c,b));return j}})},function(a,b,c){var d=c(6),e=c(257)(!1);d(d.S,"Object",{values:function values(a){return e(a)}})},function(a,b,c){var d=c(28),e=c(30),f=c(42).f;a.exports=function(a){return function(b){for(var c,g=e(b),h=d(g),i=h.length,j=0,k=[];i>j;)f.call(g,c=h[j++])&&k.push(a?[c,g[c]]:g[c]);return k}}},function(a,b,c){var d=c(6),e=c(257)(!0);d(d.S,"Object",{entries:function entries(a){return e(a)}})},function(a,b,c){var d=c(6),e=c(56),f=c(19),g=c(9);c(4)&&d(d.P+c(260),"Object",{__defineGetter__:function __defineGetter__(a,b){g.f(e(this),a,{get:f(b),enumerable:!0,configurable:!0})}})},function(a,b,c){a.exports=c(26)||!c(5)(function(){var a=Math.random();__defineSetter__.call(null,a,function(){}),delete c(2)[a]})},function(a,b,c){var d=c(6),e=c(56),f=c(19),g=c(9);c(4)&&d(d.P+c(260),"Object",{__defineSetter__:function __defineSetter__(a,b){g.f(e(this),a,{set:f(b),enumerable:!0,configurable:!0})}})},function(a,b,c){var d=c(6),e=c(56),f=c(14),g=c(57),h=c(49).f;c(4)&&d(d.P+c(260),"Object",{__lookupGetter__:function __lookupGetter__(a){var b,c=e(this),d=f(a,!0);do if(b=h(c,d))return b.get;while(c=g(c))}})},function(a,b,c){var d=c(6),e=c(56),f=c(14),g=c(57),h=c(49).f;c(4)&&d(d.P+c(260),"Object",{__lookupSetter__:function __lookupSetter__(a){var b,c=e(this),d=f(a,!0);do if(b=h(c,d))return b.set;while(c=g(c))}})},function(a,b,c){var d=c(6);d(d.P+d.R,"Map",{toJSON:c(265)("Map")})},function(a,b,c){var d=c(73),e=c(266);a.exports=function(a){return function toJSON(){if(d(this)!=a)throw TypeError(a+"#toJSON isn't generic");return e(this)}}},function(a,b,c){var d=c(198);a.exports=function(a,b){var c=[];return d(a,!1,c.push,c,b),c}},function(a,b,c){var d=c(6);d(d.P+d.R,"Set",{toJSON:c(265)("Set")})},function(a,b,c){var d=c(6);d(d.S,"System",{global:c(2)})},function(a,b,c){var d=c(6),e=c(32);d(d.S,"Error",{isError:function isError(a){return"Error"===e(a)}})},function(a,b,c){var d=c(6);d(d.S,"Math",{iaddh:function iaddh(a,b,c,d){var e=a>>>0,f=b>>>0,g=c>>>0;return f+(d>>>0)+((e&g|(e|g)&~(e+g>>>0))>>>31)|0}})},function(a,b,c){var d=c(6);d(d.S,"Math",{isubh:function isubh(a,b,c,d){var e=a>>>0,f=b>>>0,g=c>>>0;return f-(d>>>0)-((~e&g|~(e^g)&e-g>>>0)>>>31)|0}})},function(a,b,c){var d=c(6);d(d.S,"Math",{imulh:function imulh(a,b){var c=65535,d=+a,e=+b,f=d&c,g=e&c,h=d>>16,i=e>>16,j=(h*g>>>0)+(f*g>>>16);return h*i+(j>>16)+((f*i>>>0)+(j&c)>>16)}})},function(a,b,c){var d=c(6);d(d.S,"Math",{umulh:function umulh(a,b){var c=65535,d=+a,e=+b,f=d&c,g=e&c,h=d>>>16,i=e>>>16,j=(h*g>>>0)+(f*g>>>16);return h*i+(j>>>16)+((f*i>>>0)+(j&c)>>>16)}})},function(a,b,c){var d=c(275),e=c(10),f=d.key,g=d.set;d.exp({defineMetadata:function defineMetadata(a,b,c,d){g(a,b,e(c),f(d))}})},function(a,b,d){var e=d(203),f=d(6),g=d(21)("metadata"),h=g.store||(g.store=new(d(207))),i=function(a,b,d){var f=h.get(a);if(!f){if(!d)return c;h.set(a,f=new e)}var g=f.get(b);if(!g){if(!d)return c;f.set(b,g=new e)}return g},j=function(a,b,d){var e=i(b,d,!1);return e!==c&&e.has(a)},k=function(a,b,d){var e=i(b,d,!1);return e===c?c:e.get(a)},l=function(a,b,c,d){i(c,d,!0).set(a,b)},m=function(a,b){var c=i(a,b,!1),d=[];return c&&c.forEach(function(a,b){d.push(b)}),d},n=function(a){return a===c||"symbol"==typeof a?a:String(a)},o=function(a){f(f.S,"Reflect",a)};a.exports={store:h,map:i,has:j,get:k,set:l,keys:m,key:n,exp:o}},function(a,b,d){var e=d(275),f=d(10),g=e.key,h=e.map,i=e.store;e.exp({deleteMetadata:function deleteMetadata(a,b){var d=arguments.length<3?c:g(arguments[2]),e=h(f(b),d,!1);if(e===c||!e["delete"](a))return!1;if(e.size)return!0;var j=i.get(b);return j["delete"](d),!!j.size||i["delete"](b)}})},function(a,b,d){var e=d(275),f=d(10),g=d(57),h=e.has,i=e.get,j=e.key,k=function(a,b,d){var e=h(a,b,d);if(e)return i(a,b,d);var f=g(b);return null!==f?k(a,f,d):c};e.exp({getMetadata:function getMetadata(a,b){return k(a,f(b),arguments.length<3?c:j(arguments[2]))}})},function(a,b,d){var e=d(206),f=d(266),g=d(275),h=d(10),i=d(57),j=g.keys,k=g.key,l=function(a,b){var c=j(a,b),d=i(a);if(null===d)return c;var g=l(d,b);return g.length?c.length?f(new e(c.concat(g))):g:c};g.exp({getMetadataKeys:function getMetadataKeys(a){return l(h(a),arguments.length<2?c:k(arguments[1]))}})},function(a,b,d){var e=d(275),f=d(10),g=e.get,h=e.key;e.exp({getOwnMetadata:function getOwnMetadata(a,b){return g(a,f(b),arguments.length<3?c:h(arguments[2]))}})},function(a,b,d){var e=d(275),f=d(10),g=e.keys,h=e.key;e.exp({getOwnMetadataKeys:function getOwnMetadataKeys(a){return g(f(a),arguments.length<2?c:h(arguments[1]))}})},function(a,b,d){var e=d(275),f=d(10),g=d(57),h=e.has,i=e.key,j=function(a,b,c){var d=h(a,b,c);if(d)return!0;var e=g(b);return null!==e&&j(a,e,c)};e.exp({hasMetadata:function hasMetadata(a,b){return j(a,f(b),arguments.length<3?c:i(arguments[2]))}})},function(a,b,d){var e=d(275),f=d(10),g=e.has,h=e.key;e.exp({hasOwnMetadata:function hasOwnMetadata(a,b){return g(a,f(b),arguments.length<3?c:h(arguments[2]))}})},function(a,b,d){var e=d(275),f=d(10),g=d(19),h=e.key,i=e.set;e.exp({metadata:function metadata(a,b){return function decorator(d,e){i(a,b,(e!==c?f:g)(d),h(e))}}})},function(a,b,c){var d=c(6),e=c(201)(),f=c(2).process,g="process"==c(32)(f);d(d.G,{asap:function asap(a){var b=g&&f.domain;e(b?b.bind(a):a)}})},function(a,b,d){var e=d(6),f=d(2),g=d(7),h=d(201)(),i=d(23)("observable"),j=d(19),k=d(10),l=d(197),m=d(202),n=d(8),o=d(198),p=o.RETURN,q=function(a){return null==a?c:j(a)},r=function(a){var b=a._c;b&&(a._c=c,b())},s=function(a){return a._o===c},t=function(a){s(a)||(a._o=c,r(a))},u=function(a,b){k(a),this._c=c,this._o=a,a=new v(this);try{var d=b(a),e=d;null!=d&&("function"==typeof d.unsubscribe?d=function(){e.unsubscribe()}:j(d),this._c=d)}catch(f){return void a.error(f)}s(this)&&r(this)};u.prototype=m({},{unsubscribe:function unsubscribe(){t(this)}});var v=function(a){this._s=a};v.prototype=m({},{next:function next(a){var b=this._s;if(!s(b)){var c=b._o;try{var d=q(c.next);if(d)return d.call(c,a)}catch(e){try{t(b)}finally{throw e}}}},error:function error(a){var b=this._s;if(s(b))throw a;var d=b._o;b._o=c;try{var e=q(d.error);if(!e)throw a;a=e.call(d,a)}catch(f){try{r(b)}finally{throw f}}return r(b),a},complete:function complete(a){var b=this._s;if(!s(b)){var d=b._o;b._o=c;try{var e=q(d.complete);a=e?e.call(d,a):c}catch(f){try{r(b)}finally{throw f}}return r(b),a}}});var w=function Observable(a){l(this,w,"Observable","_f")._f=j(a)};m(w.prototype,{subscribe:function subscribe(a){return new u(a,this._f)},forEach:function forEach(a){var b=this;return new(g.Promise||f.Promise)(function(c,d){j(a);var e=b.subscribe({next:function(b){try{return a(b)}catch(c){d(c),e.unsubscribe()}},error:d,complete:c})})}}),m(w,{from:function from(a){var b="function"==typeof this?this:w,c=q(k(a)[i]);if(c){var d=k(c.call(a));return d.constructor===b?d:new b(function(a){return d.subscribe(a)})}return new b(function(b){var c=!1;return h(function(){if(!c){try{if(o(a,!1,function(a){if(b.next(a),c)return p})===p)return}catch(d){if(c)throw d;return void b.error(d)}b.complete()}}),function(){c=!0}})},of:function of(){for(var a=0,b=arguments.length,c=Array(b);a<b;)c[a]=arguments[a++];return new("function"==typeof this?this:w)(function(a){var b=!1;return h(function(){if(!b){for(var d=0;d<c.length;++d)if(a.next(c[d]),b)return;a.complete()}}),function(){b=!0}})}}),n(w.prototype,i,function(){return this}),e(e.G,{Observable:w}),d(186)("Observable")},function(a,b,c){var d=c(6),e=c(200);d(d.G+d.B,{setImmediate:e.set,clearImmediate:e.clear})},function(a,b,c){for(var d=c(183),e=c(16),f=c(2),g=c(8),h=c(135),i=c(23),j=i("iterator"),k=i("toStringTag"),l=h.Array,m=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],n=0;n<5;n++){var o,p=m[n],q=f[p],r=q&&q.prototype;if(r){r[j]||g(r,j,l),r[k]||g(r,k,p),h[p]=l;for(o in d)r[o]||e(r,o,d[o],!0)}}},function(a,b,c){var d=c(2),e=c(6),f=c(76),g=c(289),h=d.navigator,i=!!h&&/MSIE .\./.test(h.userAgent),j=function(a){return i?function(b,c){return a(f(g,[].slice.call(arguments,2),"function"==typeof b?b:Function(b)),c)}:a};e(e.G+e.B+e.F*i,{setTimeout:j(d.setTimeout),setInterval:j(d.setInterval)})},function(a,b,c){var d=c(290),e=c(76),f=c(19);a.exports=function(){for(var a=f(this),b=arguments.length,c=Array(b),g=0,h=d._,i=!1;b>g;)(c[g]=arguments[g++])===h&&(i=!0);return function(){var d,f=this,g=arguments.length,j=0,k=0;if(!i&&!g)return e(a,c,f);if(d=c.slice(),i)for(;b>j;j++)d[j]===h&&(d[j]=arguments[k++]);for(;g>k;)d.push(arguments[k++]);return e(a,d,f)}}},function(a,b,c){a.exports=c(2)}]),"undefined"!=typeof module&&module.exports?module.exports=a:"function"==typeof define&&define.amd?define(function(){return a}):b.core=a}(1,1);
//# sourceMappingURL=shim.min.js.map
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	__webpack_require__(1);
	var event_target_1 = __webpack_require__(2);
	var define_property_1 = __webpack_require__(4);
	var register_element_1 = __webpack_require__(5);
	var property_descriptor_1 = __webpack_require__(6);
	var timers_1 = __webpack_require__(8);
	var utils_1 = __webpack_require__(3);
	var set = 'set';
	var clear = 'clear';
	var blockingMethods = ['alert', 'prompt', 'confirm'];
	var _global = typeof window == 'undefined' ? global : window;
	timers_1.patchTimer(_global, set, clear, 'Timeout');
	timers_1.patchTimer(_global, set, clear, 'Interval');
	timers_1.patchTimer(_global, set, clear, 'Immediate');
	timers_1.patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
	timers_1.patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
	timers_1.patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
	for (var i = 0; i < blockingMethods.length; i++) {
	    var name = blockingMethods[i];
	    utils_1.patchMethod(_global, name, function (delegate, symbol, name) {
	        return function (s, args) {
	            return Zone.current.run(delegate, _global, args, name);
	        };
	    });
	}
	event_target_1.eventTargetPatch(_global);
	property_descriptor_1.propertyDescriptorPatch(_global);
	utils_1.patchClass('MutationObserver');
	utils_1.patchClass('WebKitMutationObserver');
	utils_1.patchClass('FileReader');
	define_property_1.propertyPatch();
	register_element_1.registerElementPatch(_global);
	// Treat XMLHTTPRequest as a macrotask.
	patchXHR(_global);
	var XHR_TASK = utils_1.zoneSymbol('xhrTask');
	function patchXHR(window) {
	    function findPendingTask(target) {
	        var pendingTask = target[XHR_TASK];
	        return pendingTask;
	    }
	    function scheduleTask(task) {
	        var data = task.data;
	        data.target.addEventListener('readystatechange', function () {
	            if (data.target.readyState === XMLHttpRequest.DONE) {
	                if (!data.aborted) {
	                    task.invoke();
	                }
	            }
	        });
	        var storedTask = data.target[XHR_TASK];
	        if (!storedTask) {
	            data.target[XHR_TASK] = task;
	        }
	        setNative.apply(data.target, data.args);
	        return task;
	    }
	    function placeholderCallback() {
	    }
	    function clearTask(task) {
	        var data = task.data;
	        // Note - ideally, we would call data.target.removeEventListener here, but it's too late
	        // to prevent it from firing. So instead, we store info for the event listener.
	        data.aborted = true;
	        return clearNative.apply(data.target, data.args);
	    }
	    var setNative = utils_1.patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {
	        var zone = Zone.current;
	        var options = {
	            target: self,
	            isPeriodic: false,
	            delay: null,
	            args: args,
	            aborted: false
	        };
	        return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
	    }; });
	    var clearNative = utils_1.patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {
	        var task = findPendingTask(self);
	        if (task && typeof task.type == 'string') {
	            // If the XHR has already completed, do nothing.
	            if (task.cancelFn == null) {
	                return;
	            }
	            task.zone.cancelTask(task);
	        }
	        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task to cancel. Do nothing.
	    }; });
	}
	/// GEO_LOCATION
	if (_global['navigator'] && _global['navigator'].geolocation) {
	    utils_1.patchPrototype(_global['navigator'].geolocation, [
	        'getCurrentPosition',
	        'watchPosition'
	    ]);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {;
	;
	var Zone = (function (global) {
	    if (global.Zone) {
	        throw new Error('Zone already loaded.');
	    }
	    var Zone = (function () {
	        function Zone(parent, zoneSpec) {
	            this._properties = null;
	            this._parent = parent;
	            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	            this._properties = zoneSpec && zoneSpec.properties || {};
	            this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	        }
	        Object.defineProperty(Zone, "current", {
	            get: function () { return _currentZone; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(Zone, "currentTask", {
	            get: function () { return _currentTask; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(Zone.prototype, "parent", {
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(Zone.prototype, "name", {
	            get: function () { return this._name; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Zone.prototype.get = function (key) {
	            var zone = this.getZoneWith(key);
	            if (zone)
	                return zone._properties[key];
	        };
	        Zone.prototype.getZoneWith = function (key) {
	            var current = this;
	            while (current) {
	                if (current._properties.hasOwnProperty(key)) {
	                    return current;
	                }
	                current = current._parent;
	            }
	            return null;
	        };
	        Zone.prototype.fork = function (zoneSpec) {
	            if (!zoneSpec)
	                throw new Error('ZoneSpec required!');
	            return this._zoneDelegate.fork(this, zoneSpec);
	        };
	        Zone.prototype.wrap = function (callback, source) {
	            if (typeof callback !== 'function') {
	                throw new Error('Expecting function got: ' + callback);
	            }
	            var _callback = this._zoneDelegate.intercept(this, callback, source);
	            var zone = this;
	            return function () {
	                return zone.runGuarded(_callback, this, arguments, source);
	            };
	        };
	        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                _currentZone = oldZone;
	            }
	        };
	        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZone = oldZone;
	            }
	        };
	        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	            task.runCount++;
	            if (task.zone != this)
	                throw new Error('A task can only be run in the zone which created it! (Creation: ' +
	                    task.zone.name + '; Execution: ' + this.name + ')');
	            var previousTask = _currentTask;
	            _currentTask = task;
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
	                    task.cancelFn = null;
	                }
	                try {
	                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZone = oldZone;
	                _currentTask = previousTask;
	            }
	        };
	        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
	        };
	        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.cancelTask = function (task) {
	            var value = this._zoneDelegate.cancelTask(this, task);
	            task.runCount = -1;
	            task.cancelFn = null;
	            return value;
	        };
	        Zone.__symbol__ = __symbol__;
	        return Zone;
	    }());
	    ;
	    var ZoneDelegate = (function () {
	        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
	            this.zone = zone;
	            this._parentDelegate = parentDelegate;
	            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	            this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	            this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	            this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	            this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	            this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	            this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	            this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	            this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	            this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	            this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	            this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
	            this._hasTaskDlgt = zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
	        }
	        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	            return this._forkZS
	                ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec)
	                : new Zone(targetZone, zoneSpec);
	        };
	        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	            return this._interceptZS
	                ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source)
	                : callback;
	        };
	        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	            return this._invokeZS
	                ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source)
	                : callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.handleError = function (targetZone, error) {
	            return this._handleErrorZS
	                ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error)
	                : true;
	        };
	        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	            try {
	                if (this._scheduleTaskZS) {
	                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
	                }
	                else if (task.scheduleFn) {
	                    task.scheduleFn(task);
	                }
	                else if (task.type == 'microTask') {
	                    scheduleMicroTask(task);
	                }
	                else {
	                    throw new Error('Task is missing scheduleFn.');
	                }
	                return task;
	            }
	            finally {
	                if (targetZone == this.zone) {
	                    this._updateTaskCount(task.type, 1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	            try {
	                return this._invokeTaskZS
	                    ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs)
	                    : task.callback.apply(applyThis, applyArgs);
	            }
	            finally {
	                if (targetZone == this.zone && (task.type != 'eventTask') && !(task.data && task.data.isPeriodic)) {
	                    this._updateTaskCount(task.type, -1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	            var value;
	            if (this._cancelTaskZS) {
	                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
	            }
	            else if (!task.cancelFn) {
	                throw new Error('Task does not support cancellation, or is already canceled.');
	            }
	            else {
	                value = task.cancelFn(task);
	            }
	            if (targetZone == this.zone) {
	                // this should not be in the finally block, because exceptions assume not canceled.
	                this._updateTaskCount(task.type, -1);
	            }
	            return value;
	        };
	        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	            return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
	        };
	        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	            var counts = this._taskCounts;
	            var prev = counts[type];
	            var next = counts[type] = prev + count;
	            if (next < 0) {
	                throw new Error('More tasks executed then were scheduled.');
	            }
	            if (prev == 0 || next == 0) {
	                var isEmpty = {
	                    microTask: counts.microTask > 0,
	                    macroTask: counts.macroTask > 0,
	                    eventTask: counts.eventTask > 0,
	                    change: type
	                };
	                try {
	                    this.hasTask(this.zone, isEmpty);
	                }
	                finally {
	                    if (this._parentDelegate) {
	                        this._parentDelegate._updateTaskCount(type, count);
	                    }
	                }
	            }
	        };
	        return ZoneDelegate;
	    }());
	    var ZoneTask = (function () {
	        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
	            this.runCount = 0;
	            this.type = type;
	            this.zone = zone;
	            this.source = source;
	            this.data = options;
	            this.scheduleFn = scheduleFn;
	            this.cancelFn = cancelFn;
	            this.callback = callback;
	            var self = this;
	            this.invoke = function () {
	                _numberOfNestedTaskFrames++;
	                try {
	                    return zone.runTask(self, this, arguments);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	        }
	        ZoneTask.prototype.toString = function () {
	            if (this.data && typeof this.data.handleId !== 'undefined') {
	                return this.data.handleId;
	            }
	            else {
	                return this.toString();
	            }
	        };
	        return ZoneTask;
	    }());
	    function __symbol__(name) { return '__zone_symbol__' + name; }
	    ;
	    var symbolSetTimeout = __symbol__('setTimeout');
	    var symbolPromise = __symbol__('Promise');
	    var symbolThen = __symbol__('then');
	    var _currentZone = new Zone(null, null);
	    var _currentTask = null;
	    var _microTaskQueue = [];
	    var _isDrainingMicrotaskQueue = false;
	    var _uncaughtPromiseErrors = [];
	    var _numberOfNestedTaskFrames = 0;
	    function scheduleQueueDrain() {
	        // if we are not running in any task, and there has not been anything scheduled
	        // we must bootstrap the initial task creation by manually scheduling the drain
	        if (_numberOfNestedTaskFrames == 0 && _microTaskQueue.length == 0) {
	            // We are not running in Task, so we need to kickstart the microtask queue.
	            if (global[symbolPromise]) {
	                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
	            }
	            else {
	                global[symbolSetTimeout](drainMicroTaskQueue, 0);
	            }
	        }
	    }
	    function scheduleMicroTask(task) {
	        scheduleQueueDrain();
	        _microTaskQueue.push(task);
	    }
	    function consoleError(e) {
	        var rejection = e && e.rejection;
	        if (rejection) {
	            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	        }
	        console.error(e);
	    }
	    function drainMicroTaskQueue() {
	        if (!_isDrainingMicrotaskQueue) {
	            _isDrainingMicrotaskQueue = true;
	            while (_microTaskQueue.length) {
	                var queue = _microTaskQueue;
	                _microTaskQueue = [];
	                for (var i = 0; i < queue.length; i++) {
	                    var task = queue[i];
	                    try {
	                        task.zone.runTask(task, null, null);
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                }
	            }
	            while (_uncaughtPromiseErrors.length) {
	                var _loop_1 = function() {
	                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                    try {
	                        uncaughtPromiseError.zone.runGuarded(function () { throw uncaughtPromiseError; });
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                };
	                while (_uncaughtPromiseErrors.length) {
	                    _loop_1();
	                }
	            }
	            _isDrainingMicrotaskQueue = false;
	        }
	    }
	    function isThenable(value) {
	        return value && value.then;
	    }
	    function forwardResolution(value) { return value; }
	    function forwardRejection(rejection) { return ZoneAwarePromise.reject(rejection); }
	    var symbolState = __symbol__('state');
	    var symbolValue = __symbol__('value');
	    var source = 'Promise.then';
	    var UNRESOLVED = null;
	    var RESOLVED = true;
	    var REJECTED = false;
	    var REJECTED_NO_CATCH = 0;
	    function makeResolver(promise, state) {
	        return function (v) {
	            resolvePromise(promise, state, v);
	            // Do not return value or you will break the Promise spec.
	        };
	    }
	    function resolvePromise(promise, state, value) {
	        if (promise[symbolState] === UNRESOLVED) {
	            if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
	                clearRejectedNoCatch(value);
	                resolvePromise(promise, value[symbolState], value[symbolValue]);
	            }
	            else if (isThenable(value)) {
	                value.then(makeResolver(promise, state), makeResolver(promise, false));
	            }
	            else {
	                promise[symbolState] = state;
	                var queue = promise[symbolValue];
	                promise[symbolValue] = value;
	                for (var i = 0; i < queue.length;) {
	                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                }
	                if (queue.length == 0 && state == REJECTED) {
	                    promise[symbolState] = REJECTED_NO_CATCH;
	                    try {
	                        throw new Error("Uncaught (in promise): " + value);
	                    }
	                    catch (e) {
	                        var error = e;
	                        error.rejection = value;
	                        error.promise = promise;
	                        error.zone = Zone.current;
	                        error.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(error);
	                        scheduleQueueDrain();
	                    }
	                }
	            }
	        }
	        // Resolving an already resolved promise is a noop.
	        return promise;
	    }
	    function clearRejectedNoCatch(promise) {
	        if (promise[symbolState] === REJECTED_NO_CATCH) {
	            promise[symbolState] = REJECTED;
	            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                if (promise === _uncaughtPromiseErrors[i].promise) {
	                    _uncaughtPromiseErrors.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    }
	    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	        clearRejectedNoCatch(promise);
	        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
	        zone.scheduleMicroTask(source, function () {
	            try {
	                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
	            }
	            catch (error) {
	                resolvePromise(chainPromise, false, error);
	            }
	        });
	    }
	    var ZoneAwarePromise = (function () {
	        function ZoneAwarePromise(executor) {
	            var promise = this;
	            if (!(promise instanceof ZoneAwarePromise)) {
	                throw new Error('Must be an instanceof Promise.');
	            }
	            promise[symbolState] = UNRESOLVED;
	            promise[symbolValue] = []; // queue;
	            try {
	                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	            }
	            catch (e) {
	                resolvePromise(promise, false, e);
	            }
	        }
	        ZoneAwarePromise.resolve = function (value) {
	            return resolvePromise(new this(null), RESOLVED, value);
	        };
	        ZoneAwarePromise.reject = function (error) {
	            return resolvePromise(new this(null), REJECTED, error);
	        };
	        ZoneAwarePromise.race = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) { resolve = res; reject = rej; });
	            function onResolve(value) { promise && (promise = null || resolve(value)); }
	            function onReject(error) { promise && (promise = null || reject(error)); }
	            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                var value = values_1[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then(onResolve, onReject);
	            }
	            return promise;
	        };
	        ZoneAwarePromise.all = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) { resolve = res; reject = rej; });
	            var count = 0;
	            var resolvedValues = [];
	            function onReject(error) { promise && reject(error); promise = null; }
	            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                var value = values_2[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then((function (index) { return function (value) {
	                    resolvedValues[index] = value;
	                    count--;
	                    if (promise && !count) {
	                        resolve(resolvedValues);
	                    }
	                    promise == null;
	                }; })(count), onReject);
	                count++;
	            }
	            if (!count)
	                resolve(resolvedValues);
	            return promise;
	        };
	        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	            var chainPromise = new this.constructor(null);
	            var zone = Zone.current;
	            if (this[symbolState] == UNRESOLVED) {
	                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	            }
	            else {
	                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	            }
	            return chainPromise;
	        };
	        ZoneAwarePromise.prototype.catch = function (onRejected) {
	            return this.then(null, onRejected);
	        };
	        return ZoneAwarePromise;
	    }());
	    var NativePromise = global[__symbol__('Promise')] = global.Promise;
	    global.Promise = ZoneAwarePromise;
	    if (NativePromise) {
	        var NativePromiseProtototype = NativePromise.prototype;
	        var NativePromiseThen_1 = NativePromiseProtototype[__symbol__('then')]
	            = NativePromiseProtototype.then;
	        NativePromiseProtototype.then = function (onResolve, onReject) {
	            var nativePromise = this;
	            return new ZoneAwarePromise(function (resolve, reject) {
	                NativePromiseThen_1.call(nativePromise, resolve, reject);
	            }).then(onResolve, onReject);
	        };
	    }
	    // This is not part of public API, but it is usefull for tests, so we expose it.
	    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	    return global.Zone = Zone;
	})(typeof window === 'undefined' ? global : window);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var utils_1 = __webpack_require__(3);
	var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
	var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex'.split(',');
	var EVENT_TARGET = 'EventTarget';
	function eventTargetPatch(_global) {
	    var apis = [];
	    var isWtf = _global['wtf'];
	    if (isWtf) {
	        // Workaround for: https://github.com/google/tracing-framework/issues/555
	        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
	    }
	    else if (_global[EVENT_TARGET]) {
	        apis.push(EVENT_TARGET);
	    }
	    else {
	        // Note: EventTarget is not available in all browsers,
	        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	        apis = NO_EVENT_TARGET;
	    }
	    for (var i = 0; i < apis.length; i++) {
	        var type = _global[apis[i]];
	        utils_1.patchEventTargetMethods(type && type.prototype);
	    }
	}
	exports.eventTargetPatch = eventTargetPatch;


/***/ },
/* 3 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Suppress closure compiler errors about unknown 'process' variable
	 * @fileoverview
	 * @suppress {undefinedVars}
	 */
	"use strict";
	exports.zoneSymbol = Zone['__symbol__'];
	var _global = typeof window == 'undefined' ? global : window;
	function bindArguments(args, source) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (typeof args[i] === 'function') {
	            args[i] = Zone.current.wrap(args[i], source + '_' + i);
	        }
	    }
	    return args;
	}
	exports.bindArguments = bindArguments;
	;
	function patchPrototype(prototype, fnNames) {
	    var source = prototype.constructor['name'];
	    var _loop_1 = function(i) {
	        var name_1 = fnNames[i];
	        var delegate = prototype[name_1];
	        if (delegate) {
	            prototype[name_1] = (function (delegate) {
	                return function () {
	                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
	                };
	            })(delegate);
	        }
	    };
	    for (var i = 0; i < fnNames.length; i++) {
	        _loop_1(i);
	    }
	}
	exports.patchPrototype = patchPrototype;
	;
	exports.isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
	exports.isNode = (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]');
	exports.isBrowser = !exports.isNode && !exports.isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
	function patchProperty(obj, prop) {
	    var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
	        enumerable: true,
	        configurable: true
	    };
	    // A property descriptor cannot have getter/setter and be writable
	    // deleting the writable and value properties avoids this error:
	    //
	    // TypeError: property descriptors must not specify a value or be writable when a
	    // getter or setter has been specified
	    delete desc.writable;
	    delete desc.value;
	    // substr(2) cuz 'onclick' -> 'click', etc
	    var eventName = prop.substr(2);
	    var _prop = '_' + prop;
	    desc.set = function (fn) {
	        if (this[_prop]) {
	            this.removeEventListener(eventName, this[_prop]);
	        }
	        if (typeof fn === 'function') {
	            var wrapFn = function (event) {
	                var result;
	                result = fn.apply(this, arguments);
	                if (result != undefined && !result)
	                    event.preventDefault();
	            };
	            this[_prop] = wrapFn;
	            this.addEventListener(eventName, wrapFn, false);
	        }
	        else {
	            this[_prop] = null;
	        }
	    };
	    desc.get = function () {
	        return this[_prop];
	    };
	    Object.defineProperty(obj, prop, desc);
	}
	exports.patchProperty = patchProperty;
	;
	function patchOnProperties(obj, properties) {
	    var onProperties = [];
	    for (var prop in obj) {
	        if (prop.substr(0, 2) == 'on') {
	            onProperties.push(prop);
	        }
	    }
	    for (var j = 0; j < onProperties.length; j++) {
	        patchProperty(obj, onProperties[j]);
	    }
	    if (properties) {
	        for (var i = 0; i < properties.length; i++) {
	            patchProperty(obj, 'on' + properties[i]);
	        }
	    }
	}
	exports.patchOnProperties = patchOnProperties;
	;
	var EVENT_TASKS = exports.zoneSymbol('eventTasks');
	var ADD_EVENT_LISTENER = 'addEventListener';
	var REMOVE_EVENT_LISTENER = 'removeEventListener';
	var SYMBOL_ADD_EVENT_LISTENER = exports.zoneSymbol(ADD_EVENT_LISTENER);
	var SYMBOL_REMOVE_EVENT_LISTENER = exports.zoneSymbol(REMOVE_EVENT_LISTENER);
	function findExistingRegisteredTask(target, handler, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            if (data.handler === handler
	                && data.useCapturing === capture
	                && data.eventName === name) {
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	                return eventTask;
	            }
	        }
	    }
	    return null;
	}
	function attachRegisteredEvent(target, eventTask) {
	    var eventTasks = target[EVENT_TASKS];
	    if (!eventTasks) {
	        eventTasks = target[EVENT_TASKS] = [];
	    }
	    eventTasks.push(eventTask);
	}
	function scheduleEventListener(eventTask) {
	    var meta = eventTask.data;
	    attachRegisteredEvent(meta.target, eventTask);
	    return meta.target[SYMBOL_ADD_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);
	}
	function cancelEventListener(eventTask) {
	    var meta = eventTask.data;
	    findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
	    meta.target[SYMBOL_REMOVE_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);
	}
	function zoneAwareAddEventListener(self, args) {
	    var eventName = args[0];
	    var handler = args[1];
	    var useCapturing = args[2] || false;
	    // - Inside a Web Worker, `this` is undefined, the context is `global`
	    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	    // see https://github.com/angular/zone.js/issues/190
	    var target = self || _global;
	    var delegate = null;
	    if (typeof handler == 'function') {
	        delegate = handler;
	    }
	    else if (handler && handler.handleEvent) {
	        delegate = function (event) { return handler.handleEvent(event); };
	    }
	    var validZoneHandler = false;
	    try {
	        // In cross site contexts (such as WebDriver frameworks like Selenium),
	        // accessing the handler object here will cause an exception to be thrown which
	        // will fail tests prematurely.
	        validZoneHandler = handler && handler.toString() === "[object FunctionWrapper]";
	    }
	    catch (e) {
	        // Returning nothing here is fine, because objects in a cross-site context are unusable
	        return;
	    }
	    // Ignore special listeners of IE11 & Edge dev tools, see https://github.com/angular/zone.js/issues/150
	    if (!delegate || validZoneHandler) {
	        return target[SYMBOL_ADD_EVENT_LISTENER](eventName, handler, useCapturing);
	    }
	    var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);
	    if (eventTask) {
	        // we already registered, so this will have noop.
	        return target[SYMBOL_ADD_EVENT_LISTENER](eventName, eventTask.invoke, useCapturing);
	    }
	    var zone = Zone.current;
	    var source = target.constructor['name'] + '.addEventListener:' + eventName;
	    var data = {
	        target: target,
	        eventName: eventName,
	        name: eventName,
	        useCapturing: useCapturing,
	        handler: handler
	    };
	    zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
	}
	function zoneAwareRemoveEventListener(self, args) {
	    var eventName = args[0];
	    var handler = args[1];
	    var useCapturing = args[2] || false;
	    // - Inside a Web Worker, `this` is undefined, the context is `global`
	    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	    // see https://github.com/angular/zone.js/issues/190
	    var target = self || _global;
	    var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);
	    if (eventTask) {
	        eventTask.zone.cancelTask(eventTask);
	    }
	    else {
	        target[SYMBOL_REMOVE_EVENT_LISTENER](eventName, handler, useCapturing);
	    }
	}
	function patchEventTargetMethods(obj) {
	    if (obj && obj.addEventListener) {
	        patchMethod(obj, ADD_EVENT_LISTENER, function () { return zoneAwareAddEventListener; });
	        patchMethod(obj, REMOVE_EVENT_LISTENER, function () { return zoneAwareRemoveEventListener; });
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	exports.patchEventTargetMethods = patchEventTargetMethods;
	;
	var originalInstanceKey = exports.zoneSymbol('originalInstance');
	// wrap some native API on `window`
	function patchClass(className) {
	    var OriginalClass = _global[className];
	    if (!OriginalClass)
	        return;
	    _global[className] = function () {
	        var a = bindArguments(arguments, className);
	        switch (a.length) {
	            case 0:
	                this[originalInstanceKey] = new OriginalClass();
	                break;
	            case 1:
	                this[originalInstanceKey] = new OriginalClass(a[0]);
	                break;
	            case 2:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
	                break;
	            case 3:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
	                break;
	            case 4:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
	                break;
	            default: throw new Error('Arg list too long.');
	        }
	    };
	    var instance = new OriginalClass(function () { });
	    var prop;
	    for (prop in instance) {
	        // https://bugs.webkit.org/show_bug.cgi?id=44721
	        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
	            continue;
	        (function (prop) {
	            if (typeof instance[prop] === 'function') {
	                _global[className].prototype[prop] = function () {
	                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	                };
	            }
	            else {
	                Object.defineProperty(_global[className].prototype, prop, {
	                    set: function (fn) {
	                        if (typeof fn === 'function') {
	                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
	                        }
	                        else {
	                            this[originalInstanceKey][prop] = fn;
	                        }
	                    },
	                    get: function () {
	                        return this[originalInstanceKey][prop];
	                    }
	                });
	            }
	        }(prop));
	    }
	    for (prop in OriginalClass) {
	        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	            _global[className][prop] = OriginalClass[prop];
	        }
	    }
	}
	exports.patchClass = patchClass;
	;
	function createNamedFn(name, delegate) {
	    try {
	        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
	    }
	    catch (e) {
	        // if we fail, we must be CSP, just return delegate.
	        return function () {
	            return delegate(this, arguments);
	        };
	    }
	}
	exports.createNamedFn = createNamedFn;
	function patchMethod(target, name, patchFn) {
	    var proto = target;
	    while (proto && !proto.hasOwnProperty(name)) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    if (!proto && target[name]) {
	        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	        proto = target;
	    }
	    var delegateName = exports.zoneSymbol(name);
	    var delegate;
	    if (proto && !(delegate = proto[delegateName])) {
	        delegate = proto[delegateName] = proto[name];
	        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
	    }
	    return delegate;
	}
	exports.patchMethod = patchMethod;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var utils_1 = __webpack_require__(3);
	/*
	 * This is necessary for Chrome and Chrome mobile, to enable
	 * things like redefining `createdCallback` on an element.
	 */
	var _defineProperty = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = utils_1.zoneSymbol('unconfigurables');
	function propertyPatch() {
	    Object.defineProperty = function (obj, prop, desc) {
	        if (isUnconfigurable(obj, prop)) {
	            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	        }
	        var originalConfigurableFlag = desc.configurable;
	        if (prop !== 'prototype') {
	            desc = rewriteDescriptor(obj, prop, desc);
	        }
	        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	    };
	    Object.defineProperties = function (obj, props) {
	        Object.keys(props).forEach(function (prop) {
	            Object.defineProperty(obj, prop, props[prop]);
	        });
	        return obj;
	    };
	    Object.create = function (obj, proto) {
	        if (typeof proto === 'object' && !Object.isFrozen(proto)) {
	            Object.keys(proto).forEach(function (prop) {
	                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	            });
	        }
	        return _create(obj, proto);
	    };
	    Object.getOwnPropertyDescriptor = function (obj, prop) {
	        var desc = _getOwnPropertyDescriptor(obj, prop);
	        if (isUnconfigurable(obj, prop)) {
	            desc.configurable = false;
	        }
	        return desc;
	    };
	}
	exports.propertyPatch = propertyPatch;
	;
	function _redefineProperty(obj, prop, desc) {
	    var originalConfigurableFlag = desc.configurable;
	    desc = rewriteDescriptor(obj, prop, desc);
	    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	}
	exports._redefineProperty = _redefineProperty;
	;
	function isUnconfigurable(obj, prop) {
	    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}
	function rewriteDescriptor(obj, prop, desc) {
	    desc.configurable = true;
	    if (!desc.configurable) {
	        if (!obj[unconfigurablesKey]) {
	            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	        }
	        obj[unconfigurablesKey][prop] = true;
	    }
	    return desc;
	}
	function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
	    try {
	        return _defineProperty(obj, prop, desc);
	    }
	    catch (e) {
	        if (desc.configurable) {
	            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's retry with the original flag value
	            if (typeof originalConfigurableFlag == 'undefined') {
	                delete desc.configurable;
	            }
	            else {
	                desc.configurable = originalConfigurableFlag;
	            }
	            return _defineProperty(obj, prop, desc);
	        }
	        else {
	            throw e;
	        }
	    }
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var define_property_1 = __webpack_require__(4);
	var utils_1 = __webpack_require__(3);
	function registerElementPatch(_global) {
	    if (!utils_1.isBrowser || !('registerElement' in _global.document)) {
	        return;
	    }
	    var _registerElement = document.registerElement;
	    var callbacks = [
	        'createdCallback',
	        'attachedCallback',
	        'detachedCallback',
	        'attributeChangedCallback'
	    ];
	    document.registerElement = function (name, opts) {
	        if (opts && opts.prototype) {
	            callbacks.forEach(function (callback) {
	                var source = 'Document.registerElement::' + callback;
	                if (opts.prototype.hasOwnProperty(callback)) {
	                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	                    if (descriptor && descriptor.value) {
	                        descriptor.value = Zone.current.wrap(descriptor.value, source);
	                        define_property_1._redefineProperty(opts.prototype, callback, descriptor);
	                    }
	                    else {
	                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                    }
	                }
	                else if (opts.prototype[callback]) {
	                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                }
	            });
	        }
	        return _registerElement.apply(document, [name, opts]);
	    };
	}
	exports.registerElementPatch = registerElementPatch;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var webSocketPatch = __webpack_require__(7);
	var utils_1 = __webpack_require__(3);
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');
	function propertyDescriptorPatch(_global) {
	    if (utils_1.isNode) {
	        return;
	    }
	    var supportsWebSocket = typeof WebSocket !== 'undefined';
	    if (canPatchViaPropertyDescriptor()) {
	        // for browsers that we can patch the descriptor:  Chrome & Firefox
	        if (utils_1.isBrowser) {
	            utils_1.patchOnProperties(HTMLElement.prototype, eventNames);
	        }
	        utils_1.patchOnProperties(XMLHttpRequest.prototype, null);
	        if (typeof IDBIndex !== 'undefined') {
	            utils_1.patchOnProperties(IDBIndex.prototype, null);
	            utils_1.patchOnProperties(IDBRequest.prototype, null);
	            utils_1.patchOnProperties(IDBOpenDBRequest.prototype, null);
	            utils_1.patchOnProperties(IDBDatabase.prototype, null);
	            utils_1.patchOnProperties(IDBTransaction.prototype, null);
	            utils_1.patchOnProperties(IDBCursor.prototype, null);
	        }
	        if (supportsWebSocket) {
	            utils_1.patchOnProperties(WebSocket.prototype, null);
	        }
	    }
	    else {
	        // Safari, Android browsers (Jelly Bean)
	        patchViaCapturingAllTheEvents();
	        utils_1.patchClass('XMLHttpRequest');
	        if (supportsWebSocket) {
	            webSocketPatch.apply(_global);
	        }
	    }
	}
	exports.propertyDescriptorPatch = propertyDescriptorPatch;
	function canPatchViaPropertyDescriptor() {
	    if (utils_1.isBrowser && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick')
	        && typeof Element !== 'undefined') {
	        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	        // IDL interface attributes are not configurable
	        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	        if (desc && !desc.configurable)
	            return false;
	    }
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
	        get: function () {
	            return true;
	        }
	    });
	    var req = new XMLHttpRequest();
	    var result = !!req.onreadystatechange;
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {});
	    return result;
	}
	;
	var unboundKey = utils_1.zoneSymbol('unbound');
	// Whenever any eventListener fires, we check the eventListener target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	    var _loop_1 = function(i) {
	        var property = eventNames[i];
	        var onproperty = 'on' + property;
	        document.addEventListener(property, function (event) {
	            var elt = event.target, bound, source;
	            if (elt) {
	                source = elt.constructor['name'] + '.' + onproperty;
	            }
	            else {
	                source = 'unknown.' + onproperty;
	            }
	            while (elt) {
	                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	                    bound = Zone.current.wrap(elt[onproperty], source);
	                    bound[unboundKey] = elt[onproperty];
	                    elt[onproperty] = bound;
	                }
	                elt = elt.parentElement;
	            }
	        }, true);
	    };
	    for (var i = 0; i < eventNames.length; i++) {
	        _loop_1(i);
	    }
	    ;
	}
	;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var utils_1 = __webpack_require__(3);
	// we have to patch the instance since the proto is non-configurable
	function apply(_global) {
	    var WS = _global.WebSocket;
	    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
	    // On older Chrome, no need since EventTarget was already patched
	    if (!_global.EventTarget) {
	        utils_1.patchEventTargetMethods(WS.prototype);
	    }
	    _global.WebSocket = function (a, b) {
	        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	        var proxySocket;
	        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	        if (onmessageDesc && onmessageDesc.configurable === false) {
	            proxySocket = Object.create(socket);
	            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
	                proxySocket[propName] = function () {
	                    return socket[propName].apply(socket, arguments);
	                };
	            });
	        }
	        else {
	            // we can patch the real socket
	            proxySocket = socket;
	        }
	        utils_1.patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
	        return proxySocket;
	    };
	    for (var prop in WS) {
	        _global.WebSocket[prop] = WS[prop];
	    }
	}
	exports.apply = apply;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var utils_1 = __webpack_require__(3);
	function patchTimer(window, setName, cancelName, nameSuffix) {
	    var setNative = null;
	    var clearNative = null;
	    setName += nameSuffix;
	    cancelName += nameSuffix;
	    function scheduleTask(task) {
	        var data = task.data;
	        data.args[0] = task.invoke;
	        data.handleId = setNative.apply(window, data.args);
	        return task;
	    }
	    function clearTask(task) {
	        return clearNative(task.data.handleId);
	    }
	    setNative = utils_1.patchMethod(window, setName, function (delegate) { return function (self, args) {
	        if (typeof args[0] === 'function') {
	            var zone = Zone.current;
	            var options = {
	                handleId: null,
	                isPeriodic: nameSuffix === 'Interval',
	                delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
	                args: args
	            };
	            var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
	            if (!task) {
	                return task;
	            }
	            // Node.js must additionally support the ref and unref functions.
	            var handle = task.data.handleId;
	            if (handle.ref && handle.unref) {
	                task.ref = handle.ref.bind(handle);
	                task.unref = handle.unref.bind(handle);
	            }
	            return task;
	        }
	        else {
	            // cause an error by calling it directly.
	            return delegate.apply(window, args);
	        }
	    }; });
	    clearNative = utils_1.patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	        var task = args[0];
	        if (task && typeof task.type === 'string') {
	            if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
	                // Do not cancel already canceled functions
	                task.zone.cancelTask(task);
	            }
	        }
	        else {
	            // cause an error by calling it directly.
	            delegate.apply(window, args);
	        }
	    }; });
	}
	exports.patchTimer = patchTimer;


/***/ }
/******/ ]);
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    // feature test for Object.create support
    var supportsCreate = typeof Object.create === "function";
    // feature test for __proto__ support
    var supportsProto = (function () {
        var sentinel = {};
        function __() { }
        __.prototype = sentinel;
        var instance = new __();
        return instance.__proto__ === sentinel;
    })();
    // create an object in dictionary mode (a.k.a. "slow" mode in v8)
    var createDictionary = supportsCreate ? function () { return MakeDictionary(Object.create(null)); } :
        supportsProto ? function () { return MakeDictionary({ __proto__: null }); } :
            function () { return MakeDictionary({}); };
    var HashMap;
    (function (HashMap) {
        var downLevel = !supportsCreate && !supportsProto;
        HashMap.has = downLevel
            ? function (map, key) { return hasOwn.call(map, key); }
            : function (map, key) { return key in map; };
        HashMap.get = downLevel
            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
            : function (map, key) { return map[key]; };
    })(HashMap || (HashMap = {}));
    // Load global or shim versions of Map, Set, and WeakMap
    var functionPrototype = Object.getPrototypeOf(Function);
    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    // [[Metadata]] internal slot
    var Metadata = new _WeakMap();
    /**
      * Applies a set of decorators to a property of a target object.
      * @param decorators An array of decorators.
      * @param target The target object.
      * @param targetKey (Optional) The property key to decorate.
      * @param targetDescriptor (Optional) The property descriptor for the target key
      * @remarks Decorators are applied in reverse order.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Example = Reflect.decorate(decoratorsArray, Example);
      *
      *     // property (on constructor)
      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Object.defineProperty(Example, "staticMethod",
      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
      *
      *     // method (on prototype)
      *     Object.defineProperty(Example.prototype, "method",
      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
      *
      */
    function decorate(decorators, target, targetKey, targetDescriptor) {
        if (!IsUndefined(targetDescriptor)) {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsObject(target))
                throw new TypeError();
            if (IsUndefined(targetKey))
                throw new TypeError();
            if (!IsObject(targetDescriptor))
                throw new TypeError();
            targetKey = ToPropertyKey(targetKey);
            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
        }
        else if (!IsUndefined(targetKey)) {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsObject(target))
                throw new TypeError();
            targetKey = ToPropertyKey(targetKey);
            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
        }
        else {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsConstructor(target))
                throw new TypeError();
            return DecorateConstructor(decorators, target);
        }
    }
    Reflect.decorate = decorate;
    /**
      * A default metadata decorator factory that can be used on a class, class member, or parameter.
      * @param metadataKey The key for the metadata entry.
      * @param metadataValue The value for the metadata entry.
      * @returns A decorator function.
      * @remarks
      * If `metadataKey` is already defined for the target and target key, the
      * metadataValue for that key will be overwritten.
      * @example
      *
      *     // constructor
      *     @Reflect.metadata(key, value)
      *     class Example {
      *     }
      *
      *     // property (on constructor, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticProperty;
      *     }
      *
      *     // property (on prototype, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         property;
      *     }
      *
      *     // method (on constructor)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticMethod() { }
      *     }
      *
      *     // method (on prototype)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         method() { }
      *     }
      *
      */
    function metadata(metadataKey, metadataValue) {
        function decorator(target, targetKey) {
            if (!IsUndefined(targetKey)) {
                if (!IsObject(target))
                    throw new TypeError();
                targetKey = ToPropertyKey(targetKey);
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
            }
            else {
                if (!IsConstructor(target))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);
            }
        }
        return decorator;
    }
    Reflect.metadata = metadata;
    /**
      * Define a unique metadata entry on the target.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param metadataValue A value that contains attached metadata.
      * @param target The target object on which to define metadata.
      * @param targetKey (Optional) The property key for the target.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Reflect.defineMetadata("custom:annotation", options, Example);
      *
      *     // property (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
      *
      *     // method (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
      *
      *     // decorator factory as metadata-producing annotation.
      *     function MyAnnotation(options): Decorator {
      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
      *     }
      *
      */
    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
    }
    Reflect.defineMetadata = defineMetadata;
    /**
      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryHasMetadata(metadataKey, target, targetKey);
    }
    Reflect.hasMetadata = hasMetadata;
    /**
      * Gets a value indicating whether the target object has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasOwnMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
    }
    Reflect.hasOwnMetadata = hasOwnMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryGetMetadata(metadataKey, target, targetKey);
    }
    Reflect.getMetadata = getMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getOwnMetadata(metadataKey, target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
    }
    Reflect.getOwnMetadata = getOwnMetadata;
    /**
      * Gets the metadata keys defined on the target object or its prototype chain.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
      *
      */
    function getMetadataKeys(target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryMetadataKeys(target, targetKey);
    }
    Reflect.getMetadataKeys = getMetadataKeys;
    /**
      * Gets the unique metadata keys defined on the target object.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
      *
      */
    function getOwnMetadataKeys(target, targetKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        return OrdinaryOwnMetadataKeys(target, targetKey);
    }
    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
    /**
      * Deletes the metadata entry from the target object with the provided key.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param targetKey (Optional) The property key for the target.
      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.deleteMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function deleteMetadata(metadataKey, target, targetKey) {
        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#deletemetadata-metadatakey-p-
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(targetKey))
            targetKey = ToPropertyKey(targetKey);
        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        if (!metadataMap.delete(metadataKey))
            return false;
        if (metadataMap.size > 0)
            return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(targetKey);
        if (targetMetadata.size > 0)
            return true;
        Metadata.delete(target);
        return true;
    }
    Reflect.deleteMetadata = deleteMetadata;
    function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target);
            if (!IsUndefined(decorated)) {
                if (!IsConstructor(decorated))
                    throw new TypeError();
                target = decorated;
            }
        }
        return target;
    }
    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated)) {
                if (!IsObject(decorated))
                    throw new TypeError();
                descriptor = decorated;
            }
        }
        return descriptor;
    }
    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            decorator(target, propertyKey);
        }
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#getorcreatemetadatamap--o-p-create-
    function GetOrCreateMetadataMap(target, targetKey, create) {
        var targetMetadata = Metadata.get(target);
        if (!targetMetadata) {
            if (!create)
                return undefined;
            targetMetadata = new _Map();
            Metadata.set(target, targetMetadata);
        }
        var keyMetadata = targetMetadata.get(targetKey);
        if (!keyMetadata) {
            if (!create)
                return undefined;
            keyMetadata = new _Map();
            targetMetadata.set(targetKey, keyMetadata);
        }
        return keyMetadata;
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
    function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return true;
        var parent = GetPrototypeOf(O);
        return parent !== null ? OrdinaryHasMetadata(MetadataKey, parent, P) : false;
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
        return metadataMap !== undefined && Boolean(metadataMap.has(MetadataKey));
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetmetadata--metadatakey-o-p-
    function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = GetPrototypeOf(O);
        return parent !== null ? OrdinaryGetMetadata(MetadataKey, parent, P) : undefined;
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
        return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);
        metadataMap.set(MetadataKey, MetadataValue);
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarymetadatakeys--o-p-
    function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = GetPrototypeOf(O);
        if (parent === null)
            return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
            return ownKeys;
        if (ownKeys.length <= 0)
            return parentKeys;
        var keys = new _Set();
        for (var _i = 0; _i < ownKeys.length; _i++) {
            var key = ownKeys[_i];
            keys.add(key);
        }
        for (var _a = 0; _a < parentKeys.length; _a++) {
            var key = parentKeys[_a];
            keys.add(key);
        }
        return getKeys(keys);
    }
    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryownmetadatakeys--o-p-
    function OrdinaryOwnMetadataKeys(target, targetKey) {
        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);
        var keys = [];
        if (metadataMap)
            forEach(metadataMap, function (_, key) { return keys.push(key); });
        return keys;
    }
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
    function IsUndefined(x) {
        return x === undefined;
    }
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
    function IsArray(x) {
        return Array.isArray ? Array.isArray(x) : x instanceof Array || Object.prototype.toString.call(x) === "[object Array]";
    }
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
    function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
    }
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
    function IsConstructor(x) {
        return typeof x === "function";
    }
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
    function IsSymbol(x) {
        return typeof x === "symbol";
    }
    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
    function ToPropertyKey(value) {
        return IsSymbol(value) ? value : String(value);
    }
    function GetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
            return proto;
        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
        // Try to determine the superclass Exampleonstructor. Compatible implementations
        // must either set __proto__ on a subclass Exampleonstructor to the superclass Exampleonstructor,
        // or ensure each class has a valid `constructor` property on its prototype that
        // points back to the constructor.
        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
        // This is the case when in ES6 or when using __proto__ in a compatible browser.
        if (proto !== functionPrototype)
            return proto;
        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto;
        // If the constructor was not a function, then we cannot determine the heritage.
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
            return proto;
        // If we have some kind of self-reference, then we cannot determine the heritage.
        if (constructor === O)
            return proto;
        // we have a pretty good guess at the heritage.
        return constructor;
    }
    function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? undefined : result;
    }
    function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
            f.call(iterator);
    }
    function forEach(source, callback, thisArg) {
        var entries = source.entries;
        if (typeof entries === "function") {
            var iterator = entries.call(source);
            var result;
            try {
                while (result = IteratorStep(iterator)) {
                    var _a = result.value, key = _a[0], value = _a[1];
                    callback.call(thisArg, value, key, source);
                }
            }
            finally {
                if (result)
                    IteratorClose(iterator);
            }
        }
        else {
            var forEach_1 = source.forEach;
            if (typeof forEach_1 === "function") {
                forEach_1.call(source, callback, thisArg);
            }
        }
    }
    function getKeys(source) {
        var keys = [];
        forEach(source, function (_, key) { keys.push(key); });
        return keys;
    }
    // naive MapIterator shim
    function CreateMapIterator(keys, values, kind) {
        var index = 0;
        return {
            next: function () {
                if ((keys || values) && index < (keys || values).length) {
                    var current = index++;
                    switch (kind) {
                        case "key": return { value: keys[current], done: false };
                        case "value": return { value: values[current], done: false };
                        case "key+value": return { value: [keys[current], values[current]], done: false };
                    }
                }
                keys = undefined;
                values = undefined;
                return { value: undefined, done: true };
            },
            "throw": function (error) {
                if (keys || values) {
                    keys = undefined;
                    values = undefined;
                }
                throw error;
            },
            "return": function (value) {
                if (keys || values) {
                    keys = undefined;
                    values = undefined;
                }
                return { value: value, done: true };
            }
        };
    }
    // naive Map shim
    function CreateMapPolyfill() {
        var cacheSentinel = {};
        return (function () {
            function Map() {
                this._keys = [];
                this._values = [];
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            }
            Object.defineProperty(Map.prototype, "size", {
                get: function () { return this._keys.length; },
                enumerable: true,
                configurable: true
            });
            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
            Map.prototype.get = function (key) {
                var index = this._find(key, /*insert*/ false);
                return index >= 0 ? this._values[index] : undefined;
            };
            Map.prototype.set = function (key, value) {
                var index = this._find(key, /*insert*/ true);
                this._values[index] = value;
                return this;
            };
            Map.prototype.delete = function (key) {
                var index = this._find(key, /*insert*/ false);
                if (index >= 0) {
                    var size = this._keys.length;
                    for (var i = index + 1; i < size; i++) {
                        this._keys[i - 1] = this._keys[i];
                        this._values[i - 1] = this._values[i];
                    }
                    this._keys.length--;
                    this._values.length--;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                    return true;
                }
                return false;
            };
            Map.prototype.clear = function () {
                this._keys.length = 0;
                this._values.length = 0;
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            };
            Map.prototype.keys = function () { return CreateMapIterator(this._keys, /*values*/ undefined, "key"); };
            Map.prototype.values = function () { return CreateMapIterator(/*keys*/ undefined, this._values, "value"); };
            Map.prototype.entries = function () { return CreateMapIterator(this._keys, this._values, "key+value"); };
            Map.prototype._find = function (key, insert) {
                if (this._cacheKey === key)
                    return this._cacheIndex;
                var index = this._keys.indexOf(key);
                if (index < 0 && insert) {
                    index = this._keys.length;
                    this._keys.push(key);
                    this._values.push(undefined);
                }
                return this._cacheKey = key, this._cacheIndex = index;
            };
            return Map;
        })();
    }
    // naive Set shim
    function CreateSetPolyfill() {
        return (function () {
            function Set() {
                this._map = new _Map();
            }
            Object.defineProperty(Set.prototype, "size", {
                get: function () { return this._map.size; },
                enumerable: true,
                configurable: true
            });
            Set.prototype.has = function (value) { return this._map.has(value); };
            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
            Set.prototype.delete = function (value) { return this._map.delete(value); };
            Set.prototype.clear = function () { this._map.clear(); };
            Set.prototype.keys = function () { return this._map.keys(); };
            Set.prototype.values = function () { return this._map.values(); };
            Set.prototype.entries = function () { return this._map.entries(); };
            return Set;
        })();
    }
    // naive WeakMap shim
    function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = createDictionary();
        var rootKey = CreateUniqueKey();
        return (function () {
            function WeakMap() {
                this._key = CreateUniqueKey();
            }
            WeakMap.prototype.has = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.has(table, this._key) : false;
            };
            WeakMap.prototype.get = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.get(table, this._key) : undefined;
            };
            WeakMap.prototype.set = function (target, value) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                table[this._key] = value;
                return this;
            };
            WeakMap.prototype.delete = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? delete table[this._key] : false;
            };
            WeakMap.prototype.clear = function () {
                // NOTE: not a real clear, just makes the previous data unreachable
                this._key = CreateUniqueKey();
            };
            return WeakMap;
        })();
        function FillRandomBytes(buffer, size) {
            for (var i = 0; i < size; ++i)
                buffer[i] = Math.random() * 0xff | 0;
            return buffer;
        }
        function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
                if (typeof crypto !== "undefined")
                    return crypto.getRandomValues(new Uint8Array(size));
                if (typeof msCrypto !== "undefined")
                    return msCrypto.getRandomValues(new Uint8Array(size));
                return FillRandomBytes(new Uint8Array(size), size);
            }
            return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            // mark as random - RFC 4122 Â§ 4.4
            data[6] = data[6] & 0x4f | 0x40;
            data[8] = data[8] & 0xbf | 0x80;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
                var byte = data[offset];
                if (offset === 4 || offset === 6 || offset === 8)
                    result += "-";
                if (byte < 16)
                    result += "0";
                result += byte.toString(16).toLowerCase();
            }
            return result;
        }
        function CreateUniqueKey() {
            var key;
            do
                key = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key));
            keys[key] = true;
            return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
            if (!hasOwn.call(target, rootKey)) {
                if (!create)
                    return undefined;
                Object.defineProperty(target, rootKey, { value: createDictionary() });
            }
            return target[rootKey];
        }
    }
    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
    function MakeDictionary(obj) {
        obj.__DICTIONARY_MODE__ = 1;
        delete obj.____DICTIONARY_MODE__;
        return obj;
    }
    // patch global Reflect
    (function (__global) {
        if (typeof __global.Reflect !== "undefined") {
            if (__global.Reflect !== Reflect) {
                for (var p in Reflect) {
                    if (hasOwn.call(Reflect, p)) {
                        __global.Reflect[p] = Reflect[p];
                    }
                }
            }
        }
        else {
            __global.Reflect = Reflect;
        }
    })(typeof window !== "undefined" ? window :
        typeof WorkerGlobalScope !== "undefined" ? self :
            typeof global !== "undefined" ? global :
                Function("return this;")());
})(Reflect || (Reflect = {}));
//# sourceMappingURL=Reflect.js.map
/*
 * SystemJS v0.19.27
 */
(function() {
function bootstrap() {// from https://gist.github.com/Yaffle/1088850
(function(global) {
function URLPolyfill(url, baseURL) {
  if (typeof url != 'string')
    throw new TypeError('URL must be a string');
  var m = String(url).replace(/^\s+|\s+$/g, "").match(/^([^:\/?#]+:)?(?:\/\/(?:([^:@\/?#]*)(?::([^:@\/?#]*))?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
  if (!m)
    throw new RangeError('Invalid URL format');
  var protocol = m[1] || "";
  var username = m[2] || "";
  var password = m[3] || "";
  var host = m[4] || "";
  var hostname = m[5] || "";
  var port = m[6] || "";
  var pathname = m[7] || "";
  var search = m[8] || "";
  var hash = m[9] || "";
  if (baseURL !== undefined) {
    var base = baseURL instanceof URLPolyfill ? baseURL : new URLPolyfill(baseURL);
    var flag = !protocol && !host && !username;
    if (flag && !pathname && !search)
      search = base.search;
    if (flag && pathname[0] !== "/")
      pathname = (pathname ? (((base.host || base.username) && !base.pathname ? "/" : "") + base.pathname.slice(0, base.pathname.lastIndexOf("/") + 1) + pathname) : base.pathname);
    // dot segments removal
    var output = [];
    pathname.replace(/^(\.\.?(\/|$))+/, "")
      .replace(/\/(\.(\/|$))+/g, "/")
      .replace(/\/\.\.$/, "/../")
      .replace(/\/?[^\/]*/g, function (p) {
        if (p === "/..")
          output.pop();
        else
          output.push(p);
      });
    pathname = output.join("").replace(/^\//, pathname[0] === "/" ? "/" : "");
    if (flag) {
      port = base.port;
      hostname = base.hostname;
      host = base.host;
      password = base.password;
      username = base.username;
    }
    if (!protocol)
      protocol = base.protocol;
  }

  // convert windows file URLs to use /
  if (protocol == 'file:')
    pathname = pathname.replace(/\\/g, '/');

  this.origin = host ? protocol + (protocol !== "" || host !== "" ? "//" : "") + host : "";
  this.href = protocol + (protocol && host || protocol == "file:" ? "//" : "") + (username !== "" ? username + (password !== "" ? ":" + password : "") + "@" : "") + host + pathname + search + hash;
  this.protocol = protocol;
  this.username = username;
  this.password = password;
  this.host = host;
  this.hostname = hostname;
  this.port = port;
  this.pathname = pathname;
  this.search = search;
  this.hash = hash;
}
global.URLPolyfill = URLPolyfill;
})(typeof self != 'undefined' ? self : global);(function(__global) {

  var isWorker = typeof window == 'undefined' && typeof self != 'undefined' && typeof importScripts != 'undefined';
  var isBrowser = typeof window != 'undefined' && typeof document != 'undefined';
  var isWindows = typeof process != 'undefined' && typeof process.platform != 'undefined' && !!process.platform.match(/^win/);

  if (!__global.console)
    __global.console = { assert: function() {} };

  // IE8 support
  var indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, thisLen = this.length; i < thisLen; i++) {
      if (this[i] === item) {
        return i;
      }
    }
    return -1;
  };
  
  var defineProperty;
  (function () {
    try {
      if (!!Object.defineProperty({}, 'a', {}))
        defineProperty = Object.defineProperty;
    }
    catch (e) {
      defineProperty = function(obj, prop, opt) {
        try {
          obj[prop] = opt.value || opt.get.call(obj);
        }
        catch(e) {}
      }
    }
  })();

  var errArgs = new Error(0, '_').fileName == '_';

  function addToError(err, msg) {
    // parse the stack removing loader code lines for simplification
    if (!err.originalErr) {
      var stack = (err.stack || err.message || err).split('\n');
      var newStack = [];
      for (var i = 0; i < stack.length; i++) {
        if (typeof $__curScript == 'undefined' || stack[i].indexOf($__curScript.src) == -1)
          newStack.push(stack[i]);
      }
    }

    var newMsg = (newStack ? newStack.join('\n\t') : err.message) + '\n\t' + msg;

    // Convert file:/// URLs to paths in Node
    if (!isBrowser)
      newMsg = newMsg.replace(isWindows ? /file:\/\/\//g : /file:\/\//g, '');

    var newErr = errArgs ? new Error(newMsg, err.fileName, err.lineNumber) : new Error(newMsg);
    
    // Node needs stack adjustment for throw to show message
    if (!isBrowser)
      newErr.stack = newMsg;
    // Clearing the stack stops unnecessary loader lines showing
    else
      newErr.stack = null;
    
    // track the original error
    newErr.originalErr = err.originalErr || err;

    return newErr;
  }

  function __eval(source, debugName, context) {
    try {
      new Function(source).call(context);
    }
    catch(e) {
      throw addToError(e, 'Evaluating ' + debugName);
    }
  }

  var baseURI;
  // environent baseURI detection
  if (typeof document != 'undefined' && document.getElementsByTagName) {
    baseURI = document.baseURI;

    if (!baseURI) {
      var bases = document.getElementsByTagName('base');
      baseURI = bases[0] && bases[0].href || window.location.href;
    }

    // sanitize out the hash and querystring
    baseURI = baseURI.split('#')[0].split('?')[0];
    baseURI = baseURI.substr(0, baseURI.lastIndexOf('/') + 1);
  }
  else if (typeof process != 'undefined' && process.cwd) {
    baseURI = 'file://' + (isWindows ? '/' : '') + process.cwd() + '/';
    if (isWindows)
      baseURI = baseURI.replace(/\\/g, '/');
  }
  else if (typeof location != 'undefined') {
    baseURI = __global.location.href;
  }
  else {
    throw new TypeError('No environment baseURI');
  }

  try {
    var nativeURL = new __global.URL('test:///').protocol == 'test:';
  }
  catch(e) {}

  var URL = nativeURL ? __global.URL : __global.URLPolyfill;
/*
*********************************************************************************************

  Dynamic Module Loader Polyfill

    - Implemented exactly to the former 2014-08-24 ES6 Specification Draft Rev 27, Section 15
      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#august_24_2014_draft_rev_27

    - Functions are commented with their spec numbers, with spec differences commented.

    - Spec bugs are commented in this code with links.

    - Abstract functions have been combined where possible, and their associated functions
      commented.

    - Realm implementation is entirely omitted.

*********************************************************************************************
*/

function Module() {}
// http://www.ecma-international.org/ecma-262/6.0/#sec-@@tostringtag
defineProperty(Module.prototype, 'toString', {
  value: function() {
    return 'Module';
  }
});
function Loader(options) {
  this._loader = {
    loaderObj: this,
    loads: [],
    modules: {},
    importPromises: {},
    moduleRecords: {}
  };

  // 26.3.3.6
  defineProperty(this, 'global', {
    get: function() {
      return __global;
    }
  });

  // 26.3.3.13 realm not implemented
}

(function() {

// Some Helpers

// logs a linkset snapshot for debugging
/* function snapshot(loader) {
  console.log('---Snapshot---');
  for (var i = 0; i < loader.loads.length; i++) {
    var load = loader.loads[i];
    var linkSetLog = '  ' + load.name + ' (' + load.status + '): ';

    for (var j = 0; j < load.linkSets.length; j++) {
      linkSetLog += '{' + logloads(load.linkSets[j].loads) + '} ';
    }
    console.log(linkSetLog);
  }
  console.log('');
}
function logloads(loads) {
  var log = '';
  for (var k = 0; k < loads.length; k++)
    log += loads[k].name + (k != loads.length - 1 ? ' ' : '');
  return log;
} */


/* function checkInvariants() {
  // see https://bugs.ecmascript.org/show_bug.cgi?id=2603#c1

  var loads = System._loader.loads;
  var linkSets = [];

  for (var i = 0; i < loads.length; i++) {
    var load = loads[i];
    console.assert(load.status == 'loading' || load.status == 'loaded', 'Each load is loading or loaded');

    for (var j = 0; j < load.linkSets.length; j++) {
      var linkSet = load.linkSets[j];

      for (var k = 0; k < linkSet.loads.length; k++)
        console.assert(loads.indexOf(linkSet.loads[k]) != -1, 'linkSet loads are a subset of loader loads');

      if (linkSets.indexOf(linkSet) == -1)
        linkSets.push(linkSet);
    }
  }

  for (var i = 0; i < loads.length; i++) {
    var load = loads[i];
    for (var j = 0; j < linkSets.length; j++) {
      var linkSet = linkSets[j];

      if (linkSet.loads.indexOf(load) != -1)
        console.assert(load.linkSets.indexOf(linkSet) != -1, 'linkSet contains load -> load contains linkSet');

      if (load.linkSets.indexOf(linkSet) != -1)
        console.assert(linkSet.loads.indexOf(load) != -1, 'load contains linkSet -> linkSet contains load');
    }
  }

  for (var i = 0; i < linkSets.length; i++) {
    var linkSet = linkSets[i];
    for (var j = 0; j < linkSet.loads.length; j++) {
      var load = linkSet.loads[j];

      for (var k = 0; k < load.dependencies.length; k++) {
        var depName = load.dependencies[k].value;
        var depLoad;
        for (var l = 0; l < loads.length; l++) {
          if (loads[l].name != depName)
            continue;
          depLoad = loads[l];
          break;
        }

        // loading records are allowed not to have their dependencies yet
        // if (load.status != 'loading')
        //  console.assert(depLoad, 'depLoad found');

        // console.assert(linkSet.loads.indexOf(depLoad) != -1, 'linkset contains all dependencies');
      }
    }
  }
} */

  // 15.2.3 - Runtime Semantics: Loader State

  // 15.2.3.11
  function createLoaderLoad(object) {
    return {
      // modules is an object for ES5 implementation
      modules: {},
      loads: [],
      loaderObj: object
    };
  }

  // 15.2.3.2 Load Records and LoadRequest Objects

  // 15.2.3.2.1
  function createLoad(name) {
    return {
      status: 'loading',
      name: name,
      linkSets: [],
      dependencies: [],
      metadata: {}
    };
  }

  // 15.2.3.2.2 createLoadRequestObject, absorbed into calling functions

  // 15.2.4

  // 15.2.4.1
  function loadModule(loader, name, options) {
    return new Promise(asyncStartLoadPartwayThrough({
      step: options.address ? 'fetch' : 'locate',
      loader: loader,
      moduleName: name,
      // allow metadata for import https://bugs.ecmascript.org/show_bug.cgi?id=3091
      moduleMetadata: options && options.metadata || {},
      moduleSource: options.source,
      moduleAddress: options.address
    }));
  }

  // 15.2.4.2
  function requestLoad(loader, request, refererName, refererAddress) {
    // 15.2.4.2.1 CallNormalize
    return new Promise(function(resolve, reject) {
      resolve(loader.loaderObj.normalize(request, refererName, refererAddress));
    })
    // 15.2.4.2.2 GetOrCreateLoad
    .then(function(name) {
      var load;
      if (loader.modules[name]) {
        load = createLoad(name);
        load.status = 'linked';
        // https://bugs.ecmascript.org/show_bug.cgi?id=2795
        load.module = loader.modules[name];
        return load;
      }

      for (var i = 0, l = loader.loads.length; i < l; i++) {
        load = loader.loads[i];
        if (load.name != name)
          continue;
        console.assert(load.status == 'loading' || load.status == 'loaded', 'loading or loaded');
        return load;
      }

      load = createLoad(name);
      loader.loads.push(load);

      proceedToLocate(loader, load);

      return load;
    });
  }

  // 15.2.4.3
  function proceedToLocate(loader, load) {
    proceedToFetch(loader, load,
      Promise.resolve()
      // 15.2.4.3.1 CallLocate
      .then(function() {
        return loader.loaderObj.locate({ name: load.name, metadata: load.metadata });
      })
    );
  }

  // 15.2.4.4
  function proceedToFetch(loader, load, p) {
    proceedToTranslate(loader, load,
      p
      // 15.2.4.4.1 CallFetch
      .then(function(address) {
        // adjusted, see https://bugs.ecmascript.org/show_bug.cgi?id=2602
        if (load.status != 'loading')
          return;
        load.address = address;

        return loader.loaderObj.fetch({ name: load.name, metadata: load.metadata, address: address });
      })
    );
  }

  var anonCnt = 0;

  // 15.2.4.5
  function proceedToTranslate(loader, load, p) {
    p
    // 15.2.4.5.1 CallTranslate
    .then(function(source) {
      if (load.status != 'loading')
        return;

      return Promise.resolve(loader.loaderObj.translate({ name: load.name, metadata: load.metadata, address: load.address, source: source }))

      // 15.2.4.5.2 CallInstantiate
      .then(function(source) {
        load.source = source;
        return loader.loaderObj.instantiate({ name: load.name, metadata: load.metadata, address: load.address, source: source });
      })

      // 15.2.4.5.3 InstantiateSucceeded
      .then(function(instantiateResult) {
        if (instantiateResult === undefined) {
          load.address = load.address || '<Anonymous Module ' + ++anonCnt + '>';

          // instead of load.kind, use load.isDeclarative
          load.isDeclarative = true;
          return transpile.call(loader.loaderObj, load)
          .then(function(transpiled) {
            // Hijack System.register to set declare function
            var curSystem = __global.System;
            var curRegister = curSystem.register;
            curSystem.register = function(name, deps, declare) {
              if (typeof name != 'string') {
                declare = deps;
                deps = name;
              }
              // store the registered declaration as load.declare
              // store the deps as load.deps
              load.declare = declare;
              load.depsList = deps;
            }
            // empty {} context is closest to undefined 'this' we can get
            __eval(transpiled, load.address, {});
            curSystem.register = curRegister;
          });
        }
        else if (typeof instantiateResult == 'object') {
          load.depsList = instantiateResult.deps || [];
          load.execute = instantiateResult.execute;
          load.isDeclarative = false;
        }
        else
          throw TypeError('Invalid instantiate return value');
      })
      // 15.2.4.6 ProcessLoadDependencies
      .then(function() {
        load.dependencies = [];
        var depsList = load.depsList;

        var loadPromises = [];
        for (var i = 0, l = depsList.length; i < l; i++) (function(request, index) {
          loadPromises.push(
            requestLoad(loader, request, load.name, load.address)

            // 15.2.4.6.1 AddDependencyLoad (load is parentLoad)
            .then(function(depLoad) {

              // adjusted from spec to maintain dependency order
              // this is due to the System.register internal implementation needs
              load.dependencies[index] = {
                key: request,
                value: depLoad.name
              };

              if (depLoad.status != 'linked') {
                var linkSets = load.linkSets.concat([]);
                for (var i = 0, l = linkSets.length; i < l; i++)
                  addLoadToLinkSet(linkSets[i], depLoad);
              }

              // console.log('AddDependencyLoad ' + depLoad.name + ' for ' + load.name);
              // snapshot(loader);
            })
          );
        })(depsList[i], i);

        return Promise.all(loadPromises);
      })

      // 15.2.4.6.2 LoadSucceeded
      .then(function() {
        // console.log('LoadSucceeded ' + load.name);
        // snapshot(loader);

        console.assert(load.status == 'loading', 'is loading');

        load.status = 'loaded';

        var linkSets = load.linkSets.concat([]);
        for (var i = 0, l = linkSets.length; i < l; i++)
          updateLinkSetOnLoad(linkSets[i], load);
      });
    })
    // 15.2.4.5.4 LoadFailed
    ['catch'](function(exc) {
      load.status = 'failed';
      load.exception = exc;

      var linkSets = load.linkSets.concat([]);
      for (var i = 0, l = linkSets.length; i < l; i++) {
        linkSetFailed(linkSets[i], load, exc);
      }

      console.assert(load.linkSets.length == 0, 'linkSets not removed');
    });
  }

  // 15.2.4.7 PromiseOfStartLoadPartwayThrough absorbed into calling functions

  // 15.2.4.7.1
  function asyncStartLoadPartwayThrough(stepState) {
    return function(resolve, reject) {
      var loader = stepState.loader;
      var name = stepState.moduleName;
      var step = stepState.step;

      if (loader.modules[name])
        throw new TypeError('"' + name + '" already exists in the module table');

      // adjusted to pick up existing loads
      var existingLoad;
      for (var i = 0, l = loader.loads.length; i < l; i++) {
        if (loader.loads[i].name == name) {
          existingLoad = loader.loads[i];

          if (step == 'translate' && !existingLoad.source) {
            existingLoad.address = stepState.moduleAddress;
            proceedToTranslate(loader, existingLoad, Promise.resolve(stepState.moduleSource));
          }

          // a primary load -> use that existing linkset if it is for the direct load here
          // otherwise create a new linkset unit
          if (existingLoad.linkSets.length && existingLoad.linkSets[0].loads[0].name == existingLoad.name)
            return existingLoad.linkSets[0].done.then(function() {
              resolve(existingLoad);
            });
        }
      }

      var load = existingLoad || createLoad(name);

      load.metadata = stepState.moduleMetadata;

      var linkSet = createLinkSet(loader, load);

      loader.loads.push(load);

      resolve(linkSet.done);

      if (step == 'locate')
        proceedToLocate(loader, load);

      else if (step == 'fetch')
        proceedToFetch(loader, load, Promise.resolve(stepState.moduleAddress));

      else {
        console.assert(step == 'translate', 'translate step');
        load.address = stepState.moduleAddress;
        proceedToTranslate(loader, load, Promise.resolve(stepState.moduleSource));
      }
    }
  }

  // Declarative linking functions run through alternative implementation:
  // 15.2.5.1.1 CreateModuleLinkageRecord not implemented
  // 15.2.5.1.2 LookupExport not implemented
  // 15.2.5.1.3 LookupModuleDependency not implemented

  // 15.2.5.2.1
  function createLinkSet(loader, startingLoad) {
    var linkSet = {
      loader: loader,
      loads: [],
      startingLoad: startingLoad, // added see spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995
      loadingCount: 0
    };
    linkSet.done = new Promise(function(resolve, reject) {
      linkSet.resolve = resolve;
      linkSet.reject = reject;
    });
    addLoadToLinkSet(linkSet, startingLoad);
    return linkSet;
  }
  // 15.2.5.2.2
  function addLoadToLinkSet(linkSet, load) {
    if (load.status == 'failed')
      return;

    console.assert(load.status == 'loading' || load.status == 'loaded', 'loading or loaded on link set');

    for (var i = 0, l = linkSet.loads.length; i < l; i++)
      if (linkSet.loads[i] == load)
        return;

    linkSet.loads.push(load);
    load.linkSets.push(linkSet);

    // adjustment, see https://bugs.ecmascript.org/show_bug.cgi?id=2603
    if (load.status != 'loaded') {
      linkSet.loadingCount++;
    }

    var loader = linkSet.loader;

    for (var i = 0, l = load.dependencies.length; i < l; i++) {
      if (!load.dependencies[i])
        continue;

      var name = load.dependencies[i].value;

      if (loader.modules[name])
        continue;

      for (var j = 0, d = loader.loads.length; j < d; j++) {
        if (loader.loads[j].name != name)
          continue;

        addLoadToLinkSet(linkSet, loader.loads[j]);
        break;
      }
    }
    // console.log('add to linkset ' + load.name);
    // snapshot(linkSet.loader);
  }

  // linking errors can be generic or load-specific
  // this is necessary for debugging info
  function doLink(linkSet) {
    var error = false;
    try {
      link(linkSet, function(load, exc) {
        linkSetFailed(linkSet, load, exc);
        error = true;
      });
    }
    catch(e) {
      linkSetFailed(linkSet, null, e);
      error = true;
    }
    return error;
  }

  // 15.2.5.2.3
  function updateLinkSetOnLoad(linkSet, load) {
    // console.log('update linkset on load ' + load.name);
    // snapshot(linkSet.loader);

    console.assert(load.status == 'loaded' || load.status == 'linked', 'loaded or linked');

    linkSet.loadingCount--;

    if (linkSet.loadingCount > 0)
      return;

    // adjusted for spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995
    var startingLoad = linkSet.startingLoad;

    // non-executing link variation for loader tracing
    // on the server. Not in spec.
    /***/
    if (linkSet.loader.loaderObj.execute === false) {
      var loads = [].concat(linkSet.loads);
      for (var i = 0, l = loads.length; i < l; i++) {
        var load = loads[i];
        load.module = !load.isDeclarative ? {
          module: _newModule({})
        } : {
          name: load.name,
          module: _newModule({}),
          evaluated: true
        };
        load.status = 'linked';
        finishLoad(linkSet.loader, load);
      }
      return linkSet.resolve(startingLoad);
    }
    /***/

    var abrupt = doLink(linkSet);

    if (abrupt)
      return;

    console.assert(linkSet.loads.length == 0, 'loads cleared');

    linkSet.resolve(startingLoad);
  }

  // 15.2.5.2.4
  function linkSetFailed(linkSet, load, exc) {
    var loader = linkSet.loader;
    var requests;

    checkError: 
    if (load) {
      if (linkSet.loads[0].name == load.name) {
        exc = addToError(exc, 'Error loading ' + load.name);
      }
      else {
        for (var i = 0; i < linkSet.loads.length; i++) {
          var pLoad = linkSet.loads[i];
          for (var j = 0; j < pLoad.dependencies.length; j++) {
            var dep = pLoad.dependencies[j];
            if (dep.value == load.name) {
              exc = addToError(exc, 'Error loading ' + load.name + ' as "' + dep.key + '" from ' + pLoad.name);
              break checkError;
            }
          }
        }
        exc = addToError(exc, 'Error loading ' + load.name + ' from ' + linkSet.loads[0].name);
      }
    }
    else {
      exc = addToError(exc, 'Error linking ' + linkSet.loads[0].name);
    }


    var loads = linkSet.loads.concat([]);
    for (var i = 0, l = loads.length; i < l; i++) {
      var load = loads[i];

      // store all failed load records
      loader.loaderObj.failed = loader.loaderObj.failed || [];
      if (indexOf.call(loader.loaderObj.failed, load) == -1)
        loader.loaderObj.failed.push(load);

      var linkIndex = indexOf.call(load.linkSets, linkSet);
      console.assert(linkIndex != -1, 'link not present');
      load.linkSets.splice(linkIndex, 1);
      if (load.linkSets.length == 0) {
        var globalLoadsIndex = indexOf.call(linkSet.loader.loads, load);
        if (globalLoadsIndex != -1)
          linkSet.loader.loads.splice(globalLoadsIndex, 1);
      }
    }
    linkSet.reject(exc);
  }

  // 15.2.5.2.5
  function finishLoad(loader, load) {
    // add to global trace if tracing
    if (loader.loaderObj.trace) {
      if (!loader.loaderObj.loads)
        loader.loaderObj.loads = {};
      var depMap = {};
      load.dependencies.forEach(function(dep) {
        depMap[dep.key] = dep.value;
      });
      loader.loaderObj.loads[load.name] = {
        name: load.name,
        deps: load.dependencies.map(function(dep){ return dep.key }),
        depMap: depMap,
        address: load.address,
        metadata: load.metadata,
        source: load.source,
        kind: load.isDeclarative ? 'declarative' : 'dynamic'
      };
    }
    // if not anonymous, add to the module table
    if (load.name) {
      console.assert(!loader.modules[load.name], 'load not in module table');
      loader.modules[load.name] = load.module;
    }
    var loadIndex = indexOf.call(loader.loads, load);
    if (loadIndex != -1)
      loader.loads.splice(loadIndex, 1);
    for (var i = 0, l = load.linkSets.length; i < l; i++) {
      loadIndex = indexOf.call(load.linkSets[i].loads, load);
      if (loadIndex != -1)
        load.linkSets[i].loads.splice(loadIndex, 1);
    }
    load.linkSets.splice(0, load.linkSets.length);
  }

  function doDynamicExecute(linkSet, load, linkError) {
    try {
      var module = load.execute();
    }
    catch(e) {
      linkError(load, e);
      return;
    }
    if (!module || !(module instanceof Module))
      linkError(load, new TypeError('Execution must define a Module instance'));
    else
      return module;
  }

  // 26.3 Loader

  // 26.3.1.1
  // defined at top

  // importPromises adds ability to import a module twice without error - https://bugs.ecmascript.org/show_bug.cgi?id=2601
  function createImportPromise(loader, name, promise) {
    var importPromises = loader._loader.importPromises;
    return importPromises[name] = promise.then(function(m) {
      importPromises[name] = undefined;
      return m;
    }, function(e) {
      importPromises[name] = undefined;
      throw e;
    });
  }

  Loader.prototype = {
    // 26.3.3.1
    constructor: Loader,
    // 26.3.3.2
    define: function(name, source, options) {
      // check if already defined
      if (this._loader.importPromises[name])
        throw new TypeError('Module is already loading.');
      return createImportPromise(this, name, new Promise(asyncStartLoadPartwayThrough({
        step: 'translate',
        loader: this._loader,
        moduleName: name,
        moduleMetadata: options && options.metadata || {},
        moduleSource: source,
        moduleAddress: options && options.address
      })));
    },
    // 26.3.3.3
    'delete': function(name) {
      var loader = this._loader;
      delete loader.importPromises[name];
      delete loader.moduleRecords[name];
      return loader.modules[name] ? delete loader.modules[name] : false;
    },
    // 26.3.3.4 entries not implemented
    // 26.3.3.5
    get: function(key) {
      if (!this._loader.modules[key])
        return;
      doEnsureEvaluated(this._loader.modules[key], [], this);
      return this._loader.modules[key].module;
    },
    // 26.3.3.7
    has: function(name) {
      return !!this._loader.modules[name];
    },
    // 26.3.3.8
    'import': function(name, parentName, parentAddress) {
      if (typeof parentName == 'object')
        parentName = parentName.name;

      // run normalize first
      var loaderObj = this;

      // added, see https://bugs.ecmascript.org/show_bug.cgi?id=2659
      return Promise.resolve(loaderObj.normalize(name, parentName))
      .then(function(name) {
        var loader = loaderObj._loader;

        if (loader.modules[name]) {
          doEnsureEvaluated(loader.modules[name], [], loader._loader);
          return loader.modules[name].module;
        }

        return loader.importPromises[name] || createImportPromise(loaderObj, name,
          loadModule(loader, name, {})
          .then(function(load) {
            delete loader.importPromises[name];
            return evaluateLoadedModule(loader, load);
          }));
      });
    },
    // 26.3.3.9 keys not implemented
    // 26.3.3.10
    load: function(name) {
      var loader = this._loader;
      if (loader.modules[name])
        return Promise.resolve();
      return loader.importPromises[name] || createImportPromise(this, name, new Promise(asyncStartLoadPartwayThrough({
        step: 'locate',
        loader: loader,
        moduleName: name,
        moduleMetadata: {},
        moduleSource: undefined,
        moduleAddress: undefined
      }))
      .then(function() {
        delete loader.importPromises[name];
      }));
    },
    // 26.3.3.11
    module: function(source, options) {
      var load = createLoad();
      load.address = options && options.address;
      var linkSet = createLinkSet(this._loader, load);
      var sourcePromise = Promise.resolve(source);
      var loader = this._loader;
      var p = linkSet.done.then(function() {
        return evaluateLoadedModule(loader, load);
      });
      proceedToTranslate(loader, load, sourcePromise);
      return p;
    },
    // 26.3.3.12
    newModule: function (obj) {
      if (typeof obj != 'object')
        throw new TypeError('Expected object');

      var m = new Module();

      var pNames = [];
      if (Object.getOwnPropertyNames && obj != null)
        pNames = Object.getOwnPropertyNames(obj);
      else
        for (var key in obj)
          pNames.push(key);

      for (var i = 0; i < pNames.length; i++) (function(key) {
        defineProperty(m, key, {
          configurable: false,
          enumerable: true,
          get: function () {
            return obj[key];
          },
          set: function() {
            throw new Error('Module exports cannot be changed externally.');
          }
        });
      })(pNames[i]);

      if (Object.freeze)
        Object.freeze(m);

      return m;
    },
    // 26.3.3.14
    set: function(name, module) {
      if (!(module instanceof Module))
        throw new TypeError('Loader.set(' + name + ', module) must be a module');
      this._loader.modules[name] = {
        module: module
      };
    },
    // 26.3.3.15 values not implemented
    // 26.3.3.16 @@iterator not implemented
    // 26.3.3.17 @@toStringTag not implemented

    // 26.3.3.18.1
    normalize: function(name, referrerName, referrerAddress) {
      return name;
    },
    // 26.3.3.18.2
    locate: function(load) {
      return load.name;
    },
    // 26.3.3.18.3
    fetch: function(load) {
    },
    // 26.3.3.18.4
    translate: function(load) {
      return load.source;
    },
    // 26.3.3.18.5
    instantiate: function(load) {
    }
  };

  var _newModule = Loader.prototype.newModule;
/*
 * ES6 Module Declarative Linking Code - Dev Build Only
 */
  function link(linkSet, linkError) {

    var loader = linkSet.loader;

    if (!linkSet.loads.length)
      return;

    var loads = linkSet.loads.concat([]);

    for (var i = 0; i < loads.length; i++) {
      var load = loads[i];

      var module = doDynamicExecute(linkSet, load, linkError);
      if (!module)
        return;
      load.module = {
        name: load.name,
        module: module
      };
      load.status = 'linked';

      finishLoad(loader, load);
    }
  }

  function evaluateLoadedModule(loader, load) {
    console.assert(load.status == 'linked', 'is linked ' + load.name);
    return load.module.module;
  }

  function doEnsureEvaluated() {}

  function transpile() {
    throw new TypeError('ES6 transpilation is only provided in the dev module loader build.');
  }
})();/*
*********************************************************************************************

  System Loader Implementation

    - Implemented to https://github.com/jorendorff/js-loaders/blob/master/browser-loader.js

    - <script type="module"> supported

*********************************************************************************************
*/

var System;

function SystemLoader() {
  Loader.call(this);
  this.paths = {};
}

// NB no specification provided for System.paths, used ideas discussed in https://github.com/jorendorff/js-loaders/issues/25
function applyPaths(paths, name) {
  // most specific (most number of slashes in path) match wins
  var pathMatch = '', wildcard, maxWildcardPrefixLen = 0;

  // check to see if we have a paths entry
  for (var p in paths) {
    var pathParts = p.split('*');
    if (pathParts.length > 2)
      throw new TypeError('Only one wildcard in a path is permitted');

    // exact path match
    if (pathParts.length == 1) {
      if (name == p)
        return paths[p];
      
      // support trailing / in paths rules
      else if (name.substr(0, p.length - 1) == p.substr(0, p.length - 1) && (name.length < p.length || name[p.length - 1] == p[p.length - 1]) && paths[p][paths[p].length - 1] == '/')
        return paths[p].substr(0, paths[p].length - 1) + (name.length > p.length ? '/' + name.substr(p.length) : '');
    }
    // wildcard path match
    else {
      var wildcardPrefixLen = pathParts[0].length;
      if (wildcardPrefixLen >= maxWildcardPrefixLen &&
          name.substr(0, pathParts[0].length) == pathParts[0] &&
          name.substr(name.length - pathParts[1].length) == pathParts[1]) {
            maxWildcardPrefixLen = wildcardPrefixLen;
            pathMatch = p;
            wildcard = name.substr(pathParts[0].length, name.length - pathParts[1].length - pathParts[0].length);
          }
    }
  }

  var outPath = paths[pathMatch];
  if (typeof wildcard == 'string')
    outPath = outPath.replace('*', wildcard);

  return outPath;
}

// inline Object.create-style class extension
function LoaderProto() {}
LoaderProto.prototype = Loader.prototype;
SystemLoader.prototype = new LoaderProto();
  var fetchTextFromURL;
  if (typeof XMLHttpRequest != 'undefined') {
    fetchTextFromURL = function(url, authorization, fulfill, reject) {
      var xhr = new XMLHttpRequest();
      var sameDomain = true;
      var doTimeout = false;
      if (!('withCredentials' in xhr)) {
        // check if same domain
        var domainCheck = /^(\w+:)?\/\/([^\/]+)/.exec(url);
        if (domainCheck) {
          sameDomain = domainCheck[2] === window.location.host;
          if (domainCheck[1])
            sameDomain &= domainCheck[1] === window.location.protocol;
        }
      }
      if (!sameDomain && typeof XDomainRequest != 'undefined') {
        xhr = new XDomainRequest();
        xhr.onload = load;
        xhr.onerror = error;
        xhr.ontimeout = error;
        xhr.onprogress = function() {};
        xhr.timeout = 0;
        doTimeout = true;
      }
      function load() {
        fulfill(xhr.responseText);
      }
      function error() {
        reject(new Error('XHR error' + (xhr.status ? ' (' + xhr.status + (xhr.statusText ? ' ' + xhr.statusText  : '') + ')' : '') + ' loading ' + url));
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          // in Chrome on file:/// URLs, status is 0
          if (xhr.status == 0) {
            if (xhr.responseText) {
              load();
            }
            else {
              // when responseText is empty, wait for load or error event
              // to inform if it is a 404 or empty file
              xhr.addEventListener('error', error);
              xhr.addEventListener('load', load);
            }
          }
          else if (xhr.status === 200) {
            load();
          }
          else {
            error();
          }
        }
      };
      xhr.open("GET", url, true);

      if (xhr.setRequestHeader) {
        xhr.setRequestHeader('Accept', 'application/x-es-module, */*');
        // can set "authorization: true" to enable withCredentials only
        if (authorization) {
          if (typeof authorization == 'string')
            xhr.setRequestHeader('Authorization', authorization);
          xhr.withCredentials = true;
        }
      }

      if (doTimeout) {
        setTimeout(function() {
          xhr.send();
        }, 0);
      } else {
        xhr.send(null);
      }
    };
  }
  else if (typeof require != 'undefined' && typeof process != 'undefined') {
    var fs;
    fetchTextFromURL = function(url, authorization, fulfill, reject) {
      if (url.substr(0, 8) != 'file:///')
        throw new Error('Unable to fetch "' + url + '". Only file URLs of the form file:/// allowed running in Node.');
      fs = fs || require('fs');
      if (isWindows)
        url = url.replace(/\//g, '\\').substr(8);
      else
        url = url.substr(7);
      return fs.readFile(url, function(err, data) {
        if (err) {
          return reject(err);
        }
        else {
          // Strip Byte Order Mark out if it's the leading char
          var dataString = data + '';
          if (dataString[0] === '\ufeff')
            dataString = dataString.substr(1);

          fulfill(dataString);
        }
      });
    };
  }
  else if (typeof self != 'undefined' && typeof self.fetch != 'undefined') {
    fetchTextFromURL = function(url, authorization, fulfill, reject) {
      var opts = {
        headers: {'Accept': 'application/x-es-module, */*'}
      };

      if (authorization) {
        if (typeof authorization == 'string')
          opts.headers['Authorization'] = authorization;
        opts.credentials = 'include';
      }

      fetch(url, opts)
        .then(function (r) {
          if (r.ok) {
            return r.text();
          } else {
            throw new Error('Fetch error: ' + r.status + ' ' + r.statusText);
          }
        })
        .then(fulfill, reject);
    }
  }
  else {
    throw new TypeError('No environment fetch API available.');
  }

  SystemLoader.prototype.fetch = function(load) {
    return new Promise(function(resolve, reject) {
      fetchTextFromURL(load.address, undefined, resolve, reject);
    });
  };
/*
 * Traceur, Babel and TypeScript transpile hook for Loader
 */
var transpile = (function() {

  // use Traceur by default
  Loader.prototype.transpiler = 'traceur';

  function transpile(load) {
    var self = this;

    return Promise.resolve(__global[self.transpiler == 'typescript' ? 'ts' : self.transpiler]
        || (self.pluginLoader || self)['import'](self.transpiler))
    .then(function(transpiler) {
      if (transpiler.__useDefault)
        transpiler = transpiler['default'];

      var transpileFunction;
      if (transpiler.Compiler)
        transpileFunction = traceurTranspile;
      else if (transpiler.createLanguageService)
        transpileFunction = typescriptTranspile;
      else
        transpileFunction = babelTranspile;

      // note __moduleName will be part of the transformer meta in future when we have the spec for this
      return '(function(__moduleName){' + transpileFunction.call(self, load, transpiler) + '\n})("' + load.name + '");\n//# sourceURL=' + load.address + '!transpiled';
    });
  };

  function traceurTranspile(load, traceur) {
    var options = this.traceurOptions || {};
    options.modules = 'instantiate';
    options.script = false;
    if (options.sourceMaps === undefined)
      options.sourceMaps = 'inline';
    options.filename = load.address;
    options.inputSourceMap = load.metadata.sourceMap;
    options.moduleName = false;

    var compiler = new traceur.Compiler(options);

    return doTraceurCompile(load.source, compiler, options.filename);
  }
  function doTraceurCompile(source, compiler, filename) {
    try {
      return compiler.compile(source, filename);
    }
    catch(e) {
      // on older versions of traceur (<0.9.3), an array of errors is thrown
      // rather than a single error.
      if (e.length) {
        throw e[0];
      }
      throw e;
    }
  }

  function babelTranspile(load, babel) {
    var options = this.babelOptions || {};
    options.modules = 'system';
    if (options.sourceMap === undefined)
      options.sourceMap = 'inline';
    options.inputSourceMap = load.metadata.sourceMap;
    options.filename = load.address;
    options.code = true;
    options.ast = false;

    return babel.transform(load.source, options).code;
  }

  function typescriptTranspile(load, ts) {
    var options = this.typescriptOptions || {};
    options.target = options.target || ts.ScriptTarget.ES5;
    if (options.sourceMap === undefined)
      options.sourceMap = true;
    if (options.sourceMap && options.inlineSourceMap !== false)
      options.inlineSourceMap = true;

    options.module = ts.ModuleKind.System;

    return ts.transpile(load.source, options, load.address);
  }

  return transpile;
})();
// SystemJS Loader Class and Extension helpers

function SystemJSLoader() {
  SystemLoader.call(this);

  systemJSConstructor.call(this);
}

// inline Object.create-style class extension
function SystemProto() {};
SystemProto.prototype = SystemLoader.prototype;
SystemJSLoader.prototype = new SystemProto();
SystemJSLoader.prototype.constructor = SystemJSLoader;

// remove ESML instantiate
SystemJSLoader.prototype.instantiate = function() {};

var systemJSConstructor;

function hook(name, hook) {
  SystemJSLoader.prototype[name] = hook(SystemJSLoader.prototype[name] || function() {});
}
function hookConstructor(hook) {
  systemJSConstructor = hook(systemJSConstructor || function() {});
}

function dedupe(deps) {
  var newDeps = [];
  for (var i = 0, l = deps.length; i < l; i++)
    if (indexOf.call(newDeps, deps[i]) == -1)
      newDeps.push(deps[i])
  return newDeps;
}

function group(deps) {
  var names = [];
  var indices = [];
  for (var i = 0, l = deps.length; i < l; i++) {
    var index = indexOf.call(names, deps[i]);
    if (index === -1) {
      names.push(deps[i]);
      indices.push([i]);
    }
    else {
      indices[index].push(i);
    }
  }
  return { names: names, indices: indices };
}

var getOwnPropertyDescriptor = true;
try {
  Object.getOwnPropertyDescriptor({ a: 0 }, 'a');
}
catch(e) {
  getOwnPropertyDescriptor = false;
}

// converts any module.exports object into an object ready for SystemJS.newModule
function getESModule(exports) {
  var esModule = {};
  // don't trigger getters/setters in environments that support them
  if (typeof exports == 'object' || typeof exports == 'function') {
    var hasOwnProperty = exports && exports.hasOwnProperty;
    if (getOwnPropertyDescriptor) {
      for (var p in exports) {
        if (!trySilentDefineProperty(esModule, exports, p))
          setPropertyIfHasOwnProperty(esModule, exports, p, hasOwnProperty);
      }
    }
    else {
      for (var p in exports)
        setPropertyIfHasOwnProperty(esModule, exports, p, hasOwnProperty);
    }
  }
  esModule['default'] = exports;
  defineProperty(esModule, '__useDefault', {
    value: true
  });
  return esModule;
}

function setPropertyIfHasOwnProperty(targetObj, sourceObj, propName, hasOwnProperty) {
  if (!hasOwnProperty || sourceObj.hasOwnProperty(propName))
    targetObj[propName] = sourceObj[propName];
}

function trySilentDefineProperty(targetObj, sourceObj, propName) {
  try {
    var d;
    if (d = Object.getOwnPropertyDescriptor(sourceObj, propName))
      defineProperty(targetObj, propName, d);

    return true;
  } catch (ex) {
    // Object.getOwnPropertyDescriptor threw an exception, fall back to normal set property.
    return false;
  }
}

function extend(a, b, prepend) {
  for (var p in b) {
    if (!prepend || !(p in a))
      a[p] = b[p];
  }
  return a;
}

// package configuration options
var packageProperties = ['main', 'format', 'defaultExtension', 'meta', 'map', 'basePath', 'depCache'];

// meta first-level extends where:
// array + array appends
// object + object extends
// other properties replace
function extendMeta(a, b, prepend) {
  for (var p in b) {
    var val = b[p];
    if (!(p in a))
      a[p] = val;
    else if (val instanceof Array && a[p] instanceof Array)
      a[p] = [].concat(prepend ? val : a[p]).concat(prepend ? a[p] : val);
    else if (typeof val == 'object' && val !== null && typeof a[p] == 'object')
      a[p] = extend(extend({}, a[p]), val, prepend);
    else if (!prepend)
      a[p] = val;
  }
}

function warn(msg) {
  if (this.warnings && typeof console != 'undefined' && console.warn)
    console.warn(msg);
}
// we define a __exec for globally-scoped execution
// used by module format implementations
var __exec;

(function() {

  var hasBtoa = typeof btoa != 'undefined';

  function getSource(load) {
    var lastLineIndex = load.source.lastIndexOf('\n');

    // wrap ES formats with a System closure for System global encapsulation
    var wrap = load.metadata.format != 'global';

    var sourceMap = load.metadata.sourceMap;
    if (sourceMap) {
      if (typeof sourceMap != 'object')
        throw new TypeError('load.metadata.sourceMap must be set to an object.');

      sourceMap = JSON.stringify(sourceMap);
    }

    return (wrap ? '(function(System, SystemJS) {' : '') + load.source + (wrap ? '\n})(System, System);' : '')
        // adds the sourceURL comment if not already present
        + (load.source.substr(lastLineIndex, 15) != '\n//# sourceURL=' 
          ? '\n//# sourceURL=' + load.address + (sourceMap ? '!transpiled' : '') : '')
        // add sourceMappingURL if load.metadata.sourceMap is set
        + (sourceMap && hasBtoa && '\n//# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(sourceMap))) || '');
  }

  var curLoad;

  // System.register, System.registerDynamic, AMD define pipeline
  // if currently evalling code here, immediately reduce the registered entry against the load record
  hook('pushRegister_', function() {
    return function(register) {
      if (!curLoad)
        return false;

      this.reduceRegister_(curLoad, register);
      return true;
    };
  });

  // System clobbering protection (mostly for Traceur)
  var curSystem;
  var callCounter = 0;
  function preExec(loader, load) {
    curLoad = load;
    if (callCounter++ == 0)
      curSystem = __global.System;
    __global.System = __global.SystemJS = loader; 
  }
  function postExec() {
    if (--callCounter == 0)
      __global.System = __global.SystemJS = curSystem;
    curLoad = undefined;
  }

  var vm;
  __exec = function(load) {
    if (!load.source)
      return;
    if ((load.metadata.integrity || load.metadata.nonce) && supportsScriptExec)
      return scriptExec.call(this, load);
    try {
      preExec(this, load);
      curLoad = load;
      // global scoped eval for node (avoids require scope leak)
      if (this._nodeRequire) {
        vm = vm || this._nodeRequire('vm');
        vm.runInThisContext(getSource(load));
      }
      else {
        (0, eval)(getSource(load));
      }
      postExec();
    }
    catch(e) {
      postExec(); 
      throw addToError(e, 'Evaluating ' + load.address);
    }
  };

  var supportsScriptExec = false;
  if (isBrowser && typeof document != 'undefined' && document.getElementsByTagName) {
    var scripts = document.getElementsByTagName('script');
    $__curScript = scripts[scripts.length - 1];

    if (!(window.chrome && window.chrome.extension || navigator.userAgent.match(/^Node\.js/)))
      supportsScriptExec = true;
  }

  // script execution via injecting a script tag into the page
  // this allows CSP integrity and nonce to be set for CSP environments
  var head;
  function scriptExec(load) {
    if (!head)
      head = document.head || document.body || document.documentElement;

    var script = document.createElement('script');
    script.text = getSource(load, false);
    var onerror = window.onerror;
    var e;
    window.onerror = function(_e) {
      e = addToError(_e, 'Evaluating ' + load.address);
    }
    preExec(this, load);

    if (load.metadata.integrity)
      script.setAttribute('integrity', load.metadata.integrity);
    if (load.metadata.nonce)
      script.setAttribute('nonce', load.metadata.nonce);

    head.appendChild(script);
    head.removeChild(script);
    postExec();
    window.onerror = onerror;
    if (e)
      throw e;
  }

})();
var absURLRegEx = /^[^\/]+:\/\//;

function readMemberExpression(p, value) {
  var pParts = p.split('.');
  while (pParts.length)
    value = value[pParts.shift()];
  return value;
}

var baseURLCache = {};
function getBaseURLObj() {
  if (baseURLCache[this.baseURL])
    return baseURLCache[this.baseURL];

  // normalize baseURL if not already
  if (this.baseURL[this.baseURL.length - 1] != '/')
    this.baseURL += '/';

  var baseURL = new URL(this.baseURL, baseURI);

  this.baseURL = baseURL.href;

  return (baseURLCache[this.baseURL] = baseURL);
}

function getMapMatch(map, name) {
  var bestMatch, bestMatchLength = 0;

  for (var p in map) {
    if (name.substr(0, p.length) == p && (name.length == p.length || name[p.length] == '/')) {
      var curMatchLength = p.split('/').length;
      if (curMatchLength <= bestMatchLength)
        continue;
      bestMatch = p;
      bestMatchLength = curMatchLength;
    }
  }

  return bestMatch;
}

function setProduction(isProduction) {
  this.set('@system-env', this.newModule({
    browser: isBrowser,
    node: !!this._nodeRequire,
    production: isProduction,
    'default': true
  }));
}

var baseURIObj = new URL(baseURI);

hookConstructor(function(constructor) {
  return function() {
    constructor.call(this);

    // support baseURL
    this.baseURL = baseURI.substr(0, baseURI.lastIndexOf('/') + 1);

    // support map and paths
    this.map = {};
    this.paths = {};

    // global behaviour flags
    this.warnings = false;
    this.defaultJSExtensions = false;
    this.pluginFirst = false;
    this.loaderErrorStack = false;

    // by default load ".json" files as json
    // leading * meta doesn't need normalization
    // NB add this in next breaking release
    // this.meta['*.json'] = { format: 'json' };

    // support the empty module, as a concept
    this.set('@empty', this.newModule({}));

    setProduction.call(this, false);
  };
});

// include the node require since we're overriding it
if (typeof require != 'undefined' && typeof process != 'undefined' && !process.browser)
  SystemJSLoader.prototype._nodeRequire = require;

var nodeCoreModules = ['assert', 'buffer', 'child_process', 'cluster', 'console', 'constants', 
    'crypto', 'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'https', 'module', 'net', 'os', 'path', 
    'process', 'punycode', 'querystring', 'readline', 'repl', 'stream', 'string_decoder', 'sys', 'timers', 
    'tls', 'tty', 'url', 'util', 'vm', 'zlib'];

/*
  Core SystemJS Normalization

  If a name is relative, we apply URL normalization to the page
  If a name is an absolute URL, we leave it as-is

  Plain names (neither of the above) run through the map and paths
  normalization phases.

  The paths normalization phase applies last (paths extension), which
  defines the `decanonicalize` function and normalizes everything into
  a URL.
 */

function isPlain(name) {
  return (name[0] != '.' || (!!name[1] && name[1] != '/' && name[1] != '.')) && name[0] != '/' && !name.match(absURLRegEx);
}

function urlResolve(name, parent) {
  if (parent)
    parent = parent.replace(/#/g, '%05');
  return new URL(name, parent || baseURIObj).href.replace(/%05/g, '#');
}

// only applies to plain names
function baseURLResolve(loader, name) {
  return new URL(name, getBaseURLObj.call(loader)).href;
}

function coreResolve(name, parentName) {
  // standard URL resolution
  if (!isPlain(name))
    return urlResolve(name, parentName);

  // plain names not starting with './', '://' and '/' go through custom resolution
  var mapMatch = getMapMatch(this.map, name);

  if (mapMatch) {
    name = this.map[mapMatch] + name.substr(mapMatch.length);

    if (!isPlain(name))
      return urlResolve(name);
  }

  if (this.has(name))
    return name;
  // dynamically load node-core modules when requiring `@node/fs` for example
  if (name.substr(0, 6) == '@node/' && nodeCoreModules.indexOf(name.substr(6)) != -1) {
    if (!this._nodeRequire)
      throw new TypeError('Error loading ' + name + '. Can only load node core modules in Node.');
    this.set(name, this.newModule(getESModule(this._nodeRequire(name.substr(6)))));
    return name;
  }

  var pathed = applyPaths(this.paths, name);

  if (pathed && !isPlain(pathed))
    return urlResolve(pathed);

  return baseURLResolve(this, pathed || name);
}

hook('normalize', function(normalize) {
  return function(name, parentName, skipExt) {
    var resolved = coreResolve.call(this, name, parentName);
    if (!skipExt && this.defaultJSExtensions && resolved.substr(resolved.length - 3, 3) != '.js' && !isPlain(resolved))
      resolved += '.js';
    return resolved;
  };
});

// percent encode just '#' in urls if using HTTP requests
var httpRequest = typeof XMLHttpRequest != 'undefined';
hook('locate', function(locate) {
  return function(load) {
    return Promise.resolve(locate.call(this, load))
    .then(function(address) {
      if (httpRequest)
        return address.replace(/#/g, '%23');
      return address;
    });
  };
});

/*
 * Fetch with authorization
 */
hook('fetch', function() {
  return function(load) {
    return new Promise(function(resolve, reject) {
      fetchTextFromURL(load.address, load.metadata.authorization, resolve, reject);
    });
  };
});

/*
  __useDefault
  
  When a module object looks like:
  newModule(
    __useDefault: true,
    default: 'some-module'
  })

  Then importing that module provides the 'some-module'
  result directly instead of the full module.

  Useful for eg module.exports = function() {}
*/
hook('import', function(systemImport) {
  return function(name, parentName, parentAddress) {
    if (parentName && parentName.name)
      warn.call(this, 'SystemJS.import(name, { name: parentName }) is deprecated for SystemJS.import(name, parentName), while importing ' + name + ' from ' + parentName.name);
    return systemImport.call(this, name, parentName, parentAddress).then(function(module) {
      return module.__useDefault ? module['default'] : module;
    });
  };
});

/*
 * Allow format: 'detect' meta to enable format detection
 */
hook('translate', function(systemTranslate) {
  return function(load) {
    if (load.metadata.format == 'detect')
      load.metadata.format = undefined;
    return systemTranslate.call(this, load);
  };
});


/*
 * JSON format support
 *
 * Supports loading JSON files as a module format itself
 *
 * Usage:
 *
 * SystemJS.config({
 *   meta: {
 *     '*.json': { format: 'json' }
 *   }
 * });
 *
 * Module is returned as if written:
 *
 * export default {JSON}
 *
 * No named exports are provided
 *
 * Files ending in ".json" are treated as json automatically by SystemJS
 */
hook('instantiate', function(instantiate) {
  return function(load) {
    if (load.metadata.format == 'json' && !this.builder) {
      var entry = load.metadata.entry = createEntry();
      entry.deps = [];
      entry.execute = function() {
        try {
          return JSON.parse(load.source);
        }
        catch(e) {
          throw new Error("Invalid JSON file " + load.name);
        }
      };
    }
  };
})

/*
 Extend config merging one deep only

  loader.config({
    some: 'random',
    config: 'here',
    deep: {
      config: { too: 'too' }
    }
  });

  <=>

  loader.some = 'random';
  loader.config = 'here'
  loader.deep = loader.deep || {};
  loader.deep.config = { too: 'too' };


  Normalizes meta and package configs allowing for:

  SystemJS.config({
    meta: {
      './index.js': {}
    }
  });

  To become

  SystemJS.meta['https://thissite.com/index.js'] = {};

  For easy normalization canonicalization with latest URL support.

*/
SystemJSLoader.prototype.env = 'development';

var curCurScript;
SystemJSLoader.prototype.config = function(cfg) {
  var loader = this;

  if ('loaderErrorStack' in cfg) {
    curCurScript = $__curScript;
    if (cfg.loaderErrorStack)
      $__curScript = undefined;
    else
      $__curScript = curCurScript;
  }

  if ('warnings' in cfg)
    loader.warnings = cfg.warnings;

  // transpiler deprecation path
  if (cfg.transpilerRuntime === false)
    loader._loader.loadedTranspilerRuntime = true;

  // always configure baseURL first
  if (cfg.baseURL) {
    var hasConfig = false;
    function checkHasConfig(obj) {
      for (var p in obj)
        if (hasOwnProperty.call(obj, p))
          return true;
    }
    if (checkHasConfig(loader.packages) || checkHasConfig(loader.meta) || checkHasConfig(loader.depCache) || checkHasConfig(loader.bundles) || checkHasConfig(loader.packageConfigPaths))
      throw new TypeError('Incorrect configuration order. The baseURL must be configured with the first SystemJS.config call.');

    loader.baseURL = cfg.baseURL;

    // sanitize baseURL
    getBaseURLObj.call(loader);
  }

  if (cfg.defaultJSExtensions) {
    loader.defaultJSExtensions = cfg.defaultJSExtensions;
    warn.call(loader, 'The defaultJSExtensions configuration option is deprecated, use packages configuration instead.');
  }

  if (cfg.pluginFirst)
    loader.pluginFirst = cfg.pluginFirst;

  if (cfg.production)
    setProduction.call(loader, true);

  if (cfg.paths) {
    for (var p in cfg.paths)
      loader.paths[p] = cfg.paths[p];
  }

  if (cfg.map) {
    var objMaps = '';
    for (var p in cfg.map) {
      var v = cfg.map[p];

      // object map backwards-compat into packages configuration
      if (typeof v !== 'string') {
        objMaps += (objMaps.length ? ', ' : '') + '"' + p + '"';

        var defaultJSExtension = loader.defaultJSExtensions && p.substr(p.length - 3, 3) != '.js';
        var prop = loader.decanonicalize(p);
        if (defaultJSExtension && prop.substr(prop.length - 3, 3) == '.js')
          prop = prop.substr(0, prop.length - 3);

        // if a package main, revert it
        var pkgMatch = '';
        for (var pkg in loader.packages) {
          if (prop.substr(0, pkg.length) == pkg 
              && (!prop[pkg.length] || prop[pkg.length] == '/') 
              && pkgMatch.split('/').length < pkg.split('/').length)
            pkgMatch = pkg;
        }
        if (pkgMatch && loader.packages[pkgMatch].main)
          prop = prop.substr(0, prop.length - loader.packages[pkgMatch].main.length - 1);

        var pkg = loader.packages[prop] = loader.packages[prop] || {};
        pkg.map = v;
      }
      else {
        loader.map[p] = v;
      }
    }
    if (objMaps)
      warn.call(loader, 'The map configuration for ' + objMaps + ' uses object submaps, which is deprecated in global map.\nUpdate this to use package contextual map with configs like SystemJS.config({ packages: { "' + p + '": { map: {...} } } }).');
  }

  if (cfg.packageConfigPaths) {
    var packageConfigPaths = [];
    for (var i = 0; i < cfg.packageConfigPaths.length; i++) {
      var path = cfg.packageConfigPaths[i];
      var packageLength = Math.max(path.lastIndexOf('*') + 1, path.lastIndexOf('/'));
      var defaultJSExtension = loader.defaultJSExtensions && path.substr(packageLength - 3, 3) != '.js';
      var normalized = loader.decanonicalize(path.substr(0, packageLength));
      if (defaultJSExtension && normalized.substr(normalized.length - 3, 3) == '.js')
        normalized = normalized.substr(0, normalized.length - 3);
      packageConfigPaths[i] = normalized + path.substr(packageLength);
    }
    loader.packageConfigPaths = packageConfigPaths;
  }

  if (cfg.bundles) {
    for (var p in cfg.bundles) {
      var bundle = [];
      for (var i = 0; i < cfg.bundles[p].length; i++) {
        var defaultJSExtension = loader.defaultJSExtensions && cfg.bundles[p][i].substr(cfg.bundles[p][i].length - 3, 3) != '.js';
        var normalizedBundleDep = loader.decanonicalize(cfg.bundles[p][i]);
        if (defaultJSExtension && normalizedBundleDep.substr(normalizedBundleDep.length - 3, 3) == '.js')
          normalizedBundleDep = normalizedBundleDep.substr(0, normalizedBundleDep.length - 3);
        bundle.push(normalizedBundleDep);
      }
      loader.bundles[p] = bundle;
    }
  }

  if (cfg.packages) {
    for (var p in cfg.packages) {
      if (p.match(/^([^\/]+:)?\/\/$/))
        throw new TypeError('"' + p + '" is not a valid package name.');

      var prop = coreResolve.call(loader, p);

      // allow trailing slash in packages
      if (prop[prop.length - 1] == '/')
        prop = prop.substr(0, prop.length - 1);

      loader.packages[prop] = loader.packages[prop] || {};

      var pkg = cfg.packages[p];

      // meta backwards compatibility
      if (pkg.modules) {
        warn.call(loader, 'Package ' + p + ' is configured with "modules", which is deprecated as it has been renamed to "meta".');
        pkg.meta = pkg.modules;
        delete pkg.modules;
      }

      if (typeof pkg.main == 'object') {
        pkg.map = pkg.map || {};
        pkg.map['./@main'] = pkg.main;
        pkg.main['default'] = pkg.main['default'] || './';
        pkg.main = '@main';
      }

      for (var q in pkg)
        if (indexOf.call(packageProperties, q) == -1)
          warn.call(loader, '"' + q + '" is not a valid package configuration option in package ' + p);

      extendMeta(loader.packages[prop], pkg);
    }
  }

  for (var c in cfg) {
    var v = cfg[c];

    if (c == 'baseURL' || c == 'map' || c == 'packages' || c == 'bundles' || c == 'paths' || c == 'warnings' || c == 'packageConfigPaths' || c == 'loaderErrorStack')
      continue;

    if (typeof v != 'object' || v instanceof Array) {
      loader[c] = v;
    }
    else {
      loader[c] = loader[c] || {};

      for (var p in v) {
        // base-level wildcard meta does not normalize to retain catch-all quality
        if (c == 'meta' && p[0] == '*') {
          loader[c][p] = v[p];
        }
        else if (c == 'meta') {
          // meta can go through global map, with defaultJSExtensions adding
          var resolved = coreResolve.call(loader, p);
          if (loader.defaultJSExtensions && resolved.substr(resolved.length - 3, 3) != '.js' && !isPlain(resolved))
            resolved += '.js';
          loader[c][resolved] = v[p];
        }
        else if (c == 'depCache') {
          var defaultJSExtension = loader.defaultJSExtensions && p.substr(p.length - 3, 3) != '.js';
          var prop = loader.decanonicalize(p);
          if (defaultJSExtension && prop.substr(prop.length - 3, 3) == '.js')
            prop = prop.substr(0, prop.length - 3);
          loader[c][prop] = v[p];
        }
        else {
          loader[c][p] = v[p];
        }
      }
    }
  }
};/*
 * Package Configuration Extension
 *
 * Example:
 *
 * SystemJS.packages = {
 *   jquery: {
 *     main: 'index.js', // when not set, package name is requested directly
 *     format: 'amd',
 *     defaultExtension: 'ts', // defaults to 'js', can be set to false
 *     modules: {
 *       '*.ts': {
 *         loader: 'typescript'
 *       },
 *       'vendor/sizzle.js': {
 *         format: 'global'
 *       }
 *     },
 *     map: {
 *        // map internal require('sizzle') to local require('./vendor/sizzle')
 *        sizzle: './vendor/sizzle.js',
 *        // map any internal or external require of 'jquery/vendor/another' to 'another/index.js'
 *        './vendor/another.js': './another/index.js',
 *        // test.js / test -> lib/test.js
 *        './test.js': './lib/test.js',
 *
 *        // environment-specific map configurations
 *        './index.js': {
 *          '~browser': './index-node.js'
 *        }
 *     },
 *     // allows for setting package-prefixed depCache
 *     // keys are normalized module names relative to the package itself
 *     depCache: {
 *       // import 'package/index.js' loads in parallel package/lib/test.js,package/vendor/sizzle.js
 *       './index.js': ['./test'],
 *       './test.js': ['external-dep'],
 *       'external-dep/path.js': ['./another.js']
 *     }
 *   }
 * };
 *
 * Then:
 *   import 'jquery'                       -> jquery/index.js
 *   import 'jquery/submodule'             -> jquery/submodule.js
 *   import 'jquery/submodule.ts'          -> jquery/submodule.ts loaded as typescript
 *   import 'jquery/vendor/another'        -> another/index.js
 *
 * Detailed Behaviours
 * - main can have a leading "./" can be added optionally
 * - map and defaultExtension are applied to the main
 * - defaultExtension adds the extension only if the exact extension is not present
 * - defaultJSExtensions applies after map when defaultExtension is not set
 * - if a meta value is available for a module, map and defaultExtension are skipped
 * - like global map, package map also applies to subpaths (sizzle/x, ./vendor/another/sub)
 * - condition module map is '@env' module in package or '@system-env' globally
 * - map targets support conditional interpolation ('./x': './x.#{|env}.js')
 * - internal package map targets cannot use boolean conditionals
 *
 * Package Configuration Loading
 *
 * Not all packages may already have their configuration present in the System config
 * For these cases, a list of packageConfigPaths can be provided, which when matched against
 * a request, will first request a ".json" file by the package name to derive the package
 * configuration from. This allows dynamic loading of non-predetermined code, a key use
 * case in SystemJS.
 *
 * Example:
 *
 *   SystemJS.packageConfigPaths = ['packages/test/package.json', 'packages/*.json'];
 *
 *   // will first request 'packages/new-package/package.json' for the package config
 *   // before completing the package request to 'packages/new-package/path'
 *   SystemJS.import('packages/new-package/path');
 *
 *   // will first request 'packages/test/package.json' before the main
 *   SystemJS.import('packages/test');
 *
 * When a package matches packageConfigPaths, it will always send a config request for
 * the package configuration.
 * The package name itself is taken to be the match up to and including the last wildcard
 * or trailing slash.
 * The most specific package config path will be used.
 * Any existing package configurations for the package will deeply merge with the
 * package config, with the existing package configurations taking preference.
 * To opt-out of the package configuration request for a package that matches
 * packageConfigPaths, use the { configured: true } package config option.
 *
 */
(function() {

  hookConstructor(function(constructor) {
    return function() {
      constructor.call(this);
      this.packages = {};
      this.packageConfigPaths = [];
    };
  });

  function getPackage(loader, normalized) {
    // use most specific package
    var curPkg, curPkgLen = 0, pkgLen;
    for (var p in loader.packages) {
      if (normalized.substr(0, p.length) === p && (normalized.length === p.length || normalized[p.length] === '/')) {
        pkgLen = p.split('/').length;
        if (pkgLen > curPkgLen) {
          curPkg = p;
          curPkgLen = pkgLen;
        }
      }
    }
    return curPkg;
  }

  function addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions) {
    // don't apply extensions to folders or if defaultExtension = false
    if (!subPath || subPath[subPath.length - 1] == '/' || skipExtensions || pkg.defaultExtension === false)
      return subPath;

    // NB are you sure about this?
    // skip if we have interpolation conditional syntax in subPath?
    if (subPath.match(interpolationRegEx))
      return subPath;

    var metaMatch = false;

    // exact meta or meta with any content after the last wildcard skips extension
    if (pkg.meta)
      getMetaMatches(pkg.meta, subPath, function(metaPattern, matchMeta, matchDepth) {
        if (matchDepth == 0 || metaPattern.lastIndexOf('*') != metaPattern.length - 1)
          return metaMatch = true;
      });

    // exact global meta or meta with any content after the last wildcard skips extension
    if (!metaMatch && loader.meta)
      getMetaMatches(loader.meta, pkgName + '/' + subPath, function(metaPattern, matchMeta, matchDepth) {
        if (matchDepth == 0 || metaPattern.lastIndexOf('*') != metaPattern.length - 1)
          return metaMatch = true;
      });

    if (metaMatch)
      return subPath;

    // work out what the defaultExtension is and add if not there already
    // NB reconsider if default should really be ".js"?
    var defaultExtension = '.' + (pkg.defaultExtension || 'js');
    if (subPath.substr(subPath.length - defaultExtension.length) != defaultExtension)
      return subPath + defaultExtension;
    else
      return subPath;
  }

  function applyPackageConfigSync(loader, pkg, pkgName, subPath, skipExtensions) {
    // main
    if (!subPath) {
      if (pkg.main)
        subPath = pkg.main.substr(0, 2) == './' ? pkg.main.substr(2) : pkg.main;
      // also no submap if name is package itself (import 'pkg' -> 'path/to/pkg.js')
      else
        // NB can add a default package main convention here when defaultJSExtensions is deprecated
        // if it becomes internal to the package then it would no longer be an exit path
        return pkgName + (loader.defaultJSExtensions ? '.js' : '');
    }

    // map config checking without then with extensions
    if (pkg.map) {
      var mapPath = './' + subPath;

      var mapMatch = getMapMatch(pkg.map, mapPath);

      // we then check map with the default extension adding
      if (!mapMatch) {
        mapPath = './' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions);
        if (mapPath != './' + subPath)
          mapMatch = getMapMatch(pkg.map, mapPath);
      }
      if (mapMatch)
        return doMapSync(loader, pkg, pkgName, mapMatch, mapPath, skipExtensions);
    }

    // normal package resolution
    return pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions);
  }

  function validateMapping(mapMatch, mapped, pkgName) {
    // disallow internal to subpath maps
    if (mapMatch == '.')
      throw new Error('Package ' + pkgName + ' has a map entry for "." which is not permitted.');
    // disallow internal ./x -> ./x/y recursive maps
    else if (mapped.substr(0, mapMatch.length) == mapMatch && (mapMatch[mapMatch.length - 1] != '/' && mapped[mapMatch.length] == '/'))
      throw new Error('Package ' + pkgName + ' has a recursive map for "' + mapMatch + '" which is not permitted.');
  }

  function doMapSync(loader, pkg, pkgName, mapMatch, path, skipExtensions) {
    var mapped = pkg.map[mapMatch];

    if (typeof mapped == 'object')
      throw new Error('Synchronous conditional normalization not supported sync normalizing ' + mapMatch + ' in ' + pkgName);

    validateMapping(mapMatch, mapped, pkgName);

    // ignore conditionals in sync
    if (typeof mapped != 'string')
      mapped = mapMatch = path;

    validateMapping(mapMatch, mapped, pkgName);

    // package map to main / base-level
    if (mapped == '.')
      mapped = pkgName;

    // internal package map
    else if (mapped.substr(0, 2) == './')
      return pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, mapped.substr(2) + path.substr(mapMatch.length), skipExtensions);
    
    // external map reference
    return loader.normalizeSync(mapped + path.substr(mapMatch.length), pkgName + '/');
  }

  function applyPackageConfig(loader, pkg, pkgName, subPath, skipExtensions) {
    // main
    if (!subPath) {
      if (pkg.main)
        subPath = pkg.main.substr(0, 2) == './' ? pkg.main.substr(2) : pkg.main;
      // also no submap if name is package itself (import 'pkg' -> 'path/to/pkg.js')
      else
        // NB can add a default package main convention here when defaultJSExtensions is deprecated
        // if it becomes internal to the package then it would no longer be an exit path
        return Promise.resolve(pkgName + (loader.defaultJSExtensions ? '.js' : ''));
    }

    // map config checking without then with extensions
    var mapPath, mapMatch;

    if (pkg.map) {
      mapPath = './' + subPath;
      mapMatch = getMapMatch(pkg.map, mapPath);

      // we then check map with the default extension adding
      if (!mapMatch) {
        mapPath = './' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions);
        if (mapPath != './' + subPath)
          mapMatch = getMapMatch(pkg.map, mapPath);
      }
    }

    return (mapMatch ? doMap(loader, pkg, pkgName, mapMatch, mapPath, skipExtensions) : Promise.resolve())
    .then(function(mapped) {
      if (mapped)
        return Promise.resolve(mapped);

      // normal package resolution / fallback resolution for no conditional match
      return Promise.resolve(pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions));
    });
  }

  function doStringMap(loader, pkg, pkgName, mapMatch, mapped, path, skipExtensions) {
    // NB the interpolation cases should strictly skip subsequent interpolation

    // package map to main / base-level
    if (mapped == '.')
      mapped = pkgName;
    
    // internal package map
    else if (mapped.substr(0, 2) == './')
      return Promise.resolve(pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, mapped.substr(2) + path.substr(mapMatch.length), skipExtensions))
      .then(function(name) {
        return interpolateConditional.call(loader, name, pkgName + '/');
      });
    
    // external map reference
    return loader.normalize(mapped + path.substr(mapMatch.length), pkgName + '/');
  }

  function doMap(loader, pkg, pkgName, mapMatch, path, skipExtensions) {
    var mapped = pkg.map[mapMatch];

    if (typeof mapped == 'string') {
      validateMapping(mapMatch, mapped, pkgName);
      return doStringMap(loader, pkg, pkgName, mapMatch, mapped, path, skipExtensions);
    }

    // we use a special conditional syntax to allow the builder to handle conditional branch points further
    if (loader.builder)
      return Promise.resolve(pkgName + '/#:' + path);

    // map object -> conditional map
    return loader['import'](pkg.map['@env'] || '@system-env', pkgName)
    .then(function(env) {
      // first map condition to match is used
      for (var e in mapped) {
        var negate = e[0] == '~';

        var value = readMemberExpression(negate ? e.substr(1) : e, env);

        if (!negate && value || negate && !value)
          return mapped[e];
      }
    })
    .then(function(mapped) {
      if (mapped) {
        if (typeof mapped != 'string')
          throw new Error('Unable to map a package conditional to a package conditional.');
        validateMapping(mapMatch, mapped, pkgName);
        return doStringMap(loader, pkg, pkgName, mapMatch, mapped, path, skipExtensions);
      }

      // no environment match -> fallback to original subPath by returning undefined
    });
  }

  // normalizeSync = decanonicalize + package resolution
  SystemJSLoader.prototype.normalizeSync = SystemJSLoader.prototype.decanonicalize = SystemJSLoader.prototype.normalize;

  // decanonicalize must JUST handle package defaultExtension: false case when defaultJSExtensions is set
  // to be deprecated!
  hook('decanonicalize', function(decanonicalize) {
    return function(name, parentName) {
      if (this.builder)
        return decanonicalize.call(this, name, parentName, true);

      var decanonicalized = decanonicalize.call(this, name, parentName);

      if (!this.defaultJSExtensions)
        return decanonicalized;
    
      var pkgName = getPackage(this, decanonicalized);

      var pkg = this.packages[pkgName];
      var defaultExtension = pkg && pkg.defaultExtension;

      if (defaultExtension == undefined && pkg && pkg.meta)
        getMetaMatches(pkg.meta, decanonicalized.substr(pkgName), function(metaPattern, matchMeta, matchDepth) {
          if (matchDepth == 0 || metaPattern.lastIndexOf('*') != metaPattern.length - 1) {
            defaultExtension = false;
            return true;
          }
        });
      
      if ((defaultExtension === false || defaultExtension && defaultExtension != '.js') && name.substr(name.length - 3, 3) != '.js' && decanonicalized.substr(decanonicalized.length - 3, 3) == '.js')
        decanonicalized = decanonicalized.substr(0, decanonicalized.length - 3);

      return decanonicalized;
    };
  });

  hook('normalizeSync', function(normalizeSync) {
    return function(name, parentName, isPlugin) {
      warn.call(this, 'SystemJS.normalizeSync has been deprecated for SystemJS.decanonicalize.');

      var loader = this;
      isPlugin = isPlugin === true;

      // apply contextual package map first
      // (we assume the parent package config has already been loaded)
      if (parentName)
        var parentPackageName = getPackage(loader, parentName) ||
            loader.defaultJSExtensions && parentName.substr(parentName.length - 3, 3) == '.js' &&
            getPackage(loader, parentName.substr(0, parentName.length - 3));

      var parentPackage = parentPackageName && loader.packages[parentPackageName];

      // ignore . since internal maps handled by standard package resolution
      if (parentPackage && name[0] != '.') {
        var parentMap = parentPackage.map;
        var parentMapMatch = parentMap && getMapMatch(parentMap, name);

        if (parentMapMatch && typeof parentMap[parentMapMatch] == 'string')
          return doMapSync(loader, parentPackage, parentPackageName, parentMapMatch, name, isPlugin);
      }

      var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';

      // apply map, core, paths, contextual package map
      var normalized = normalizeSync.call(loader, name, parentName);

      // undo defaultJSExtension
      if (defaultJSExtension && normalized.substr(normalized.length - 3, 3) != '.js')
        defaultJSExtension = false;
      if (defaultJSExtension)
        normalized = normalized.substr(0, normalized.length - 3);

      var pkgConfigMatch = getPackageConfigMatch(loader, normalized);
      var pkgName = pkgConfigMatch && pkgConfigMatch.packageName || getPackage(loader, normalized);

      if (!pkgName)
        return normalized + (defaultJSExtension ? '.js' : '');

      var subPath = normalized.substr(pkgName.length + 1);

      return applyPackageConfigSync(loader, loader.packages[pkgName] || {}, pkgName, subPath, isPlugin);
    };
  });

  hook('normalize', function(normalize) {
    return function(name, parentName, isPlugin) {
      var loader = this;
      isPlugin = isPlugin === true;

      return Promise.resolve()
      .then(function() {
        // apply contextual package map first
        // (we assume the parent package config has already been loaded)
        if (parentName)
          var parentPackageName = getPackage(loader, parentName) ||
              loader.defaultJSExtensions && parentName.substr(parentName.length - 3, 3) == '.js' &&
              getPackage(loader, parentName.substr(0, parentName.length - 3));

        var parentPackage = parentPackageName && loader.packages[parentPackageName];

        // ignore . since internal maps handled by standard package resolution
        if (parentPackage && name.substr(0, 2) != './') {
          var parentMap = parentPackage.map;
          var parentMapMatch = parentMap && getMapMatch(parentMap, name);

          if (parentMapMatch)
            return doMap(loader, parentPackage, parentPackageName, parentMapMatch, name, isPlugin);
        }

        return Promise.resolve();
      })
      .then(function(mapped) {
        if (mapped)
          return mapped;

        var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';

        // apply map, core, paths, contextual package map
        var normalized = normalize.call(loader, name, parentName);

        // undo defaultJSExtension
        if (defaultJSExtension && normalized.substr(normalized.length - 3, 3) != '.js')
          defaultJSExtension = false;
        if (defaultJSExtension)
          normalized = normalized.substr(0, normalized.length - 3);

        var pkgConfigMatch = getPackageConfigMatch(loader, normalized);
        var pkgName = pkgConfigMatch && pkgConfigMatch.packageName || getPackage(loader, normalized);

        if (!pkgName)
          return Promise.resolve(normalized + (defaultJSExtension ? '.js' : ''));

        var pkg = loader.packages[pkgName];

        // if package is already configured or not a dynamic config package, use existing package config
        var isConfigured = pkg && (pkg.configured || !pkgConfigMatch);
        return (isConfigured ? Promise.resolve(pkg) : loadPackageConfigPath(loader, pkgName, pkgConfigMatch.configPath))
        .then(function(pkg) {
          var subPath = normalized.substr(pkgName.length + 1);

          return applyPackageConfig(loader, pkg, pkgName, subPath, isPlugin);
        });
      });
    };
  });

  // check if the given normalized name matches a packageConfigPath
  // if so, loads the config
  var packageConfigPaths = {};

  // data object for quick checks against package paths
  function createPkgConfigPathObj(path) {
    var lastWildcard = path.lastIndexOf('*');
    var length = Math.max(lastWildcard + 1, path.lastIndexOf('/'));
    return {
      length: length,
      regEx: new RegExp('^(' + path.substr(0, length).replace(/[.+?^${}()|[\]\\]/g, '\\$&').replace(/\*/g, '[^\\/]+') + ')(\\/|$)'),
      wildcard: lastWildcard != -1
    };
  }

  // most specific match wins
  function getPackageConfigMatch(loader, normalized) {
    var pkgName, exactMatch = false, configPath;
    for (var i = 0; i < loader.packageConfigPaths.length; i++) {
      var packageConfigPath = loader.packageConfigPaths[i];
      var p = packageConfigPaths[packageConfigPath] || (packageConfigPaths[packageConfigPath] = createPkgConfigPathObj(packageConfigPath));
      if (normalized.length < p.length)
        continue;
      var match = normalized.match(p.regEx);
      if (match && (!pkgName || (!(exactMatch && p.wildcard) && pkgName.length < match[1].length))) {
        pkgName = match[1];
        exactMatch = !p.wildcard;
        configPath = pkgName + packageConfigPath.substr(p.length);
      }
    }

    if (!pkgName)
      return;

    return {
      packageName: pkgName,
      configPath: configPath
    };
  }

  function loadPackageConfigPath(loader, pkgName, pkgConfigPath) {
    var configLoader = loader.pluginLoader || loader;

    // NB remove this when json is default
    (configLoader.meta[pkgConfigPath] = configLoader.meta[pkgConfigPath] || {}).format = 'json';
    configLoader.meta[pkgConfigPath].loader = null;

    return configLoader.load(pkgConfigPath)
    .then(function() {
      var cfg = configLoader.get(pkgConfigPath)['default'];

      // support "systemjs" prefixing
      if (cfg.systemjs)
        cfg = cfg.systemjs;

      // modules backwards compatibility
      if (cfg.modules) {
        cfg.meta = cfg.modules;
        warn.call(loader, 'Package config file ' + pkgConfigPath + ' is configured with "modules", which is deprecated as it has been renamed to "meta".');
      }

      // remove any non-system properties if generic config file (eg package.json)
      for (var p in cfg) {
        if (indexOf.call(packageProperties, p) == -1)
          delete cfg[p];
      }

      // deeply-merge (to first level) config with any existing package config
      var pkg = loader.packages[pkgName] = loader.packages[pkgName] || {};
      extendMeta(pkg, cfg, true);

      // support external depCache
      if (cfg.depCache) {
        for (var d in cfg.depCache) {
          var dNormalized;

          if (d.substr(0, 2) == './')
            dNormalized = pkgName + '/' + d.substr(2);
          else
            dNormalized = coreResolve.call(loader, d);
          loader.depCache[dNormalized] = (loader.depCache[dNormalized] || []).concat(cfg.depCache[d]);
        }
        delete cfg.depCache;
      }

      // main object becomes main map
      if (typeof pkg.main == 'object') {
        pkg.map = pkg.map || {};
        pkg.map['./@main'] = pkg.main;
        pkg.main['default'] = pkg.main['default'] || './';
        pkg.main = '@main';
      }

      return pkg;
    });
  }

  function getMetaMatches(pkgMeta, subPath, matchFn) {
    // wildcard meta
    var meta = {};
    var wildcardIndex;
    for (var module in pkgMeta) {
      // allow meta to start with ./ for flexibility
      var dotRel = module.substr(0, 2) == './' ? './' : '';
      if (dotRel)
        module = module.substr(2);

      wildcardIndex = module.indexOf('*');
      if (wildcardIndex === -1)
        continue;

      if (module.substr(0, wildcardIndex) == subPath.substr(0, wildcardIndex)
          && module.substr(wildcardIndex + 1) == subPath.substr(subPath.length - module.length + wildcardIndex + 1)) {
        // alow match function to return true for an exit path
        if (matchFn(module, pkgMeta[dotRel + module], module.split('/').length))
          return;
      }
    }
    // exact meta
    var exactMeta = pkgMeta[subPath] && pkgMeta.hasOwnProperty && pkgMeta.hasOwnProperty(subPath) ? pkgMeta[subPath] : pkgMeta['./' + subPath];
    if (exactMeta)
      matchFn(exactMeta, exactMeta, 0);
  }

  hook('locate', function(locate) {
    return function(load) {
      var loader = this;
      return Promise.resolve(locate.call(this, load))
      .then(function(address) {
        var pkgName = getPackage(loader, load.name);
        if (pkgName) {
          var pkg = loader.packages[pkgName];
          var subPath = load.name.substr(pkgName.length + 1);

          // format
          if (pkg.format)
            load.metadata.format = load.metadata.format || pkg.format;

          var meta = {};
          if (pkg.meta) {
            var bestDepth = 0;

            // NB support a main shorthand in meta here?
            getMetaMatches(pkg.meta, subPath, function(metaPattern, matchMeta, matchDepth) {
              if (matchDepth > bestDepth)
                bestDepth = matchDepth;
              extendMeta(meta, matchMeta, matchDepth && bestDepth > matchDepth);
            });

            extendMeta(load.metadata, meta);
          }
        }

        return address;
      });
    };
  });

})();
/*
 * Script tag fetch
 *
 * When load.metadata.scriptLoad is true, we load via script tag injection.
 */
(function() {

  if (typeof document != 'undefined')
    var head = document.getElementsByTagName('head')[0];

  var curSystem;
  var curRequire;

  // if doing worker executing, this is set to the load record being executed
  var workerLoad = null;
  
  // interactive mode handling method courtesy RequireJS
  var ieEvents = head && (function() {
    var s = document.createElement('script');
    var isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]';
    return s.attachEvent && !(s.attachEvent.toString && s.attachEvent.toString().indexOf('[native code') < 0) && !isOpera;
  })();

  // IE interactive-only part
  // we store loading scripts array as { script: <script>, load: {...} }
  var interactiveLoadingScripts = [];
  var interactiveScript;
  function getInteractiveScriptLoad() {
    if (interactiveScript && interactiveScript.script.readyState === 'interactive')
      return interactiveScript.load;

    for (var i = 0; i < interactiveLoadingScripts.length; i++)
      if (interactiveLoadingScripts[i].script.readyState == 'interactive') {
        interactiveScript = interactiveLoadingScripts[i];
        return interactiveScript.load;
      }
  }
  
  // System.register, System.registerDynamic, AMD define pipeline
  // this is called by the above methods when they execute
  // we then run the reduceRegister_ collection function either immediately
  // if we are in IE and know the currently executing script (interactive)
  // or later if we need to wait for the synchronous load callback to know the script
  var loadingCnt = 0;
  var registerQueue = [];
  hook('pushRegister_', function(pushRegister) {
    return function(register) {
      // if using eval-execution then skip
      if (pushRegister.call(this, register))
        return false;

      // if using worker execution, then we're done
      if (workerLoad)
        this.reduceRegister_(workerLoad, register);

      // detect if we know the currently executing load (IE)
      // if so, immediately call reduceRegister
      else if (ieEvents)
        this.reduceRegister_(getInteractiveScriptLoad(), register);

      // otherwise, add to our execution queue
      // to call reduceRegister on sync script load event
      else if (loadingCnt)
        registerQueue.push(register);

      // if we're not currently loading anything though
      // then do the reduction against a null load
      // (out of band named define or named register)
      // note even in non-script environments, this catch is used
      else
        this.reduceRegister_(null, register);

      return true;
    };
  });

  function webWorkerImport(loader, load) {
    return new Promise(function(resolve, reject) {
      if (load.metadata.integrity)
        reject(new Error('Subresource integrity checking is not supported in web workers.'));

      workerLoad = load;
      try {
        importScripts(load.address);
      }
      catch(e) {
        workerLoad = null;
        reject(e);
      }
      workerLoad = null;

      // if nothing registered, then something went wrong
      if (!load.metadata.entry)
        reject(new Error(load.address + ' did not call System.register or AMD define'));

      resolve('');
    });
  }

  // override fetch to use script injection
  hook('fetch', function(fetch) {
    return function(load) {
      var loader = this;

      if (load.metadata.format == 'json' || !load.metadata.scriptLoad || (!isBrowser && !isWorker))
        return fetch.call(this, load);

      if (isWorker)
        return webWorkerImport(loader, load);

      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        
        s.async = true;

        if (load.metadata.crossOrigin)
          s.crossOrigin = load.metadata.crossOrigin;

        if (load.metadata.integrity)
          s.setAttribute('integrity', load.metadata.integrity);

        if (ieEvents) {
          s.attachEvent('onreadystatechange', complete);
          interactiveLoadingScripts.push({
            script: s,
            load: load
          });
        }
        else {
          s.addEventListener('load', complete, false);
          s.addEventListener('error', error, false);
        }

        loadingCnt++;

        curSystem = __global.System;
        curRequire = __global.require;

        s.src = load.address;
        head.appendChild(s);

        function complete(evt) {
          if (s.readyState && s.readyState != 'loaded' && s.readyState != 'complete')
            return;

          loadingCnt--;

          // complete call is sync on execution finish
          // (in ie already done reductions)
          if (!load.metadata.entry && !registerQueue.length) {
            loader.reduceRegister_(load);
          }
          else if (!ieEvents) {
            for (var i = 0; i < registerQueue.length; i++)
              loader.reduceRegister_(load, registerQueue[i]);
            registerQueue = [];
          }

          cleanup();

          // if nothing registered, then something went wrong
          if (!load.metadata.entry && !load.metadata.bundle)
            reject(new Error(load.name + ' did not call System.register or AMD define. If loading a global module configure the global name via the meta exports property for script injection support.'));

          resolve('');
        }

        function error(evt) {
          cleanup();
          reject(new Error('Unable to load script ' + load.address));
        }

        function cleanup() {
          __global.System = curSystem;
          __global.require = curRequire;

          if (s.detachEvent) {
            s.detachEvent('onreadystatechange', complete);
            for (var i = 0; i < interactiveLoadingScripts.length; i++)
              if (interactiveLoadingScripts[i].script == s) {
                if (interactiveScript && interactiveScript.script == s)
                  interactiveScript = null;
                interactiveLoadingScripts.splice(i, 1);
              }
          }
          else {
            s.removeEventListener('load', complete, false);
            s.removeEventListener('error', error, false);
          }

          head.removeChild(s);
        }
      });
    };
  });
})();
/*
 * Instantiate registry extension
 *
 * Supports Traceur System.register 'instantiate' output for loading ES6 as ES5.
 *
 * - Creates the loader.register function
 * - Also supports metadata.format = 'register' in instantiate for anonymous register modules
 * - Also supports metadata.deps, metadata.execute and metadata.executingRequire
 *     for handling dynamic modules alongside register-transformed ES6 modules
 *
 *
 * The code here replicates the ES6 linking groups algorithm to ensure that
 * circular ES6 compiled into System.register can work alongside circular AMD 
 * and CommonJS, identically to the actual ES6 loader.
 *
 */


/*
 * Registry side table entries in loader.defined
 * Registry Entry Contains:
 *    - name
 *    - deps 
 *    - declare for declarative modules
 *    - execute for dynamic modules, different to declarative execute on module
 *    - executingRequire indicates require drives execution for circularity of dynamic modules
 *    - declarative optional boolean indicating which of the above
 *
 * Can preload modules directly on SystemJS.defined['my/module'] = { deps, execute, executingRequire }
 *
 * Then the entry gets populated with derived information during processing:
 *    - normalizedDeps derived from deps, created in instantiate
 *    - groupIndex used by group linking algorithm
 *    - evaluated indicating whether evaluation has happend
 *    - module the module record object, containing:
 *      - exports actual module exports
 *
 *    For dynamic we track the es module with:
 *    - esModule actual es module value
 *    - esmExports whether to extend the esModule with named exports
 *      
 *    Then for declarative only we track dynamic bindings with the 'module' records:
 *      - name
 *      - exports
 *      - setters declarative setter functions
 *      - dependencies, module records of dependencies
 *      - importers, module records of dependents
 *
 * After linked and evaluated, entries are removed, declarative module records remain in separate
 * module binding table
 *
 */

var leadingCommentAndMetaRegEx = /^(\s*\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\s*\/\/[^\n]*|\s*"[^"]+"\s*;?|\s*'[^']+'\s*;?)*\s*/;
function detectRegisterFormat(source) {
  var leadingCommentAndMeta = source.match(leadingCommentAndMetaRegEx);
  return leadingCommentAndMeta && source.substr(leadingCommentAndMeta[0].length, 15) == 'System.register';
}

function createEntry() {
  return {
    name: null,
    deps: null,
    originalIndices: null,
    declare: null,
    execute: null,
    executingRequire: false,
    declarative: false,
    normalizedDeps: null,
    groupIndex: null,
    evaluated: false,
    module: null,
    esModule: null,
    esmExports: false
  };
}

(function() {

  /*
   * There are two variations of System.register:
   * 1. System.register for ES6 conversion (2-3 params) - System.register([name, ]deps, declare)
   *    see https://github.com/ModuleLoader/es6-module-loader/wiki/System.register-Explained
   *
   * 2. System.registerDynamic for dynamic modules (3-4 params) - System.registerDynamic([name, ]deps, executingRequire, execute)
   * the true or false statement 
   *
   * this extension implements the linking algorithm for the two variations identical to the spec
   * allowing compiled ES6 circular references to work alongside AMD and CJS circular references.
   *
   */
  SystemJSLoader.prototype.register = function(name, deps, declare) {
    if (typeof name != 'string') {
      declare = deps;
      deps = name;
      name = null;
    }

    // dynamic backwards-compatibility
    // can be deprecated eventually
    if (typeof declare == 'boolean')
      return this.registerDynamic.apply(this, arguments);

    var entry = createEntry();
    // ideally wouldn't apply map config to bundle names but 
    // dependencies go through map regardless so we can't restrict
    // could reconsider in shift to new spec
    entry.name = name && (this.decanonicalize || this.normalize).call(this, name);
    entry.declarative = true;
    entry.deps = deps;
    entry.declare = declare;

    this.pushRegister_({
      amd: false,
      entry: entry
    });
  };
  SystemJSLoader.prototype.registerDynamic = function(name, deps, declare, execute) {
    if (typeof name != 'string') {
      execute = declare;
      declare = deps;
      deps = name;
      name = null;
    }

    // dynamic
    var entry = createEntry();
    entry.name = name && (this.decanonicalize || this.normalize).call(this, name);
    entry.deps = deps;
    entry.execute = execute;
    entry.executingRequire = declare;

    this.pushRegister_({
      amd: false,
      entry: entry
    });
  };
  hook('reduceRegister_', function() {
    return function(load, register) {
      if (!register)
        return;

      var entry = register.entry;
      var curMeta = load && load.metadata;

      // named register
      if (entry.name) {
        if (!(entry.name in this.defined))
          this.defined[entry.name] = entry;

        if (curMeta)
          curMeta.bundle = true;
      }
      // anonymous register
      if (!entry.name || load && entry.name == load.name) {
        if (!curMeta)
          throw new TypeError('Invalid System.register call. Anonymous System.register calls can only be made by modules loaded by SystemJS.import and not via script tags.');
        if (curMeta.entry) {
          if (curMeta.format == 'register')
            throw new Error('Multiple anonymous System.register calls in module ' + load.name + '. If loading a bundle, ensure all the System.register calls are named.');
          else
            throw new Error('Module ' + load.name + ' interpreted as ' + curMeta.format + ' module format, but called System.register.');
        }
        if (!curMeta.format)
          curMeta.format = 'register';
        curMeta.entry = entry;
      }
    };
  });

  hookConstructor(function(constructor) {
    return function() {
      constructor.call(this);

      this.defined = {};
      this._loader.moduleRecords = {};
    };
  });

  function buildGroups(entry, loader, groups) {
    groups[entry.groupIndex] = groups[entry.groupIndex] || [];

    if (indexOf.call(groups[entry.groupIndex], entry) != -1)
      return;

    groups[entry.groupIndex].push(entry);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = loader.defined[depName];
      
      // not in the registry means already linked / ES6
      if (!depEntry || depEntry.evaluated)
        continue;
      
      // now we know the entry is in our unlinked linkage group
      var depGroupIndex = entry.groupIndex + (depEntry.declarative != entry.declarative);

      // the group index of an entry is always the maximum
      if (depEntry.groupIndex === null || depEntry.groupIndex < depGroupIndex) {
        
        // if already in a group, remove from the old group
        if (depEntry.groupIndex !== null) {
          groups[depEntry.groupIndex].splice(indexOf.call(groups[depEntry.groupIndex], depEntry), 1);

          // if the old group is empty, then we have a mixed depndency cycle
          if (groups[depEntry.groupIndex].length == 0)
            throw new Error("Mixed dependency cycle detected");
        }

        depEntry.groupIndex = depGroupIndex;
      }

      buildGroups(depEntry, loader, groups);
    }
  }

  function link(name, loader) {
    var startEntry = loader.defined[name];

    // skip if already linked
    if (startEntry.module)
      return;

    startEntry.groupIndex = 0;

    var groups = [];

    buildGroups(startEntry, loader, groups);

    var curGroupDeclarative = !!startEntry.declarative == groups.length % 2;
    for (var i = groups.length - 1; i >= 0; i--) {
      var group = groups[i];
      for (var j = 0; j < group.length; j++) {
        var entry = group[j];

        // link each group
        if (curGroupDeclarative)
          linkDeclarativeModule(entry, loader);
        else
          linkDynamicModule(entry, loader);
      }
      curGroupDeclarative = !curGroupDeclarative; 
    }
  }

  // module binding records
  function ModuleRecord() {}
  defineProperty(ModuleRecord, 'toString', {
    value: function() {
      return 'Module';
    }
  });

  function getOrCreateModuleRecord(name, moduleRecords) {
    return moduleRecords[name] || (moduleRecords[name] = {
      name: name,
      dependencies: [],
      exports: new ModuleRecord(), // start from an empty module and extend
      importers: []
    });
  }

  function linkDeclarativeModule(entry, loader) {
    // only link if already not already started linking (stops at circular)
    if (entry.module)
      return;

    var moduleRecords = loader._loader.moduleRecords;
    var module = entry.module = getOrCreateModuleRecord(entry.name, moduleRecords);
    var exports = entry.module.exports;

    var declaration = entry.declare.call(__global, function(name, value) {
      module.locked = true;

      if (typeof name == 'object') {
        for (var p in name)
          exports[p] = name[p];
      }
      else {
        exports[name] = value;
      }

      for (var i = 0, l = module.importers.length; i < l; i++) {
        var importerModule = module.importers[i];
        if (!importerModule.locked) {
          var importerIndex = indexOf.call(importerModule.dependencies, module);
          importerModule.setters[importerIndex](exports);
        }
      }

      module.locked = false;
      return value;
    }, { id: entry.name });
    
    module.setters = declaration.setters;
    module.execute = declaration.execute;

    if (!module.setters || !module.execute) {
      throw new TypeError('Invalid System.register form for ' + entry.name);
    }

    // now link all the module dependencies
    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = loader.defined[depName];
      var depModule = moduleRecords[depName];

      // work out how to set depExports based on scenarios...
      var depExports;

      if (depModule) {
        depExports = depModule.exports;
      }
      // dynamic, already linked in our registry
      else if (depEntry && !depEntry.declarative) {
        depExports = depEntry.esModule;
      }
      // in the loader registry
      else if (!depEntry) {
        depExports = loader.get(depName);
      }
      // we have an entry -> link
      else {
        linkDeclarativeModule(depEntry, loader);
        depModule = depEntry.module;
        depExports = depModule.exports;
      }

      // only declarative modules have dynamic bindings
      if (depModule && depModule.importers) {
        depModule.importers.push(module);
        module.dependencies.push(depModule);
      }
      else {
        module.dependencies.push(null);
      }
      
      // run setters for all entries with the matching dependency name
      var originalIndices = entry.originalIndices[i];
      for (var j = 0, len = originalIndices.length; j < len; ++j) {
        var index = originalIndices[j];
        if (module.setters[index]) {
          module.setters[index](depExports);
        }
      }
    }
  }

  // An analog to loader.get covering execution of all three layers (real declarative, simulated declarative, simulated dynamic)
  function getModule(name, loader) {
    var exports;
    var entry = loader.defined[name];

    if (!entry) {
      exports = loader.get(name);
      if (!exports)
        throw new Error('Unable to load dependency ' + name + '.');
    }

    else {
      if (entry.declarative)
        ensureEvaluated(name, [], loader);
    
      else if (!entry.evaluated)
        linkDynamicModule(entry, loader);

      exports = entry.module.exports;
    }

    if ((!entry || entry.declarative) && exports && exports.__useDefault)
      return exports['default'];
    
    return exports;
  }

  function linkDynamicModule(entry, loader) {
    if (entry.module)
      return;

    var exports = {};

    var module = entry.module = { exports: exports, id: entry.name };

    // AMD requires execute the tree first
    if (!entry.executingRequire) {
      for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
        var depName = entry.normalizedDeps[i];
        // we know we only need to link dynamic due to linking algorithm
        var depEntry = loader.defined[depName];
        if (depEntry)
          linkDynamicModule(depEntry, loader);
      }
    }

    // now execute
    entry.evaluated = true;
    var output = entry.execute.call(__global, function(name) {
      for (var i = 0, l = entry.deps.length; i < l; i++) {
        if (entry.deps[i] != name)
          continue;
        return getModule(entry.normalizedDeps[i], loader);
      }
      // try and normalize the dependency to see if we have another form
      var nameNormalized = loader.normalizeSync(name, entry.name);
      if (indexOf.call(entry.normalizedDeps, nameNormalized) != -1)
        return getModule(nameNormalized, loader);

      throw new Error('Module ' + name + ' not declared as a dependency of ' + entry.name);
    }, exports, module);
    
    if (output)
      module.exports = output;

    // create the esModule object, which allows ES6 named imports of dynamics
    exports = module.exports;

    // __esModule flag treats as already-named
    if (exports && (exports.__esModule || exports instanceof Module))
      entry.esModule = exports;
    // set module as 'default' export, then fake named exports by iterating properties
    else if (entry.esmExports && exports !== __global)
      entry.esModule = getESModule(exports);
    // just use the 'default' export
    else
      entry.esModule = { 'default': exports };
  }

  /*
   * Given a module, and the list of modules for this current branch,
   *  ensure that each of the dependencies of this module is evaluated
   *  (unless one is a circular dependency already in the list of seen
   *  modules, in which case we execute it)
   *
   * Then we evaluate the module itself depth-first left to right 
   * execution to match ES6 modules
   */
  function ensureEvaluated(moduleName, seen, loader) {
    var entry = loader.defined[moduleName];

    // if already seen, that means it's an already-evaluated non circular dependency
    if (!entry || entry.evaluated || !entry.declarative)
      return;

    // this only applies to declarative modules which late-execute

    seen.push(moduleName);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      if (indexOf.call(seen, depName) == -1) {
        if (!loader.defined[depName])
          loader.get(depName);
        else
          ensureEvaluated(depName, seen, loader);
      }
    }

    if (entry.evaluated)
      return;

    entry.evaluated = true;
    entry.module.execute.call(__global);
  }

  // override the delete method to also clear the register caches
  hook('delete', function(del) {
    return function(name) {
      delete this._loader.moduleRecords[name];
      delete this.defined[name];
      return del.call(this, name);
    };
  });

  hook('fetch', function(fetch) {
    return function(load) {
      if (this.defined[load.name]) {
        load.metadata.format = 'defined';
        return '';
      }

      load.metadata.deps = load.metadata.deps || [];
      
      return fetch.call(this, load);
    };
  });

  hook('translate', function(translate) {
    // we run the meta detection here (register is after meta)
    return function(load) {
      load.metadata.deps = load.metadata.deps || [];
      return Promise.resolve(translate.call(this, load)).then(function(source) {
        // run detection for register format
        if (load.metadata.format == 'register' || !load.metadata.format && detectRegisterFormat(load.source))
          load.metadata.format = 'register';
        return source;
      });
    };
  });

  hook('instantiate', function(instantiate) {
    return function(load) {
      if (load.metadata.format == 'detect')
        load.metadata.format = undefined;

      // assumes previous instantiate is sync
      // (core json support)
      instantiate.call(this, load);

      var loader = this;

      var entry;

      // first we check if this module has already been defined in the registry
      if (loader.defined[load.name]) {
        entry = loader.defined[load.name];
        // don't support deps for ES modules
        if (!entry.declarative)
          entry.deps = entry.deps.concat(load.metadata.deps);
      }

      // picked up already by an anonymous System.register script injection
      // or via the dynamic formats
      else if (load.metadata.entry) {
        entry = load.metadata.entry;
        entry.deps = entry.deps.concat(load.metadata.deps);
      }

      // Contains System.register calls
      // (dont run bundles in the builder)
      else if (!(loader.builder && load.metadata.bundle) 
          && (load.metadata.format == 'register' || load.metadata.format == 'esm' || load.metadata.format == 'es6')) {
        
        if (typeof __exec != 'undefined')
          __exec.call(loader, load);

        if (!load.metadata.entry && !load.metadata.bundle)
          throw new Error(load.name + ' detected as ' + load.metadata.format + ' but didn\'t execute.');

        entry = load.metadata.entry;

        // support metadata deps for System.register
        if (entry && load.metadata.deps)
          entry.deps = entry.deps.concat(load.metadata.deps);
      }

      // named bundles are just an empty module
      if (!entry) {
        entry = createEntry();
        entry.deps = load.metadata.deps;
        entry.execute = function() {};
      }

      // place this module onto defined for circular references
      loader.defined[load.name] = entry;
      
      var grouped = group(entry.deps);
      
      entry.deps = grouped.names;
      entry.originalIndices = grouped.indices;
      entry.name = load.name;
      entry.esmExports = load.metadata.esmExports !== false;

      // first, normalize all dependencies
      var normalizePromises = [];
      for (var i = 0, l = entry.deps.length; i < l; i++)
        normalizePromises.push(Promise.resolve(loader.normalize(entry.deps[i], load.name)));

      return Promise.all(normalizePromises).then(function(normalizedDeps) {

        entry.normalizedDeps = normalizedDeps;

        return {
          deps: entry.deps,
          execute: function() {
            // recursively ensure that the module and all its 
            // dependencies are linked (with dependency group handling)
            link(load.name, loader);

            // now handle dependency execution in correct order
            ensureEvaluated(load.name, [], loader);

            // remove from the registry
            loader.defined[load.name] = undefined;

            // return the defined module object
            return loader.newModule(entry.declarative ? entry.module.exports : entry.esModule);
          }
        };
      });
    };
  });
})();
/*
 * Extension to detect ES6 and auto-load Traceur or Babel for processing
 */
(function() {
  // good enough ES6 module detection regex - format detections not designed to be accurate, but to handle the 99% use case
  var esmRegEx = /(^\s*|[}\);\n]\s*)(import\s*(['"]|(\*\s+as\s+)?[^"'\(\)\n;]+\s*from\s*['"]|\{)|export\s+\*\s+from\s+["']|export\s*(\{|default|function|class|var|const|let|async\s+function))/;

  var traceurRuntimeRegEx = /\$traceurRuntime\s*\./;
  var babelHelpersRegEx = /babelHelpers\s*\./;

  hook('translate', function(translate) {
    return function(load) {
      var loader = this;
      return translate.call(loader, load)
      .then(function(source) {
        // detect & transpile ES6
        if (load.metadata.format == 'esm' || load.metadata.format == 'es6' || !load.metadata.format && source.match(esmRegEx)) {
          if (load.metadata.format == 'es6')
            warn.call(loader, 'Module ' + load.name + ' has metadata setting its format to "es6", which is deprecated.\nThis should be updated to "esm".');

          load.metadata.format = 'esm';

          if (loader.transpiler === false) {
            // we accept translation to esm for builds though to enable eg rollup optimizations
            if (loader.builder)
              return source;
            throw new TypeError('Unable to dynamically transpile ES module as SystemJS.transpiler set to false.');
          }

          // setting _loader.loadedTranspiler = false tells the next block to
          // do checks for setting transpiler metadata
          loader._loader.loadedTranspiler = loader._loader.loadedTranspiler || false;
          if (loader.pluginLoader)
            loader.pluginLoader._loader.loadedTranspiler = loader._loader.loadedTranspiler || false;

          // do transpilation
          return (loader._loader.transpilerPromise || (
            loader._loader.transpilerPromise = Promise.resolve(
              __global[loader.transpiler == 'typescript' ? 'ts' : loader.transpiler] || (loader.pluginLoader || loader)['import'](loader.transpiler)
          ))).then(function(transpiler) {
            loader._loader.loadedTranspilerRuntime = true;

            // translate hooks means this is a transpiler plugin instead of a raw implementation
            if (transpiler.translate) {
              // if transpiler is the same as the plugin loader, then don't run twice
              if (transpiler == load.metadata.loaderModule)
                return load.source;

              // convert the source map into an object for transpilation chaining
              if (typeof load.metadata.sourceMap == 'string')
                load.metadata.sourceMap = JSON.parse(load.metadata.sourceMap);

              return Promise.resolve(transpiler.translate.call(loader, load))
              .then(function(source) {
                // sanitize sourceMap if an object not a JSON string
                var sourceMap = load.metadata.sourceMap;
                if (sourceMap && typeof sourceMap == 'object') {
                  var originalName = load.name.split('!')[0];
                  
                  // force set the filename of the original file
                  sourceMap.file = originalName + '!transpiled';

                  // force set the sources list if only one source
                  if (!sourceMap.sources || sourceMap.sources.length <= 1)
                    sourceMap.sources = [originalName];
                }

                if (load.metadata.format == 'esm' && !loader.builder && detectRegisterFormat(source))
                  load.metadata.format = 'register';
                return source;
              });
            }

            // legacy builder support
            if (loader.builder)
              load.metadata.originalSource = load.source;
            
            // defined in es6-module-loader/src/transpile.js
            return transpile.call(loader, load)
            .then(function(source) {
              // clear sourceMap as transpiler embeds it
              load.metadata.sourceMap = undefined;
              return source;
            });            
          });
        }

        // skip transpiler and transpiler runtime loading when transpiler is disabled
        if (loader.transpiler === false)
          return source;

        // load the transpiler correctly
        if (loader._loader.loadedTranspiler === false && (loader.transpiler == 'traceur' || loader.transpiler == 'typescript' || loader.transpiler == 'babel')
            && load.name == loader.normalizeSync(loader.transpiler)) {

          // always load transpiler as a global
          if (source.length > 100 && !load.metadata.format) {
            load.metadata.format = 'global';

            if (loader.transpiler === 'traceur')
              load.metadata.exports = 'traceur';
            if (loader.transpiler === 'typescript')
              load.metadata.exports = 'ts';
          }

          loader._loader.loadedTranspiler = true;
        }

        // load the transpiler runtime correctly
        if (loader._loader.loadedTranspilerRuntime === false) {
          if (load.name == loader.normalizeSync('traceur-runtime')
              || load.name == loader.normalizeSync('babel/external-helpers*')) {
            if (source.length > 100)
              load.metadata.format = load.metadata.format || 'global';

            loader._loader.loadedTranspilerRuntime = true;
          }
        }

        // detect transpiler runtime usage to load runtimes
        if ((load.metadata.format == 'register' || load.metadata.bundle) && loader._loader.loadedTranspilerRuntime !== true) {
          if (!__global.$traceurRuntime && load.source.match(traceurRuntimeRegEx)) {
            loader._loader.loadedTranspilerRuntime = loader._loader.loadedTranspilerRuntime || false;
            return loader['import']('traceur-runtime').then(function() {
              return source;
            });
          }
          if (!__global.babelHelpers && load.source.match(babelHelpersRegEx)) {
            loader._loader.loadedTranspilerRuntime = loader._loader.loadedTranspilerRuntime || false;
            return loader['import']('babel/external-helpers').then(function() {
              return source;
            });
          }
        }

        return source;
      });
    };
  });

})();
/*
  SystemJS Global Format

  Supports
    metadata.deps
    metadata.globals
    metadata.exports

  Without metadata.exports, detects writes to the global object.
*/
var __globalName = typeof self != 'undefined' ? 'self' : 'global';

hook('fetch', function(fetch) {
  return function(load) {
    if (load.metadata.exports && !load.metadata.format)
      load.metadata.format = 'global';
    return fetch.call(this, load);
  };
});

// ideally we could support script loading for globals, but the issue with that is that
// we can't do it with AMD support side-by-side since AMD support means defining the
// global define, and global support means not definining it, yet we don't have any hook
// into the "pre-execution" phase of a script tag being loaded to handle both cases
hook('instantiate', function(instantiate) {
  return function(load) {
    var loader = this;

    if (!load.metadata.format)
      load.metadata.format = 'global';

    // global is a fallback module format
    if (load.metadata.format == 'global' && !load.metadata.registered) {

      var entry = createEntry();

      load.metadata.entry = entry;

      entry.deps = [];

      for (var g in load.metadata.globals) {
        var gl = load.metadata.globals[g];
        if (gl)
          entry.deps.push(gl);
      }

      entry.execute = function(require, exports, module) {

        var globals;
        if (load.metadata.globals) {
          globals = {};
          for (var g in load.metadata.globals)
            if (load.metadata.globals[g])
              globals[g] = require(load.metadata.globals[g]);
        }
        
        var exportName = load.metadata.exports;

        if (exportName)
          load.source += '\n' + __globalName + '["' + exportName + '"] = ' + exportName + ';';

        var retrieveGlobal = loader.get('@@global-helpers').prepareGlobal(module.id, exportName, globals);

        __exec.call(loader, load);

        return retrieveGlobal();
      }
    }
    return instantiate.call(this, load);
  };
});


function getGlobalValue(exports) {
  if (typeof exports == 'string')
    return readMemberExpression(exports, __global);

  if (!(exports instanceof Array))
    throw new Error('Global exports must be a string or array.');

  var globalValue = {};
  var first = true;
  for (var i = 0; i < exports.length; i++) {
    var val = readMemberExpression(exports[i], __global);
    if (first) {
      globalValue['default'] = val;
      first = false;
    }
    globalValue[exports[i].split('.').pop()] = val;
  }
  return globalValue;
}

hook('reduceRegister_', function(reduceRegister) {
  return function(load, register) {
    if (register || !load.metadata.exports)
      return reduceRegister.call(this, load, register);

    load.metadata.format = 'global';
    var entry = load.metadata.entry = createEntry();
    entry.deps = load.metadata.deps;
    var globalValue = getGlobalValue(load.metadata.exports);
    entry.execute = function() {
      return globalValue;
    };
  };
});

hookConstructor(function(constructor) {
  return function() {
    var loader = this;
    constructor.call(loader);

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    // bare minimum ignores
    var ignoredGlobalProps = ['_g', 'sessionStorage', 'localStorage', 'clipboardData', 'frames', 'frameElement', 'external', 
      'mozAnimationStartTime', 'webkitStorageInfo', 'webkitIndexedDB', 'mozInnerScreenY', 'mozInnerScreenX'];

    var globalSnapshot;

    function forEachGlobal(callback) {
      if (Object.keys)
        Object.keys(__global).forEach(callback);
      else
        for (var g in __global) {
          if (!hasOwnProperty.call(__global, g))
            continue;
          callback(g);
        }
    }

    function forEachGlobalValue(callback) {
      forEachGlobal(function(globalName) {
        if (indexOf.call(ignoredGlobalProps, globalName) != -1)
          return;
        try {
          var value = __global[globalName];
        }
        catch (e) {
          ignoredGlobalProps.push(globalName);
        }
        callback(globalName, value);
      });
    }

    loader.set('@@global-helpers', loader.newModule({
      prepareGlobal: function(moduleName, exports, globals) {
        // disable module detection
        var curDefine = __global.define;
        
        __global.define = undefined;

        // set globals
        var oldGlobals;
        if (globals) {
          oldGlobals = {};
          for (var g in globals) {
            oldGlobals[g] = __global[g];
            __global[g] = globals[g];
          }
        }

        // store a complete copy of the global object in order to detect changes
        if (!exports) {
          globalSnapshot = {};

          forEachGlobalValue(function(name, value) {
            globalSnapshot[name] = value;
          });
        }

        // return function to retrieve global
        return function() {
          var globalValue;

          if (exports) {
            globalValue = getGlobalValue(exports);
          }
          else {
            globalValue = {};
            var singleGlobal;
            var multipleExports;

            forEachGlobalValue(function(name, value) {
              if (globalSnapshot[name] === value)
                return;
              if (typeof value == 'undefined')
                return;
              globalValue[name] = value;

              if (typeof singleGlobal != 'undefined') {
                if (!multipleExports && singleGlobal !== value)
                  multipleExports = true;
              }
              else {
                singleGlobal = value;
              }
            });
            globalValue = multipleExports ? globalValue : singleGlobal;
          }

          // revert globals
          if (oldGlobals) {
            for (var g in oldGlobals)
              __global[g] = oldGlobals[g];
          }
          __global.define = curDefine;

          return globalValue;
        };
      }
    }));
  };
});
/*
  SystemJS CommonJS Format
*/
(function() {
  // CJS Module Format
  // require('...') || exports[''] = ... || exports.asd = ... || module.exports = ...
  var cjsExportsRegEx = /(?:^\uFEFF?|[^$_a-zA-Z\xA0-\uFFFF.])(exports\s*(\[['"]|\.)|module(\.exports|\['exports'\]|\["exports"\])\s*(\[['"]|[=,\.]))/;
  // RegEx adjusted from https://github.com/jbrantly/yabble/blob/master/lib/yabble.js#L339
  var cjsRequireRegEx = /(?:^\uFEFF?|[^$_a-zA-Z\xA0-\uFFFF."'])require\s*\(\s*("[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*')\s*\)/g;
  var commentRegEx = /(^|[^\\])(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg;

  var stringRegEx = /("[^"\\\n\r]*(\\.[^"\\\n\r]*)*"|'[^'\\\n\r]*(\\.[^'\\\n\r]*)*')/g;

  // used to support leading #!/usr/bin/env in scripts as supported in Node
  var hashBangRegEx = /^\#\!.*/;

  function getCJSDeps(source) {
    cjsRequireRegEx.lastIndex = commentRegEx.lastIndex = stringRegEx.lastIndex = 0;

    var deps = [];

    var match;

    // track string and comment locations for unminified source    
    var stringLocations = [], commentLocations = [];

    function inLocation(locations, match) {
      for (var i = 0; i < locations.length; i++)
        if (locations[i][0] < match.index && locations[i][1] > match.index)
          return true;
      return false;
    }

    if (source.length / source.split('\n').length < 200) {
      while (match = stringRegEx.exec(source))
        stringLocations.push([match.index, match.index + match[0].length]);
      
      while (match = commentRegEx.exec(source)) {
        // only track comments not starting in strings
        if (!inLocation(stringLocations, match))
          commentLocations.push([match.index, match.index + match[0].length]);
      }
    }

    while (match = cjsRequireRegEx.exec(source)) {
      // ensure we're not within a string or comment location
      if (!inLocation(stringLocations, match) && !inLocation(commentLocations, match)) {
        var dep = match[1].substr(1, match[1].length - 2);
        // skip cases like require('" + file + "')
        if (dep.match(/"|'/))
          continue;
        // trailing slash requires are removed as they don't map mains in SystemJS
        if (dep[dep.length - 1] == '/')
          dep = dep.substr(0, dep.length - 1);
        deps.push(dep);
      }
    }

    return deps;
  }

  hook('instantiate', function(instantiate) {
    return function(load) {
      var loader = this;
      if (!load.metadata.format) {
        cjsExportsRegEx.lastIndex = 0;
        cjsRequireRegEx.lastIndex = 0;
        if (cjsRequireRegEx.exec(load.source) || cjsExportsRegEx.exec(load.source))
          load.metadata.format = 'cjs';
      }

      if (load.metadata.format == 'cjs') {
        var metaDeps = load.metadata.deps;
        var deps = load.metadata.cjsRequireDetection === false ? [] : getCJSDeps(load.source);

        for (var g in load.metadata.globals)
          if (load.metadata.globals[g])
            deps.push(load.metadata.globals[g]);

        var entry = createEntry();

        load.metadata.entry = entry;

        entry.deps = deps;
        entry.executingRequire = true;
        entry.execute = function(_require, exports, module) {
          function require(name) {
            if (name[name.length - 1] == '/')
              name = name.substr(0, name.length - 1);
            return _require.apply(this, arguments);
          }
          require.resolve = function(name) {
            return loader.get('@@cjs-helpers').requireResolve(name, module.id);
          };

          // ensure meta deps execute first
          if (!load.metadata.cjsDeferDepsExecute)
            for (var i = 0; i < metaDeps.length; i++)
              require(metaDeps[i]);

          var pathVars = loader.get('@@cjs-helpers').getPathVars(module.id);
          var __cjsWrapper = {
            exports: exports,
            args: [require, exports, module, pathVars.filename, pathVars.dirname, __global, __global]
          };

          var cjsWrapper = "(function(require, exports, module, __filename, __dirname, global, GLOBAL";

          // add metadata.globals to the wrapper arguments
          if (load.metadata.globals)
            for (var g in load.metadata.globals) {
              __cjsWrapper.args.push(require(load.metadata.globals[g]));
              cjsWrapper += ", " + g;
            }

          // disable AMD detection
          var define = __global.define;
          __global.define = undefined;
          __global.__cjsWrapper = __cjsWrapper;

          load.source = cjsWrapper + ") {" + load.source.replace(hashBangRegEx, '') + "\n}).apply(__cjsWrapper.exports, __cjsWrapper.args);";

          __exec.call(loader, load);

          __global.__cjsWrapper = undefined;
          __global.define = define;
        };
      }

      return instantiate.call(loader, load);
    };
  });
})();
hookConstructor(function(constructor) {
  return function() {
    var loader = this;
    constructor.call(loader);

    if (typeof window != 'undefined' && typeof document != 'undefined' && window.location)
      var windowOrigin = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');

    function stripOrigin(path) {
      if (path.substr(0, 8) == 'file:///')
        return path.substr(7 + !!isWindows);
      
      if (windowOrigin && path.substr(0, windowOrigin.length) == windowOrigin)
        return path.substr(windowOrigin.length);

      return path;
    }

    loader.set('@@cjs-helpers', loader.newModule({
      requireResolve: function(request, parentId) {
        return stripOrigin(loader.normalizeSync(request, parentId));
      },
      getPathVars: function(moduleId) {
        // remove any plugin syntax
        var pluginIndex = moduleId.lastIndexOf('!');
        var filename;
        if (pluginIndex != -1)
          filename = moduleId.substr(0, pluginIndex);
        else
          filename = moduleId;

        var dirname = filename.split('/');
        dirname.pop();
        dirname = dirname.join('/');

        return {
          filename: stripOrigin(filename),
          dirname: stripOrigin(dirname)
        };
      }
    }))
  };
});/*
 * AMD Helper function module
 * Separated into its own file as this is the part needed for full AMD support in SFX builds
 * NB since implementations have now diverged this can be merged back with amd.js
 */

hook('fetch', function(fetch) {
  return function(load) {
    // script load implies define global leak
    if (load.metadata.scriptLoad && isBrowser)
      __global.define = this.amdDefine;
    return fetch.call(this, load);
  };
});
 
hookConstructor(function(constructor) {
  return function() {
    var loader = this;
    constructor.call(this);

    var commentRegEx = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg;
    var cjsRequirePre = "(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])";
    var cjsRequirePost = "\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)";
    var fnBracketRegEx = /\(([^\)]*)\)/;
    var wsRegEx = /^\s+|\s+$/g;
    
    var requireRegExs = {};

    function getCJSDeps(source, requireIndex) {

      // remove comments
      source = source.replace(commentRegEx, '');

      // determine the require alias
      var params = source.match(fnBracketRegEx);
      var requireAlias = (params[1].split(',')[requireIndex] || 'require').replace(wsRegEx, '');

      // find or generate the regex for this requireAlias
      var requireRegEx = requireRegExs[requireAlias] || (requireRegExs[requireAlias] = new RegExp(cjsRequirePre + requireAlias + cjsRequirePost, 'g'));

      requireRegEx.lastIndex = 0;

      var deps = [];

      var match;
      while (match = requireRegEx.exec(source))
        deps.push(match[2] || match[3]);

      return deps;
    }

    /*
      AMD-compatible require
      To copy RequireJS, set window.require = window.requirejs = loader.amdRequire
    */
    function require(names, callback, errback, referer) {
      // in amd, first arg can be a config object... we just ignore
      if (typeof names == 'object' && !(names instanceof Array))
        return require.apply(null, Array.prototype.splice.call(arguments, 1, arguments.length - 1));

      // amd require
      if (typeof names == 'string' && typeof callback == 'function')
        names = [names];
      if (names instanceof Array) {
        var dynamicRequires = [];
        for (var i = 0; i < names.length; i++)
          dynamicRequires.push(loader['import'](names[i], referer));
        Promise.all(dynamicRequires).then(function(modules) {
          if (callback)
            callback.apply(null, modules);
        }, errback);
      }

      // commonjs require
      else if (typeof names == 'string') {
        var defaultJSExtension = loader.defaultJSExtensions && names.substr(names.length - 3, 3) != '.js';
        var normalized = loader.decanonicalize(names, referer);
        if (defaultJSExtension && normalized.substr(normalized.length - 3, 3) == '.js')
          normalized = normalized.substr(0, normalized.length - 3);
        var module = loader.get(normalized);
        if (!module)
          throw new Error('Module not already loaded loading "' + names + '" as ' + normalized + (referer ? ' from "' + referer + '".' : '.'));
        return module.__useDefault ? module['default'] : module;
      }

      else
        throw new TypeError('Invalid require');
    }

    function define(name, deps, factory) {
      if (typeof name != 'string') {
        factory = deps;
        deps = name;
        name = null;
      }
      if (!(deps instanceof Array)) {
        factory = deps;
        deps = ['require', 'exports', 'module'].splice(0, factory.length);
      }

      if (typeof factory != 'function')
        factory = (function(factory) {
          return function() { return factory; }
        })(factory);

      // in IE8, a trailing comma becomes a trailing undefined entry
      if (deps[deps.length - 1] === undefined)
        deps.pop();

      // remove system dependencies
      var requireIndex, exportsIndex, moduleIndex;
      
      if ((requireIndex = indexOf.call(deps, 'require')) != -1) {
        
        deps.splice(requireIndex, 1);

        // only trace cjs requires for non-named
        // named defines assume the trace has already been done
        if (!name)
          deps = deps.concat(getCJSDeps(factory.toString(), requireIndex));
      }

      if ((exportsIndex = indexOf.call(deps, 'exports')) != -1)
        deps.splice(exportsIndex, 1);
      
      if ((moduleIndex = indexOf.call(deps, 'module')) != -1)
        deps.splice(moduleIndex, 1);

      function execute(req, exports, module) {
        var depValues = [];
        for (var i = 0; i < deps.length; i++)
          depValues.push(req(deps[i]));

        module.uri = module.id;

        module.config = function() {};

        // add back in system dependencies
        if (moduleIndex != -1)
          depValues.splice(moduleIndex, 0, module);
        
        if (exportsIndex != -1)
          depValues.splice(exportsIndex, 0, exports);
        
        if (requireIndex != -1) {
          function contextualRequire(names, callback, errback) {
            if (typeof names == 'string' && typeof callback != 'function')
              return req(names);
            return require.call(loader, names, callback, errback, module.id);
          }
          contextualRequire.toUrl = function(name) {
            // normalize without defaultJSExtensions
            var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';
            var url = loader.decanonicalize(name, module.id);
            if (defaultJSExtension && url.substr(url.length - 3, 3) == '.js')
              url = url.substr(0, url.length - 3);
            return url;
          };
          depValues.splice(requireIndex, 0, contextualRequire);
        }

        // set global require to AMD require
        var curRequire = __global.require;
        __global.require = require;

        var output = factory.apply(exportsIndex == -1 ? __global : exports, depValues);

        __global.require = curRequire;

        if (typeof output == 'undefined' && module)
          output = module.exports;

        if (typeof output != 'undefined')
          return output;
      }

      var entry = createEntry();
      entry.name = name && (loader.decanonicalize || loader.normalize).call(loader, name);
      entry.deps = deps;
      entry.execute = execute;

      loader.pushRegister_({
        amd: true,
        entry: entry
      });
    }
    define.amd = {};

    // reduction function to attach defines to a load record
    hook('reduceRegister_', function(reduceRegister) {
      return function(load, register) {
        // only handle AMD registers here
        if (!register || !register.amd)
          return reduceRegister.call(this, load, register);

        var curMeta = load && load.metadata;
        var entry = register.entry;

        if (curMeta) {
          if (!curMeta.format || curMeta.format == 'detect')
            curMeta.format = 'amd';
          else if (!entry.name && curMeta.format != 'amd')
            throw new Error('AMD define called while executing ' + curMeta.format + ' module ' + load.name);
        }

        // anonymous define
        if (!entry.name) {
          if (!curMeta)
            throw new TypeError('Unexpected anonymous AMD define.');

          if (curMeta.entry && !curMeta.entry.name)
            throw new Error('Multiple anonymous defines in module ' + load.name);
          
          curMeta.entry = entry;
        }
        // named define
        else {
          // if we don't have any other defines, 
          // then let this be an anonymous define
          // this is just to support single modules of the form:
          // define('jquery')
          // still loading anonymously
          // because it is done widely enough to be useful
          // as soon as there is more than one define, this gets removed though
          if (curMeta) {
            if (!curMeta.entry && !curMeta.bundle)
              curMeta.entry = entry;
            else if (curMeta.entry && curMeta.entry.name)
              curMeta.entry = undefined;

            // note this is now a bundle
            curMeta.bundle = true;
          }

          // define the module through the register registry
          if (!(entry.name in this.defined))
            this.defined[entry.name] = entry;
        }
      };
    });

    loader.amdDefine = define;
    loader.amdRequire = require;
  };
});/*
  SystemJS AMD Format
*/
(function() {
  // AMD Module Format Detection RegEx
  // define([.., .., ..], ...)
  // define(varName); || define(function(require, exports) {}); || define({})
  var amdRegEx = /(?:^\uFEFF?|[^$_a-zA-Z\xA0-\uFFFF.])define\s*\(\s*("[^"]+"\s*,\s*|'[^']+'\s*,\s*)?\s*(\[(\s*(("[^"]+"|'[^']+')\s*,|\/\/.*\r?\n|\/\*(.|\s)*?\*\/))*(\s*("[^"]+"|'[^']+')\s*,?)?(\s*(\/\/.*\r?\n|\/\*(.|\s)*?\*\/))*\s*\]|function\s*|{|[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*\))/;

  hook('instantiate', function(instantiate) {
    return function(load) {
      var loader = this;
      
      if (load.metadata.format == 'amd' || !load.metadata.format && load.source.match(amdRegEx)) {
        load.metadata.format = 'amd';
        
        if (!loader.builder && loader.execute !== false) {
          var curDefine = __global.define;
          __global.define = this.amdDefine;

          try {
            __exec.call(loader, load);
          }
          finally {
            __global.define = curDefine;
          }

          if (!load.metadata.entry && !load.metadata.bundle)
            throw new TypeError('AMD module ' + load.name + ' did not define');
        }
        else {
          load.metadata.execute = function() {
            return load.metadata.builderExecute.apply(this, arguments);
          };
        }
      }

      return instantiate.call(loader, load);
    };
  });

})();
/*
  SystemJS Loader Plugin Support

  Supports plugin loader syntax with "!", or via metadata.loader

  The plugin name is loaded as a module itself, and can override standard loader hooks
  for the plugin resource. See the plugin section of the systemjs readme.
*/

(function() {
  function getParentName(loader, parentName) {
    // if parent is a plugin, normalize against the parent plugin argument only
    if (parentName) {
      var parentPluginIndex;
      if (loader.pluginFirst) {
        if ((parentPluginIndex = parentName.lastIndexOf('!')) != -1)
          return parentName.substr(parentPluginIndex + 1);
      }
      else {
        if ((parentPluginIndex = parentName.indexOf('!')) != -1)
          return parentName.substr(0, parentPluginIndex);
      }

      return parentName;
    }
  }

  function parsePlugin(loader, name) {
    var argumentName;
    var pluginName;

    var pluginIndex = name.lastIndexOf('!');

    if (pluginIndex == -1)
      return;

    if (loader.pluginFirst) {
      argumentName = name.substr(pluginIndex + 1);
      pluginName = name.substr(0, pluginIndex);
    }
    else {
      argumentName = name.substr(0, pluginIndex);
      pluginName = name.substr(pluginIndex + 1) || argumentName.substr(argumentName.lastIndexOf('.') + 1);
    }

    return {
      argument: argumentName,
      plugin: pluginName
    };
  }

  // put name back together after parts have been normalized
  function combinePluginParts(loader, argumentName, pluginName, defaultExtension) {
    if (defaultExtension && argumentName.substr(argumentName.length - 3, 3) == '.js')
      argumentName = argumentName.substr(0, argumentName.length - 3);

    if (loader.pluginFirst) {
      return pluginName + '!' + argumentName;
    }
    else {
      return argumentName + '!' + pluginName;
    }
  }

  // note if normalize will add a default js extension
  // if so, remove for backwards compat
  // this is strange and sucks, but will be deprecated
  function checkDefaultExtension(loader, arg) {
    return loader.defaultJSExtensions && arg.substr(arg.length - 3, 3) != '.js'; 
  }

  function createNormalizeSync(normalizeSync) {
    return function(name, parentName, isPlugin) {
      var loader = this;
      
      parentName = getParentName(this, parentName);
      var parsed = parsePlugin(loader, name);

      if (!parsed)
        return normalizeSync.call(this, name, parentName, isPlugin);

      // if this is a plugin, normalize the plugin name and the argument
      var argumentName = loader.normalizeSync(parsed.argument, parentName, true);
      var pluginName = loader.normalizeSync(parsed.plugin, parentName, true);
      return combinePluginParts(loader, argumentName, pluginName, checkDefaultExtension(loader, parsed.argument));
    };
  }
  
  hook('decanonicalize', createNormalizeSync);
  hook('normalizeSync', createNormalizeSync);

  hook('normalize', function(normalize) {
    return function(name, parentName, isPlugin) {
      var loader = this;

      parentName = getParentName(this, parentName);

      var parsed = parsePlugin(loader, name);

      if (!parsed)
        return normalize.call(loader, name, parentName, isPlugin);

      return Promise.all([
        loader.normalize(parsed.argument, parentName, true),
        loader.normalize(parsed.plugin, parentName)
      ])
      .then(function(normalized) {
        return combinePluginParts(loader, normalized[0], normalized[1], checkDefaultExtension(loader, parsed.argument));
      });
    }
  });

  hook('locate', function(locate) {
    return function(load) {
      var loader = this;

      var name = load.name;

      // plugin syntax
      var pluginSyntaxIndex;
      if (loader.pluginFirst) {
        if ((pluginSyntaxIndex = name.indexOf('!')) != -1) {
          load.metadata.loader = name.substr(0, pluginSyntaxIndex);
          load.name = name.substr(pluginSyntaxIndex + 1);
        }
      }
      else {
        if ((pluginSyntaxIndex = name.lastIndexOf('!')) != -1) {
          load.metadata.loader = name.substr(pluginSyntaxIndex + 1);
          load.name = name.substr(0, pluginSyntaxIndex);
        }
      }

      return locate.call(loader, load)
      .then(function(address) {
        if (pluginSyntaxIndex != -1 || !load.metadata.loader)
          return address;

        // normalize plugin relative to parent in locate here when
        // using plugin via loader metadata
        return loader.normalize(load.metadata.loader, load.name)
        .then(function(loaderNormalized) {
          load.metadata.loader = loaderNormalized;
          return address;
        });
      })
      .then(function(address) {
        var plugin = load.metadata.loader;

        if (!plugin)
          return address;

        // don't allow a plugin to load itself
        if (load.name == plugin)
          throw new Error('Plugin ' + plugin + ' cannot load itself, make sure it is excluded from any wildcard meta configuration via a custom loader: false rule.');

        // only fetch the plugin itself if this name isn't defined
        if (loader.defined && loader.defined[name])
          return address;

        var pluginLoader = loader.pluginLoader || loader;

        // load the plugin module and run standard locate
        return pluginLoader['import'](plugin)
        .then(function(loaderModule) {
          // store the plugin module itself on the metadata
          load.metadata.loaderModule = loaderModule;

          load.address = address;
          if (loaderModule.locate)
            return loaderModule.locate.call(loader, load);

          return address;
        });
      });
    };
  });

  hook('fetch', function(fetch) {
    return function(load) {
      var loader = this;
      if (load.metadata.loaderModule && load.metadata.loaderModule.fetch && load.metadata.format != 'defined') {
        load.metadata.scriptLoad = false;
        return load.metadata.loaderModule.fetch.call(loader, load, function(load) {
          return fetch.call(loader, load);
        });
      }
      else {
        return fetch.call(loader, load);
      }
    };
  });

  hook('translate', function(translate) {
    return function(load) {
      var loader = this;
      if (load.metadata.loaderModule && load.metadata.loaderModule.translate && load.metadata.format != 'defined') {
        return Promise.resolve(load.metadata.loaderModule.translate.call(loader, load)).then(function(result) {
          var sourceMap = load.metadata.sourceMap;

          // sanitize sourceMap if an object not a JSON string
          if (sourceMap) {
            if (typeof sourceMap != 'object')
              throw new Error('load.metadata.sourceMap must be set to an object.');

            var originalName = load.name.split('!')[0];
            
            // force set the filename of the original file
            sourceMap.file = originalName + '!transpiled';

            // force set the sources list if only one source
            if (!sourceMap.sources || sourceMap.sources.length <= 1)
              sourceMap.sources = [originalName];
          }

          // if running on file:/// URLs, sourcesContent is necessary
          // load.metadata.sourceMap.sourcesContent = [load.source];

          if (typeof result == 'string')
            load.source = result;
          else
            warn.call(this, 'Plugin ' + load.metadata.loader + ' should return the source in translate, instead of setting load.source directly. This support will be deprecated.');

          return translate.call(loader, load);
        });
      }
      else {
        return translate.call(loader, load);
      }
    };
  });

  hook('instantiate', function(instantiate) {
    return function(load) {
      var loader = this;
      var calledInstantiate = false;

      if (load.metadata.loaderModule && load.metadata.loaderModule.instantiate && !loader.builder && load.metadata.format != 'defined')
        return Promise.resolve(load.metadata.loaderModule.instantiate.call(loader, load, function(load) {
          if (calledInstantiate)
            throw new Error('Instantiate must only be called once.');
          calledInstantiate = true;
          return instantiate.call(loader, load);
        })).then(function(result) {
          if (calledInstantiate)
            return result;

          load.metadata.entry = createEntry();
          load.metadata.entry.execute = function() {
            return result;
          }
          load.metadata.entry.deps = load.metadata.deps;
          load.metadata.format = 'defined';
          return instantiate.call(loader, load);
        });
      else
        return instantiate.call(loader, load);
    };
  });

})();/*
 * Conditions Extension
 *
 *   Allows a condition module to alter the resolution of an import via syntax:
 *
 *     import $ from 'jquery/#{browser}';
 *
 *   Will first load the module 'browser' via `SystemJS.import('browser')` and 
 *   take the default export of that module.
 *   If the default export is not a string, an error is thrown.
 * 
 *   We then substitute the string into the require to get the conditional resolution
 *   enabling environment-specific variations like:
 * 
 *     import $ from 'jquery/ie'
 *     import $ from 'jquery/firefox'
 *     import $ from 'jquery/chrome'
 *     import $ from 'jquery/safari'
 *
 *   It can be useful for a condition module to define multiple conditions.
 *   This can be done via the `|` modifier to specify an export member expression:
 *
 *     import 'jquery/#{./browser.js|grade.version}'
 *
 *   Where the `grade` export `version` member in the `browser.js` module  is substituted.
 *
 *
 * Boolean Conditionals
 *
 *   For polyfill modules, that are used as imports but have no module value,
 *   a binary conditional allows a module not to be loaded at all if not needed:
 *
 *     import 'es5-shim#?./conditions.js|needs-es5shim'
 *
 *   These conditions can also be negated via:
 *     
 *     import 'es5-shim#?~./conditions.js|es6'
 *
 */

  function parseCondition(condition) {
    var conditionExport, conditionModule, negation;

    var negation = condition[0] == '~';
    var conditionExportIndex = condition.lastIndexOf('|');
    if (conditionExportIndex != -1) {
      conditionExport = condition.substr(conditionExportIndex + 1);
      conditionModule = condition.substr(negation, conditionExportIndex - negation) || '@system-env';
    }
    else {
      conditionExport = null;
      conditionModule = condition.substr(negation);
    }

    return {
      module: conditionModule,
      prop: conditionExport,
      negate: negation
    };
  }

  function serializeCondition(conditionObj) {
    return (conditionObj.negate ? '~' : '') + conditionObj.module + (conditionObj.prop ? '|' + conditionObj.prop : '');
  }

  function resolveCondition(conditionObj, parentName, bool) {
    return this['import'](conditionObj.module, parentName)
    .then(function(m) {
      if (conditionObj.prop)
        m = readMemberExpression(conditionObj.prop, m);
      else if (typeof m == 'object' && m + '' == 'Module')
        m = m['default'];

      if (bool && typeof m != 'boolean')
        throw new TypeError('Condition ' + serializeCondition(conditionObj) + ' did not resolve to a boolean.');

      return conditionObj.negate ? !m : m;
    });
  }

  var interpolationRegEx = /#\{[^\}]+\}/;
  function interpolateConditional(name, parentName) {
    // first we normalize the conditional
    var conditionalMatch = name.match(interpolationRegEx);

    if (!conditionalMatch)
      return Promise.resolve(name);

    var conditionObj = parseCondition(conditionalMatch[0].substr(2, conditionalMatch[0].length - 3));

    // in builds, return normalized conditional
    if (this.builder)
      return this['normalize'](conditionObj.module, parentName)
      .then(function(conditionModule) {
        conditionObj.module = conditionModule;
        return name.replace(interpolationRegEx, '#{' + serializeCondition(conditionObj) + '}');
      });

    return resolveCondition.call(this, conditionObj, parentName, false)
    .then(function(conditionValue) {
      if (typeof conditionValue !== 'string')
        throw new TypeError('The condition value for ' + name + ' doesn\'t resolve to a string.');

      if (conditionValue.indexOf('/') != -1)
        throw new TypeError('Unabled to interpolate conditional ' + name + (parentName ? ' in ' + parentName : '') + '\n\tThe condition value ' + conditionValue + ' cannot contain a "/" separator.');

      return name.replace(interpolationRegEx, conditionValue);
    });
  }

  function booleanConditional(name, parentName) {
    // first we normalize the conditional
    var booleanIndex = name.lastIndexOf('#?');

    if (booleanIndex == -1)
      return Promise.resolve(name);

    var conditionObj = parseCondition(name.substr(booleanIndex + 2));

    // in builds, return normalized conditional
    if (this.builder)
      return this['normalize'](conditionObj.module, parentName)
      .then(function(conditionModule) {
        conditionObj.module = conditionModule;
        return name.substr(0, booleanIndex) + '#?' + serializeCondition(conditionObj);
      });

    return resolveCondition.call(this, conditionObj, parentName, true)
    .then(function(conditionValue) {
      return conditionValue ? name.substr(0, booleanIndex) : '@empty';
    });
  }

  // normalizeSync does not parse conditionals at all although it could
  hook('normalize', function(normalize) {
    return function(name, parentName, parentAddress) {
      var loader = this;
      return booleanConditional.call(loader, name, parentName)
      .then(function(name) {
        return normalize.call(loader, name, parentName, parentAddress);
      })
      .then(function(normalized) {
        return interpolateConditional.call(loader, normalized, parentName);
      });
    };
  });
/*
 * Alias Extension
 *
 * Allows a module to be a plain copy of another module by module name
 *
 * SystemJS.meta['mybootstrapalias'] = { alias: 'bootstrap' };
 *
 */
(function() {
  // aliases
  hook('fetch', function(fetch) {
    return function(load) {
      var alias = load.metadata.alias;
      var aliasDeps = load.metadata.deps || [];
      if (alias) {
        load.metadata.format = 'defined';
        var entry = createEntry();
        this.defined[load.name] = entry;
        entry.declarative = true;
        entry.deps = aliasDeps.concat([alias]);
        entry.declare = function(_export) {
          return {
            setters: [function(module) {
              for (var p in module)
                _export(p, module[p]);
              if (module.__useDefault)
                entry.module.exports.__useDefault = true;
            }],
            execute: function() {}
          };
        };
        return '';
      }

      return fetch.call(this, load);
    };
  });
})();/*
 * Meta Extension
 *
 * Sets default metadata on a load record (load.metadata) from
 * loader.metadata via SystemJS.meta function.
 *
 *
 * Also provides an inline meta syntax for module meta in source.
 *
 * Eg:
 *
 * loader.meta({
 *   'my/module': { deps: ['jquery'] }
 *   'my/*': { format: 'amd' }
 * });
 *
 * Which in turn populates loader.metadata.
 *
 * load.metadata.deps and load.metadata.format will then be set
 * for 'my/module'
 *
 * The same meta could be set with a my/module.js file containing:
 *
 * my/module.js
 *   "format amd";
 *   "deps[] jquery";
 *   "globals.some value"
 *   console.log('this is my/module');
 *
 * Configuration meta always takes preference to inline meta.
 *
 * Multiple matches in wildcards are supported and ammend the meta.
 *
 *
 * The benefits of the function form is that paths are URL-normalized
 * supporting say
 *
 * loader.meta({ './app': { format: 'cjs' } });
 *
 * Instead of needing to set against the absolute URL (https://site.com/app.js)
 *
 */

(function() {

  hookConstructor(function(constructor) {
    return function() {
      this.meta = {};
      constructor.call(this);
    };
  });

  hook('locate', function(locate) {
    return function(load) {
      var meta = this.meta;
      var name = load.name;

      // NB for perf, maybe introduce a fast-path wildcard lookup cache here
      // which is checked first

      // apply wildcard metas
      var bestDepth = 0;
      var wildcardIndex;
      for (var module in meta) {
        wildcardIndex = module.indexOf('*');
        if (wildcardIndex === -1)
          continue;
        if (module.substr(0, wildcardIndex) === name.substr(0, wildcardIndex)
            && module.substr(wildcardIndex + 1) === name.substr(name.length - module.length + wildcardIndex + 1)) {
          var depth = module.split('/').length;
          if (depth > bestDepth)
            bestDepth = depth;
          extendMeta(load.metadata, meta[module], bestDepth != depth);
        }
      }

      // apply exact meta
      if (meta[name])
        extendMeta(load.metadata, meta[name]);

      return locate.call(this, load);
    };
  });

  // detect any meta header syntax
  // only set if not already set
  var metaRegEx = /^(\s*\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\s*\/\/[^\n]*|\s*"[^"]+"\s*;?|\s*'[^']+'\s*;?)+/;
  var metaPartRegEx = /\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\/\/[^\n]*|"[^"]+"\s*;?|'[^']+'\s*;?/g;

  function setMetaProperty(target, p, value) {
    var pParts = p.split('.');
    var curPart;
    while (pParts.length > 1) {
      curPart = pParts.shift();
      target = target[curPart] = target[curPart] || {};
    }
    curPart = pParts.shift();
    if (!(curPart in target))
      target[curPart] = value;
  }

  hook('translate', function(translate) {
    return function(load) {
      // NB meta will be post-translate pending transpiler conversion to plugins
      var meta = load.source.match(metaRegEx);
      if (meta) {
        var metaParts = meta[0].match(metaPartRegEx);

        for (var i = 0; i < metaParts.length; i++) {
          var curPart = metaParts[i];
          var len = curPart.length;

          var firstChar = curPart.substr(0, 1);
          if (curPart.substr(len - 1, 1) == ';')
            len--;

          if (firstChar != '"' && firstChar != "'")
            continue;

          var metaString = curPart.substr(1, curPart.length - 3);
          var metaName = metaString.substr(0, metaString.indexOf(' '));

          if (metaName) {
            var metaValue = metaString.substr(metaName.length + 1, metaString.length - metaName.length - 1);

            if (metaName.substr(metaName.length - 2, 2) == '[]') {
              metaName = metaName.substr(0, metaName.length - 2);
              load.metadata[metaName] = load.metadata[metaName] || [];
              load.metadata[metaName].push(metaValue);
            }
            else if (load.metadata[metaName] instanceof Array) {
              // temporary backwards compat for previous "deps" syntax
              warn.call(this, 'Module ' + load.name + ' contains deprecated "deps ' + metaValue + '" meta syntax.\nThis should be updated to "deps[] ' + metaValue + '" for pushing to array meta.');
              load.metadata[metaName].push(metaValue);
            }
            else {
              setMetaProperty(load.metadata, metaName, metaValue);
            }
          }
          else {
            load.metadata[metaString] = true;
          }
        }
      }

      return translate.call(this, load);
    };
  });
})();
/*
  System bundles

  Allows a bundle module to be specified which will be dynamically 
  loaded before trying to load a given module.

  For example:
  SystemJS.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']

  Will result in a load to "mybundle" whenever a load to "jquery"
  or "bootstrap/js/bootstrap" is made.

  In this way, the bundle becomes the request that provides the module
*/

(function() {
  // bundles support (just like RequireJS)
  // bundle name is module name of bundle itself
  // bundle is array of modules defined by the bundle
  // when a module in the bundle is requested, the bundle is loaded instead
  // of the form SystemJS.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']
  hookConstructor(function(constructor) {
    return function() {
      constructor.call(this);
      this.bundles = {};
      this._loader.loadedBundles = {};
    };
  });

  // assign bundle metadata for bundle loads
  hook('locate', function(locate) {
    return function(load) {
      var loader = this;
      var matched = false;

      if (!(load.name in loader.defined))
        for (var b in loader.bundles) {
          for (var i = 0; i < loader.bundles[b].length; i++) {
            var curModule = loader.bundles[b][i];

            if (curModule == load.name) {
              matched = true;
              break;
            }

            // wildcard in bundles does not include / boundaries
            if (curModule.indexOf('*') != -1) {
              var parts = curModule.split('*');
              if (parts.length != 2) {
                loader.bundles[b].splice(i--, 1);
                continue;
              }
              
              if (load.name.substring(0, parts[0].length) == parts[0] &&
                  load.name.substr(load.name.length - parts[1].length, parts[1].length) == parts[1] &&
                  load.name.substr(parts[0].length, load.name.length - parts[1].length - parts[0].length).indexOf('/') == -1) {
                matched = true;
                break;
              }
            }
          }

          if (matched)
            return loader['import'](b)
            .then(function() {
              return locate.call(loader, load);
            });
        }

      return locate.call(loader, load);
    };
  });
})();
/*
 * Dependency Tree Cache
 * 
 * Allows a build to pre-populate a dependency trace tree on the loader of 
 * the expected dependency tree, to be loaded upfront when requesting the
 * module, avoinding the n round trips latency of module loading, where 
 * n is the dependency tree depth.
 *
 * eg:
 * SystemJS.depCache = {
 *  'app': ['normalized', 'deps'],
 *  'normalized': ['another'],
 *  'deps': ['tree']
 * };
 * 
 * SystemJS.import('app') 
 * // simultaneously starts loading all of:
 * // 'normalized', 'deps', 'another', 'tree'
 * // before "app" source is even loaded
 *
 */

(function() {
  hookConstructor(function(constructor) {
    return function() {
      constructor.call(this);
      this.depCache = {};
    }
  });

  hook('locate', function(locate) {
    return function(load) {
      var loader = this;
      // load direct deps, in turn will pick up their trace trees
      var deps = loader.depCache[load.name];
      if (deps)
        for (var i = 0; i < deps.length; i++)
          loader['import'](deps[i], load.name);

      return locate.call(loader, load);
    };
  });
})();
  
System = new SystemJSLoader();

__global.SystemJS = System;
System.version = '0.19.27 Standard';
  // -- exporting --

  if (typeof exports === 'object')
    module.exports = Loader;

  __global.Reflect = __global.Reflect || {};
  __global.Reflect.Loader = __global.Reflect.Loader || Loader;
  __global.Reflect.global = __global.Reflect.global || __global;
  __global.LoaderPolyfill = Loader;

  if (!System) {
    System = new SystemLoader();
    System.constructor = SystemLoader;
  }

  if (typeof exports === 'object')
    module.exports = System;

  __global.System = System;

})(typeof self != 'undefined' ? self : global);}

// auto-load Promise polyfill if needed in the browser
var doPolyfill = typeof Promise === 'undefined';

// document.write
if (typeof document !== 'undefined') {
  var scripts = document.getElementsByTagName('script');
  $__curScript = scripts[scripts.length - 1];
  if (doPolyfill) {
    var curPath = $__curScript.src;
    var basePath = curPath.substr(0, curPath.lastIndexOf('/') + 1);
    window.systemJSBootstrap = bootstrap;
    document.write(
      '<' + 'script type="text/javascript" src="' + basePath + 'system-polyfills.js">' + '<' + '/script>'
    );
  }
  else {
    bootstrap();
  }
}
// importScripts
else if (typeof importScripts !== 'undefined') {
  var basePath = '';
  try {
    throw new Error('_');
  } catch (e) {
    e.stack.replace(/(?:at|@).*(http.+):[\d]+:[\d]+/, function(m, url) {
      $__curScript = { src: url };
      basePath = url.replace(/\/[^\/]*$/, '/');
    });
  }
  if (doPolyfill)
    importScripts(basePath + 'system-polyfills.js');
  bootstrap();
}
else {
  $__curScript = typeof __filename != 'undefined' ? { src: __filename } : null;
  bootstrap();
}


})();

/* **********************************************
     Begin prism-core.js
********************************************** */

var _self = (typeof window !== 'undefined')
	? window   // if in browser
	: (
		(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
		? self // if in worker
		: {}   // if in node js
	);

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 * MIT license http://www.opensource.org/licenses/mit-license.php/
 * @author Lea Verou http://lea.verou.me
 */

var Prism = (function(){

// Private helper vars
var lang = /\blang(?:uage)?-(\w+)\b/i;
var uniqueId = 0;

var _ = _self.Prism = {
	util: {
		encode: function (tokens) {
			if (tokens instanceof Token) {
				return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);
			} else if (_.util.type(tokens) === 'Array') {
				return tokens.map(_.util.encode);
			} else {
				return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
			}
		},

		type: function (o) {
			return Object.prototype.toString.call(o).match(/\[object (\w+)\]/)[1];
		},

		objId: function (obj) {
			if (!obj['__id']) {
				Object.defineProperty(obj, '__id', { value: ++uniqueId });
			}
			return obj['__id'];
		},

		// Deep clone a language definition (e.g. to extend it)
		clone: function (o) {
			var type = _.util.type(o);

			switch (type) {
				case 'Object':
					var clone = {};

					for (var key in o) {
						if (o.hasOwnProperty(key)) {
							clone[key] = _.util.clone(o[key]);
						}
					}

					return clone;

				case 'Array':
					// Check for existence for IE8
					return o.map && o.map(function(v) { return _.util.clone(v); });
			}

			return o;
		}
	},

	languages: {
		extend: function (id, redef) {
			var lang = _.util.clone(_.languages[id]);

			for (var key in redef) {
				lang[key] = redef[key];
			}

			return lang;
		},

		/**
		 * Insert a token before another token in a language literal
		 * As this needs to recreate the object (we cannot actually insert before keys in object literals),
		 * we cannot just provide an object, we need anobject and a key.
		 * @param inside The key (or language id) of the parent
		 * @param before The key to insert before. If not provided, the function appends instead.
		 * @param insert Object with the key/value pairs to insert
		 * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
		 */
		insertBefore: function (inside, before, insert, root) {
			root = root || _.languages;
			var grammar = root[inside];

			if (arguments.length == 2) {
				insert = arguments[1];

				for (var newToken in insert) {
					if (insert.hasOwnProperty(newToken)) {
						grammar[newToken] = insert[newToken];
					}
				}

				return grammar;
			}

			var ret = {};

			for (var token in grammar) {

				if (grammar.hasOwnProperty(token)) {

					if (token == before) {

						for (var newToken in insert) {

							if (insert.hasOwnProperty(newToken)) {
								ret[newToken] = insert[newToken];
							}
						}
					}

					ret[token] = grammar[token];
				}
			}

			// Update references in other language definitions
			_.languages.DFS(_.languages, function(key, value) {
				if (value === root[inside] && key != inside) {
					this[key] = ret;
				}
			});

			return root[inside] = ret;
		},

		// Traverse a language definition with Depth First Search
		DFS: function(o, callback, type, visited) {
			visited = visited || {};
			for (var i in o) {
				if (o.hasOwnProperty(i)) {
					callback.call(o, i, o[i], type || i);

					if (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {
						visited[_.util.objId(o[i])] = true;
						_.languages.DFS(o[i], callback, null, visited);
					}
					else if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {
						visited[_.util.objId(o[i])] = true;
						_.languages.DFS(o[i], callback, i, visited);
					}
				}
			}
		}
	},
	plugins: {},

	highlightAll: function(async, callback) {
		var env = {
			callback: callback,
			selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
		};

		_.hooks.run("before-highlightall", env);

		var elements = env.elements || document.querySelectorAll(env.selector);

		for (var i=0, element; element = elements[i++];) {
			_.highlightElement(element, async === true, env.callback);
		}
	},

	highlightElement: function(element, async, callback) {
		// Find language
		var language, grammar, parent = element;

		while (parent && !lang.test(parent.className)) {
			parent = parent.parentNode;
		}

		if (parent) {
			language = (parent.className.match(lang) || [,''])[1].toLowerCase();
			grammar = _.languages[language];
		}

		// Set language on the element, if not present
		element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

		// Set language on the parent, for styling
		parent = element.parentNode;

		if (/pre/i.test(parent.nodeName)) {
			parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
		}

		var code = element.textContent;

		var env = {
			element: element,
			language: language,
			grammar: grammar,
			code: code
		};

		_.hooks.run('before-sanity-check', env);

		if (!env.code || !env.grammar) {
			_.hooks.run('complete', env);
			return;
		}

		_.hooks.run('before-highlight', env);

		if (async && _self.Worker) {
			var worker = new Worker(_.filename);

			worker.onmessage = function(evt) {
				env.highlightedCode = evt.data;

				_.hooks.run('before-insert', env);

				env.element.innerHTML = env.highlightedCode;

				callback && callback.call(env.element);
				_.hooks.run('after-highlight', env);
				_.hooks.run('complete', env);
			};

			worker.postMessage(JSON.stringify({
				language: env.language,
				code: env.code,
				immediateClose: true
			}));
		}
		else {
			env.highlightedCode = _.highlight(env.code, env.grammar, env.language);

			_.hooks.run('before-insert', env);

			env.element.innerHTML = env.highlightedCode;

			callback && callback.call(element);

			_.hooks.run('after-highlight', env);
			_.hooks.run('complete', env);
		}
	},

	highlight: function (text, grammar, language) {
		var tokens = _.tokenize(text, grammar);
		return Token.stringify(_.util.encode(tokens), language);
	},

	tokenize: function(text, grammar, language) {
		var Token = _.Token;

		var strarr = [text];

		var rest = grammar.rest;

		if (rest) {
			for (var token in rest) {
				grammar[token] = rest[token];
			}

			delete grammar.rest;
		}

		tokenloop: for (var token in grammar) {
			if(!grammar.hasOwnProperty(token) || !grammar[token]) {
				continue;
			}

			var patterns = grammar[token];
			patterns = (_.util.type(patterns) === "Array") ? patterns : [patterns];

			for (var j = 0; j < patterns.length; ++j) {
				var pattern = patterns[j],
					inside = pattern.inside,
					lookbehind = !!pattern.lookbehind,
					greedy = !!pattern.greedy,
					lookbehindLength = 0,
					alias = pattern.alias;

				pattern = pattern.pattern || pattern;

				for (var i=0; i<strarr.length; i++) { // Donât cache length as it changes during the loop

					var str = strarr[i];

					if (strarr.length > text.length) {
						// Something went terribly wrong, ABORT, ABORT!
						break tokenloop;
					}

					if (str instanceof Token) {
						continue;
					}

					pattern.lastIndex = 0;

					var match = pattern.exec(str),
					    delNum = 1;

					// Greedy patterns can override/remove up to two previously matched tokens
					if (!match && greedy && i != strarr.length - 1) {
						// Reconstruct the original text using the next two tokens
						var nextToken = strarr[i + 1].matchedStr || strarr[i + 1],
						    combStr = str + nextToken;

						if (i < strarr.length - 2) {
							combStr += strarr[i + 2].matchedStr || strarr[i + 2];
						}

						// Try the pattern again on the reconstructed text
						pattern.lastIndex = 0;
						match = pattern.exec(combStr);
						if (!match) {
							continue;
						}

						var from = match.index + (lookbehind ? match[1].length : 0);
						// To be a valid candidate, the new match has to start inside of str
						if (from >= str.length) {
							continue;
						}
						var to = match.index + match[0].length,
						    len = str.length + nextToken.length;

						// Number of tokens to delete and replace with the new match
						delNum = 3;

						if (to <= len) {
							if (strarr[i + 1].greedy) {
								continue;
							}
							delNum = 2;
							combStr = combStr.slice(0, len);
						}
						str = combStr;
					}

					if (!match) {
						continue;
					}

					if(lookbehind) {
						lookbehindLength = match[1].length;
					}

					var from = match.index + lookbehindLength,
					    match = match[0].slice(lookbehindLength),
					    to = from + match.length,
					    before = str.slice(0, from),
					    after = str.slice(to);

					var args = [i, delNum];

					if (before) {
						args.push(before);
					}

					var wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);

					args.push(wrapped);

					if (after) {
						args.push(after);
					}

					Array.prototype.splice.apply(strarr, args);
				}
			}
		}

		return strarr;
	},

	hooks: {
		all: {},

		add: function (name, callback) {
			var hooks = _.hooks.all;

			hooks[name] = hooks[name] || [];

			hooks[name].push(callback);
		},

		run: function (name, env) {
			var callbacks = _.hooks.all[name];

			if (!callbacks || !callbacks.length) {
				return;
			}

			for (var i=0, callback; callback = callbacks[i++];) {
				callback(env);
			}
		}
	}
};

var Token = _.Token = function(type, content, alias, matchedStr, greedy) {
	this.type = type;
	this.content = content;
	this.alias = alias;
	// Copy of the full string this token was created from
	this.matchedStr = matchedStr || null;
	this.greedy = !!greedy;
};

Token.stringify = function(o, language, parent) {
	if (typeof o == 'string') {
		return o;
	}

	if (_.util.type(o) === 'Array') {
		return o.map(function(element) {
			return Token.stringify(element, language, o);
		}).join('');
	}

	var env = {
		type: o.type,
		content: Token.stringify(o.content, language, parent),
		tag: 'span',
		classes: ['token', o.type],
		attributes: {},
		language: language,
		parent: parent
	};

	if (env.type == 'comment') {
		env.attributes['spellcheck'] = 'true';
	}

	if (o.alias) {
		var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];
		Array.prototype.push.apply(env.classes, aliases);
	}

	_.hooks.run('wrap', env);

	var attributes = '';

	for (var name in env.attributes) {
		attributes += (attributes ? ' ' : '') + name + '="' + (env.attributes[name] || '') + '"';
	}

	return '<' + env.tag + ' class="' + env.classes.join(' ') + '" ' + attributes + '>' + env.content + '</' + env.tag + '>';

};

if (!_self.document) {
	if (!_self.addEventListener) {
		// in Node.js
		return _self.Prism;
	}
 	// In worker
	_self.addEventListener('message', function(evt) {
		var message = JSON.parse(evt.data),
		    lang = message.language,
		    code = message.code,
		    immediateClose = message.immediateClose;

		_self.postMessage(_.highlight(code, _.languages[lang], lang));
		if (immediateClose) {
			_self.close();
		}
	}, false);

	return _self.Prism;
}

//Get current script and highlight
var script = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();

if (script) {
	_.filename = script.src;

	if (document.addEventListener && !script.hasAttribute('data-manual')) {
		if(document.readyState !== "loading") {
			requestAnimationFrame(_.highlightAll, 0);
		}
		else {
			document.addEventListener('DOMContentLoaded', _.highlightAll);
		}
	}
}

return _self.Prism;

})();

if (typeof module !== 'undefined' && module.exports) {
	module.exports = Prism;
}

// hack for components to work correctly in node.js
if (typeof global !== 'undefined') {
	global.Prism = Prism;
}


/* **********************************************
     Begin prism-markup.js
********************************************** */

Prism.languages.markup = {
	'comment': /<!--[\w\W]*?-->/,
	'prolog': /<\?[\w\W]+?\?>/,
	'doctype': /<!DOCTYPE[\w\W]+?>/,
	'cdata': /<!\[CDATA\[[\w\W]*?]]>/i,
	'tag': {
		pattern: /<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i,
		inside: {
			'tag': {
				pattern: /^<\/?[^\s>\/]+/i,
				inside: {
					'punctuation': /^<\/?/,
					'namespace': /^[^\s>\/:]+:/
				}
			},
			'attr-value': {
				pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i,
				inside: {
					'punctuation': /[=>"']/
				}
			},
			'punctuation': /\/?>/,
			'attr-name': {
				pattern: /[^\s>\/]+/,
				inside: {
					'namespace': /^[^\s>\/:]+:/
				}
			}

		}
	},
	'entity': /&#?[\da-z]{1,8};/i
};

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function(env) {

	if (env.type === 'entity') {
		env.attributes['title'] = env.content.replace(/&amp;/, '&');
	}
});

Prism.languages.xml = Prism.languages.markup;
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;


/* **********************************************
     Begin prism-css.js
********************************************** */

Prism.languages.css = {
	'comment': /\/\*[\w\W]*?\*\//,
	'atrule': {
		pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i,
		inside: {
			'rule': /@[\w-]+/
			// See rest below
		}
	},
	'url': /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,
	'selector': /[^\{\}\s][^\{\};]*?(?=\s*\{)/,
	'string': /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/,
	'property': /(\b|\B)[\w-]+(?=\s*:)/i,
	'important': /\B!important\b/i,
	'function': /[-a-z0-9]+(?=\()/i,
	'punctuation': /[(){};:]/
};

Prism.languages.css['atrule'].inside.rest = Prism.util.clone(Prism.languages.css);

if (Prism.languages.markup) {
	Prism.languages.insertBefore('markup', 'tag', {
		'style': {
			pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i,
			lookbehind: true,
			inside: Prism.languages.css,
			alias: 'language-css'
		}
	});
	
	Prism.languages.insertBefore('inside', 'attr-value', {
		'style-attr': {
			pattern: /\s*style=("|').*?\1/i,
			inside: {
				'attr-name': {
					pattern: /^\s*style/i,
					inside: Prism.languages.markup.tag.inside
				},
				'punctuation': /^\s*=\s*['"]|['"]\s*$/,
				'attr-value': {
					pattern: /.+/i,
					inside: Prism.languages.css
				}
			},
			alias: 'language-css'
		}
	}, Prism.languages.markup.tag);
}

/* **********************************************
     Begin prism-clike.js
********************************************** */

Prism.languages.clike = {
	'comment': [
		{
			pattern: /(^|[^\\])\/\*[\w\W]*?\*\//,
			lookbehind: true
		},
		{
			pattern: /(^|[^\\:])\/\/.*/,
			lookbehind: true
		}
	],
	'string': {
		pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true
	},
	'class-name': {
		pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,
		lookbehind: true,
		inside: {
			punctuation: /(\.|\\)/
		}
	},
	'keyword': /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
	'boolean': /\b(true|false)\b/,
	'function': /[a-z0-9_]+(?=\()/i,
	'number': /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,
	'operator': /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
	'punctuation': /[{}[\];(),.:]/
};


/* **********************************************
     Begin prism-javascript.js
********************************************** */

Prism.languages.javascript = Prism.languages.extend('clike', {
	'keyword': /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,
	'number': /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	'function': /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i
});

Prism.languages.insertBefore('javascript', 'keyword', {
	'regex': {
		pattern: /(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,
		lookbehind: true,
		greedy: true
	}
});

Prism.languages.insertBefore('javascript', 'string', {
	'template-string': {
		pattern: /`(?:\\\\|\\?[^\\])*?`/,
		greedy: true,
		inside: {
			'interpolation': {
				pattern: /\$\{[^}]+\}/,
				inside: {
					'interpolation-punctuation': {
						pattern: /^\$\{|\}$/,
						alias: 'punctuation'
					},
					rest: Prism.languages.javascript
				}
			},
			'string': /[\s\S]+/
		}
	}
});

if (Prism.languages.markup) {
	Prism.languages.insertBefore('markup', 'tag', {
		'script': {
			pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i,
			lookbehind: true,
			inside: Prism.languages.javascript,
			alias: 'language-javascript'
		}
	});
}

Prism.languages.js = Prism.languages.javascript;

/* **********************************************
     Begin prism-file-highlight.js
********************************************** */

(function () {
	if (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {
		return;
	}

	self.Prism.fileHighlight = function() {

		var Extensions = {
			'js': 'javascript',
			'py': 'python',
			'rb': 'ruby',
			'ps1': 'powershell',
			'psm1': 'powershell',
			'sh': 'bash',
			'bat': 'batch',
			'h': 'c',
			'tex': 'latex'
		};

		if(Array.prototype.forEach) { // Check to prevent error in IE8
			Array.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {
				var src = pre.getAttribute('data-src');

				var language, parent = pre;
				var lang = /\blang(?:uage)?-(?!\*)(\w+)\b/i;
				while (parent && !lang.test(parent.className)) {
					parent = parent.parentNode;
				}

				if (parent) {
					language = (pre.className.match(lang) || [, ''])[1];
				}

				if (!language) {
					var extension = (src.match(/\.(\w+)$/) || [, ''])[1];
					language = Extensions[extension] || extension;
				}

				var code = document.createElement('code');
				code.className = 'language-' + language;

				pre.textContent = '';

				code.textContent = 'Loadingâ¦';

				pre.appendChild(code);

				var xhr = new XMLHttpRequest();

				xhr.open('GET', src, true);

				xhr.onreadystatechange = function () {
					if (xhr.readyState == 4) {

						if (xhr.status < 400 && xhr.responseText) {
							code.textContent = xhr.responseText;

							Prism.highlightElement(code);
						}
						else if (xhr.status >= 400) {
							code.textContent = 'â Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;
						}
						else {
							code.textContent = 'â Error: File does not exist or is empty';
						}
					}
				};

				xhr.send(null);
			});
		}

	};

	document.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);

})();

!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], [], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core")) : "function" == typeof define && define.amd ? define("2", ["exports", "3"], factory) : factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core);
}(this, function(exports, _angular_core) {
  "use strict";
  function digestMessage(message) {
    return strHash(serializeNodes(message.nodes).join("") + ("[" + message.meaning + "]"));
  }
  function strHash(str) {
    for (var result = 0,
        i = 0; i < str.length; ++i)
      result = 31 * result + str.charCodeAt(i) >>> 0;
    return result.toString(16);
  }
  function serializeNodes(nodes) {
    return nodes.map(function(a) {
      return a.visit(serializerVisitor, null);
    });
  }
  function visitAll(visitor, nodes, context) {
    void 0 === context && (context = null);
    var result = [];
    return nodes.forEach(function(ast) {
      var astResult = ast.visit(visitor, context);
      astResult && result.push(astResult);
    }), result;
  }
  function isWhitespace(code) {
    return code >= $TAB && code <= $SPACE || code == $NBSP;
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isStringMap(obj) {
    return "object" == typeof obj && null !== obj;
  }
  function isStrictStringMap(obj) {
    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.overriddenName)
      return token.overriddenName;
    if (token.name)
      return token.name;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function resolveEnumToken(enumValue, val) {
    return enumValue[val];
  }
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  function normalizeBool(obj) {
    return !isBlank(obj) && obj;
  }
  function isJsObject(o) {
    return null !== o && ("function" == typeof o || "object" == typeof o);
  }
  function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl,
        fnArgNames = [],
        fnArgValues = [];
    for (var argName in vars)
      fnArgNames.push(argName), fnArgValues.push(vars[argName]);
    return (new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))).apply(void 0, fnArgValues);
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
  }
  function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, StringWrapper.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, "");
  }
  function newErrorToken(index, message) {
    return new Token(index, TokenType.Error, 0, message);
  }
  function isIdentifierStart(code) {
    return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
  }
  function isIdentifier(input) {
    if (0 == input.length)
      return !1;
    var scanner = new _Scanner(input);
    if (!isIdentifierStart(scanner.peek))
      return !1;
    for (scanner.advance(); scanner.peek !== $EOF; ) {
      if (!isIdentifierPart(scanner.peek))
        return !1;
      scanner.advance();
    }
    return !0;
  }
  function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
  }
  function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return $LF;
      case $f:
        return $FF;
      case $r:
        return $CR;
      case $t:
        return $TAB;
      case $v:
        return $VTAB;
      default:
        return code;
    }
  }
  function assertArrayOfStrings(identifier, value) {
    if (_angular_core.isDevMode() && !isBlank(value)) {
      if (!isArray(value))
        throw new Error("Expected '" + identifier + "' to be an array of strings.");
      for (var i = 0; i < value.length; i += 1)
        if (!isString(value[i]))
          throw new Error("Expected '" + identifier + "' to be an array of strings.");
    }
  }
  function assertInterpolationSymbols(identifier, value) {
    if (isPresent(value) && (!isArray(value) || 2 != value.length))
      throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
    if (_angular_core.isDevMode() && !isBlank(value)) {
      var start_1 = value[0],
          end_1 = value[1];
      INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
        if (regexp.test(start_1) || regexp.test(end_1))
          throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
      });
    }
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function _createInterpolateRegExp(config) {
    var pattern = escapeRegExp(config.start) + "([\\s\\S]*?)" + escapeRegExp(config.end);
    return new RegExp(pattern, "g");
  }
  function splitNsName(elementName) {
    if (":" != elementName[0])
      return [null, elementName];
    var colonIndex = elementName.indexOf(":", 1);
    if (colonIndex == -1)
      throw new Error('Unsupported format "' + elementName + '" expecting ":namespace:name"');
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }
  function getNsPrefix(fullName) {
    return null === fullName ? null : splitNsName(fullName)[0];
  }
  function mergeNsAndName(prefix, localName) {
    return prefix ? ":" + prefix + ":" + localName : localName;
  }
  function getHtmlTagDefinition(tagName) {
    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
  }
  function createI18nMessageFactory(interpolationConfig) {
    var visitor = new _I18nVisitor(_expParser, interpolationConfig);
    return function(nodes, meaning, description) {
      return visitor.toI18nMessage(nodes, meaning, description);
    };
  }
  function _extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[1];
  }
  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.extract(nodes, interpolationConfig);
  }
  function _isOpeningComment(n) {
    return n instanceof Comment && n.value && n.value.startsWith("i18n");
  }
  function _isClosingComment(n) {
    return n instanceof Comment && n.value && "/i18n" === n.value;
  }
  function _getI18nAttr(p) {
    return p.attrs.find(function(attr) {
      return attr.name === _I18N_ATTR;
    }) || null;
  }
  function _splitMeaningAndDesc(i18n) {
    if (!i18n)
      return ["", ""];
    var pipeIndex = i18n.indexOf("|");
    return pipeIndex == -1 ? ["", i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
  }
  function serialize(nodes) {
    return nodes.map(function(node) {
      return node.visit(_visitor);
    }).join("");
  }
  function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce(function(text, entry) {
      return text.replace(entry[0], entry[1]);
    }, text);
  }
  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
    return void 0 === tokenizeExpansionForms && (tokenizeExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
  }
  function _unexpectedCharacterErrorMsg(charCode) {
    var char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);
    return 'Unexpected character "' + char + '"';
  }
  function _unknownEntityErrorMsg(entitySrc) {
    return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
  }
  function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
  }
  function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
  }
  function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
  }
  function isDigitEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
  }
  function isExpansionFormStart(input, offset, interpolationConfig) {
    var isInterpolationStart = !!interpolationConfig && input.indexOf(interpolationConfig.start, offset) == offset;
    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
  }
  function isExpansionCaseStart(peek) {
    return peek === $EQ || isAsciiLetter(peek);
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
  }
  function mergeTextTokens(srcTokens) {
    for (var lastDstToken,
        dstTokens = [],
        i = 0; i < srcTokens.length; i++) {
      var token = srcTokens[i];
      lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT ? (lastDstToken.parts[0] += token.parts[0], lastDstToken.sourceSpan.end = token.sourceSpan.end) : (lastDstToken = token, dstTokens.push(lastDstToken));
    }
    return dstTokens;
  }
  function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
  }
  function getXmlTagDefinition(tagName) {
    return _TAG_DEFINITION;
  }
  function templateVisitAll(visitor, asts, context) {
    void 0 === context && (context = null);
    var result = [];
    return asts.forEach(function(ast) {
      var astResult = ast.visit(visitor, context);
      isPresent(astResult) && result.push(astResult);
    }), result;
  }
  function unimplemented() {
    throw new BaseException("unimplemented");
  }
  function createOfflineCompileUrlResolver() {
    return new UrlResolver(_ASSET_SCHEME);
  }
  function getUrlScheme(url) {
    var match = _split(url);
    return match && match[_ComponentIndex.Scheme] || "";
  }
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    return isPresent(opt_scheme) && out.push(opt_scheme + ":"), isPresent(opt_domain) && (out.push("//"), isPresent(opt_userInfo) && out.push(opt_userInfo + "@"), out.push(opt_domain), isPresent(opt_port) && out.push(":" + opt_port)), isPresent(opt_path) && out.push(opt_path), isPresent(opt_queryData) && out.push("?" + opt_queryData), isPresent(opt_fragment) && out.push("#" + opt_fragment), out.join("");
  }
  function _split(uri) {
    return uri.match(_splitRe);
  }
  function _removeDotSegments(path) {
    if ("/" == path)
      return "/";
    for (var leadingSlash = "/" == path[0] ? "/" : "",
        trailingSlash = "/" === path[path.length - 1] ? "/" : "",
        segments = path.split("/"),
        out = [],
        up = 0,
        pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case "":
        case ".":
          break;
        case "..":
          out.length > 0 ? out.pop() : up++;
          break;
        default:
          out.push(segment);
      }
    }
    if ("" == leadingSlash) {
      for (; up-- > 0; )
        out.unshift("..");
      0 === out.length && out.push(".");
    }
    return leadingSlash + out.join("/") + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];
    return path = isBlank(path) ? "" : _removeDotSegments(path), parts[_ComponentIndex.Path] = path, _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url)),
        baseParts = _split(base);
    if (isPresent(parts[_ComponentIndex.Scheme]))
      return _joinAndCanonicalizePath(parts);
    parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++)
      isBlank(parts[i]) && (parts[i] = baseParts[i]);
    if ("/" == parts[_ComponentIndex.Path][0])
      return _joinAndCanonicalizePath(parts);
    var path = baseParts[_ComponentIndex.Path];
    isBlank(path) && (path = "/");
    var index = path.lastIndexOf("/");
    return path = path.substring(0, index + 1) + parts[_ComponentIndex.Path], parts[_ComponentIndex.Path] = path, _joinAndCanonicalizePath(parts);
  }
  function replaceVarInExpression(varName, newValue, expression) {
    var transformer = new _ReplaceVariableTransformer(varName, newValue);
    return expression.visitExpression(transformer, null);
  }
  function findReadVarNames(stmts) {
    var finder = new _VariableFinder;
    return finder.visitAllStatements(stmts, null), finder.varNames;
  }
  function variable(name, type) {
    return void 0 === type && (type = null), new ReadVarExpr(name, type);
  }
  function importExpr(id, typeParams) {
    return void 0 === typeParams && (typeParams = null), new ExternalExpr(id, null, typeParams);
  }
  function importType(id, typeParams, typeModifiers) {
    return void 0 === typeParams && (typeParams = null), void 0 === typeModifiers && (typeModifiers = null), isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
  }
  function literalArr(values, type) {
    return void 0 === type && (type = null), new LiteralArrayExpr(values, type);
  }
  function literalMap(values, type) {
    return void 0 === type && (type = null), new LiteralMapExpr(values, type);
  }
  function not(expr) {
    return new NotExpr(expr);
  }
  function fn(params, body, type) {
    return void 0 === type && (type = null), new FunctionExpr(params, body, type);
  }
  function literal(value, type) {
    return void 0 === type && (type = null), new LiteralExpr(value, type);
  }
  function camelCaseToDashCase(input) {
    return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return "-" + m[1].toLowerCase();
    });
  }
  function splitAtColon(input, defaultValues) {
    var colonIndex = input.indexOf(":");
    return colonIndex == -1 ? defaultValues : [input.slice(0, colonIndex).trim(), input.slice(colonIndex + 1).trim()];
  }
  function sanitizeIdentifier(name) {
    return StringWrapper.replaceAll(name, /\W/g, "_");
  }
  function visitValue(value, visitor, context) {
    return isArray(value) ? visitor.visitArray(value, context) : isStrictStringMap(value) ? visitor.visitStringMap(value, context) : isBlank(value) || isPrimitive(value) ? visitor.visitPrimitive(value, context) : visitor.visitOther(value, context);
  }
  function assetUrl(pkg, path, type) {
    return void 0 === path && (path = null), void 0 === type && (type = "src"), null == path ? "asset:@angular/lib/" + pkg + "/index" : "asset:@angular/lib/" + pkg + "/src/" + path;
  }
  function createDiTokenExpression(token) {
    return isPresent(token.value) ? literal(token.value) : token.identifierIsInstance ? importExpr(token.identifier).instantiate([], importType(token.identifier, [], [TypeModifier.Const])) : importExpr(token.identifier);
  }
  function createHostComponentMeta(compMeta) {
    var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
      type: new CompileTypeMetadata({
        runtime: Object,
        name: compMeta.type.name + "_Host",
        moduleUrl: compMeta.type.moduleUrl,
        isHost: !0
      }),
      template: new CompileTemplateMetadata({
        template: template,
        templateUrl: "",
        styles: [],
        styleUrls: [],
        ngContentSelectors: [],
        animations: []
      }),
      changeDetection: _angular_core.ChangeDetectionStrategy.Default,
      inputs: [],
      outputs: [],
      host: {},
      isComponent: !0,
      selector: "*",
      providers: [],
      viewProviders: [],
      queries: [],
      viewQueries: []
    });
  }
  function removeIdentifierDuplicates(items) {
    var map = new CompileIdentifierMap;
    return items.forEach(function(item) {
      map.get(item) || map.add(item, item);
    }), map.keys();
  }
  function _normalizeArray(obj) {
    return isPresent(obj) ? obj : [];
  }
  function isStaticSymbol(value) {
    return isStringMap(value) && isPresent(value.name) && isPresent(value.filePath);
  }
  function identifierToken(identifier) {
    return new CompileTokenMetadata({identifier: identifier});
  }
  function expandNodes(nodes) {
    var expander = new _Expander;
    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
  }
  function _expandPluralForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      PLURAL_CASES.indexOf(c.value) != -1 || c.value.match(/^=\d+$/) || errors.push(new ExpansionError(c.valueSourceSpan, 'Plural cases should be "=<number>" or one of ' + PLURAL_CASES.join(", ")));
      var expansionResult = expandNodes(c.expression);
      return errors.push.apply(errors, expansionResult.errors), new Element("template", [new Attribute("ngPluralCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    }),
        switchAttr = new Attribute("[ngPlural]", ast.switchValue, ast.switchValueSourceSpan);
    return new Element("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function _expandDefaultForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      var expansionResult = expandNodes(c.expression);
      return errors.push.apply(errors, expansionResult.errors), new Element("template", [new Attribute("ngSwitchCase", "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    }),
        switchAttr = new Attribute("[ngSwitch]", ast.switchValue, ast.switchValueSourceSpan);
    return new Element("ng-container", [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function _transformProvider(provider, _a) {
    var useExisting = _a.useExisting,
        useValue = _a.useValue,
        deps = _a.deps;
    return new CompileProviderMetadata({
      token: provider.token,
      useClass: provider.useClass,
      useExisting: useExisting,
      useFactory: provider.useFactory,
      useValue: useValue,
      deps: deps,
      multi: provider.multi
    });
  }
  function _transformProviderAst(provider, _a) {
    var eager = _a.eager,
        providers = _a.providers;
    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
  }
  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
    return void 0 === targetProviders && (targetProviders = null), isBlank(targetProviders) && (targetProviders = []), isPresent(providers) && providers.forEach(function(provider) {
      if (isArray(provider))
        _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
      else {
        var normalizeProvider = void 0;
        provider instanceof CompileProviderMetadata ? normalizeProvider = provider : provider instanceof CompileTypeMetadata ? normalizeProvider = new CompileProviderMetadata({
          token: new CompileTokenMetadata({identifier: provider}),
          useClass: provider
        }) : targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan)), isPresent(normalizeProvider) && targetProviders.push(normalizeProvider);
      }
    }), targetProviders;
  }
  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var providersByToken = new CompileIdentifierMap;
    directives.forEach(function(directive) {
      var dirProvider = new CompileProviderMetadata({
        token: new CompileTokenMetadata({identifier: directive.type}),
        useClass: directive.type
      });
      _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, !0, sourceSpan, targetErrors, providersByToken);
    });
    var directivesWithComponentFirst = directives.filter(function(dir) {
      return dir.isComponent;
    }).concat(directives.filter(function(dir) {
      return !dir.isComponent;
    }));
    return directivesWithComponentFirst.forEach(function(directive) {
      _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, !1, sourceSpan, targetErrors, providersByToken), _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, !1, sourceSpan, targetErrors, providersByToken);
    }), providersByToken;
  }
  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function(provider) {
      var resolvedProvider = targetProvidersByToken.get(provider.token);
      if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi && targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan)), isBlank(resolvedProvider)) {
        var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ? provider.token.identifier.lifecycleHooks : [];
        resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan), targetProvidersByToken.add(provider.token, resolvedProvider);
      } else
        provider.multi || ListWrapper.clear(resolvedProvider.providers), resolvedProvider.providers.push(provider);
    });
  }
  function _getViewQueries(component) {
    var viewQueries = new CompileIdentifierMap;
    return isPresent(component.viewQueries) && component.viewQueries.forEach(function(query) {
      return _addQueryToTokenMap(viewQueries, query);
    }), component.type.diDeps.forEach(function(dep) {
      isPresent(dep.viewQuery) && _addQueryToTokenMap(viewQueries, dep.viewQuery);
    }), viewQueries;
  }
  function _getContentQueries(directives) {
    var contentQueries = new CompileIdentifierMap;
    return directives.forEach(function(directive) {
      isPresent(directive.queries) && directive.queries.forEach(function(query) {
        return _addQueryToTokenMap(contentQueries, query);
      }), directive.type.diDeps.forEach(function(dep) {
        isPresent(dep.query) && _addQueryToTokenMap(contentQueries, dep.query);
      });
    }), contentQueries;
  }
  function _addQueryToTokenMap(map, query) {
    query.selectors.forEach(function(token) {
      var entry = map.get(token);
      isBlank(entry) && (entry = [], map.add(token, entry)), entry.push(query);
    });
  }
  function isStyleUrlResolvable(url) {
    if (isBlank(url) || 0 === url.length || "/" == url[0])
      return !1;
    var schemeMatch = url.match(_urlWithSchemaRe);
    return null === schemeMatch || "package" == schemeMatch[1] || "asset" == schemeMatch[1];
  }
  function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [],
        modifiedCssText = StringWrapper.replaceAllMapped(cssText, _cssImportRe, function(m) {
          var url = isPresent(m[1]) ? m[1] : m[2];
          return isStyleUrlResolvable(url) ? (foundUrls.push(resolver.resolve(baseUrl, url)), "") : m[0];
        });
    return new StyleWithImports(modifiedCssText, foundUrls);
  }
  function preparseElement(ast) {
    var selectAttr = null,
        hrefAttr = null,
        relAttr = null,
        nonBindable = !1,
        projectAs = null;
    ast.attrs.forEach(function(attr) {
      var lcAttrName = attr.name.toLowerCase();
      lcAttrName == NG_CONTENT_SELECT_ATTR ? selectAttr = attr.value : lcAttrName == LINK_STYLE_HREF_ATTR ? hrefAttr = attr.value : lcAttrName == LINK_STYLE_REL_ATTR ? relAttr = attr.value : attr.name == NG_NON_BINDABLE_ATTR ? nonBindable = !0 : attr.name == NG_PROJECT_AS && attr.value.length > 0 && (projectAs = attr.value);
    }), selectAttr = normalizeNgContentSelect(selectAttr);
    var nodeName = ast.name.toLowerCase(),
        type = PreparsedElementType.OTHER;
    return splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT ? type = PreparsedElementType.NG_CONTENT : nodeName == STYLE_ELEMENT ? type = PreparsedElementType.STYLE : nodeName == SCRIPT_ELEMENT ? type = PreparsedElementType.SCRIPT : nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE && (type = PreparsedElementType.STYLESHEET), new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  function normalizeNgContentSelect(selectAttr) {
    return null === selectAttr || 0 === selectAttr.length ? "*" : selectAttr;
  }
  function splitClasses(classAttrValue) {
    return classAttrValue.trim().split(/\s+/g);
  }
  function createElementCssSelector(elementName, matchableAttrs) {
    var cssSelector = new CssSelector,
        elNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elNameNoNs);
    for (var i = 0; i < matchableAttrs.length; i++) {
      var attrName = matchableAttrs[i][0],
          attrNameNoNs = splitNsName(attrName)[1],
          attrValue = matchableAttrs[i][1];
      if (cssSelector.addAttribute(attrNameNoNs, attrValue), attrName.toLowerCase() == CLASS_ATTR) {
        var classes = splitClasses(attrValue);
        classes.forEach(function(className) {
          return cssSelector.addClassName(className);
        });
      }
    }
    return cssSelector;
  }
  function parseAnimationEntry(entry) {
    var errors = [],
        stateStyles = {},
        transitions = [],
        stateDeclarationAsts = [];
    entry.definitions.forEach(function(def) {
      def instanceof CompileAnimationStateDeclarationMetadata ? _parseAnimationDeclarationStates(def, errors).forEach(function(ast) {
        stateDeclarationAsts.push(ast), stateStyles[ast.stateName] = ast.styles;
      }) : transitions.push(def);
    });
    var stateTransitionAsts = transitions.map(function(transDef) {
      return _parseAnimationStateTransition(transDef, stateStyles, errors);
    }),
        ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
    return new ParsedAnimationResult(ast, errors);
  }
  function _parseAnimationDeclarationStates(stateMetadata, errors) {
    var styleValues = [];
    stateMetadata.styles.styles.forEach(function(stylesEntry) {
      isStringMap(stylesEntry) ? styleValues.push(stylesEntry) : errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
    });
    var defStyles = new AnimationStylesAst(styleValues),
        states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
    return states.map(function(state) {
      return new AnimationStateDeclarationAst(state, defStyles);
    });
  }
  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {
    var styles = new StylesCollection,
        transitionExprs = [],
        transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
    transitionStates.forEach(function(expr) {
      _parseAnimationTransitionExpr(expr, errors).forEach(function(transExpr) {
        transitionExprs.push(transExpr);
      });
    });
    var entry = _normalizeAnimationEntry(transitionStateMetadata.steps),
        animation = _normalizeStyleSteps(entry, stateStyles, errors),
        animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
    0 == errors.length && _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
    var sequenceAst = animationAst instanceof AnimationSequenceAst ? animationAst : new AnimationSequenceAst([animationAst]);
    return new AnimationStateTransitionAst(transitionExprs, sequenceAst);
  }
  function _parseAnimationTransitionExpr(eventStr, errors) {
    var expressions = [],
        match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (!isPresent(match) || match.length < 4)
      return errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format")), expressions;
    var fromState = match[1],
        separator = match[2],
        toState = match[3];
    expressions.push(new AnimationStateTransitionExpression(fromState, toState));
    var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    return "<" != separator[0] || isFullAnyStateExpr || expressions.push(new AnimationStateTransitionExpression(toState, fromState)), expressions;
  }
  function _normalizeAnimationEntry(entry) {
    return isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
  }
  function _normalizeStyleMetadata(entry, stateStyles, errors) {
    var normalizedStyles = [];
    return entry.styles.forEach(function(styleEntry) {
      isString(styleEntry) ? ListWrapper.addAll(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors)) : normalizedStyles.push(styleEntry);
    }), normalizedStyles;
  }
  function _normalizeStyleSteps(entry, stateStyles, errors) {
    var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);
    return new CompileAnimationSequenceMetadata(steps);
  }
  function _mergeAnimationStyles(stylesList, newItem) {
    if (isStringMap(newItem) && stylesList.length > 0) {
      var lastIndex = stylesList.length - 1,
          lastItem = stylesList[lastIndex];
      if (isStringMap(lastItem))
        return void(stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem));
    }
    stylesList.push(newItem);
  }
  function _normalizeStyleStepEntry(entry, stateStyles, errors) {
    var steps;
    if (!(entry instanceof CompileAnimationWithStepsMetadata))
      return [entry];
    steps = entry.steps;
    var combinedStyles,
        newSteps = [];
    return steps.forEach(function(step) {
      if (step instanceof CompileAnimationStyleMetadata)
        isPresent(combinedStyles) || (combinedStyles = []), _normalizeStyleMetadata(step, stateStyles, errors).forEach(function(entry) {
          _mergeAnimationStyles(combinedStyles, entry);
        });
      else {
        if (isPresent(combinedStyles) && (newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles)), combinedStyles = null), step instanceof CompileAnimationAnimateMetadata) {
          var animateStyleValue = step.styles;
          animateStyleValue instanceof CompileAnimationStyleMetadata ? animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, errors) : animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata && animateStyleValue.steps.forEach(function(step) {
            step.styles = _normalizeStyleMetadata(step, stateStyles, errors);
          });
        } else if (step instanceof CompileAnimationWithStepsMetadata) {
          var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);
          step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
        }
        newSteps.push(step);
      }
    }), isPresent(combinedStyles) && newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles)), newSteps;
  }
  function _resolveStylesFromState(stateName, stateStyles, errors) {
    var styles = [];
    if (":" != stateName[0])
      errors.push(new AnimationParseError('Animation states via styles must be prefixed with a ":"'));
    else {
      var normalizedStateName = stateName.substring(1),
          value = stateStyles[normalizedStateName];
      isPresent(value) ? value.styles.forEach(function(stylesEntry) {
        isStringMap(stylesEntry) && styles.push(stylesEntry);
      }) : errors.push(new AnimationParseError('Unable to apply styles due to missing a state: "' + normalizedStateName + '"'));
    }
    return styles;
  }
  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
    var totalEntries = keyframeSequence.steps.length,
        totalOffsets = 0;
    keyframeSequence.steps.forEach(function(step) {
      return totalOffsets += isPresent(step.offset) ? 1 : 0;
    }), totalOffsets > 0 && totalOffsets < totalEntries && (errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()")), totalOffsets = totalEntries);
    var limit = totalEntries - 1,
        margin = 0 == totalOffsets ? 1 / limit : 0,
        rawKeyframes = [],
        index = 0,
        doSortKeyframes = !1,
        lastOffset = 0;
    keyframeSequence.steps.forEach(function(styleMetadata) {
      var offset = styleMetadata.offset,
          keyframeStyles = {};
      styleMetadata.styles.forEach(function(entry) {
        StringMapWrapper.forEach(entry, function(value, prop) {
          "offset" != prop && (keyframeStyles[prop] = value);
        });
      }), isPresent(offset) ? doSortKeyframes = doSortKeyframes || offset < lastOffset : offset = index == limit ? _TERMINAL_KEYFRAME : margin * index, rawKeyframes.push([offset, keyframeStyles]), lastOffset = offset, index++;
    }), doSortKeyframes && ListWrapper.sort(rawKeyframes, function(a, b) {
      return a[0] <= b[0] ? -1 : 1;
    });
    var i,
        firstKeyframe = rawKeyframes[0];
    firstKeyframe[0] != _INITIAL_KEYFRAME && ListWrapper.insert(rawKeyframes, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
    var firstKeyframeStyles = firstKeyframe[1];
    limit = rawKeyframes.length - 1;
    var lastKeyframe = rawKeyframes[limit];
    lastKeyframe[0] != _TERMINAL_KEYFRAME && (rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]), limit++);
    var lastKeyframeStyles = lastKeyframe[1];
    for (i = 1; i <= limit; i++) {
      var entry = rawKeyframes[i],
          styles = entry[1];
      StringMapWrapper.forEach(styles, function(value, prop) {
        isPresent(firstKeyframeStyles[prop]) || (firstKeyframeStyles[prop] = FILL_STYLE_FLAG);
      });
    }
    for (i = limit - 1; i >= 0; i--) {
      var entry = rawKeyframes[i],
          styles = entry[1];
      StringMapWrapper.forEach(styles, function(value, prop) {
        isPresent(lastKeyframeStyles[prop]) || (lastKeyframeStyles[prop] = value);
      });
    }
    return rawKeyframes.map(function(entry) {
      return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]]));
    });
  }
  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
    var ast,
        playTime = 0,
        startingTime = currentTime;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      var previousStyles,
          maxDuration = 0,
          steps = [],
          isGroup = entry instanceof CompileAnimationGroupMetadata;
      if (entry.steps.forEach(function(entry) {
        var time = isGroup ? startingTime : currentTime;
        if (entry instanceof CompileAnimationStyleMetadata)
          return entry.styles.forEach(function(stylesEntry) {
            var map = stylesEntry;
            StringMapWrapper.forEach(map, function(value, prop) {
              collectedStyles.insertAtTime(prop, time, value);
            });
          }), void(previousStyles = entry.styles);
        var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
        if (isPresent(previousStyles)) {
          if (entry instanceof CompileAnimationWithStepsMetadata) {
            var startingStyles = new AnimationStylesAst(previousStyles);
            steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ""));
          } else {
            var innerStep = innerAst;
            ListWrapper.addAll(innerStep.startingStyles.styles, previousStyles);
          }
          previousStyles = null;
        }
        var astDuration = innerAst.playTime;
        currentTime += astDuration, playTime += astDuration, maxDuration = Math$1.max(astDuration, maxDuration), steps.push(innerAst);
      }), isPresent(previousStyles)) {
        var startingStyles = new AnimationStylesAst(previousStyles);
        steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ""));
      }
      isGroup ? (ast = new AnimationGroupAst(steps), playTime = maxDuration, currentTime = startingTime + playTime) : ast = new AnimationSequenceAst(steps);
    } else if (entry instanceof CompileAnimationAnimateMetadata) {
      var keyframes,
          timings = _parseTimeExpression(entry.timings, errors),
          styles = entry.styles;
      if (styles instanceof CompileAnimationKeyframesSequenceMetadata)
        keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
      else {
        var styleData = styles,
            offset = _TERMINAL_KEYFRAME,
            styleAst = new AnimationStylesAst(styleData.styles),
            keyframe = new AnimationKeyframeAst(offset, styleAst);
        keyframes = [keyframe];
      }
      ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing), playTime = timings.duration + timings.delay, currentTime += playTime, keyframes.forEach(function(keyframe) {
        return keyframe.styles.styles.forEach(function(entry) {
          return StringMapWrapper.forEach(entry, function(value, prop) {
            return collectedStyles.insertAtTime(prop, currentTime, value);
          });
        });
      });
    } else
      ast = new AnimationStepAst(null, [], 0, 0, "");
    return ast.playTime = playTime, ast.startTime = startingTime, ast;
  }
  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
    if (ast instanceof AnimationStepAst && ast.keyframes.length > 0) {
      var keyframes = ast.keyframes;
      if (1 == keyframes.length) {
        var endKeyframe = keyframes[0],
            startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
        ast.keyframes = [startKeyframe, endKeyframe];
      }
    } else
      ast instanceof AnimationWithStepsAst && ast.steps.forEach(function(entry) {
        return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
      });
  }
  function _parseTimeExpression(exp, errors) {
    var duration,
        regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i,
        delay = 0,
        easing = null;
    if (isString(exp)) {
      var matches = exp.match(regex);
      if (null === matches)
        return errors.push(new AnimationParseError('The provided timing value "' + exp + '" is invalid.')), new _AnimationTimings(0, 0, null);
      var durationMatch = NumberWrapper.parseFloat(matches[1]),
          durationUnit = matches[2];
      "s" == durationUnit && (durationMatch *= _ONE_SECOND), duration = Math$1.floor(durationMatch);
      var delayMatch = matches[3],
          delayUnit = matches[4];
      if (isPresent(delayMatch)) {
        var delayVal = NumberWrapper.parseFloat(delayMatch);
        isPresent(delayUnit) && "s" == delayUnit && (delayVal *= _ONE_SECOND), delay = Math$1.floor(delayVal);
      }
      var easingVal = matches[5];
      isBlank(easingVal) || (easing = easingVal);
    } else
      duration = exp;
    return new _AnimationTimings(duration, delay, easing);
  }
  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
    var values = {},
        endTime = startTime + duration;
    return endKeyframe.styles.styles.forEach(function(styleData) {
      StringMapWrapper.forEach(styleData, function(val, prop) {
        if ("offset" != prop) {
          var resultEntry,
              nextEntry,
              value,
              resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
          isPresent(resultIndex) ? (resultEntry = collectedStyles.getByIndex(prop, resultIndex), value = resultEntry.value, nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1)) : value = FILL_STYLE_FLAG, isPresent(nextEntry) && !nextEntry.matches(endTime, val) && errors.push(new AnimationParseError('The animated CSS property "' + prop + '" unexpectedly changes between steps "' + resultEntry.time + 'ms" and "' + endTime + 'ms" at "' + nextEntry.time + 'ms"')), values[prop] = value;
        }
      });
    }), new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
  }
  function _compareToAnimationStateExpr(value, animationState) {
    var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
    switch (animationState) {
      case EMPTY_ANIMATION_STATE:
        return value.equals(emptyStateLiteral);
      case ANY_STATE:
        return literal(!0);
      default:
        return value.equals(literal(animationState));
    }
  }
  function _isEndStateAnimateStep(step) {
    if (step instanceof AnimationStepAst && step.duration > 0 && 2 == step.keyframes.length) {
      var styles1 = _getStylesArray(step.keyframes[0])[0],
          styles2 = _getStylesArray(step.keyframes[1])[0];
      return StringMapWrapper.isEmpty(styles1) && StringMapWrapper.isEmpty(styles2);
    }
    return !1;
  }
  function _getStylesArray(obj) {
    return obj.styles.styles;
  }
  function _validateAnimationProperties(compiledAnimations, template) {
    var visitor = new _AnimationTemplatePropertyVisitor(compiledAnimations);
    return templateVisitAll(visitor, template), visitor.errors;
  }
  function convertValueToOutputAst(value, type) {
    return void 0 === type && (type = null), visitValue(value, new _ValueOutputAstTransformer, type);
  }
  function getPropertyInView(property, callingView, definedView) {
    if (callingView === definedView)
      return property;
    for (var viewProp = THIS_EXPR,
        currView = callingView; currView !== definedView && isPresent(currView.declarationElement.view); )
      currView = currView.declarationElement.view, viewProp = viewProp.prop("parent");
    if (currView !== definedView)
      throw new BaseException("Internal error: Could not calculate a property in a parent view: " + property);
    if (property instanceof ReadPropExpr) {
      var readPropExpr_1 = property;
      (definedView.fields.some(function(field) {
        return field.name == readPropExpr_1.name;
      }) || definedView.getters.some(function(field) {
        return field.name == readPropExpr_1.name;
      })) && (viewProp = viewProp.cast(definedView.classType));
    }
    return replaceVarInExpression(THIS_EXPR.name, viewProp, property);
  }
  function injectFromViewParentInjector(token, optional) {
    var args = [createDiTokenExpression(token)];
    return optional && args.push(NULL_EXPR), THIS_EXPR.prop("parentInjector").callMethod("get", args);
  }
  function getViewFactoryName(component, embeddedTemplateIndex) {
    return "viewFactory_" + component.type.name + embeddedTemplateIndex;
  }
  function createFlatArray(expressions) {
    for (var lastNonArrayExpressions = [],
        result = literalArr([]),
        i = 0; i < expressions.length; i++) {
      var expr = expressions[i];
      expr.type instanceof ArrayType ? (lastNonArrayExpressions.length > 0 && (result = result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]), lastNonArrayExpressions = []), result = result.callMethod(BuiltinMethod.ConcatArray, [expr])) : lastNonArrayExpressions.push(expr);
    }
    return lastNonArrayExpressions.length > 0 && (result = result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)])), result;
  }
  function createPureProxy(fn, argCount, pureProxyProp, view) {
    view.fields.push(new ClassField(pureProxyProp.name, null));
    var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
    if (isBlank(pureProxyId))
      throw new BaseException("Unsupported number of argument for pure functions: " + argCount);
    view.createMethod.addStmt(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(pureProxyId).callFn([fn])).toStmt());
  }
  function createQueryValues(viewValues) {
    return ListWrapper.flatten(viewValues.values.map(function(entry) {
      return entry instanceof ViewQueryValues ? mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry)) : entry;
    }));
  }
  function mapNestedViews(declarationAppElement, view, expressions) {
    var adjustedExpressions = expressions.map(function(expr) {
      return replaceVarInExpression(THIS_EXPR.name, variable("nestedView"), expr);
    });
    return declarationAppElement.callMethod("mapNestedViews", [variable(view.className), fn([new FnParam("nestedView", view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)]);
  }
  function createQueryList(query, directiveInstance, propertyName, compileView) {
    compileView.fields.push(new ClassField(propertyName, importType(Identifiers.QueryList, [DYNAMIC_TYPE])));
    var expr = THIS_EXPR.prop(propertyName);
    return compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(Identifiers.QueryList, [DYNAMIC_TYPE]).instantiate([])).toStmt()), expr;
  }
  function addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function(selector) {
      var entry = map.get(selector);
      isBlank(entry) && (entry = [], map.add(selector, entry)), entry.push(query);
    });
  }
  function _enumExpression(classIdentifier, value) {
    if (isBlank(value))
      return NULL_EXPR;
    var name = resolveEnumToken(classIdentifier.runtime, value);
    return importExpr(new CompileIdentifierMetadata({
      name: classIdentifier.name + "." + name,
      moduleUrl: classIdentifier.moduleUrl,
      runtime: value
    }));
  }
  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
    var indexCondition;
    return indexCondition = childNodeCount > 0 ? literal(nodeIndex).lowerEquals(InjectMethodVars.requestNodeIndex).and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount))) : literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex), new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
  }
  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
    var resolvedProviderValueExpr,
        type,
        view = compileElement.view;
    if (isMulti ? (resolvedProviderValueExpr = literalArr(providerValueExpressions), type = new ArrayType(DYNAMIC_TYPE)) : (resolvedProviderValueExpr = providerValueExpressions[0], type = providerValueExpressions[0].type), isBlank(type) && (type = DYNAMIC_TYPE), isEager)
      view.fields.push(new ClassField(propName, type)), view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
    else {
      var internalField = "_" + propName;
      view.fields.push(new ClassField(internalField, type));
      var getter = new CompileMethod(view);
      getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()])), getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField))), view.getters.push(new ClassGetter(propName, getter.finish(), type));
    }
    return THIS_EXPR.prop(propName);
  }
  function _findPipeMeta(view, name) {
    for (var pipeMeta = null,
        i = view.pipeMetas.length - 1; i >= 0; i--) {
      var localPipeMeta = view.pipeMetas[i];
      if (localPipeMeta.name == name) {
        pipeMeta = localPipeMeta;
        break;
      }
    }
    if (isBlank(pipeMeta))
      throw new BaseException("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
    return pipeMeta;
  }
  function getViewType(component, embeddedTemplateIndex) {
    return embeddedTemplateIndex > 0 ? ViewType.EMBEDDED : component.type.isHost ? ViewType.HOST : ViewType.COMPONENT;
  }
  function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper) {
    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper),
        irAst = expression.visit(visitor, _Mode.Expression);
    return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper);
  }
  function convertCdStatementToIr(nameResolver, implicitReceiver, stmt) {
    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null),
        statements = [];
    return flattenStatements(stmt.visit(visitor, _Mode.Statement), statements), statements;
  }
  function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement)
      throw new BaseException("Expected a statement, but saw " + ast);
  }
  function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression)
      throw new BaseException("Expected an expression, but saw " + ast);
  }
  function convertToStatementIfNeeded(mode, expr) {
    return mode === _Mode.Statement ? expr.toStmt() : expr;
  }
  function flattenStatements(arg, output) {
    isArray(arg) ? arg.forEach(function(entry) {
      return flattenStatements(entry, output);
    }) : output.push(arg);
  }
  function collectEventListeners(hostEvents, dirs, compileElement) {
    var eventListeners = [];
    return hostEvents.forEach(function(hostEvent) {
      compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
      var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
      listener.addAction(hostEvent, null, null);
    }), dirs.forEach(function(directiveAst) {
      var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type));
      directiveAst.hostEvents.forEach(function(hostEvent) {
        compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
        var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
        listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
      });
    }), eventListeners.forEach(function(listener) {
      return listener.finishMethod();
    }), eventListeners;
  }
  function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
    StringMapWrapper.forEach(directiveAst.directive.outputs, function(eventName, observablePropName) {
      eventListeners.filter(function(listener) {
        return listener.eventName == eventName;
      }).forEach(function(listener) {
        listener.listenToDirective(directiveInstance, observablePropName);
      });
    });
  }
  function bindRenderOutputs(eventListeners) {
    eventListeners.forEach(function(listener) {
      return listener.listenToRenderer();
    });
  }
  function convertStmtIntoExpression(stmt) {
    return stmt instanceof ExpressionStatement ? stmt.expr : stmt instanceof ReturnStatement ? stmt.value : null;
  }
  function santitizeEventName(name) {
    return StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, "_");
  }
  function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {
    var view = compileElement.view,
        detectChangesInInputsMethod = view.detectChangesInInputsMethod,
        lifecycleHooks = directiveAst.directive.type.lifecycleHooks;
    lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0 && detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changes.notIdentical(NULL_EXPR), [directiveInstance.callMethod("ngOnChanges", [DetectChangesVars.changes]).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1 && detectChangesInInputsMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [directiveInstance.callMethod("ngOnInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1 && detectChangesInInputsMethod.addStmt(new IfStmt(NOT_THROW_ON_CHANGES, [directiveInstance.callMethod("ngDoCheck", []).toStmt()]));
  }
  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view,
        lifecycleHooks = directiveMeta.type.lifecycleHooks,
        afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
    afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1 && afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod("ngAfterContentInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1 && afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterContentChecked", []).toStmt());
  }
  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view,
        lifecycleHooks = directiveMeta.type.lifecycleHooks,
        afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
    afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1 && afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod("ngAfterViewInit", []).toStmt()])), lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1 && afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterViewChecked", []).toStmt());
  }
  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
    var onDestroyMethod = compileElement.view.destroyMethod;
    onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst), provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && onDestroyMethod.addStmt(providerInstance.callMethod("ngOnDestroy", []).toStmt());
  }
  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
    var onDestroyMethod = view.destroyMethod;
    pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && onDestroyMethod.addStmt(pipeInstance.callMethod("ngOnDestroy", []).toStmt());
  }
  function createBindFieldExpr(exprIndex) {
    return THIS_EXPR.prop("_expr_" + exprIndex);
  }
  function createCurrValueExpr(exprIndex) {
    return variable("currVal_" + exprIndex);
  }
  function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method) {
    var checkExpression = convertCdExpressionToIr(view, context, parsedExpression, DetectChangesVars.valUnwrapper);
    if (!isBlank(checkExpression.expression)) {
      if (view.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private])), view.createMethod.addStmt(THIS_EXPR.prop(fieldExpr.name).set(importExpr(Identifiers.UNINITIALIZED)).toStmt()), checkExpression.needsValueUnwrapper) {
        var initValueUnwrapperStmt = DetectChangesVars.valUnwrapper.callMethod("reset", []).toStmt();
        method.addStmt(initValueUnwrapperStmt);
      }
      method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [StmtModifier.Final]));
      var condition = importExpr(Identifiers.checkBinding).callFn([DetectChangesVars.throwOnChange, fieldExpr, currValExpr]);
      checkExpression.needsValueUnwrapper && (condition = DetectChangesVars.valUnwrapper.prop("hasWrappedValue").or(condition)), method.addStmt(new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt()])));
    }
  }
  function bindRenderText(boundText, compileNode, view) {
    var bindingIndex = view.bindings.length;
    view.bindings.push(new CompileBinding(compileNode, boundText));
    var currValExpr = createCurrValueExpr(bindingIndex),
        valueField = createBindFieldExpr(bindingIndex);
    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText), bind(view, currValExpr, valueField, boundText.value, view.componentContext, [THIS_EXPR.prop("renderer").callMethod("setText", [compileNode.renderNode, currValExpr]).toStmt()], view.detectChangesRenderPropertiesMethod);
  }
  function bindAndWriteToRenderer(boundProps, context, compileElement, isHostProp) {
    var view = compileElement.view,
        renderNode = compileElement.renderNode;
    boundProps.forEach(function(boundProp) {
      var bindingIndex = view.bindings.length;
      view.bindings.push(new CompileBinding(compileElement, boundProp)), view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
      var fieldExpr = createBindFieldExpr(bindingIndex),
          currValExpr = createCurrValueExpr(bindingIndex),
          oldRenderValue = sanitizedValue(boundProp, fieldExpr),
          renderValue = sanitizedValue(boundProp, currValExpr),
          updateStmts = [];
      switch (boundProp.type) {
        case exports.PropertyBindingType.Property:
          view.genConfig.logBindingUpdate && updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, renderValue)), updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementProperty", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Attribute:
          renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod("toString", [])), updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementAttribute", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Class:
          updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementClass", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Style:
          var strValue = renderValue.callMethod("toString", []);
          isPresent(boundProp.unit) && (strValue = strValue.plus(literal(boundProp.unit))), renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue), updateStmts.push(THIS_EXPR.prop("renderer").callMethod("setElementStyle", [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Animation:
          var animationName = boundProp.name,
              targetViewExpr = THIS_EXPR;
          isHostProp && (targetViewExpr = compileElement.appElement.prop("componentView"));
          var animationFnExpr = targetViewExpr.prop("componentType").prop("animations").key(literal(animationName)),
              emptyStateValue = literal(EMPTY_ANIMATION_STATE),
              oldRenderVar = variable("oldRenderVar");
          updateStmts.push(oldRenderVar.set(oldRenderValue).toDeclStmt()), updateStmts.push(new IfStmt(oldRenderVar.equals(importExpr(Identifiers.UNINITIALIZED)), [oldRenderVar.set(emptyStateValue).toStmt()]));
          var newRenderVar = variable("newRenderVar");
          if (updateStmts.push(newRenderVar.set(renderValue).toDeclStmt()), updateStmts.push(new IfStmt(newRenderVar.equals(importExpr(Identifiers.UNINITIALIZED)), [newRenderVar.set(emptyStateValue).toStmt()])), updateStmts.push(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderVar, newRenderVar]).toStmt()), view.detachMethod.addStmt(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderValue, emptyStateValue]).toStmt()), !_animationViewCheckedFlagMap.get(view)) {
            _animationViewCheckedFlagMap.set(view, !0);
            var triggerStmt = THIS_EXPR.callMethod("triggerQueuedAnimations", []).toStmt();
            view.afterViewLifecycleCallbacksMethod.addStmt(triggerStmt), view.detachMethod.addStmt(triggerStmt);
          }
      }
      bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, view.detectChangesRenderPropertiesMethod);
    });
  }
  function sanitizedValue(boundProp, renderValue) {
    var enumValue;
    switch (boundProp.securityContext) {
      case _angular_core.SecurityContext.NONE:
        return renderValue;
      case _angular_core.SecurityContext.HTML:
        enumValue = "HTML";
        break;
      case _angular_core.SecurityContext.STYLE:
        enumValue = "STYLE";
        break;
      case _angular_core.SecurityContext.SCRIPT:
        enumValue = "SCRIPT";
        break;
      case _angular_core.SecurityContext.URL:
        enumValue = "URL";
        break;
      case _angular_core.SecurityContext.RESOURCE_URL:
        enumValue = "RESOURCE_URL";
        break;
      default:
        throw new Error("internal error, unexpected SecurityContext " + boundProp.securityContext + ".");
    }
    var ctx = ViewProperties.viewUtils.prop("sanitizer"),
        args = [importExpr(Identifiers.SecurityContext).prop(enumValue), renderValue];
    return ctx.callMethod("sanitize", args);
  }
  function bindRenderInputs(boundProps, compileElement) {
    bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement, !1);
  }
  function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {
    bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement, !0);
  }
  function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {
    if (0 !== directiveAst.inputs.length) {
      var view = compileElement.view,
          detectChangesInInputsMethod = view.detectChangesInInputsMethod;
      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      var lifecycleHooks = directiveAst.directive.type.lifecycleHooks,
          calcChangesMap = lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1,
          isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
      calcChangesMap && detectChangesInInputsMethod.addStmt(DetectChangesVars.changes.set(NULL_EXPR).toStmt()), isOnPushComp && detectChangesInInputsMethod.addStmt(DetectChangesVars.changed.set(literal(!1)).toStmt()), directiveAst.inputs.forEach(function(input) {
        var bindingIndex = view.bindings.length;
        view.bindings.push(new CompileBinding(compileElement, input)), detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
        var fieldExpr = createBindFieldExpr(bindingIndex),
            currValExpr = createCurrValueExpr(bindingIndex),
            statements = [directiveInstance.prop(input.directiveName).set(currValExpr).toStmt()];
        calcChangesMap && (statements.push(new IfStmt(DetectChangesVars.changes.identical(NULL_EXPR), [DetectChangesVars.changes.set(literalMap([], new MapType(importType(Identifiers.SimpleChange)))).toStmt()])), statements.push(DetectChangesVars.changes.key(literal(input.directiveName)).set(importExpr(Identifiers.SimpleChange).instantiate([fieldExpr, currValExpr])).toStmt())), isOnPushComp && statements.push(DetectChangesVars.changed.set(literal(!0)).toStmt()), view.genConfig.logBindingUpdate && statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr)), bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod);
      }), isOnPushComp && detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changed, [compileElement.appElement.prop("componentView").callMethod("markAsCheckOnce", []).toStmt()]));
    }
  }
  function logBindingUpdateStmt(renderNode, propName, value) {
    var tryStmt = THIS_EXPR.prop("renderer").callMethod("setBindingDebugInfo", [renderNode, literal("ng-reflect-" + camelCaseToDashCase(propName)), value.isBlank().conditional(NULL_EXPR, value.callMethod("toString", []))]).toStmt(),
        catchStmt = THIS_EXPR.prop("renderer").callMethod("setBindingDebugInfo", [renderNode, literal("ng-reflect-" + camelCaseToDashCase(propName)), literal("[ERROR] Exception while trying to serialize the value")]).toStmt();
    return new TryCatchStmt([tryStmt], [catchStmt]);
  }
  function bindView(view, parsedTemplate) {
    var visitor = new ViewBinderVisitor(view);
    templateVisitAll(visitor, parsedTemplate), view.pipes.forEach(function(pipe) {
      bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
    });
  }
  function buildView(view, template, targetDependencies) {
    var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
    return templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent), builderVisitor.nestedViewCount;
  }
  function finishView(view, targetStatements) {
    view.afterNodes(), createViewTopLevelStmts(view, targetStatements), view.nodes.forEach(function(node) {
      node instanceof CompileElement && node.hasEmbeddedView && finishView(node.embeddedView, targetStatements);
    });
  }
  function _getOuterContainerOrSelf(node) {
    for (var view = node.view; _isNgContainer(node.parent, view); )
      node = node.parent;
    return node;
  }
  function _getOuterContainerParentOrSelf(el) {
    for (var view = el.view; _isNgContainer(el, view); )
      el = el.parent;
    return el;
  }
  function _isNgContainer(node, view) {
    return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
  }
  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
    var result = {};
    return StringMapWrapper.forEach(declaredHtmlAttrs, function(value, key) {
      result[key] = value;
    }), directives.forEach(function(directiveMeta) {
      StringMapWrapper.forEach(directiveMeta.hostAttributes, function(value, name) {
        var prevValue = result[name];
        result[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
      });
    }), mapToKeyValueArray(result);
  }
  function _readHtmlAttrs(attrs) {
    var htmlAttrs = {};
    return attrs.forEach(function(ast) {
      htmlAttrs[ast.name] = ast.value;
    }), htmlAttrs;
  }
  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    return attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR ? attrValue1 + " " + attrValue2 : attrValue2;
  }
  function mapToKeyValueArray(data) {
    var entryArray = [];
    return StringMapWrapper.forEach(data, function(value, name) {
      entryArray.push([name, value]);
    }), ListWrapper.sort(entryArray, function(entry1, entry2) {
      return StringWrapper.compare(entry1[0], entry2[0]);
    }), entryArray;
  }
  function createViewTopLevelStmts(view, targetStatements) {
    var nodeDebugInfosVar = NULL_EXPR;
    view.genConfig.genDebugInfo && (nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex), targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(Identifiers.StaticNodeDebugInfo), [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final])));
    var renderCompTypeVar = variable("renderType_" + view.component.type.name);
    0 === view.viewIndex && targetStatements.push(renderCompTypeVar.set(NULL_EXPR).toDeclStmt(importType(Identifiers.RenderComponentType)));
    var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
    targetStatements.push(viewClass), targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
  }
  function createStaticNodeDebugInfo(node) {
    var compileElement = node instanceof CompileElement ? node : null,
        providerTokens = [],
        componentToken = NULL_EXPR,
        varTokenEntries = [];
    return isPresent(compileElement) && (providerTokens = compileElement.getProviderTokens(), isPresent(compileElement.component) && (componentToken = createDiTokenExpression(identifierToken(compileElement.component.type))), StringMapWrapper.forEach(compileElement.referenceTokens, function(token, varName) {
      varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
    })), importExpr(Identifiers.StaticNodeDebugInfo).instantiate([literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))], importType(Identifiers.StaticNodeDebugInfo, null, [TypeModifier.Const]));
  }
  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
    var viewConstructorArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(Identifiers.ViewUtils)), new FnParam(ViewConstructorVars.parentInjector.name, importType(Identifiers.Injector)), new FnParam(ViewConstructorVars.declarationEl.name, importType(Identifiers.AppElement))],
        superConstructorArgs = [variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentInjector, ViewConstructorVars.declarationEl, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
    view.genConfig.genDebugInfo && superConstructorArgs.push(nodeDebugInfosVar);
    var viewConstructor = new ClassMethod(null, viewConstructorArgs, [SUPER_EXPR.callFn(superConstructorArgs).toStmt()]),
        viewMethods = [new ClassMethod("createInternal", [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(Identifiers.AppElement)), new ClassMethod("injectorGetInternal", [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE), new ClassMethod("detectChangesInternal", [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)), new ClassMethod("dirtyParentQueriesInternal", [], view.dirtyParentQueriesMethod.finish()), new ClassMethod("destroyInternal", [], view.destroyMethod.finish()), new ClassMethod("detachInternal", [], view.detachMethod.finish())].concat(view.eventHandlerMethods),
        superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView,
        viewClass = new ClassStmt(view.className, importExpr(superClass, [getContextType(view)]), view.fields, view.getters, viewConstructor, viewMethods.filter(function(method) {
          return method.body.length > 0;
        }));
    return viewClass;
  }
  function createViewFactory(view, viewClass, renderCompTypeVar) {
    var templateUrlInfo,
        viewFactoryArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(Identifiers.ViewUtils)), new FnParam(ViewConstructorVars.parentInjector.name, importType(Identifiers.Injector)), new FnParam(ViewConstructorVars.declarationEl.name, importType(Identifiers.AppElement))],
        initRenderCompTypeStmts = [];
    if (templateUrlInfo = view.component.template.templateUrl == view.component.type.moduleUrl ? view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template" : view.component.template.templateUrl, 0 === view.viewIndex) {
      var animationsExpr = literalMap(view.animations.map(function(entry) {
        return [entry.name, entry.fnVariable];
      }));
      initRenderCompTypeStmts = [new IfStmt(renderCompTypeVar.identical(NULL_EXPR), [renderCompTypeVar.set(ViewConstructorVars.viewUtils.callMethod("createRenderComponentType", [literal(templateUrlInfo), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, animationsExpr])).toStmt()])];
    }
    return fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new ReturnStatement(variable(viewClass.name).instantiate(viewClass.constructorMethod.params.map(function(param) {
      return variable(param.name);
    })))]), importType(Identifiers.AppView, [getContextType(view)])).toDeclStmt(view.viewFactory.name, [StmtModifier.Final]);
  }
  function generateCreateMethod(view) {
    var parentRenderNodeExpr = NULL_EXPR,
        parentRenderNodeStmts = [];
    view.viewType === ViewType.COMPONENT && (parentRenderNodeExpr = ViewProperties.renderer.callMethod("createViewRoot", [THIS_EXPR.prop("declarationAppElement").prop("nativeElement")]), parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])]);
    var resultExpr;
    return resultExpr = view.viewType === ViewType.HOST ? view.nodes[0].appElement : NULL_EXPR, parentRenderNodeStmts.concat(view.createMethod.finish(), [THIS_EXPR.callMethod("init", [createFlatArray(view.rootNodesOrAppElements), literalArr(view.nodes.map(function(node) {
      return node.renderNode;
    })), literalArr(view.disposables), literalArr(view.subscriptions)]).toStmt(), new ReturnStatement(resultExpr)]);
  }
  function generateDetectChangesMethod(view) {
    var stmts = [];
    if (view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty())
      return stmts;
    ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish()), stmts.push(THIS_EXPR.callMethod("detectContentChildrenChanges", [DetectChangesVars.throwOnChange]).toStmt());
    var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
    afterContentStmts.length > 0 && stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts)), ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish()), stmts.push(THIS_EXPR.callMethod("detectViewChildrenChanges", [DetectChangesVars.throwOnChange]).toStmt());
    var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
    afterViewStmts.length > 0 && stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
    var varStmts = [],
        readVars = findReadVarNames(stmts);
    return SetWrapper.has(readVars, DetectChangesVars.changed.name) && varStmts.push(DetectChangesVars.changed.set(literal(!0)).toDeclStmt(BOOL_TYPE)), SetWrapper.has(readVars, DetectChangesVars.changes.name) && varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(Identifiers.SimpleChange)))), SetWrapper.has(readVars, DetectChangesVars.valUnwrapper.name) && varStmts.push(DetectChangesVars.valUnwrapper.set(importExpr(Identifiers.ValueUnwrapper).instantiate([])).toDeclStmt(null, [StmtModifier.Final])), varStmts.concat(stmts);
  }
  function addReturnValuefNotEmpty(statements, value) {
    return statements.length > 0 ? statements.concat([new ReturnStatement(value)]) : statements;
  }
  function getContextType(view) {
    return view.viewType === ViewType.COMPONENT ? importType(view.component.type) : DYNAMIC_TYPE;
  }
  function getChangeDetectionMode(view) {
    var mode;
    return mode = view.viewType === ViewType.COMPONENT ? isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce : ChangeDetectorStatus.CheckAlways;
  }
  function _resolveViewStatements(compileResult) {
    return compileResult.dependencies.forEach(function(dep) {
      if (dep instanceof ViewFactoryDependency) {
        var vfd = dep;
        vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
      } else if (dep instanceof ComponentFactoryDependency) {
        var cfd = dep;
        cfd.placeholder.name = _componentFactoryName(cfd.comp), cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
      }
    }), compileResult.statements;
  }
  function _resolveStyleStatements(compileResult, fileSuffix) {
    return compileResult.dependencies.forEach(function(dep) {
      dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
    }), compileResult.statements;
  }
  function _ngfactoryModuleUrl(compUrl) {
    var urlWithSuffix = _splitLastSuffix(compUrl);
    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
  }
  function _componentFactoryName(comp) {
    return comp.name + "NgFactory";
  }
  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
  }
  function _assertComponent(meta) {
    if (!meta.isComponent)
      throw new BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
  }
  function _splitLastSuffix(path) {
    var lastDot = path.lastIndexOf(".");
    return lastDot !== -1 ? [path.substring(0, lastDot), path.substring(lastDot)] : [path, ""];
  }
  function _cloneDirectiveWithTemplate(directive, template) {
    return new CompileDirectiveMetadata({
      type: directive.type,
      isComponent: directive.isComponent,
      selector: directive.selector,
      exportAs: directive.exportAs,
      changeDetection: directive.changeDetection,
      inputs: directive.inputs,
      outputs: directive.outputs,
      hostListeners: directive.hostListeners,
      hostProperties: directive.hostProperties,
      hostAttributes: directive.hostAttributes,
      providers: directive.providers,
      viewProviders: directive.viewProviders,
      queries: directive.queries,
      viewQueries: directive.viewQueries,
      entryComponents: directive.entryComponents,
      template: template
    });
  }
  function _isDirectiveMetadata(type) {
    return type instanceof _angular_core.DirectiveMetadata;
  }
  function hasLifecycleHook(hook, token) {
    var lcInterface = LIFECYCLE_INTERFACES.get(hook),
        lcProp = LIFECYCLE_PROPS.get(hook);
    return reflector.hasLifecycleHook(token, lcInterface, lcProp);
  }
  function _isNgModuleMetadata(obj) {
    return obj instanceof _angular_core.NgModuleMetadata;
  }
  function _isPipeMetadata(type) {
    return type instanceof _angular_core.PipeMetadata;
  }
  function getTransitiveModules(modules, includeImports, targetModules, visitedModules) {
    return void 0 === targetModules && (targetModules = []), void 0 === visitedModules && (visitedModules = new Set), modules.forEach(function(ngModule) {
      if (!visitedModules.has(ngModule.type.runtime)) {
        visitedModules.add(ngModule.type.runtime);
        var nestedModules = includeImports ? ngModule.importedModules.concat(ngModule.exportedModules) : ngModule.exportedModules;
        getTransitiveModules(nestedModules, includeImports, targetModules, visitedModules), targetModules.push(ngModule);
      }
    }), targetModules;
  }
  function flattenArray(tree, out) {
    if (void 0 === out && (out = []), tree)
      for (var i = 0; i < tree.length; i++) {
        var item = _angular_core.resolveForwardRef(tree[i]);
        isArray(item) ? flattenArray(item, out) : out.push(item);
      }
    return out;
  }
  function verifyNonBlankProviders(directiveType, providersTree, providersType) {
    var errMsg,
        flat = [];
    flattenArray(providersTree, flat);
    for (var i = 0; i < flat.length; i++)
      if (isBlank(flat[i]))
        throw errMsg = flat.map(function(provider) {
          return isBlank(provider) ? "?" : stringify(provider);
        }).join(", "), new BaseException("One or more of " + providersType + ' for "' + stringify(directiveType) + '" were not defined: [' + errMsg + "].");
    return providersTree;
  }
  function isValidType(value) {
    return isStaticSymbol(value) || value instanceof Type;
  }
  function staticTypeModuleUrl(value) {
    return isStaticSymbol(value) ? value.filePath : null;
  }
  function componentModuleUrl(reflector, type, cmpMetadata) {
    if (isStaticSymbol(type))
      return staticTypeModuleUrl(type);
    if (isPresent(cmpMetadata.moduleId)) {
      var moduleId = cmpMetadata.moduleId,
          scheme = getUrlScheme(moduleId);
      return isPresent(scheme) && scheme.length > 0 ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
    }
    return reflector.importUri(type);
  }
  function convertToCompileValue(value, targetIdentifiers) {
    return visitValue(value, new _CompileValueConverter, targetIdentifiers);
  }
  function escapeSingleQuoteString(input, escapeDollar) {
    if (isBlank(input))
      return null;
    var body = StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function(match) {
      return "$" == match[0] ? escapeDollar ? "\\$" : "$" : "\n" == match[0] ? "\\n" : "\r" == match[0] ? "\\r" : "\\" + match[0];
    });
    return "'" + body + "'";
  }
  function _createIndent(count) {
    for (var res = "",
        i = 0; i < count; i++)
      res += "  ";
    return res;
  }
  function debugOutputAstAsTypeScript(ast) {
    var asts,
        converter = new _TsEmitterVisitor(_debugModuleUrl),
        ctx = EmitterVisitorContext.createRoot([]);
    return asts = isArray(ast) ? ast : [ast], asts.forEach(function(ast) {
      if (ast instanceof Statement)
        ast.visitStatement(converter, ctx);
      else if (ast instanceof Expression)
        ast.visitExpression(converter, ctx);
      else {
        if (!(ast instanceof Type$1))
          throw new BaseException("Don't know how to print debug info for " + ast);
        ast.visitType(converter, ctx);
      }
    }), ctx.toSource();
  }
  function interpretStatements(statements, resultVar) {
    var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]),
        ctx = new _ExecutionContext(null, null, null, new Map),
        visitor = new StatementInterpreter,
        result = visitor.visitAllStatements(stmtsWithReturn, ctx);
    return isPresent(result) ? result.value : null;
  }
  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    for (var childCtx = ctx.createChildWihtLocalVars(),
        i = 0; i < varNames.length; i++)
      childCtx.vars.set(varNames[i], varValues[i]);
    var result = visitor.visitAllStatements(statements, childCtx);
    return isPresent(result) ? result.value : null;
  }
  function createDynamicClass(_classStmt, _ctx, _visitor) {
    var propertyDescriptors = {};
    _classStmt.getters.forEach(function(getter) {
      propertyDescriptors[getter.name] = {
        configurable: !1,
        get: function() {
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
        }
      };
    }), _classStmt.methods.forEach(function(method) {
      var paramNames = method.params.map(function(param) {
        return param.name;
      });
      propertyDescriptors[method.name] = {
        writable: !1,
        configurable: !1,
        value: function() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
        }
      };
    });
    var ctorParamNames = _classStmt.constructorMethod.params.map(function(param) {
      return param.name;
    }),
        ctor = function() {
          for (var _this = this,
              args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          _classStmt.fields.forEach(function(field) {
            _this[field.name] = void 0;
          }), _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
        },
        superClass = _classStmt.parent.visitExpression(_visitor, _ctx);
    return ctor.prototype = Object.create(superClass.prototype, propertyDescriptors), ctor;
  }
  function _declareFn(varNames, statements, ctx, visitor) {
    return function() {
      for (var args = [],
          _i = 0; _i < arguments.length; _i++)
        args[_i - 0] = arguments[_i];
      return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
    };
  }
  function jitStatements(sourceUrl, statements, resultVar) {
    var converter = new JitEmitterVisitor,
        ctx = EmitterVisitorContext.createRoot([resultVar]);
    return converter.visitAllStatements(statements, ctx), evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
  }
  function stripComments(input) {
    return StringWrapper.replaceAllMapped(input, _commentRe, function(_) {
      return "";
    });
  }
  function processRules(input, ruleCallback) {
    var inputWithEscapedBlocks = escapeBlocks(input),
        nextBlockIndex = 0;
    return StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function(m) {
      var selector = m[2],
          content = "",
          suffix = m[4],
          contentPrefix = "";
      isPresent(m[4]) && m[4].startsWith("{" + BLOCK_PLACEHOLDER) && (content = inputWithEscapedBlocks.blocks[nextBlockIndex++], suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1), contentPrefix = "{");
      var rule = ruleCallback(new CssRule(selector, content));
      return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
    });
  }
  function escapeBlocks(input) {
    for (var inputParts = StringWrapper.split(input, _curlyRe),
        resultParts = [],
        escapedBlocks = [],
        bracketCount = 0,
        currentBlockParts = [],
        partIndex = 0; partIndex < inputParts.length; partIndex++) {
      var part = inputParts[partIndex];
      part == CLOSE_CURLY && bracketCount--, bracketCount > 0 ? currentBlockParts.push(part) : (currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER), currentBlockParts = []), resultParts.push(part)), part == OPEN_CURLY && bracketCount++;
    }
    return currentBlockParts.length > 0 && (escapedBlocks.push(currentBlockParts.join("")), resultParts.push(BLOCK_PLACEHOLDER)), new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
  }
  function getStylesVarName(component) {
    var result = "styles";
    return component && (result += "_" + component.type.name), result;
  }
  function assertComponent(meta) {
    if (!meta.isComponent)
      throw new BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
  }
  function registerContext(ctx, specs) {
    for (var _i = 0,
        specs_1 = specs; _i < specs_1.length; _i++) {
      var spec = specs_1[_i];
      SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
    }
  }
  function analyzeAppProvidersForDeprecatedConfiguration(appProviders) {
    void 0 === appProviders && (appProviders = []);
    var useDebug,
        useJit,
        defaultEncapsulation,
        platformDirectives = [],
        platformPipes = [],
        compilerProviders = [],
        deprecationMessages = [],
        tempInj = _angular_core.ReflectiveInjector.resolveAndCreate(appProviders),
        compilerConfig = tempInj.get(CompilerConfig, null);
    compilerConfig ? (platformDirectives = compilerConfig.platformDirectives, platformPipes = compilerConfig.platformPipes, useJit = compilerConfig.useJit, useDebug = compilerConfig.genDebugInfo, defaultEncapsulation = compilerConfig.defaultEncapsulation, deprecationMessages.push('Passing CompilerConfig as a regular provider is deprecated. Use the "compilerOptions" parameter of "bootstrap()" or use a custom "CompilerFactory" platform provider instead.')) : (platformDirectives = tempInj.get(_angular_core.PLATFORM_DIRECTIVES, []), platformPipes = tempInj.get(_angular_core.PLATFORM_PIPES, [])), platformDirectives = ListWrapper.flatten(platformDirectives), platformPipes = ListWrapper.flatten(platformPipes);
    var xhr = tempInj.get(XHR, null);
    xhr && (compilerProviders.push([{
      provide: XHR,
      useValue: xhr
    }]), deprecationMessages.push('Passing XHR as regular provider is deprecated. Pass the provider via "compilerOptions" instead.')), platformDirectives.length > 0 && deprecationMessages.push("The PLATFORM_DIRECTIVES provider and CompilerConfig.platformDirectives is deprecated. Add the directives to an NgModule instead! " + ("(Directives: " + platformDirectives.map(function(type) {
      return stringify(type);
    }) + ")")), platformPipes.length > 0 && deprecationMessages.push("The PLATFORM_PIPES provider and CompilerConfig.platformPipes is deprecated. Add the pipes to an NgModule instead! " + ("(Pipes: " + platformPipes.map(function(type) {
      return stringify(type);
    }) + ")"));
    var compilerOptions = {
      useJit: useJit,
      useDebug: useDebug,
      defaultEncapsulation: defaultEncapsulation,
      providers: compilerProviders
    },
        DynamicComponent = function() {
          function DynamicComponent() {}
          return DynamicComponent;
        }();
    return DynamicComponent.decorators = [{
      type: _angular_core.Component,
      args: [{
        directives: platformDirectives,
        pipes: platformPipes,
        template: ""
      }]
    }], {
      compilerOptions: compilerOptions,
      moduleDeclarations: [DynamicComponent],
      deprecationMessages: deprecationMessages
    };
  }
  function _initReflector() {
    reflector.reflectionCapabilities = new ReflectionCapabilities;
  }
  function _mergeOptions(optionsArr) {
    return {
      useDebug: _lastDefined(optionsArr.map(function(options) {
        return options.useDebug;
      })),
      useJit: _lastDefined(optionsArr.map(function(options) {
        return options.useJit;
      })),
      defaultEncapsulation: _lastDefined(optionsArr.map(function(options) {
        return options.defaultEncapsulation;
      })),
      providers: _mergeArrays(optionsArr.map(function(options) {
        return options.providers;
      }))
    };
  }
  function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--)
      if (void 0 !== args[i])
        return args[i];
  }
  function _mergeArrays(parts) {
    var result = [];
    return parts.forEach(function(part) {
      return part && result.push.apply(result, part);
    }), result;
  }
  var globalScope,
      _SerializerVisitor = function() {
        function _SerializerVisitor() {}
        return _SerializerVisitor.prototype.visitText = function(text, context) {
          return text.value;
        }, _SerializerVisitor.prototype.visitContainer = function(container, context) {
          var _this = this;
          return "[" + container.children.map(function(child) {
            return child.visit(_this);
          }).join(", ") + "]";
        }, _SerializerVisitor.prototype.visitIcu = function(icu, context) {
          var _this = this,
              strCases = Object.keys(icu.cases).map(function(k) {
                return k + " {" + icu.cases[k].visit(_this) + "}";
              });
          return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(", ") + "}";
        }, _SerializerVisitor.prototype.visitTagPlaceholder = function(ph, context) {
          var _this = this;
          return ph.isVoid ? '<ph tag name="' + ph.startName + '"/>' : '<ph tag name="' + ph.startName + '">' + ph.children.map(function(child) {
            return child.visit(_this);
          }).join(", ") + '</ph name="' + ph.closeName + '">';
        }, _SerializerVisitor.prototype.visitPlaceholder = function(ph, context) {
          return '<ph name="' + ph.name + '">' + ph.value + "</ph>";
        }, _SerializerVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
          return '<ph icu name="' + ph.name + '">' + ph.value.visit(this) + "</ph>";
        }, _SerializerVisitor;
      }(),
      serializerVisitor = new _SerializerVisitor,
      Text = function() {
        function Text(value, sourceSpan) {
          this.value = value, this.sourceSpan = sourceSpan;
        }
        return Text.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        }, Text;
      }(),
      Expansion = function() {
        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
          this.switchValue = switchValue, this.type = type, this.cases = cases, this.sourceSpan = sourceSpan, this.switchValueSourceSpan = switchValueSourceSpan;
        }
        return Expansion.prototype.visit = function(visitor, context) {
          return visitor.visitExpansion(this, context);
        }, Expansion;
      }(),
      ExpansionCase = function() {
        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
          this.value = value, this.expression = expression, this.sourceSpan = sourceSpan, this.valueSourceSpan = valueSourceSpan, this.expSourceSpan = expSourceSpan;
        }
        return ExpansionCase.prototype.visit = function(visitor, context) {
          return visitor.visitExpansionCase(this, context);
        }, ExpansionCase;
      }(),
      Attribute = function() {
        function Attribute(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return Attribute.prototype.visit = function(visitor, context) {
          return visitor.visitAttribute(this, context);
        }, Attribute;
      }(),
      Element = function() {
        function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
          this.name = name, this.attrs = attrs, this.children = children, this.sourceSpan = sourceSpan, this.startSourceSpan = startSourceSpan, this.endSourceSpan = endSourceSpan;
        }
        return Element.prototype.visit = function(visitor, context) {
          return visitor.visitElement(this, context);
        }, Element;
      }(),
      Comment = function() {
        function Comment(value, sourceSpan) {
          this.value = value, this.sourceSpan = sourceSpan;
        }
        return Comment.prototype.visit = function(visitor, context) {
          return visitor.visitComment(this, context);
        }, Comment;
      }(),
      Message = function() {
        function Message(nodes, placeholders, meaning, description) {
          this.nodes = nodes, this.placeholders = placeholders, this.meaning = meaning, this.description = description;
        }
        return Message;
      }(),
      Text$1 = function() {
        function Text$1(value, sourceSpan) {
          this.value = value, this.sourceSpan = sourceSpan;
        }
        return Text$1.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        }, Text$1;
      }(),
      Container = function() {
        function Container(children, sourceSpan) {
          this.children = children, this.sourceSpan = sourceSpan;
        }
        return Container.prototype.visit = function(visitor, context) {
          return visitor.visitContainer(this, context);
        }, Container;
      }(),
      Icu = function() {
        function Icu(expression, type, cases, sourceSpan) {
          this.expression = expression, this.type = type, this.cases = cases, this.sourceSpan = sourceSpan;
        }
        return Icu.prototype.visit = function(visitor, context) {
          return visitor.visitIcu(this, context);
        }, Icu;
      }(),
      TagPlaceholder = function() {
        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
          this.tag = tag, this.attrs = attrs, this.startName = startName, this.closeName = closeName, this.children = children, this.isVoid = isVoid, this.sourceSpan = sourceSpan;
        }
        return TagPlaceholder.prototype.visit = function(visitor, context) {
          return visitor.visitTagPlaceholder(this, context);
        }, TagPlaceholder;
      }(),
      Placeholder = function() {
        function Placeholder(value, name, sourceSpan) {
          void 0 === name && (name = ""), this.value = value, this.name = name, this.sourceSpan = sourceSpan;
        }
        return Placeholder.prototype.visit = function(visitor, context) {
          return visitor.visitPlaceholder(this, context);
        }, Placeholder;
      }(),
      IcuPlaceholder = function() {
        function IcuPlaceholder(value, name, sourceSpan) {
          void 0 === name && (name = ""), this.value = value, this.name = name, this.sourceSpan = sourceSpan;
        }
        return IcuPlaceholder.prototype.visit = function(visitor, context) {
          return visitor.visitIcuPlaceholder(this, context);
        }, IcuPlaceholder;
      }(),
      $EOF = 0,
      $TAB = 9,
      $LF = 10,
      $VTAB = 11,
      $FF = 12,
      $CR = 13,
      $SPACE = 32,
      $BANG = 33,
      $DQ = 34,
      $HASH = 35,
      $$ = 36,
      $PERCENT = 37,
      $AMPERSAND = 38,
      $SQ = 39,
      $LPAREN = 40,
      $RPAREN = 41,
      $STAR = 42,
      $PLUS = 43,
      $COMMA = 44,
      $MINUS = 45,
      $PERIOD = 46,
      $SLASH = 47,
      $COLON = 58,
      $SEMICOLON = 59,
      $LT = 60,
      $EQ = 61,
      $GT = 62,
      $QUESTION = 63,
      $0 = 48,
      $9 = 57,
      $A = 65,
      $E = 69,
      $F = 70,
      $X = 88,
      $Z = 90,
      $LBRACKET = 91,
      $BACKSLASH = 92,
      $RBRACKET = 93,
      $CARET = 94,
      $_ = 95,
      $a = 97,
      $e = 101,
      $f = 102,
      $n = 110,
      $r = 114,
      $t = 116,
      $u = 117,
      $v = 118,
      $x = 120,
      $z = 122,
      $LBRACE = 123,
      $BAR = 124,
      $RBRACE = 125,
      $NBSP = 160,
      $BT = 96;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var global$1 = globalScope,
      Type = Function;
  global$1.assert = function(condition) {};
  var TokenType,
      STRING_MAP_PROTO = Object.getPrototypeOf({}),
      StringWrapper = function() {
        function StringWrapper() {}
        return StringWrapper.fromCharCode = function(code) {
          return String.fromCharCode(code);
        }, StringWrapper.charCodeAt = function(s, index) {
          return s.charCodeAt(index);
        }, StringWrapper.split = function(s, regExp) {
          return s.split(regExp);
        }, StringWrapper.equals = function(s, s2) {
          return s === s2;
        }, StringWrapper.stripLeft = function(s, charVal) {
          if (s && s.length) {
            for (var pos = 0,
                i = 0; i < s.length && s[i] == charVal; i++)
              pos++;
            s = s.substring(pos);
          }
          return s;
        }, StringWrapper.stripRight = function(s, charVal) {
          if (s && s.length) {
            for (var pos = s.length,
                i = s.length - 1; i >= 0 && s[i] == charVal; i--)
              pos--;
            s = s.substring(0, pos);
          }
          return s;
        }, StringWrapper.replace = function(s, from, replace) {
          return s.replace(from, replace);
        }, StringWrapper.replaceAll = function(s, from, replace) {
          return s.replace(from, replace);
        }, StringWrapper.slice = function(s, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
        }, StringWrapper.replaceAllMapped = function(s, from, cb) {
          return s.replace(from, function() {
            for (var matches = [],
                _i = 0; _i < arguments.length; _i++)
              matches[_i - 0] = arguments[_i];
            return matches.splice(-2, 2), cb(matches);
          });
        }, StringWrapper.contains = function(s, substr) {
          return s.indexOf(substr) != -1;
        }, StringWrapper.compare = function(a, b) {
          return a < b ? -1 : a > b ? 1 : 0;
        }, StringWrapper;
      }(),
      StringJoiner = function() {
        function StringJoiner(parts) {
          void 0 === parts && (parts = []), this.parts = parts;
        }
        return StringJoiner.prototype.add = function(part) {
          this.parts.push(part);
        }, StringJoiner.prototype.toString = function() {
          return this.parts.join("");
        }, StringJoiner;
      }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }();
  !function(TokenType) {
    TokenType[TokenType.Character = 0] = "Character", TokenType[TokenType.Identifier = 1] = "Identifier", TokenType[TokenType.Keyword = 2] = "Keyword", TokenType[TokenType.String = 3] = "String", TokenType[TokenType.Operator = 4] = "Operator", TokenType[TokenType.Number = 5] = "Number", TokenType[TokenType.Error = 6] = "Error";
  }(TokenType || (TokenType = {}));
  var KEYWORDS = ["var", "let", "null", "undefined", "true", "false", "if", "else", "this"],
      Lexer = function() {
        function Lexer() {}
        return Lexer.prototype.tokenize = function(text) {
          for (var scanner = new _Scanner(text),
              tokens = [],
              token = scanner.scanToken(); null != token; )
            tokens.push(token), token = scanner.scanToken();
          return tokens;
        }, Lexer;
      }();
  Lexer.decorators = [{type: _angular_core.Injectable}];
  var Token = function() {
    function Token(index, type, numValue, strValue) {
      this.index = index, this.type = type, this.numValue = numValue, this.strValue = strValue;
    }
    return Token.prototype.isCharacter = function(code) {
      return this.type == TokenType.Character && this.numValue == code;
    }, Token.prototype.isNumber = function() {
      return this.type == TokenType.Number;
    }, Token.prototype.isString = function() {
      return this.type == TokenType.String;
    }, Token.prototype.isOperator = function(operater) {
      return this.type == TokenType.Operator && this.strValue == operater;
    }, Token.prototype.isIdentifier = function() {
      return this.type == TokenType.Identifier;
    }, Token.prototype.isKeyword = function() {
      return this.type == TokenType.Keyword;
    }, Token.prototype.isKeywordDeprecatedVar = function() {
      return this.type == TokenType.Keyword && "var" == this.strValue;
    }, Token.prototype.isKeywordLet = function() {
      return this.type == TokenType.Keyword && "let" == this.strValue;
    }, Token.prototype.isKeywordNull = function() {
      return this.type == TokenType.Keyword && "null" == this.strValue;
    }, Token.prototype.isKeywordUndefined = function() {
      return this.type == TokenType.Keyword && "undefined" == this.strValue;
    }, Token.prototype.isKeywordTrue = function() {
      return this.type == TokenType.Keyword && "true" == this.strValue;
    }, Token.prototype.isKeywordFalse = function() {
      return this.type == TokenType.Keyword && "false" == this.strValue;
    }, Token.prototype.isKeywordThis = function() {
      return this.type == TokenType.Keyword && "this" == this.strValue;
    }, Token.prototype.isError = function() {
      return this.type == TokenType.Error;
    }, Token.prototype.toNumber = function() {
      return this.type == TokenType.Number ? this.numValue : -1;
    }, Token.prototype.toString = function() {
      switch (this.type) {
        case TokenType.Character:
        case TokenType.Identifier:
        case TokenType.Keyword:
        case TokenType.Operator:
        case TokenType.String:
        case TokenType.Error:
          return this.strValue;
        case TokenType.Number:
          return this.numValue.toString();
        default:
          return null;
      }
    }, Token;
  }(),
      EOF = new Token((-1), TokenType.Character, 0, ""),
      _Scanner = function() {
        function _Scanner(input) {
          this.input = input, this.peek = 0, this.index = -1, this.length = input.length, this.advance();
        }
        return _Scanner.prototype.advance = function() {
          this.peek = ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);
        }, _Scanner.prototype.scanToken = function() {
          for (var input = this.input,
              length = this.length,
              peek = this.peek,
              index = this.index; peek <= $SPACE; ) {
            if (++index >= length) {
              peek = $EOF;
              break;
            }
            peek = StringWrapper.charCodeAt(input, index);
          }
          if (this.peek = peek, this.index = index, index >= length)
            return null;
          if (isIdentifierStart(peek))
            return this.scanIdentifier();
          if (isDigit(peek))
            return this.scanNumber(index);
          var start = index;
          switch (peek) {
            case $PERIOD:
              return this.advance(), isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
            case $LPAREN:
            case $RPAREN:
            case $LBRACE:
            case $RBRACE:
            case $LBRACKET:
            case $RBRACKET:
            case $COMMA:
            case $COLON:
            case $SEMICOLON:
              return this.scanCharacter(start, peek);
            case $SQ:
            case $DQ:
              return this.scanString();
            case $HASH:
            case $PLUS:
            case $MINUS:
            case $STAR:
            case $SLASH:
            case $PERCENT:
            case $CARET:
              return this.scanOperator(start, StringWrapper.fromCharCode(peek));
            case $QUESTION:
              return this.scanComplexOperator(start, "?", $PERIOD, ".");
            case $LT:
            case $GT:
              return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, "=");
            case $BANG:
            case $EQ:
              return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, "=", $EQ, "=");
            case $AMPERSAND:
              return this.scanComplexOperator(start, "&", $AMPERSAND, "&");
            case $BAR:
              return this.scanComplexOperator(start, "|", $BAR, "|");
            case $NBSP:
              for (; isWhitespace(this.peek); )
                this.advance();
              return this.scanToken();
          }
          return this.advance(), this.error("Unexpected character [" + StringWrapper.fromCharCode(peek) + "]", 0);
        }, _Scanner.prototype.scanCharacter = function(start, code) {
          return this.advance(), newCharacterToken(start, code);
        }, _Scanner.prototype.scanOperator = function(start, str) {
          return this.advance(), newOperatorToken(start, str);
        }, _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
          this.advance();
          var str = one;
          return this.peek == twoCode && (this.advance(), str += two), isPresent(threeCode) && this.peek == threeCode && (this.advance(), str += three), newOperatorToken(start, str);
        }, _Scanner.prototype.scanIdentifier = function() {
          var start = this.index;
          for (this.advance(); isIdentifierPart(this.peek); )
            this.advance();
          var str = this.input.substring(start, this.index);
          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
        }, _Scanner.prototype.scanNumber = function(start) {
          var simple = this.index === start;
          for (this.advance(); ; ) {
            if (isDigit(this.peek))
              ;
            else if (this.peek == $PERIOD)
              simple = !1;
            else {
              if (!isExponentStart(this.peek))
                break;
              if (this.advance(), isExponentSign(this.peek) && this.advance(), !isDigit(this.peek))
                return this.error("Invalid exponent", -1);
              simple = !1;
            }
            this.advance();
          }
          var str = this.input.substring(start, this.index),
              value = simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);
          return newNumberToken(start, value);
        }, _Scanner.prototype.scanString = function() {
          var start = this.index,
              quote = this.peek;
          this.advance();
          for (var buffer,
              marker = this.index,
              input = this.input; this.peek != quote; )
            if (this.peek == $BACKSLASH) {
              null == buffer && (buffer = new StringJoiner), buffer.add(input.substring(marker, this.index)), this.advance();
              var unescapedCode;
              if (this.peek == $u) {
                var hex = input.substring(this.index + 1, this.index + 5);
                try {
                  unescapedCode = NumberWrapper.parseInt(hex, 16);
                } catch (e) {
                  return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                }
                for (var i = 0; i < 5; i++)
                  this.advance();
              } else
                unescapedCode = unescape(this.peek), this.advance();
              buffer.add(StringWrapper.fromCharCode(unescapedCode)), marker = this.index;
            } else {
              if (this.peek == $EOF)
                return this.error("Unterminated quote", 0);
              this.advance();
            }
          var last = input.substring(marker, this.index);
          this.advance();
          var unescaped = last;
          return null != buffer && (buffer.add(last), unescaped = buffer.toString()), newStringToken(start, unescaped);
        }, _Scanner.prototype.error = function(message, offset) {
          var position = this.index + offset;
          return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
        }, _Scanner;
      }(),
      INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//],
      InterpolationConfig = function() {
        function InterpolationConfig(start, end) {
          this.start = start, this.end = end;
        }
        return InterpolationConfig.fromArray = function(markers) {
          return markers ? (assertInterpolationSymbols("interpolation", markers), new InterpolationConfig(markers[0], markers[1])) : DEFAULT_INTERPOLATION_CONFIG;
        }, InterpolationConfig;
      }(),
      DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}"),
      Map$1 = global$1.Map,
      Set$1 = global$1.Set,
      createMapFromPairs = function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(),
      createMapFromMap = function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(),
      _clearValues = function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(),
      _arrayFromMap = function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(),
      MapWrapper = function() {
        function MapWrapper() {}
        return MapWrapper.clone = function(m) {
          return createMapFromMap(m);
        }, MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map$1;
          for (var prop in stringMap)
            result.set(prop, stringMap[prop]);
          return result;
        }, MapWrapper.toStringMap = function(m) {
          var r = {};
          return m.forEach(function(v, k) {
            return r[k] = v;
          }), r;
        }, MapWrapper.createFromPairs = function(pairs) {
          return createMapFromPairs(pairs);
        }, MapWrapper.clearValues = function(m) {
          _clearValues(m);
        }, MapWrapper.iterable = function(m) {
          return m;
        }, MapWrapper.keys = function(m) {
          return _arrayFromMap(m, !1);
        }, MapWrapper.values = function(m) {
          return _arrayFromMap(m, !0);
        }, MapWrapper;
      }(),
      StringMapWrapper = function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).map(function(k) {
            return map[k];
          });
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var _i = 0,
              _a = Object.keys(map); _i < _a.length; _i++) {
            var k = _a[_i];
            callback(map[k], k);
          }
        }, StringMapWrapper.merge = function(m1, m2) {
          for (var m = {},
              _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }(),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      createSetFromList = function() {
        var test = new Set$1([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set$1(lst);
        } : function(lst) {
          var res = new Set$1(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(),
      SetWrapper = function() {
        function SetWrapper() {}
        return SetWrapper.createFromList = function(lst) {
          return createSetFromList(lst);
        }, SetWrapper.has = function(s, key) {
          return s.has(key);
        }, SetWrapper.delete = function(m, k) {
          m.delete(k);
        }, SetWrapper;
      }(),
      ParserError = function() {
        function ParserError(message, input, errLocation, ctxLocation) {
          this.input = input, this.errLocation = errLocation, this.ctxLocation = ctxLocation, this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
        }
        return ParserError;
      }(),
      ParseSpan = function() {
        function ParseSpan(start, end) {
          this.start = start, this.end = end;
        }
        return ParseSpan;
      }(),
      AST = function() {
        function AST(span) {
          this.span = span;
        }
        return AST.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), null;
        }, AST.prototype.toString = function() {
          return "AST";
        }, AST;
      }(),
      Quote = function(_super) {
        function Quote(span, prefix, uninterpretedExpression, location) {
          _super.call(this, span), this.prefix = prefix, this.uninterpretedExpression = uninterpretedExpression, this.location = location;
        }
        return __extends(Quote, _super), Quote.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitQuote(this, context);
        }, Quote.prototype.toString = function() {
          return "Quote";
        }, Quote;
      }(AST),
      EmptyExpr = function(_super) {
        function EmptyExpr() {
          _super.apply(this, arguments);
        }
        return __extends(EmptyExpr, _super), EmptyExpr.prototype.visit = function(visitor, context) {
          void 0 === context && (context = null);
        }, EmptyExpr;
      }(AST),
      ImplicitReceiver = function(_super) {
        function ImplicitReceiver() {
          _super.apply(this, arguments);
        }
        return __extends(ImplicitReceiver, _super), ImplicitReceiver.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitImplicitReceiver(this, context);
        }, ImplicitReceiver;
      }(AST),
      Chain = function(_super) {
        function Chain(span, expressions) {
          _super.call(this, span), this.expressions = expressions;
        }
        return __extends(Chain, _super), Chain.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitChain(this, context);
        }, Chain;
      }(AST),
      Conditional = function(_super) {
        function Conditional(span, condition, trueExp, falseExp) {
          _super.call(this, span), this.condition = condition, this.trueExp = trueExp, this.falseExp = falseExp;
        }
        return __extends(Conditional, _super), Conditional.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitConditional(this, context);
        }, Conditional;
      }(AST),
      PropertyRead = function(_super) {
        function PropertyRead(span, receiver, name) {
          _super.call(this, span), this.receiver = receiver, this.name = name;
        }
        return __extends(PropertyRead, _super), PropertyRead.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPropertyRead(this, context);
        }, PropertyRead;
      }(AST),
      PropertyWrite = function(_super) {
        function PropertyWrite(span, receiver, name, value) {
          _super.call(this, span), this.receiver = receiver, this.name = name, this.value = value;
        }
        return __extends(PropertyWrite, _super), PropertyWrite.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPropertyWrite(this, context);
        }, PropertyWrite;
      }(AST),
      SafePropertyRead = function(_super) {
        function SafePropertyRead(span, receiver, name) {
          _super.call(this, span), this.receiver = receiver, this.name = name;
        }
        return __extends(SafePropertyRead, _super), SafePropertyRead.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitSafePropertyRead(this, context);
        }, SafePropertyRead;
      }(AST),
      KeyedRead = function(_super) {
        function KeyedRead(span, obj, key) {
          _super.call(this, span), this.obj = obj, this.key = key;
        }
        return __extends(KeyedRead, _super), KeyedRead.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitKeyedRead(this, context);
        }, KeyedRead;
      }(AST),
      KeyedWrite = function(_super) {
        function KeyedWrite(span, obj, key, value) {
          _super.call(this, span), this.obj = obj, this.key = key, this.value = value;
        }
        return __extends(KeyedWrite, _super), KeyedWrite.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitKeyedWrite(this, context);
        }, KeyedWrite;
      }(AST),
      BindingPipe = function(_super) {
        function BindingPipe(span, exp, name, args) {
          _super.call(this, span), this.exp = exp, this.name = name, this.args = args;
        }
        return __extends(BindingPipe, _super), BindingPipe.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPipe(this, context);
        }, BindingPipe;
      }(AST),
      LiteralPrimitive = function(_super) {
        function LiteralPrimitive(span, value) {
          _super.call(this, span), this.value = value;
        }
        return __extends(LiteralPrimitive, _super), LiteralPrimitive.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitLiteralPrimitive(this, context);
        }, LiteralPrimitive;
      }(AST),
      LiteralArray = function(_super) {
        function LiteralArray(span, expressions) {
          _super.call(this, span), this.expressions = expressions;
        }
        return __extends(LiteralArray, _super), LiteralArray.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitLiteralArray(this, context);
        }, LiteralArray;
      }(AST),
      LiteralMap = function(_super) {
        function LiteralMap(span, keys, values) {
          _super.call(this, span), this.keys = keys, this.values = values;
        }
        return __extends(LiteralMap, _super), LiteralMap.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitLiteralMap(this, context);
        }, LiteralMap;
      }(AST),
      Interpolation = function(_super) {
        function Interpolation(span, strings, expressions) {
          _super.call(this, span), this.strings = strings, this.expressions = expressions;
        }
        return __extends(Interpolation, _super), Interpolation.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitInterpolation(this, context);
        }, Interpolation;
      }(AST),
      Binary = function(_super) {
        function Binary(span, operation, left, right) {
          _super.call(this, span), this.operation = operation, this.left = left, this.right = right;
        }
        return __extends(Binary, _super), Binary.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitBinary(this, context);
        }, Binary;
      }(AST),
      PrefixNot = function(_super) {
        function PrefixNot(span, expression) {
          _super.call(this, span), this.expression = expression;
        }
        return __extends(PrefixNot, _super), PrefixNot.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitPrefixNot(this, context);
        }, PrefixNot;
      }(AST),
      MethodCall = function(_super) {
        function MethodCall(span, receiver, name, args) {
          _super.call(this, span), this.receiver = receiver, this.name = name, this.args = args;
        }
        return __extends(MethodCall, _super), MethodCall.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitMethodCall(this, context);
        }, MethodCall;
      }(AST),
      SafeMethodCall = function(_super) {
        function SafeMethodCall(span, receiver, name, args) {
          _super.call(this, span), this.receiver = receiver, this.name = name, this.args = args;
        }
        return __extends(SafeMethodCall, _super), SafeMethodCall.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitSafeMethodCall(this, context);
        }, SafeMethodCall;
      }(AST),
      FunctionCall = function(_super) {
        function FunctionCall(span, target, args) {
          _super.call(this, span), this.target = target, this.args = args;
        }
        return __extends(FunctionCall, _super), FunctionCall.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), visitor.visitFunctionCall(this, context);
        }, FunctionCall;
      }(AST),
      ASTWithSource = function(_super) {
        function ASTWithSource(ast, source, location, errors) {
          _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length)), this.ast = ast, this.source = source, this.location = location, this.errors = errors;
        }
        return __extends(ASTWithSource, _super), ASTWithSource.prototype.visit = function(visitor, context) {
          return void 0 === context && (context = null), this.ast.visit(visitor, context);
        }, ASTWithSource.prototype.toString = function() {
          return this.source + " in " + this.location;
        }, ASTWithSource;
      }(AST),
      TemplateBinding = function() {
        function TemplateBinding(key, keyIsVar, name, expression) {
          this.key = key, this.keyIsVar = keyIsVar, this.name = name, this.expression = expression;
        }
        return TemplateBinding;
      }(),
      RecursiveAstVisitor = function() {
        function RecursiveAstVisitor() {}
        return RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
          return ast.left.visit(this), ast.right.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        }, RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
          return ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
          return ast.exp.visit(this), this.visitAll(ast.args, context), null;
        }, RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
          return ast.target.visit(this), this.visitAll(ast.args, context), null;
        }, RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
          return null;
        }, RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        }, RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
          return ast.obj.visit(this), ast.key.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
          return ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
          return this.visitAll(ast.expressions, context);
        }, RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
          return this.visitAll(ast.values, context);
        }, RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
          return null;
        }, RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
          return ast.receiver.visit(this), this.visitAll(ast.args, context);
        }, RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
          return ast.expression.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
          return ast.receiver.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
          return ast.receiver.visit(this), ast.value.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
          return ast.receiver.visit(this), null;
        }, RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
          return ast.receiver.visit(this), this.visitAll(ast.args, context);
        }, RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
          var _this = this;
          return asts.forEach(function(ast) {
            return ast.visit(_this, context);
          }), null;
        }, RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
          return null;
        }, RecursiveAstVisitor;
      }(),
      SplitInterpolation = function() {
        function SplitInterpolation(strings, expressions) {
          this.strings = strings, this.expressions = expressions;
        }
        return SplitInterpolation;
      }(),
      TemplateBindingParseResult = function() {
        function TemplateBindingParseResult(templateBindings, warnings, errors) {
          this.templateBindings = templateBindings, this.warnings = warnings, this.errors = errors;
        }
        return TemplateBindingParseResult;
      }(),
      Parser = function() {
        function Parser(_lexer) {
          this._lexer = _lexer, this.errors = [];
        }
        return Parser.prototype.parseAction = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._checkNoInterpolation(input, location, interpolationConfig);
          var tokens = this._lexer.tokenize(this._stripComments(input)),
              ast = new _ParseAST(input, location, tokens, (!0), this.errors).parseChain();
          return new ASTWithSource(ast, input, location, this.errors);
        }, Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          return new ASTWithSource(ast, input, location, this.errors);
        }, Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var ast = this._parseBindingAst(input, location, interpolationConfig);
          return SimpleExpressionChecker.check(ast) || this._reportError("Host binding expression can only contain field access and constants", input, location), new ASTWithSource(ast, input, location, this.errors);
        }, Parser.prototype._reportError = function(message, input, errLocation, ctxLocation) {
          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
        }, Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
          var quote = this._parseQuote(input, location);
          if (isPresent(quote))
            return quote;
          this._checkNoInterpolation(input, location, interpolationConfig);
          var tokens = this._lexer.tokenize(this._stripComments(input));
          return new _ParseAST(input, location, tokens, (!1), this.errors).parseChain();
        }, Parser.prototype._parseQuote = function(input, location) {
          if (isBlank(input))
            return null;
          var prefixSeparatorIndex = input.indexOf(":");
          if (prefixSeparatorIndex == -1)
            return null;
          var prefix = input.substring(0, prefixSeparatorIndex).trim();
          if (!isIdentifier(prefix))
            return null;
          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
        }, Parser.prototype.parseTemplateBindings = function(input, location) {
          var tokens = this._lexer.tokenize(input);
          return new _ParseAST(input, location, tokens, (!1), this.errors).parseTemplateBindings();
        }, Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var split = this.splitInterpolation(input, location, interpolationConfig);
          if (null == split)
            return null;
          for (var expressions = [],
              i = 0; i < split.expressions.length; ++i) {
            var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i])),
                ast = new _ParseAST(input, location, tokens, (!1), this.errors).parseChain();
            expressions.push(ast);
          }
          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
        }, Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
          void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var regexp = _createInterpolateRegExp(interpolationConfig),
              parts = StringWrapper.split(input, regexp);
          if (parts.length <= 1)
            return null;
          for (var strings = [],
              expressions = [],
              i = 0; i < parts.length; i++) {
            var part = parts[i];
            i % 2 === 0 ? strings.push(part) : part.trim().length > 0 ? expressions.push(part) : this._reportError("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
          }
          return new SplitInterpolation(strings, expressions);
        }, Parser.prototype.wrapLiteralPrimitive = function(input, location) {
          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
        }, Parser.prototype._stripComments = function(input) {
          var i = this._commentStart(input);
          return isPresent(i) ? input.substring(0, i).trim() : input;
        }, Parser.prototype._commentStart = function(input) {
          for (var outerQuote = null,
              i = 0; i < input.length - 1; i++) {
            var char = StringWrapper.charCodeAt(input, i),
                nextChar = StringWrapper.charCodeAt(input, i + 1);
            if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
              return i;
            outerQuote === char ? outerQuote = null : isBlank(outerQuote) && isQuote(char) && (outerQuote = char);
          }
          return null;
        }, Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
          var regexp = _createInterpolateRegExp(interpolationConfig),
              parts = StringWrapper.split(input, regexp);
          parts.length > 1 && this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
        }, Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
          for (var errLocation = "",
              j = 0; j < partInErrIdx; j++)
            errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
          return errLocation.length;
        }, Parser;
      }();
  Parser.decorators = [{type: _angular_core.Injectable}], Parser.ctorParameters = [{type: Lexer}];
  var TagContentType,
      _ParseAST = function() {
        function _ParseAST(input, location, tokens, parseAction, errors) {
          this.input = input, this.location = location, this.tokens = tokens, this.parseAction = parseAction, this.errors = errors, this.rparensExpected = 0, this.rbracketsExpected = 0, this.rbracesExpected = 0, this.index = 0;
        }
        return _ParseAST.prototype.peek = function(offset) {
          var i = this.index + offset;
          return i < this.tokens.length ? this.tokens[i] : EOF;
        }, Object.defineProperty(_ParseAST.prototype, "next", {
          get: function() {
            return this.peek(0);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(_ParseAST.prototype, "inputIndex", {
          get: function() {
            return this.index < this.tokens.length ? this.next.index : this.input.length;
          },
          enumerable: !0,
          configurable: !0
        }), _ParseAST.prototype.span = function(start) {
          return new ParseSpan(start, this.inputIndex);
        }, _ParseAST.prototype.advance = function() {
          this.index++;
        }, _ParseAST.prototype.optionalCharacter = function(code) {
          return !!this.next.isCharacter(code) && (this.advance(), !0);
        }, _ParseAST.prototype.peekKeywordLet = function() {
          return this.next.isKeywordLet();
        }, _ParseAST.prototype.peekDeprecatedKeywordVar = function() {
          return this.next.isKeywordDeprecatedVar();
        }, _ParseAST.prototype.peekDeprecatedOperatorHash = function() {
          return this.next.isOperator("#");
        }, _ParseAST.prototype.expectCharacter = function(code) {
          this.optionalCharacter(code) || this.error("Missing expected " + StringWrapper.fromCharCode(code));
        }, _ParseAST.prototype.optionalOperator = function(op) {
          return !!this.next.isOperator(op) && (this.advance(), !0);
        }, _ParseAST.prototype.expectOperator = function(operator) {
          this.optionalOperator(operator) || this.error("Missing expected operator " + operator);
        }, _ParseAST.prototype.expectIdentifierOrKeyword = function() {
          var n = this.next;
          return n.isIdentifier() || n.isKeyword() ? (this.advance(), n.toString()) : (this.error("Unexpected token " + n + ", expected identifier or keyword"), "");
        }, _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
          var n = this.next;
          return n.isIdentifier() || n.isKeyword() || n.isString() ? (this.advance(), n.toString()) : (this.error("Unexpected token " + n + ", expected identifier, keyword, or string"), "");
        }, _ParseAST.prototype.parseChain = function() {
          for (var exprs = [],
              start = this.inputIndex; this.index < this.tokens.length; ) {
            var expr = this.parsePipe();
            if (exprs.push(expr), this.optionalCharacter($SEMICOLON))
              for (this.parseAction || this.error("Binding expression cannot contain chained expression"); this.optionalCharacter($SEMICOLON); )
                ;
            else
              this.index < this.tokens.length && this.error("Unexpected token '" + this.next + "'");
          }
          return 0 == exprs.length ? new EmptyExpr(this.span(start)) : 1 == exprs.length ? exprs[0] : new Chain(this.span(start), exprs);
        }, _ParseAST.prototype.parsePipe = function() {
          var result = this.parseExpression();
          if (this.optionalOperator("|")) {
            this.parseAction && this.error("Cannot have a pipe in an action expression");
            do {
              for (var name = this.expectIdentifierOrKeyword(),
                  args = []; this.optionalCharacter($COLON); )
                args.push(this.parseExpression());
              result = new BindingPipe(this.span(result.span.start), result, name, args);
            } while (this.optionalOperator("|"));
          }
          return result;
        }, _ParseAST.prototype.parseExpression = function() {
          return this.parseConditional();
        }, _ParseAST.prototype.parseConditional = function() {
          var start = this.inputIndex,
              result = this.parseLogicalOr();
          if (this.optionalOperator("?")) {
            var yes = this.parsePipe(),
                no = void 0;
            if (this.optionalCharacter($COLON))
              no = this.parsePipe();
            else {
              var end = this.inputIndex,
                  expression = this.input.substring(start, end);
              this.error("Conditional expression " + expression + " requires all 3 expressions"), no = new EmptyExpr(this.span(start));
            }
            return new Conditional(this.span(start), result, yes, no);
          }
          return result;
        }, _ParseAST.prototype.parseLogicalOr = function() {
          for (var result = this.parseLogicalAnd(); this.optionalOperator("||"); ) {
            var right = this.parseLogicalAnd();
            result = new Binary(this.span(result.span.start), "||", result, right);
          }
          return result;
        }, _ParseAST.prototype.parseLogicalAnd = function() {
          for (var result = this.parseEquality(); this.optionalOperator("&&"); ) {
            var right = this.parseEquality();
            result = new Binary(this.span(result.span.start), "&&", result, right);
          }
          return result;
        }, _ParseAST.prototype.parseEquality = function() {
          for (var result = this.parseRelational(); this.next.type == TokenType.Operator; ) {
            var operator = this.next.strValue;
            switch (operator) {
              case "==":
              case "===":
              case "!=":
              case "!==":
                this.advance();
                var right = this.parseRelational();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        }, _ParseAST.prototype.parseRelational = function() {
          for (var result = this.parseAdditive(); this.next.type == TokenType.Operator; ) {
            var operator = this.next.strValue;
            switch (operator) {
              case "<":
              case ">":
              case "<=":
              case ">=":
                this.advance();
                var right = this.parseAdditive();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        }, _ParseAST.prototype.parseAdditive = function() {
          for (var result = this.parseMultiplicative(); this.next.type == TokenType.Operator; ) {
            var operator = this.next.strValue;
            switch (operator) {
              case "+":
              case "-":
                this.advance();
                var right = this.parseMultiplicative();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        }, _ParseAST.prototype.parseMultiplicative = function() {
          for (var result = this.parsePrefix(); this.next.type == TokenType.Operator; ) {
            var operator = this.next.strValue;
            switch (operator) {
              case "*":
              case "%":
              case "/":
                this.advance();
                var right = this.parsePrefix();
                result = new Binary(this.span(result.span.start), operator, result, right);
                continue;
            }
            break;
          }
          return result;
        }, _ParseAST.prototype.parsePrefix = function() {
          if (this.next.type == TokenType.Operator) {
            var start = this.inputIndex,
                operator = this.next.strValue,
                result = void 0;
            switch (operator) {
              case "+":
                return this.advance(), this.parsePrefix();
              case "-":
                return this.advance(), result = this.parsePrefix(), new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
              case "!":
                return this.advance(), result = this.parsePrefix(), new PrefixNot(this.span(start), result);
            }
          }
          return this.parseCallChain();
        }, _ParseAST.prototype.parseCallChain = function() {
          for (var result = this.parsePrimary(); ; )
            if (this.optionalCharacter($PERIOD))
              result = this.parseAccessMemberOrMethodCall(result, !1);
            else if (this.optionalOperator("?."))
              result = this.parseAccessMemberOrMethodCall(result, !0);
            else if (this.optionalCharacter($LBRACKET)) {
              this.rbracketsExpected++;
              var key = this.parsePipe();
              if (this.rbracketsExpected--, this.expectCharacter($RBRACKET), this.optionalOperator("=")) {
                var value = this.parseConditional();
                result = new KeyedWrite(this.span(result.span.start), result, key, value);
              } else
                result = new KeyedRead(this.span(result.span.start), result, key);
            } else {
              if (!this.optionalCharacter($LPAREN))
                return result;
              this.rparensExpected++;
              var args = this.parseCallArguments();
              this.rparensExpected--, this.expectCharacter($RPAREN), result = new FunctionCall(this.span(result.span.start), result, args);
            }
        }, _ParseAST.prototype.parsePrimary = function() {
          var start = this.inputIndex;
          if (this.optionalCharacter($LPAREN)) {
            this.rparensExpected++;
            var result = this.parsePipe();
            return this.rparensExpected--, this.expectCharacter($RPAREN), result;
          }
          if (this.next.isKeywordNull())
            return this.advance(), new LiteralPrimitive(this.span(start), null);
          if (this.next.isKeywordUndefined())
            return this.advance(), new LiteralPrimitive(this.span(start), (void 0));
          if (this.next.isKeywordTrue())
            return this.advance(), new LiteralPrimitive(this.span(start), (!0));
          if (this.next.isKeywordFalse())
            return this.advance(), new LiteralPrimitive(this.span(start), (!1));
          if (this.next.isKeywordThis())
            return this.advance(), new ImplicitReceiver(this.span(start));
          if (this.optionalCharacter($LBRACKET)) {
            this.rbracketsExpected++;
            var elements = this.parseExpressionList($RBRACKET);
            return this.rbracketsExpected--, this.expectCharacter($RBRACKET), new LiteralArray(this.span(start), elements);
          }
          if (this.next.isCharacter($LBRACE))
            return this.parseLiteralMap();
          if (this.next.isIdentifier())
            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), !1);
          if (this.next.isNumber()) {
            var value = this.next.toNumber();
            return this.advance(), new LiteralPrimitive(this.span(start), value);
          }
          if (this.next.isString()) {
            var literalValue = this.next.toString();
            return this.advance(), new LiteralPrimitive(this.span(start), literalValue);
          }
          return this.index >= this.tokens.length ? (this.error("Unexpected end of expression: " + this.input), new EmptyExpr(this.span(start))) : (this.error("Unexpected token " + this.next), new EmptyExpr(this.span(start)));
        }, _ParseAST.prototype.parseExpressionList = function(terminator) {
          var result = [];
          if (!this.next.isCharacter(terminator))
            do
              result.push(this.parsePipe());
 while (this.optionalCharacter($COMMA));
          return result;
        }, _ParseAST.prototype.parseLiteralMap = function() {
          var keys = [],
              values = [],
              start = this.inputIndex;
          if (this.expectCharacter($LBRACE), !this.optionalCharacter($RBRACE)) {
            this.rbracesExpected++;
            do {
              var key = this.expectIdentifierOrKeywordOrString();
              keys.push(key), this.expectCharacter($COLON), values.push(this.parsePipe());
            } while (this.optionalCharacter($COMMA));
            this.rbracesExpected--, this.expectCharacter($RBRACE);
          }
          return new LiteralMap(this.span(start), keys, values);
        }, _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
          void 0 === isSafe && (isSafe = !1);
          var start = receiver.span.start,
              id = this.expectIdentifierOrKeyword();
          if (this.optionalCharacter($LPAREN)) {
            this.rparensExpected++;
            var args = this.parseCallArguments();
            this.expectCharacter($RPAREN), this.rparensExpected--;
            var span = this.span(start);
            return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
          }
          if (isSafe)
            return this.optionalOperator("=") ? (this.error("The '?.' operator cannot be used in the assignment"), new EmptyExpr(this.span(start))) : new SafePropertyRead(this.span(start), receiver, id);
          if (this.optionalOperator("=")) {
            if (!this.parseAction)
              return this.error("Bindings cannot contain assignments"), new EmptyExpr(this.span(start));
            var value = this.parseConditional();
            return new PropertyWrite(this.span(start), receiver, id, value);
          }
          return new PropertyRead(this.span(start), receiver, id);
        }, _ParseAST.prototype.parseCallArguments = function() {
          if (this.next.isCharacter($RPAREN))
            return [];
          var positionals = [];
          do
            positionals.push(this.parsePipe());
 while (this.optionalCharacter($COMMA));
          return positionals;
        }, _ParseAST.prototype.expectTemplateBindingKey = function() {
          var result = "",
              operatorFound = !1;
          do
            result += this.expectIdentifierOrKeywordOrString(), operatorFound = this.optionalOperator("-"), operatorFound && (result += "-");
 while (operatorFound);
          return result.toString();
        }, _ParseAST.prototype.parseTemplateBindings = function() {
          for (var bindings = [],
              prefix = null,
              warnings = []; this.index < this.tokens.length; ) {
            var keyIsVar = this.peekKeywordLet();
            !keyIsVar && this.peekDeprecatedKeywordVar() && (keyIsVar = !0, warnings.push('"var" inside of expressions is deprecated. Use "let" instead!')), !keyIsVar && this.peekDeprecatedOperatorHash() && (keyIsVar = !0, warnings.push('"#" inside of expressions is deprecated. Use "let" instead!')), keyIsVar && this.advance();
            var key = this.expectTemplateBindingKey();
            keyIsVar || (null == prefix ? prefix = key : key = prefix + key[0].toUpperCase() + key.substring(1)), this.optionalCharacter($COLON);
            var name = null,
                expression = null;
            if (keyIsVar)
              name = this.optionalOperator("=") ? this.expectTemplateBindingKey() : "$implicit";
            else if (this.next !== EOF && !this.peekKeywordLet() && !this.peekDeprecatedKeywordVar() && !this.peekDeprecatedOperatorHash()) {
              var start = this.inputIndex,
                  ast = this.parsePipe(),
                  source = this.input.substring(start, this.inputIndex);
              expression = new ASTWithSource(ast, source, this.location, this.errors);
            }
            bindings.push(new TemplateBinding(key, keyIsVar, name, expression)), this.optionalCharacter($SEMICOLON) || this.optionalCharacter($COMMA);
          }
          return new TemplateBindingParseResult(bindings, warnings, this.errors);
        }, _ParseAST.prototype.error = function(message, index) {
          void 0 === index && (index = null), this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location)), this.skip();
        }, _ParseAST.prototype.locationText = function(index) {
          return void 0 === index && (index = null), isBlank(index) && (index = this.index), index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
        }, _ParseAST.prototype.skip = function() {
          for (var n = this.next; this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)); )
            this.next.isError() && this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location)), this.advance(), n = this.next;
        }, _ParseAST;
      }(),
      SimpleExpressionChecker = function() {
        function SimpleExpressionChecker() {
          this.simple = !0;
        }
        return SimpleExpressionChecker.check = function(ast) {
          var s = new SimpleExpressionChecker;
          return ast.visit(s), s.simple;
        }, SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {}, SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {}, SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {}, SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
          this.visitAll(ast.expressions);
        }, SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
          this.visitAll(ast.values);
        }, SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitAll = function(asts) {
          var _this = this;
          return asts.map(function(node) {
            return node.visit(_this);
          });
        }, SimpleExpressionChecker.prototype.visitChain = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {
          this.simple = !1;
        }, SimpleExpressionChecker;
      }();
  !function(TagContentType) {
    TagContentType[TagContentType.RAW_TEXT = 0] = "RAW_TEXT", TagContentType[TagContentType.ESCAPABLE_RAW_TEXT = 1] = "ESCAPABLE_RAW_TEXT", TagContentType[TagContentType.PARSABLE_DATA = 2] = "PARSABLE_DATA";
  }(TagContentType || (TagContentType = {}));
  var ParseErrorLevel,
      NAMED_ENTITIES = {
        Aacute: "Ã",
        aacute: "Ã¡",
        Acirc: "Ã",
        acirc: "Ã¢",
        acute: "Â´",
        AElig: "Ã",
        aelig: "Ã¦",
        Agrave: "Ã",
        agrave: "Ã ",
        alefsym: "âµ",
        Alpha: "Î",
        alpha: "Î±",
        amp: "&",
        and: "â§",
        ang: "â ",
        apos: "'",
        Aring: "Ã",
        aring: "Ã¥",
        asymp: "â",
        Atilde: "Ã",
        atilde: "Ã£",
        Auml: "Ã",
        auml: "Ã¤",
        bdquo: "â",
        Beta: "Î",
        beta: "Î²",
        brvbar: "Â¦",
        bull: "â¢",
        cap: "â©",
        Ccedil: "Ã",
        ccedil: "Ã§",
        cedil: "Â¸",
        cent: "Â¢",
        Chi: "Î§",
        chi: "Ï",
        circ: "Ë",
        clubs: "â£",
        cong: "â",
        copy: "Â©",
        crarr: "âµ",
        cup: "âª",
        curren: "Â¤",
        dagger: "â ",
        Dagger: "â¡",
        darr: "â",
        dArr: "â",
        deg: "Â°",
        Delta: "Î",
        delta: "Î´",
        diams: "â¦",
        divide: "Ã·",
        Eacute: "Ã",
        eacute: "Ã©",
        Ecirc: "Ã",
        ecirc: "Ãª",
        Egrave: "Ã",
        egrave: "Ã¨",
        empty: "â",
        emsp: "â",
        ensp: "â",
        Epsilon: "Î",
        epsilon: "Îµ",
        equiv: "â¡",
        Eta: "Î",
        eta: "Î·",
        ETH: "Ã",
        eth: "Ã°",
        Euml: "Ã",
        euml: "Ã«",
        euro: "â¬",
        exist: "â",
        fnof: "Æ",
        forall: "â",
        frac12: "Â½",
        frac14: "Â¼",
        frac34: "Â¾",
        frasl: "â",
        Gamma: "Î",
        gamma: "Î³",
        ge: "â¥",
        gt: ">",
        harr: "â",
        hArr: "â",
        hearts: "â¥",
        hellip: "â¦",
        Iacute: "Ã",
        iacute: "Ã­",
        Icirc: "Ã",
        icirc: "Ã®",
        iexcl: "Â¡",
        Igrave: "Ã",
        igrave: "Ã¬",
        image: "â",
        infin: "â",
        int: "â«",
        Iota: "Î",
        iota: "Î¹",
        iquest: "Â¿",
        isin: "â",
        Iuml: "Ã",
        iuml: "Ã¯",
        Kappa: "Î",
        kappa: "Îº",
        Lambda: "Î",
        lambda: "Î»",
        lang: "â¨",
        laquo: "Â«",
        larr: "â",
        lArr: "â",
        lceil: "â",
        ldquo: "â",
        le: "â¤",
        lfloor: "â",
        lowast: "â",
        loz: "â",
        lrm: "â",
        lsaquo: "â¹",
        lsquo: "â",
        lt: "<",
        macr: "Â¯",
        mdash: "â",
        micro: "Âµ",
        middot: "Â·",
        minus: "â",
        Mu: "Î",
        mu: "Î¼",
        nabla: "â",
        nbsp: "Â ",
        ndash: "â",
        ne: "â ",
        ni: "â",
        not: "Â¬",
        notin: "â",
        nsub: "â",
        Ntilde: "Ã",
        ntilde: "Ã±",
        Nu: "Î",
        nu: "Î½",
        Oacute: "Ã",
        oacute: "Ã³",
        Ocirc: "Ã",
        ocirc: "Ã´",
        OElig: "Å",
        oelig: "Å",
        Ograve: "Ã",
        ograve: "Ã²",
        oline: "â¾",
        Omega: "Î©",
        omega: "Ï",
        Omicron: "Î",
        omicron: "Î¿",
        oplus: "â",
        or: "â¨",
        ordf: "Âª",
        ordm: "Âº",
        Oslash: "Ã",
        oslash: "Ã¸",
        Otilde: "Ã",
        otilde: "Ãµ",
        otimes: "â",
        Ouml: "Ã",
        ouml: "Ã¶",
        para: "Â¶",
        permil: "â°",
        perp: "â¥",
        Phi: "Î¦",
        phi: "Ï",
        Pi: "Î ",
        pi: "Ï",
        piv: "Ï",
        plusmn: "Â±",
        pound: "Â£",
        prime: "â²",
        Prime: "â³",
        prod: "â",
        prop: "â",
        Psi: "Î¨",
        psi: "Ï",
        quot: '"',
        radic: "â",
        rang: "â©",
        raquo: "Â»",
        rarr: "â",
        rArr: "â",
        rceil: "â",
        rdquo: "â",
        real: "â",
        reg: "Â®",
        rfloor: "â",
        Rho: "Î¡",
        rho: "Ï",
        rlm: "â",
        rsaquo: "âº",
        rsquo: "â",
        sbquo: "â",
        Scaron: "Å ",
        scaron: "Å¡",
        sdot: "â",
        sect: "Â§",
        shy: "Â­",
        Sigma: "Î£",
        sigma: "Ï",
        sigmaf: "Ï",
        sim: "â¼",
        spades: "â ",
        sub: "â",
        sube: "â",
        sum: "â",
        sup: "â",
        sup1: "Â¹",
        sup2: "Â²",
        sup3: "Â³",
        supe: "â",
        szlig: "Ã",
        Tau: "Î¤",
        tau: "Ï",
        there4: "â´",
        Theta: "Î",
        theta: "Î¸",
        thetasym: "Ï",
        thinsp: "â",
        THORN: "Ã",
        thorn: "Ã¾",
        tilde: "Ë",
        times: "Ã",
        trade: "â¢",
        Uacute: "Ã",
        uacute: "Ãº",
        uarr: "â",
        uArr: "â",
        Ucirc: "Ã",
        ucirc: "Ã»",
        Ugrave: "Ã",
        ugrave: "Ã¹",
        uml: "Â¨",
        upsih: "Ï",
        Upsilon: "Î¥",
        upsilon: "Ï",
        Uuml: "Ã",
        uuml: "Ã¼",
        weierp: "â",
        Xi: "Î",
        xi: "Î¾",
        Yacute: "Ã",
        yacute: "Ã½",
        yen: "Â¥",
        yuml: "Ã¿",
        Yuml: "Å¸",
        Zeta: "Î",
        zeta: "Î¶",
        zwj: "â",
        zwnj: "â"
      },
      HtmlTagDefinition = function() {
        function HtmlTagDefinition(_a) {
          var _this = this,
              _b = void 0 === _a ? {} : _a,
              closedByChildren = _b.closedByChildren,
              requiredParents = _b.requiredParents,
              implicitNamespacePrefix = _b.implicitNamespacePrefix,
              _c = _b.contentType,
              contentType = void 0 === _c ? TagContentType.PARSABLE_DATA : _c,
              _d = _b.closedByParent,
              closedByParent = void 0 !== _d && _d,
              _e = _b.isVoid,
              isVoid = void 0 !== _e && _e,
              _f = _b.ignoreFirstLf,
              ignoreFirstLf = void 0 !== _f && _f;
          this.closedByChildren = {}, this.closedByParent = !1, this.canSelfClose = !1, closedByChildren && closedByChildren.length > 0 && closedByChildren.forEach(function(tagName) {
            return _this.closedByChildren[tagName] = !0;
          }), this.isVoid = isVoid, this.closedByParent = closedByParent || isVoid, requiredParents && requiredParents.length > 0 && (this.requiredParents = {}, this.parentToAdd = requiredParents[0], requiredParents.forEach(function(tagName) {
            return _this.requiredParents[tagName] = !0;
          })), this.implicitNamespacePrefix = implicitNamespacePrefix, this.contentType = contentType, this.ignoreFirstLf = ignoreFirstLf;
        }
        return HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
          if (!this.requiredParents)
            return !1;
          if (!currentParent)
            return !0;
          var lcParent = currentParent.toLowerCase();
          return 1 != this.requiredParents[lcParent] && "template" != lcParent;
        }, HtmlTagDefinition.prototype.isClosedByChild = function(name) {
          return this.isVoid || name.toLowerCase() in this.closedByChildren;
        }, HtmlTagDefinition;
      }(),
      TAG_DEFINITIONS = {
        base: new HtmlTagDefinition({isVoid: !0}),
        meta: new HtmlTagDefinition({isVoid: !0}),
        area: new HtmlTagDefinition({isVoid: !0}),
        embed: new HtmlTagDefinition({isVoid: !0}),
        link: new HtmlTagDefinition({isVoid: !0}),
        img: new HtmlTagDefinition({isVoid: !0}),
        input: new HtmlTagDefinition({isVoid: !0}),
        param: new HtmlTagDefinition({isVoid: !0}),
        hr: new HtmlTagDefinition({isVoid: !0}),
        br: new HtmlTagDefinition({isVoid: !0}),
        source: new HtmlTagDefinition({isVoid: !0}),
        track: new HtmlTagDefinition({isVoid: !0}),
        wbr: new HtmlTagDefinition({isVoid: !0}),
        p: new HtmlTagDefinition({
          closedByChildren: ["address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"],
          closedByParent: !0
        }),
        thead: new HtmlTagDefinition({closedByChildren: ["tbody", "tfoot"]}),
        tbody: new HtmlTagDefinition({
          closedByChildren: ["tbody", "tfoot"],
          closedByParent: !0
        }),
        tfoot: new HtmlTagDefinition({
          closedByChildren: ["tbody"],
          closedByParent: !0
        }),
        tr: new HtmlTagDefinition({
          closedByChildren: ["tr"],
          requiredParents: ["tbody", "tfoot", "thead"],
          closedByParent: !0
        }),
        td: new HtmlTagDefinition({
          closedByChildren: ["td", "th"],
          closedByParent: !0
        }),
        th: new HtmlTagDefinition({
          closedByChildren: ["td", "th"],
          closedByParent: !0
        }),
        col: new HtmlTagDefinition({
          requiredParents: ["colgroup"],
          isVoid: !0
        }),
        svg: new HtmlTagDefinition({implicitNamespacePrefix: "svg"}),
        math: new HtmlTagDefinition({implicitNamespacePrefix: "math"}),
        li: new HtmlTagDefinition({
          closedByChildren: ["li"],
          closedByParent: !0
        }),
        dt: new HtmlTagDefinition({closedByChildren: ["dt", "dd"]}),
        dd: new HtmlTagDefinition({
          closedByChildren: ["dt", "dd"],
          closedByParent: !0
        }),
        rb: new HtmlTagDefinition({
          closedByChildren: ["rb", "rt", "rtc", "rp"],
          closedByParent: !0
        }),
        rt: new HtmlTagDefinition({
          closedByChildren: ["rb", "rt", "rtc", "rp"],
          closedByParent: !0
        }),
        rtc: new HtmlTagDefinition({
          closedByChildren: ["rb", "rtc", "rp"],
          closedByParent: !0
        }),
        rp: new HtmlTagDefinition({
          closedByChildren: ["rb", "rt", "rtc", "rp"],
          closedByParent: !0
        }),
        optgroup: new HtmlTagDefinition({
          closedByChildren: ["optgroup"],
          closedByParent: !0
        }),
        option: new HtmlTagDefinition({
          closedByChildren: ["option", "optgroup"],
          closedByParent: !0
        }),
        pre: new HtmlTagDefinition({ignoreFirstLf: !0}),
        listing: new HtmlTagDefinition({ignoreFirstLf: !0}),
        style: new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
        script: new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
        title: new HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT}),
        textarea: new HtmlTagDefinition({
          contentType: TagContentType.ESCAPABLE_RAW_TEXT,
          ignoreFirstLf: !0
        })
      },
      _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition,
      TAG_TO_PLACEHOLDER_NAMES = {
        A: "LINK",
        B: "BOLD_TEXT",
        BR: "LINE_BREAK",
        EM: "EMPHASISED_TEXT",
        H1: "HEADING_LEVEL1",
        H2: "HEADING_LEVEL2",
        H3: "HEADING_LEVEL3",
        H4: "HEADING_LEVEL4",
        H5: "HEADING_LEVEL5",
        H6: "HEADING_LEVEL6",
        HR: "HORIZONTAL_RULE",
        I: "ITALIC_TEXT",
        LI: "LIST_ITEM",
        LINK: "MEDIA_LINK",
        OL: "ORDERED_LIST",
        P: "PARAGRAPH",
        Q: "QUOTATION",
        S: "STRIKETHROUGH_TEXT",
        SMALL: "SMALL_TEXT",
        SUB: "SUBSTRIPT",
        SUP: "SUPERSCRIPT",
        TBODY: "TABLE_BODY",
        TD: "TABLE_CELL",
        TFOOT: "TABLE_FOOTER",
        TH: "TABLE_HEADER_CELL",
        THEAD: "TABLE_HEADER",
        TR: "TABLE_ROW",
        TT: "MONOSPACED_TEXT",
        U: "UNDERLINED_TEXT",
        UL: "UNORDERED_LIST"
      },
      PlaceholderRegistry = function() {
        function PlaceholderRegistry() {
          this._placeHolderNameCounts = {}, this._signatureToName = {};
        }
        return PlaceholderRegistry.prototype.getStartTagPlaceholderName = function(tag, attrs, isVoid) {
          var signature = this._hashTag(tag, attrs, isVoid);
          if (this._signatureToName[signature])
            return this._signatureToName[signature];
          var upperTag = tag.toUpperCase(),
              baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag,
              name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
          return this._signatureToName[signature] = name, name;
        }, PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function(tag) {
          var signature = this._hashClosingTag(tag);
          if (this._signatureToName[signature])
            return this._signatureToName[signature];
          var upperTag = tag.toUpperCase(),
              baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag,
              name = this._generateUniqueName("CLOSE_" + baseName);
          return this._signatureToName[signature] = name, name;
        }, PlaceholderRegistry.prototype.getPlaceholderName = function(name, content) {
          var upperName = name.toUpperCase(),
              signature = "PH: " + upperName + "=" + content;
          if (this._signatureToName[signature])
            return this._signatureToName[signature];
          var uniqueName = this._generateUniqueName(upperName);
          return this._signatureToName[signature] = uniqueName, uniqueName;
        }, PlaceholderRegistry.prototype._hashTag = function(tag, attrs, isVoid) {
          var start = "<" + tag,
              strAttrs = Object.keys(attrs).sort().map(function(name) {
                return " " + name + "=" + attrs[name];
              }).join(""),
              end = isVoid ? "/>" : "></" + tag + ">";
          return start + strAttrs + end;
        }, PlaceholderRegistry.prototype._hashClosingTag = function(tag) {
          return this._hashTag("/" + tag, {}, !1);
        }, PlaceholderRegistry.prototype._generateUniqueName = function(base) {
          var name = base,
              next = this._placeHolderNameCounts[name];
          return next ? (name += "_" + next, next++) : next = 1, this._placeHolderNameCounts[base] = next, name;
        }, PlaceholderRegistry;
      }(),
      _expParser = new Parser(new Lexer),
      _I18nVisitor = function() {
        function _I18nVisitor(_expressionParser, _interpolationConfig) {
          this._expressionParser = _expressionParser, this._interpolationConfig = _interpolationConfig;
        }
        return _I18nVisitor.prototype.toI18nMessage = function(nodes, meaning, description) {
          this._isIcu = 1 == nodes.length && nodes[0] instanceof Expansion, this._icuDepth = 0, this._placeholderRegistry = new PlaceholderRegistry, this._placeholderToContent = {};
          var i18nodes = visitAll(this, nodes, {});
          return new Message(i18nodes, this._placeholderToContent, meaning, description);
        }, _I18nVisitor.prototype.visitElement = function(el, context) {
          var children = visitAll(this, el.children),
              attrs = {};
          el.attrs.forEach(function(attr) {
            attrs[attr.name] = attr.value;
          });
          var isVoid = getHtmlTagDefinition(el.name).isVoid,
              startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
          this._placeholderToContent[startPhName] = el.sourceSpan.toString();
          var closePhName = "";
          return isVoid || (closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name), this._placeholderToContent[closePhName] = "</" + el.name + ">"), new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
        }, _I18nVisitor.prototype.visitAttribute = function(attribute, context) {
          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
        }, _I18nVisitor.prototype.visitText = function(text, context) {
          return this._visitTextWithInterpolation(text.value, text.sourceSpan);
        }, _I18nVisitor.prototype.visitComment = function(comment, context) {
          return null;
        }, _I18nVisitor.prototype.visitExpansion = function(icu, context) {
          var _this = this;
          this._icuDepth++;
          var i18nIcuCases = {},
              i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
          if (icu.cases.forEach(function(caze) {
            i18nIcuCases[caze.value] = new Container(caze.expression.map(function(node) {
              return node.visit(_this, {});
            }), caze.expSourceSpan);
          }), this._icuDepth--, this._isIcu || this._icuDepth > 0)
            return i18nIcu;
          var phName = this._placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString());
          return this._placeholderToContent[phName] = icu.sourceSpan.toString(), new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
        }, _I18nVisitor.prototype.visitExpansionCase = function(icuCase, context) {
          throw new Error("Unreachable code");
        }, _I18nVisitor.prototype._visitTextWithInterpolation = function(text, sourceSpan) {
          var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
          if (!splitInterpolation)
            return new Text$1(text, sourceSpan);
          for (var nodes = [],
              container = new Container(nodes, sourceSpan),
              _a = this._interpolationConfig,
              sDelimiter = _a.start,
              eDelimiter = _a.end,
              i = 0; i < splitInterpolation.strings.length - 1; i++) {
            var expression = splitInterpolation.expressions[i],
                baseName = _extractPlaceholderName(expression) || "INTERPOLATION",
                phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
            splitInterpolation.strings[i].length && nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan)), nodes.push(new Placeholder(expression, phName, sourceSpan)), this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
          }
          var lastStringIdx = splitInterpolation.strings.length - 1;
          return splitInterpolation.strings[lastStringIdx].length && nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan)), container;
        }, _I18nVisitor;
      }(),
      _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g,
      ParseLocation = function() {
        function ParseLocation(file, offset, line, col) {
          this.file = file, this.offset = offset, this.line = line, this.col = col;
        }
        return ParseLocation.prototype.toString = function() {
          return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
        }, ParseLocation;
      }(),
      ParseSourceFile = function() {
        function ParseSourceFile(content, url) {
          this.content = content, this.url = url;
        }
        return ParseSourceFile;
      }(),
      ParseSourceSpan = function() {
        function ParseSourceSpan(start, end, details) {
          void 0 === details && (details = null), this.start = start, this.end = end, this.details = details;
        }
        return ParseSourceSpan.prototype.toString = function() {
          return this.start.file.content.substring(this.start.offset, this.end.offset);
        }, ParseSourceSpan;
      }();
  !function(ParseErrorLevel) {
    ParseErrorLevel[ParseErrorLevel.WARNING = 0] = "WARNING", ParseErrorLevel[ParseErrorLevel.FATAL = 1] = "FATAL";
  }(ParseErrorLevel || (ParseErrorLevel = {}));
  var _VisitorMode,
      ParseError = function() {
        function ParseError(span, msg, level) {
          void 0 === level && (level = ParseErrorLevel.FATAL), this.span = span, this.msg = msg, this.level = level;
        }
        return ParseError.prototype.toString = function() {
          var source = this.span.start.file.content,
              ctxStart = this.span.start.offset,
              contextStr = "",
              details = "";
          if (isPresent(ctxStart)) {
            ctxStart > source.length - 1 && (ctxStart = source.length - 1);
            for (var ctxEnd = ctxStart,
                ctxLen = 0,
                ctxLines = 0; ctxLen < 100 && ctxStart > 0 && (ctxStart--, ctxLen++, "\n" != source[ctxStart] || 3 != ++ctxLines); )
              ;
            for (ctxLen = 0, ctxLines = 0; ctxLen < 100 && ctxEnd < source.length - 1 && (ctxEnd++, ctxLen++, "\n" != source[ctxEnd] || 3 != ++ctxLines); )
              ;
            var context = source.substring(ctxStart, this.span.start.offset) + "[ERROR ->]" + source.substring(this.span.start.offset, ctxEnd + 1);
            contextStr = ' ("' + context + '")';
          }
          return this.span.details && (details = ", " + this.span.details), "" + this.msg + contextStr + ": " + this.span.start + details;
        }, ParseError;
      }(),
      I18nError = function(_super) {
        function I18nError(span, msg) {
          _super.call(this, span, msg);
        }
        return __extends(I18nError, _super), I18nError;
      }(ParseError),
      _I18N_ATTR = "i18n",
      _I18N_ATTR_PREFIX = "i18n-",
      _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/,
      ExtractionResult = function() {
        function ExtractionResult(messages, errors) {
          this.messages = messages, this.errors = errors;
        }
        return ExtractionResult;
      }();
  !function(_VisitorMode) {
    _VisitorMode[_VisitorMode.Extract = 0] = "Extract", _VisitorMode[_VisitorMode.Merge = 1] = "Merge";
  }(_VisitorMode || (_VisitorMode = {}));
  var TokenType$1,
      _Visitor = function() {
        function _Visitor(_implicitTags, _implicitAttrs) {
          this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs, this._inI18nNode = !1, this._depth = 0, this._inIcu = !1;
        }
        return _Visitor.prototype.extract = function(nodes, interpolationConfig) {
          var _this = this;
          return this._init(_VisitorMode.Extract, interpolationConfig), nodes.forEach(function(node) {
            return node.visit(_this, null);
          }), this._inI18nBlock && this._reportError(nodes[nodes.length - 1], "Unclosed block"), new ExtractionResult(this._messages, this._errors);
        }, _Visitor.prototype.merge = function(nodes, translations, interpolationConfig) {
          this._init(_VisitorMode.Merge, interpolationConfig), this._translations = translations;
          var wrapper = new Element("wrapper", [], nodes, null, null, null),
              translatedNode = wrapper.visit(this, null);
          return this._inI18nBlock && this._reportError(nodes[nodes.length - 1], "Unclosed block"), translatedNode.children;
        }, _Visitor.prototype.visitExpansionCase = function(icuCase, context) {
          var expression = visitAll(this, icuCase.expression, context);
          if (this._mode === _VisitorMode.Merge)
            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
        }, _Visitor.prototype.visitExpansion = function(icu, context) {
          this._mayBeAddBlockChildren(icu);
          var wasInIcu = this._inIcu;
          this._inIcu || (this._isInTranslatableSection && this._addMessage([icu]), this._inIcu = !0);
          var cases = visitAll(this, icu.cases, context);
          return this._mode === _VisitorMode.Merge && (icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan)), this._inIcu = wasInIcu, icu;
        }, _Visitor.prototype.visitComment = function(comment, context) {
          var isOpening = _isOpeningComment(comment);
          if (isOpening && this._isInTranslatableSection)
            return void this._reportError(comment, "Could not start a block inside a translatable section");
          var isClosing = _isClosingComment(comment);
          if (isClosing && !this._inI18nBlock)
            return void this._reportError(comment, "Trying to close an unopened block");
          if (!this._inI18nNode && !this._inIcu)
            if (this._inI18nBlock) {
              if (isClosing) {
                if (this._depth == this._blockStartDepth) {
                  this._closeTranslatableSection(comment, this._blockChildren), this._inI18nBlock = !1;
                  var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
                  return this._translateMessage(comment, message);
                }
                return void this._reportError(comment, "I18N blocks should not cross element boundaries");
              }
            } else
              isOpening && (this._inI18nBlock = !0, this._blockStartDepth = this._depth, this._blockChildren = [], this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, "").trim(), this._openTranslatableSection(comment));
        }, _Visitor.prototype.visitText = function(text, context) {
          return this._isInTranslatableSection && this._mayBeAddBlockChildren(text), text;
        }, _Visitor.prototype.visitElement = function(el, context) {
          var _this = this;
          this._mayBeAddBlockChildren(el), this._depth++;
          var childNodes,
              wasInI18nNode = this._inI18nNode,
              i18nAttr = _getI18nAttr(el),
              isImplicitI18n = this._implicitTags.some(function(tag) {
                return el.name === tag;
              });
          if (this._isInTranslatableSection || this._inIcu)
            (i18nAttr || isImplicitI18n) && this._reportError(el, "Could not mark an element as translatable inside a translatable section"), this._mode == _VisitorMode.Extract && visitAll(this, el.children), this._mode == _VisitorMode.Merge && (childNodes = [], el.children.forEach(function(child) {
              var visited = child.visit(_this, context);
              visited && !_this._isInTranslatableSection && (childNodes = childNodes.concat(visited));
            }));
          else {
            if (i18nAttr) {
              this._inI18nNode = !0;
              var message = this._addMessage(el.children, i18nAttr.value);
              childNodes = this._translateMessage(el, message);
            } else if (isImplicitI18n) {
              this._inI18nNode = !0;
              var message = this._addMessage(el.children);
              childNodes = this._translateMessage(el, message);
            }
            if (this._mode == _VisitorMode.Extract) {
              var isTranslatable = i18nAttr || isImplicitI18n;
              isTranslatable && this._openTranslatableSection(el), visitAll(this, el.children), isTranslatable && this._closeTranslatableSection(el, el.children);
            }
            this._mode !== _VisitorMode.Merge || i18nAttr || isImplicitI18n || (childNodes = [], el.children.forEach(function(child) {
              var visited = child.visit(_this, context);
              visited && !_this._isInTranslatableSection && (childNodes = childNodes.concat(visited));
            }));
          }
          if (this._visitAttributesOf(el), this._depth--, this._inI18nNode = wasInI18nNode, this._mode === _VisitorMode.Merge) {
            var translatedAttrs = this._translateAttributes(el);
            return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
          }
        }, _Visitor.prototype.visitAttribute = function(attribute, context) {
          throw new Error("unreachable code");
        }, _Visitor.prototype._init = function(mode, interpolationConfig) {
          this._mode = mode, this._inI18nBlock = !1, this._inI18nNode = !1, this._depth = 0, this._inIcu = !1, this._msgCountAtSectionStart = void 0, this._errors = [], this._messages = [], this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
        }, _Visitor.prototype._visitAttributesOf = function(el) {
          var _this = this,
              explicitAttrNameToValue = {},
              implicitAttrNames = this._implicitAttrs[el.name] || [];
          el.attrs.filter(function(attr) {
            return attr.name.startsWith(_I18N_ATTR_PREFIX);
          }).forEach(function(attr) {
            return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
          }), el.attrs.forEach(function(attr) {
            attr.name in explicitAttrNameToValue ? _this._addMessage([attr], explicitAttrNameToValue[attr.name]) : implicitAttrNames.some(function(name) {
              return attr.name === name;
            }) && _this._addMessage([attr]);
          });
        }, _Visitor.prototype._addMessage = function(ast, meaningAndDesc) {
          if (!(0 == ast.length || 1 == ast.length && ast[0] instanceof Attribute && !ast[0].value)) {
            var _a = _splitMeaningAndDesc(meaningAndDesc),
                meaning = _a[0],
                description = _a[1],
                message = this._createI18nMessage(ast, meaning, description);
            return this._messages.push(message), message;
          }
        }, _Visitor.prototype._translateMessage = function(el, message) {
          if (message && this._mode === _VisitorMode.Merge) {
            var id = digestMessage(message),
                nodes = this._translations.get(id);
            if (nodes)
              return nodes;
            this._reportError(el, 'Translation unavailable for message id="' + id + '"');
          }
          return [];
        }, _Visitor.prototype._translateAttributes = function(el) {
          var _this = this,
              attributes = el.attrs,
              i18nAttributeMeanings = {};
          attributes.forEach(function(attr) {
            attr.name.startsWith(_I18N_ATTR_PREFIX) && (i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0]);
          });
          var translatedAttributes = [];
          return attributes.forEach(function(attr) {
            if (attr.name !== _I18N_ATTR && !attr.name.startsWith(_I18N_ATTR_PREFIX))
              if (i18nAttributeMeanings.hasOwnProperty(attr.name)) {
                var meaning = i18nAttributeMeanings[attr.name],
                    message = _this._createI18nMessage([attr], meaning, ""),
                    id = digestMessage(message),
                    nodes = _this._translations.get(id);
                if (nodes)
                  if (nodes[0] instanceof Text) {
                    var value = nodes[0].value;
                    translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan));
                  } else
                    _this._reportError(el, 'Unexpected translation for attribute "' + attr.name + '" (id="' + id + '")');
                else
                  _this._reportError(el, 'Translation unavailable for attribute "' + attr.name + '" (id="' + id + '")');
              } else
                translatedAttributes.push(attr);
          }), translatedAttributes;
        }, _Visitor.prototype._mayBeAddBlockChildren = function(node) {
          this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth && this._blockChildren.push(node);
        }, _Visitor.prototype._openTranslatableSection = function(node) {
          this._isInTranslatableSection ? this._reportError(node, "Unexpected section start") : this._msgCountAtSectionStart = this._messages.length;
        }, Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
          get: function() {
            return void 0 !== this._msgCountAtSectionStart;
          },
          enumerable: !0,
          configurable: !0
        }), _Visitor.prototype._closeTranslatableSection = function(node, directChildren) {
          if (!this._isInTranslatableSection)
            return void this._reportError(node, "Unexpected section end");
          var startIndex = this._msgCountAtSectionStart,
              significantChildren = directChildren.reduce(function(count, node) {
                return count + (node instanceof Comment ? 0 : 1);
              }, 0);
          if (1 == significantChildren)
            for (var i = this._messages.length - 1; i >= startIndex; i--) {
              var ast = this._messages[i].nodes;
              if (!(1 == ast.length && ast[0] instanceof Text$1)) {
                this._messages.splice(i, 1);
                break;
              }
            }
          this._msgCountAtSectionStart = void 0;
        }, _Visitor.prototype._reportError = function(node, msg) {
          this._errors.push(new I18nError(node.sourceSpan, msg));
        }, _Visitor;
      }(),
      MessageBundle = function() {
        function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
          this._htmlParser = _htmlParser, this._implicitTags = _implicitTags, this._implicitAttrs = _implicitAttrs, this._messageMap = {};
        }
        return MessageBundle.prototype.updateFromTemplate = function(html, url, interpolationConfig) {
          var _this = this,
              htmlParserResult = this._htmlParser.parse(html, url, !0, interpolationConfig);
          if (htmlParserResult.errors.length)
            return htmlParserResult.errors;
          var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
          return i18nParserResult.errors.length ? i18nParserResult.errors : void i18nParserResult.messages.forEach(function(message) {
            _this._messageMap[digestMessage(message)] = message;
          });
        }, MessageBundle.prototype.write = function(serializer) {
          return serializer.write(this._messageMap);
        }, MessageBundle;
      }(),
      _Visitor$2 = function() {
        function _Visitor$2() {}
        return _Visitor$2.prototype.visitTag = function(tag) {
          var _this = this,
              strAttrs = this._serializeAttributes(tag.attrs);
          if (0 == tag.children.length)
            return "<" + tag.name + strAttrs + "/>";
          var strChildren = tag.children.map(function(node) {
            return node.visit(_this);
          });
          return "<" + tag.name + strAttrs + ">" + strChildren.join("") + "</" + tag.name + ">";
        }, _Visitor$2.prototype.visitText = function(text) {
          return text.value;
        }, _Visitor$2.prototype.visitDeclaration = function(decl) {
          return "<? xml" + this._serializeAttributes(decl.attrs) + " ?>";
        }, _Visitor$2.prototype._serializeAttributes = function(attrs) {
          var strAttrs = Object.keys(attrs).map(function(name) {
            return name + '="' + attrs[name] + '"';
          }).join(" ");
          return strAttrs.length > 0 ? " " + strAttrs : "";
        }, _Visitor$2.prototype.visitDoctype = function(doctype) {
          return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
        }, _Visitor$2;
      }(),
      _visitor = new _Visitor$2,
      Declaration = function() {
        function Declaration(unescapedAttrs) {
          var _this = this;
          this.attrs = {}, Object.keys(unescapedAttrs).forEach(function(k) {
            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
        }
        return Declaration.prototype.visit = function(visitor) {
          return visitor.visitDeclaration(this);
        }, Declaration;
      }(),
      Doctype = function() {
        function Doctype(rootTag, dtd) {
          this.rootTag = rootTag, this.dtd = dtd;
        }
        return Doctype.prototype.visit = function(visitor) {
          return visitor.visitDoctype(this);
        }, Doctype;
      }(),
      Tag = function() {
        function Tag(name, unescapedAttrs, children) {
          var _this = this;
          void 0 === unescapedAttrs && (unescapedAttrs = {}), void 0 === children && (children = []), this.name = name, this.children = children, this.attrs = {}, Object.keys(unescapedAttrs).forEach(function(k) {
            _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
          });
        }
        return Tag.prototype.visit = function(visitor) {
          return visitor.visitTag(this);
        }, Tag;
      }(),
      Text$2 = function() {
        function Text$2(unescapedValue) {
          this.value = _escapeXml(unescapedValue);
        }
        return Text$2.prototype.visit = function(visitor) {
          return visitor.visitText(this);
        }, Text$2;
      }(),
      _ESCAPED_CHARS = [[/&/g, "&amp;"], [/"/g, "&quot;"], [/'/g, "&apos;"], [/</g, "&lt;"], [/>/g, "&gt;"]],
      _MESSAGES_TAG = "messagebundle",
      _MESSAGE_TAG = "msg",
      _PLACEHOLDER_TAG = "ph",
      _EXEMPLE_TAG = "ex",
      _DOCTYPE = '<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) "default">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>',
      Xmb = function() {
        function Xmb() {}
        return Xmb.prototype.write = function(messageMap) {
          var visitor = new _Visitor$1,
              rootNode = new Tag(_MESSAGES_TAG);
          return rootNode.children.push(new Text$2("\n")), Object.keys(messageMap).forEach(function(id) {
            var message = messageMap[id],
                attrs = {id: id};
            message.description && (attrs.desc = message.description), message.meaning && (attrs.meaning = message.meaning), rootNode.children.push(new Text$2("  "), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)), new Text$2("\n"));
          }), serialize([new Declaration({
            version: "1.0",
            encoding: "UTF-8"
          }), new Text$2("\n"), new Doctype(_MESSAGES_TAG, _DOCTYPE), new Text$2("\n"), rootNode]);
        }, Xmb.prototype.load = function(content, url, placeholders) {
          throw new Error("Unsupported");
        }, Xmb;
      }(),
      _Visitor$1 = function() {
        function _Visitor$1() {}
        return _Visitor$1.prototype.visitText = function(text, context) {
          return [new Text$2(text.value)];
        }, _Visitor$1.prototype.visitContainer = function(container, context) {
          var _this = this,
              nodes = [];
          return container.children.forEach(function(node) {
            return nodes.push.apply(nodes, node.visit(_this));
          }), nodes;
        }, _Visitor$1.prototype.visitIcu = function(icu, context) {
          var _this = this,
              nodes = [new Text$2("{" + icu.expression + ", " + icu.type + ", ")];
          return Object.keys(icu.cases).forEach(function(c) {
            nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("}")]));
          }), nodes.push(new Text$2("}")), nodes;
        }, _Visitor$1.prototype.visitTagPlaceholder = function(ph, context) {
          var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]),
              startTagPh = new Tag(_PLACEHOLDER_TAG, {name: ph.startName}, [startEx]);
          if (ph.isVoid)
            return [startTagPh];
          var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]),
              closeTagPh = new Tag(_PLACEHOLDER_TAG, {name: ph.closeName}, [closeEx]);
          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
        }, _Visitor$1.prototype.visitPlaceholder = function(ph, context) {
          return [new Tag(_PLACEHOLDER_TAG, {name: ph.name})];
        }, _Visitor$1.prototype.visitIcuPlaceholder = function(ph, context) {
          return [new Tag(_PLACEHOLDER_TAG, {name: ph.name})];
        }, _Visitor$1.prototype.serialize = function(nodes) {
          var _this = this;
          return ListWrapper.flatten(nodes.map(function(node) {
            return node.visit(_this);
          }));
        }, _Visitor$1;
      }();
  !function(TokenType) {
    TokenType[TokenType.TAG_OPEN_START = 0] = "TAG_OPEN_START", TokenType[TokenType.TAG_OPEN_END = 1] = "TAG_OPEN_END", TokenType[TokenType.TAG_OPEN_END_VOID = 2] = "TAG_OPEN_END_VOID", TokenType[TokenType.TAG_CLOSE = 3] = "TAG_CLOSE", TokenType[TokenType.TEXT = 4] = "TEXT", TokenType[TokenType.ESCAPABLE_RAW_TEXT = 5] = "ESCAPABLE_RAW_TEXT", TokenType[TokenType.RAW_TEXT = 6] = "RAW_TEXT", TokenType[TokenType.COMMENT_START = 7] = "COMMENT_START", TokenType[TokenType.COMMENT_END = 8] = "COMMENT_END", TokenType[TokenType.CDATA_START = 9] = "CDATA_START", TokenType[TokenType.CDATA_END = 10] = "CDATA_END", TokenType[TokenType.ATTR_NAME = 11] = "ATTR_NAME", TokenType[TokenType.ATTR_VALUE = 12] = "ATTR_VALUE", TokenType[TokenType.DOC_TYPE = 13] = "DOC_TYPE", TokenType[TokenType.EXPANSION_FORM_START = 14] = "EXPANSION_FORM_START", TokenType[TokenType.EXPANSION_CASE_VALUE = 15] = "EXPANSION_CASE_VALUE", TokenType[TokenType.EXPANSION_CASE_EXP_START = 16] = "EXPANSION_CASE_EXP_START", TokenType[TokenType.EXPANSION_CASE_EXP_END = 17] = "EXPANSION_CASE_EXP_END", TokenType[TokenType.EXPANSION_FORM_END = 18] = "EXPANSION_FORM_END", TokenType[TokenType.EOF = 19] = "EOF";
  }(TokenType$1 || (TokenType$1 = {}));
  var Token$1 = function() {
    function Token$1(type, parts, sourceSpan) {
      this.type = type, this.parts = parts, this.sourceSpan = sourceSpan;
    }
    return Token$1;
  }(),
      TokenError = function(_super) {
        function TokenError(errorMsg, tokenType, span) {
          _super.call(this, span, errorMsg), this.tokenType = tokenType;
        }
        return __extends(TokenError, _super), TokenError;
      }(ParseError),
      TokenizeResult = function() {
        function TokenizeResult(tokens, errors) {
          this.tokens = tokens, this.errors = errors;
        }
        return TokenizeResult;
      }(),
      _CR_OR_CRLF_REGEXP = /\r\n?/g,
      _ControlFlowError = function() {
        function _ControlFlowError(error) {
          this.error = error;
        }
        return _ControlFlowError;
      }(),
      _Tokenizer = function() {
        function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
          void 0 === _interpolationConfig && (_interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), this._file = _file, this._getTagDefinition = _getTagDefinition, this._tokenizeIcu = _tokenizeIcu, this._interpolationConfig = _interpolationConfig, this._peek = -1, this._nextPeek = -1, this._index = -1, this._line = 0, this._column = -1, this._expansionCaseStack = [], this._inInterpolation = !1, this.tokens = [], this.errors = [], this._input = _file.content, this._length = _file.content.length, this._advance();
        }
        return _Tokenizer.prototype._processCarriageReturns = function(content) {
          return content.replace(_CR_OR_CRLF_REGEXP, "\n");
        }, _Tokenizer.prototype.tokenize = function() {
          for (; this._peek !== $EOF; ) {
            var start = this._getLocation();
            try {
              this._attemptCharCode($LT) ? this._attemptCharCode($BANG) ? this._attemptCharCode($LBRACKET) ? this._consumeCdata(start) : this._attemptCharCode($MINUS) ? this._consumeComment(start) : this._consumeDocType(start) : this._attemptCharCode($SLASH) ? this._consumeTagClose(start) : this._consumeTagOpen(start) : this._tokenizeIcu && this._tokenizeExpansionForm() || this._consumeText();
            } catch (e) {
              if (!(e instanceof _ControlFlowError))
                throw e;
              this.errors.push(e.error);
            }
          }
          return this._beginToken(TokenType$1.EOF), this._endToken([]), new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
        }, _Tokenizer.prototype._tokenizeExpansionForm = function() {
          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig))
            return this._consumeExpansionFormStart(), !0;
          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm())
            return this._consumeExpansionCaseStart(), !0;
          if (this._peek === $RBRACE) {
            if (this._isInExpansionCase())
              return this._consumeExpansionCaseEnd(), !0;
            if (this._isInExpansionForm())
              return this._consumeExpansionFormEnd(), !0;
          }
          return !1;
        }, _Tokenizer.prototype._getLocation = function() {
          return new ParseLocation(this._file, this._index, this._line, this._column);
        }, _Tokenizer.prototype._getSpan = function(start, end) {
          return void 0 === start && (start = this._getLocation()), void 0 === end && (end = this._getLocation()), new ParseSourceSpan(start, end);
        }, _Tokenizer.prototype._beginToken = function(type, start) {
          void 0 === start && (start = this._getLocation()), this._currentTokenStart = start, this._currentTokenType = type;
        }, _Tokenizer.prototype._endToken = function(parts, end) {
          void 0 === end && (end = this._getLocation());
          var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
          return this.tokens.push(token), this._currentTokenStart = null, this._currentTokenType = null, token;
        }, _Tokenizer.prototype._createError = function(msg, span) {
          this._isInExpansionForm() && (msg += ' (Do you have an unescaped "{" in your template? Use "{{ \'{\' }}") to escape it.)');
          var error = new TokenError(msg, this._currentTokenType, span);
          return this._currentTokenStart = null, this._currentTokenType = null, new _ControlFlowError(error);
        }, _Tokenizer.prototype._advance = function() {
          if (this._index >= this._length)
            throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
          this._peek === $LF ? (this._line++, this._column = 0) : this._peek !== $LF && this._peek !== $CR && this._column++, this._index++, this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index), this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
        }, _Tokenizer.prototype._attemptCharCode = function(charCode) {
          return this._peek === charCode && (this._advance(), !0);
        }, _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
          return !!compareCharCodeCaseInsensitive(this._peek, charCode) && (this._advance(), !0);
        }, _Tokenizer.prototype._requireCharCode = function(charCode) {
          var location = this._getLocation();
          if (!this._attemptCharCode(charCode))
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
        }, _Tokenizer.prototype._attemptStr = function(chars) {
          var len = chars.length;
          if (this._index + len > this._length)
            return !1;
          for (var initialPosition = this._savePosition(),
              i = 0; i < len; i++)
            if (!this._attemptCharCode(chars.charCodeAt(i)))
              return this._restorePosition(initialPosition), !1;
          return !0;
        }, _Tokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
          for (var i = 0; i < chars.length; i++)
            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i)))
              return !1;
          return !0;
        }, _Tokenizer.prototype._requireStr = function(chars) {
          var location = this._getLocation();
          if (!this._attemptStr(chars))
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
        }, _Tokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
          for (; !predicate(this._peek); )
            this._advance();
        }, _Tokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
          var start = this._getLocation();
          if (this._attemptCharCodeUntilFn(predicate), this._index - start.offset < len)
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
        }, _Tokenizer.prototype._attemptUntilChar = function(char) {
          for (; this._peek !== char; )
            this._advance();
        }, _Tokenizer.prototype._readChar = function(decodeEntities) {
          if (decodeEntities && this._peek === $AMPERSAND)
            return this._decodeEntity();
          var index = this._index;
          return this._advance(), this._input[index];
        }, _Tokenizer.prototype._decodeEntity = function() {
          var start = this._getLocation();
          if (this._advance(), !this._attemptCharCode($HASH)) {
            var startPosition = this._savePosition();
            if (this._attemptCharCodeUntilFn(isNamedEntityEnd), this._peek != $SEMICOLON)
              return this._restorePosition(startPosition), "&";
            this._advance();
            var name_1 = this._input.substring(start.offset + 1, this._index - 1),
                char = NAMED_ENTITIES[name_1];
            if (!char)
              throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
            return char;
          }
          var isHex = this._attemptCharCode($x) || this._attemptCharCode($X),
              numberStart = this._getLocation().offset;
          if (this._attemptCharCodeUntilFn(isDigitEntityEnd), this._peek != $SEMICOLON)
            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
          this._advance();
          var strNum = this._input.substring(numberStart, this._index - 1);
          try {
            var charCode = parseInt(strNum, isHex ? 16 : 10);
            return String.fromCharCode(charCode);
          } catch (e) {
            var entity = this._input.substring(start.offset + 1, this._index - 1);
            throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
          }
        }, _Tokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
          var tagCloseStart,
              textStart = this._getLocation();
          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
          for (var parts = []; ; ) {
            if (tagCloseStart = this._getLocation(), this._attemptCharCode(firstCharOfEnd) && attemptEndRest())
              break;
            for (this._index > tagCloseStart.offset && parts.push(this._input.substring(tagCloseStart.offset, this._index)); this._peek !== firstCharOfEnd; )
              parts.push(this._readChar(decodeEntities));
          }
          return this._endToken([this._processCarriageReturns(parts.join(""))], tagCloseStart);
        }, _Tokenizer.prototype._consumeComment = function(start) {
          var _this = this;
          this._beginToken(TokenType$1.COMMENT_START, start), this._requireCharCode($MINUS), this._endToken([]);
          var textToken = this._consumeRawText(!1, $MINUS, function() {
            return _this._attemptStr("->");
          });
          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end), this._endToken([]);
        }, _Tokenizer.prototype._consumeCdata = function(start) {
          var _this = this;
          this._beginToken(TokenType$1.CDATA_START, start), this._requireStr("CDATA["), this._endToken([]);
          var textToken = this._consumeRawText(!1, $RBRACKET, function() {
            return _this._attemptStr("]>");
          });
          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end), this._endToken([]);
        }, _Tokenizer.prototype._consumeDocType = function(start) {
          this._beginToken(TokenType$1.DOC_TYPE, start), this._attemptUntilChar($GT), this._advance(), this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
        }, _Tokenizer.prototype._consumePrefixAndName = function() {
          for (var nameOrPrefixStart = this._index,
              prefix = null; this._peek !== $COLON && !isPrefixEnd(this._peek); )
            this._advance();
          var nameStart;
          this._peek === $COLON ? (this._advance(), prefix = this._input.substring(nameOrPrefixStart, this._index - 1), nameStart = this._index) : nameStart = nameOrPrefixStart, this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
          var name = this._input.substring(nameStart, this._index);
          return [prefix, name];
        }, _Tokenizer.prototype._consumeTagOpen = function(start) {
          var tagName,
              lowercaseTagName,
              savedPos = this._savePosition();
          try {
            if (!isAsciiLetter(this._peek))
              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
            var nameStart = this._index;
            for (this._consumeTagOpenStart(start), tagName = this._input.substring(nameStart, this._index), lowercaseTagName = tagName.toLowerCase(), this._attemptCharCodeUntilFn(isNotWhitespace); this._peek !== $SLASH && this._peek !== $GT; )
              this._consumeAttributeName(), this._attemptCharCodeUntilFn(isNotWhitespace), this._attemptCharCode($EQ) && (this._attemptCharCodeUntilFn(isNotWhitespace), this._consumeAttributeValue()), this._attemptCharCodeUntilFn(isNotWhitespace);
            this._consumeTagOpenEnd();
          } catch (e) {
            if (e instanceof _ControlFlowError)
              return this._restorePosition(savedPos), this._beginToken(TokenType$1.TEXT, start), void this._endToken(["<"]);
            throw e;
          }
          var contentTokenType = this._getTagDefinition(tagName).contentType;
          contentTokenType === TagContentType.RAW_TEXT ? this._consumeRawTextWithTagClose(lowercaseTagName, !1) : contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT && this._consumeRawTextWithTagClose(lowercaseTagName, !0);
        }, _Tokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
          var _this = this,
              textToken = this._consumeRawText(decodeEntities, $LT, function() {
                return !!_this._attemptCharCode($SLASH) && (_this._attemptCharCodeUntilFn(isNotWhitespace), !!_this._attemptStrCaseInsensitive(lowercaseTagName) && (_this._attemptCharCodeUntilFn(isNotWhitespace), _this._attemptCharCode($GT)));
              });
          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end), this._endToken([null, lowercaseTagName]);
        }, _Tokenizer.prototype._consumeTagOpenStart = function(start) {
          this._beginToken(TokenType$1.TAG_OPEN_START, start);
          var parts = this._consumePrefixAndName();
          this._endToken(parts);
        }, _Tokenizer.prototype._consumeAttributeName = function() {
          this._beginToken(TokenType$1.ATTR_NAME);
          var prefixAndName = this._consumePrefixAndName();
          this._endToken(prefixAndName);
        }, _Tokenizer.prototype._consumeAttributeValue = function() {
          this._beginToken(TokenType$1.ATTR_VALUE);
          var value;
          if (this._peek === $SQ || this._peek === $DQ) {
            var quoteChar = this._peek;
            this._advance();
            for (var parts = []; this._peek !== quoteChar; )
              parts.push(this._readChar(!0));
            value = parts.join(""), this._advance();
          } else {
            var valueStart = this._index;
            this._requireCharCodeUntilFn(isNameEnd, 1), value = this._input.substring(valueStart, this._index);
          }
          this._endToken([this._processCarriageReturns(value)]);
        }, _Tokenizer.prototype._consumeTagOpenEnd = function() {
          var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
          this._beginToken(tokenType), this._requireCharCode($GT), this._endToken([]);
        }, _Tokenizer.prototype._consumeTagClose = function(start) {
          this._beginToken(TokenType$1.TAG_CLOSE, start), this._attemptCharCodeUntilFn(isNotWhitespace);
          var prefixAndName = this._consumePrefixAndName();
          this._attemptCharCodeUntilFn(isNotWhitespace), this._requireCharCode($GT), this._endToken(prefixAndName);
        }, _Tokenizer.prototype._consumeExpansionFormStart = function() {
          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([]), this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START), this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
          var condition = this._readUntil($COMMA);
          this._endToken([condition], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
          var type = this._readUntil($COMMA);
          this._endToken([type], this._getLocation()), this._requireCharCode($COMMA), this._attemptCharCodeUntilFn(isNotWhitespace);
        }, _Tokenizer.prototype._consumeExpansionCaseStart = function() {
          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
          var value = this._readUntil($LBRACE).trim();
          this._endToken([value], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation()), this._requireCharCode($LBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
        }, _Tokenizer.prototype._consumeExpansionCaseEnd = function() {
          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([], this._getLocation()), this._attemptCharCodeUntilFn(isNotWhitespace), this._expansionCaseStack.pop();
        }, _Tokenizer.prototype._consumeExpansionFormEnd = function() {
          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation()), this._requireCharCode($RBRACE), this._endToken([]), this._expansionCaseStack.pop();
        }, _Tokenizer.prototype._consumeText = function() {
          var start = this._getLocation();
          this._beginToken(TokenType$1.TEXT, start);
          var parts = [];
          do
            this._interpolationConfig && this._attemptStr(this._interpolationConfig.start) ? (parts.push(this._interpolationConfig.start), this._inInterpolation = !0) : this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) && this._inInterpolation ? (parts.push(this._interpolationConfig.end), this._inInterpolation = !1) : parts.push(this._readChar(!0));
 while (!this._isTextEnd());
          this._endToken([this._processCarriageReturns(parts.join(""))]);
        }, _Tokenizer.prototype._isTextEnd = function() {
          if (this._peek === $LT || this._peek === $EOF)
            return !0;
          if (this._tokenizeIcu && !this._inInterpolation) {
            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig))
              return !0;
            if (this._peek === $RBRACE && this._isInExpansionCase())
              return !0;
          }
          return !1;
        }, _Tokenizer.prototype._savePosition = function() {
          return [this._peek, this._index, this._column, this._line, this.tokens.length];
        }, _Tokenizer.prototype._readUntil = function(char) {
          var start = this._index;
          return this._attemptUntilChar(char), this._input.substring(start, this._index);
        }, _Tokenizer.prototype._restorePosition = function(position) {
          this._peek = position[0], this._index = position[1], this._column = position[2], this._line = position[3];
          var nbTokens = position[4];
          nbTokens < this.tokens.length && (this.tokens = this.tokens.slice(0, nbTokens));
        }, _Tokenizer.prototype._isInExpansionCase = function() {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
        }, _Tokenizer.prototype._isInExpansionForm = function() {
          return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
        }, _Tokenizer;
      }(),
      TreeError = function(_super) {
        function TreeError(elementName, span, msg) {
          _super.call(this, span, msg), this.elementName = elementName;
        }
        return __extends(TreeError, _super), TreeError.create = function(elementName, span, msg) {
          return new TreeError(elementName, span, msg);
        }, TreeError;
      }(ParseError),
      ParseTreeResult = function() {
        function ParseTreeResult(rootNodes, errors) {
          this.rootNodes = rootNodes, this.errors = errors;
        }
        return ParseTreeResult;
      }(),
      Parser$1 = function() {
        function Parser$1(_getTagDefinition) {
          this._getTagDefinition = _getTagDefinition;
        }
        return Parser$1.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
          void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG);
          var tokensAndErrors = tokenize(source, url, this._getTagDefinition, parseExpansionForms, interpolationConfig),
              treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this._getTagDefinition).build();
          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
        }, Parser$1;
      }(),
      _TreeBuilder = function() {
        function _TreeBuilder(tokens, getTagDefinition) {
          this.tokens = tokens, this.getTagDefinition = getTagDefinition, this._index = -1, this._rootNodes = [], this._errors = [], this._elementStack = [], this._advance();
        }
        return _TreeBuilder.prototype.build = function() {
          for (; this._peek.type !== TokenType$1.EOF; )
            this._peek.type === TokenType$1.TAG_OPEN_START ? this._consumeStartTag(this._advance()) : this._peek.type === TokenType$1.TAG_CLOSE ? this._consumeEndTag(this._advance()) : this._peek.type === TokenType$1.CDATA_START ? (this._closeVoidElement(), this._consumeCdata(this._advance())) : this._peek.type === TokenType$1.COMMENT_START ? (this._closeVoidElement(), this._consumeComment(this._advance())) : this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT ? (this._closeVoidElement(), this._consumeText(this._advance())) : this._peek.type === TokenType$1.EXPANSION_FORM_START ? this._consumeExpansion(this._advance()) : this._advance();
          return new ParseTreeResult(this._rootNodes, this._errors);
        }, _TreeBuilder.prototype._advance = function() {
          var prev = this._peek;
          return this._index < this.tokens.length - 1 && this._index++, this._peek = this.tokens[this._index], prev;
        }, _TreeBuilder.prototype._advanceIf = function(type) {
          return this._peek.type === type ? this._advance() : null;
        }, _TreeBuilder.prototype._consumeCdata = function(startToken) {
          this._consumeText(this._advance()), this._advanceIf(TokenType$1.CDATA_END);
        }, _TreeBuilder.prototype._consumeComment = function(token) {
          var text = this._advanceIf(TokenType$1.RAW_TEXT);
          this._advanceIf(TokenType$1.COMMENT_END);
          var value = isPresent(text) ? text.parts[0].trim() : null;
          this._addToParent(new Comment(value, token.sourceSpan));
        }, _TreeBuilder.prototype._consumeExpansion = function(token) {
          for (var switchValue = this._advance(),
              type = this._advance(),
              cases = []; this._peek.type === TokenType$1.EXPANSION_CASE_VALUE; ) {
            var expCase = this._parseExpansionCase();
            if (isBlank(expCase))
              return;
            cases.push(expCase);
          }
          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END)
            return void this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
          var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan)), this._advance();
        }, _TreeBuilder.prototype._parseExpansionCase = function() {
          var value = this._advance();
          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START)
            return this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'.")), null;
          var start = this._advance(),
              exp = this._collectExpansionExpTokens(start);
          if (isBlank(exp))
            return null;
          var end = this._advance();
          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
          var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
          if (parsedExp.errors.length > 0)
            return this._errors = this._errors.concat(parsedExp.errors), null;
          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end),
              expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
        }, _TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
          for (var exp = [],
              expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START]; ; ) {
            if (this._peek.type !== TokenType$1.EXPANSION_FORM_START && this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START || expansionFormStack.push(this._peek.type), this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
              if (!lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START))
                return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
              if (expansionFormStack.pop(), 0 == expansionFormStack.length)
                return exp;
            }
            if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
              if (!lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START))
                return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
              expansionFormStack.pop();
            }
            if (this._peek.type === TokenType$1.EOF)
              return this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
            exp.push(this._advance());
          }
        }, _TreeBuilder.prototype._consumeText = function(token) {
          var text = token.parts[0];
          if (text.length > 0 && "\n" == text[0]) {
            var parent_1 = this._getParentElement();
            isPresent(parent_1) && 0 == parent_1.children.length && this.getTagDefinition(parent_1.name).ignoreFirstLf && (text = text.substring(1));
          }
          text.length > 0 && this._addToParent(new Text(text, token.sourceSpan));
        }, _TreeBuilder.prototype._closeVoidElement = function() {
          if (this._elementStack.length > 0) {
            var el = ListWrapper.last(this._elementStack);
            this.getTagDefinition(el.name).isVoid && this._elementStack.pop();
          }
        }, _TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
          for (var prefix = startTagToken.parts[0],
              name = startTagToken.parts[1],
              attrs = []; this._peek.type === TokenType$1.ATTR_NAME; )
            attrs.push(this._consumeAttr(this._advance()));
          var fullName = this._getElementFullName(prefix, name, this._getParentElement()),
              selfClosing = !1;
          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
            this._advance(), selfClosing = !0;
            var tagDef = this.getTagDefinition(fullName);
            tagDef.canSelfClose || null !== getNsPrefix(fullName) || tagDef.isVoid || this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'));
          } else
            this._peek.type === TokenType$1.TAG_OPEN_END && (this._advance(), selfClosing = !1);
          var end = this._peek.sourceSpan.start,
              span = new ParseSourceSpan(startTagToken.sourceSpan.start, end),
              el = new Element(fullName, attrs, [], span, span, null);
          this._pushElement(el), selfClosing && (this._popElement(fullName), el.endSourceSpan = span);
        }, _TreeBuilder.prototype._pushElement = function(el) {
          if (this._elementStack.length > 0) {
            var parentEl = ListWrapper.last(this._elementStack);
            this.getTagDefinition(parentEl.name).isClosedByChild(el.name) && this._elementStack.pop();
          }
          var tagDef = this.getTagDefinition(el.name),
              _a = this._getParentElementSkippingContainers(),
              parent = _a.parent,
              container = _a.container;
          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
            var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            this._insertBeforeContainer(parent, container, newParent);
          }
          this._addToParent(el), this._elementStack.push(el);
        }, _TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
          var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
          this._getParentElement() && (this._getParentElement().endSourceSpan = endTagToken.sourceSpan), this.getTagDefinition(fullName).isVoid ? this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"')) : this._popElement(fullName) || this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Unexpected closing tag "' + endTagToken.parts[1] + '"'));
        }, _TreeBuilder.prototype._popElement = function(fullName) {
          for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
            var el = this._elementStack[stackIndex];
            if (el.name == fullName)
              return ListWrapper.splice(this._elementStack, stackIndex, this._elementStack.length - stackIndex), !0;
            if (!this.getTagDefinition(el.name).closedByParent)
              return !1;
          }
          return !1;
        }, _TreeBuilder.prototype._consumeAttr = function(attrName) {
          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]),
              end = attrName.sourceSpan.end,
              value = "";
          if (this._peek.type === TokenType$1.ATTR_VALUE) {
            var valueToken = this._advance();
            value = valueToken.parts[0], end = valueToken.sourceSpan.end;
          }
          return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end));
        }, _TreeBuilder.prototype._getParentElement = function() {
          return this._elementStack.length > 0 ? ListWrapper.last(this._elementStack) : null;
        }, _TreeBuilder.prototype._getParentElementSkippingContainers = function() {
          for (var container = null,
              i = this._elementStack.length - 1; i >= 0; i--) {
            if ("ng-container" !== this._elementStack[i].name)
              return {
                parent: this._elementStack[i],
                container: container
              };
            container = this._elementStack[i];
          }
          return {
            parent: ListWrapper.last(this._elementStack),
            container: container
          };
        }, _TreeBuilder.prototype._addToParent = function(node) {
          var parent = this._getParentElement();
          isPresent(parent) ? parent.children.push(node) : this._rootNodes.push(node);
        }, _TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
          if (container) {
            if (parent) {
              var index = parent.children.indexOf(container);
              parent.children[index] = node;
            } else
              this._rootNodes.push(node);
            node.children.push(container), this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
          } else
            this._addToParent(node), this._elementStack.push(node);
        }, _TreeBuilder.prototype._getElementFullName = function(prefix, localName, parentElement) {
          return isBlank(prefix) && (prefix = this.getTagDefinition(localName).implicitNamespacePrefix, isBlank(prefix) && isPresent(parentElement) && (prefix = getNsPrefix(parentElement.name))), mergeNsAndName(prefix, localName);
        }, _TreeBuilder;
      }(),
      XmlTagDefinition = function() {
        function XmlTagDefinition() {
          this.closedByParent = !1, this.contentType = TagContentType.PARSABLE_DATA, this.isVoid = !1, this.ignoreFirstLf = !1, this.canSelfClose = !0;
        }
        return XmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
          return !1;
        }, XmlTagDefinition.prototype.isClosedByChild = function(name) {
          return !1;
        }, XmlTagDefinition;
      }(),
      _TAG_DEFINITION = new XmlTagDefinition,
      XmlParser = function(_super) {
        function XmlParser() {
          _super.call(this, getXmlTagDefinition);
        }
        return __extends(XmlParser, _super), XmlParser.prototype.parse = function(source, url, parseExpansionForms) {
          return void 0 === parseExpansionForms && (parseExpansionForms = !1), _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
        }, XmlParser;
      }(Parser$1),
      _TRANSLATIONS_TAG = "translationbundle",
      _TRANSLATION_TAG = "translation",
      _PLACEHOLDER_TAG$1 = "ph",
      Xtb = function() {
        function Xtb(_htmlParser, _interpolationConfig) {
          this._htmlParser = _htmlParser, this._interpolationConfig = _interpolationConfig;
        }
        return Xtb.prototype.write = function(messageMap) {
          throw new Error("Unsupported");
        }, Xtb.prototype.load = function(content, url, placeholders) {
          var _this = this,
              result = (new XmlParser).parse(content, url);
          if (result.errors.length)
            throw new Error("xtb parse errors:\n" + result.errors.join("\n"));
          var _a = (new _Serializer).parse(result.rootNodes, placeholders),
              messages = _a.messages,
              errors = _a.errors;
          if (errors.length)
            throw new Error("xtb parse errors:\n" + errors.join("\n"));
          var messageMap = {},
              parseErrors = [];
          if (Object.keys(messages).forEach(function(id) {
            var res = _this._htmlParser.parse(messages[id], url, !0, _this._interpolationConfig);
            parseErrors.push.apply(parseErrors, res.errors), messageMap[id] = res.rootNodes;
          }), parseErrors.length)
            throw new Error("xtb parse errors:\n" + parseErrors.join("\n"));
          return messageMap;
        }, Xtb;
      }(),
      _Serializer = function() {
        function _Serializer() {}
        return _Serializer.prototype.parse = function(nodes, _placeholders) {
          return this._messages = {}, this._bundleDepth = 0, this._translationDepth = 0, this._errors = [], this._placeholders = _placeholders, visitAll(this, nodes, null), {
            messages: this._messages,
            errors: this._errors
          };
        }, _Serializer.prototype.visitElement = function(element, context) {
          switch (element.name) {
            case _TRANSLATIONS_TAG:
              this._bundleDepth++, this._bundleDepth > 1 && this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested"), visitAll(this, element.children, null), this._bundleDepth--;
              break;
            case _TRANSLATION_TAG:
              this._translationDepth++, this._translationDepth > 1 && this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
              var idAttr = element.attrs.find(function(attr) {
                return "id" === attr.name;
              });
              idAttr ? (this._currentPlaceholders = this._placeholders[idAttr.value] || {}, this._messages[idAttr.value] = visitAll(this, element.children).join("")) : this._addError(element, "<" + _TRANSLATION_TAG + '> misses the "id" attribute'), this._translationDepth--;
              break;
            case _PLACEHOLDER_TAG$1:
              var nameAttr = element.attrs.find(function(attr) {
                return "name" === attr.name;
              });
              if (nameAttr) {
                if (this._currentPlaceholders.hasOwnProperty(nameAttr.value))
                  return this._currentPlaceholders[nameAttr.value];
                this._addError(element, 'The placeholder "' + nameAttr.value + '" does not exists in the source message');
              } else
                this._addError(element, "<" + _PLACEHOLDER_TAG$1 + '> misses the "name" attribute');
              break;
            default:
              this._addError(element, "Unexpected tag");
          }
        }, _Serializer.prototype.visitAttribute = function(attribute, context) {
          throw new Error("unreachable code");
        }, _Serializer.prototype.visitText = function(text, context) {
          return text.value;
        }, _Serializer.prototype.visitComment = function(comment, context) {
          return "";
        }, _Serializer.prototype.visitExpansion = function(expansion, context) {
          var _this = this;
          expansion.cases.map(function(c) {
            return c.visit(_this, null);
          });
          return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
        }, _Serializer.prototype.visitExpansionCase = function(expansionCase, context) {
          return expansionCase.value + " {" + visitAll(this, expansionCase.expression, null) + "}";
        }, _Serializer.prototype._addError = function(node, message) {
          this._errors.push(new I18nError(node.sourceSpan, message));
        }, _Serializer;
      }(),
      i18n = Object.freeze({
        MessageBundle: MessageBundle,
        Xmb: Xmb,
        Xtb: Xtb
      }),
      TextAst = function() {
        function TextAst(value, ngContentIndex, sourceSpan) {
          this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return TextAst.prototype.visit = function(visitor, context) {
          return visitor.visitText(this, context);
        }, TextAst;
      }(),
      BoundTextAst = function() {
        function BoundTextAst(value, ngContentIndex, sourceSpan) {
          this.value = value, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return BoundTextAst.prototype.visit = function(visitor, context) {
          return visitor.visitBoundText(this, context);
        }, BoundTextAst;
      }(),
      AttrAst = function() {
        function AttrAst(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return AttrAst.prototype.visit = function(visitor, context) {
          return visitor.visitAttr(this, context);
        }, AttrAst;
      }(),
      BoundElementPropertyAst = function() {
        function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
          this.name = name, this.type = type, this.securityContext = securityContext, this.value = value, this.unit = unit, this.sourceSpan = sourceSpan;
        }
        return BoundElementPropertyAst.prototype.visit = function(visitor, context) {
          return visitor.visitElementProperty(this, context);
        }, BoundElementPropertyAst;
      }(),
      BoundEventAst = function() {
        function BoundEventAst(name, target, handler, sourceSpan) {
          this.name = name, this.target = target, this.handler = handler, this.sourceSpan = sourceSpan;
        }
        return BoundEventAst.prototype.visit = function(visitor, context) {
          return visitor.visitEvent(this, context);
        }, Object.defineProperty(BoundEventAst.prototype, "fullName", {
          get: function() {
            return isPresent(this.target) ? this.target + ":" + this.name : this.name;
          },
          enumerable: !0,
          configurable: !0
        }), BoundEventAst;
      }(),
      ReferenceAst = function() {
        function ReferenceAst(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return ReferenceAst.prototype.visit = function(visitor, context) {
          return visitor.visitReference(this, context);
        }, ReferenceAst;
      }(),
      VariableAst = function() {
        function VariableAst(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return VariableAst.prototype.visit = function(visitor, context) {
          return visitor.visitVariable(this, context);
        }, VariableAst;
      }(),
      ElementAst = function() {
        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
          this.name = name, this.attrs = attrs, this.inputs = inputs, this.outputs = outputs, this.references = references, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return ElementAst.prototype.visit = function(visitor, context) {
          return visitor.visitElement(this, context);
        }, ElementAst;
      }(),
      EmbeddedTemplateAst = function() {
        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
          this.attrs = attrs, this.outputs = outputs, this.references = references, this.variables = variables, this.directives = directives, this.providers = providers, this.hasViewContainer = hasViewContainer, this.children = children, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
        }
        return EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
          return visitor.visitEmbeddedTemplate(this, context);
        }, EmbeddedTemplateAst;
      }(),
      BoundDirectivePropertyAst = function() {
        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
          this.directiveName = directiveName, this.templateName = templateName, this.value = value, this.sourceSpan = sourceSpan;
        }
        return BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
          return visitor.visitDirectiveProperty(this, context);
        }, BoundDirectivePropertyAst;
      }(),
      DirectiveAst = function() {
        function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
          this.directive = directive, this.inputs = inputs, this.hostProperties = hostProperties, this.hostEvents = hostEvents, this.sourceSpan = sourceSpan;
        }
        return DirectiveAst.prototype.visit = function(visitor, context) {
          return visitor.visitDirective(this, context);
        }, DirectiveAst;
      }(),
      ProviderAst = function() {
        function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
          this.token = token, this.multiProvider = multiProvider, this.eager = eager, this.providers = providers, this.providerType = providerType, this.lifecycleHooks = lifecycleHooks, this.sourceSpan = sourceSpan;
        }
        return ProviderAst.prototype.visit = function(visitor, context) {
          return null;
        }, ProviderAst;
      }();
  exports.ProviderAstType, function(ProviderAstType) {
    ProviderAstType[ProviderAstType.PublicService = 0] = "PublicService", ProviderAstType[ProviderAstType.PrivateService = 1] = "PrivateService", ProviderAstType[ProviderAstType.Component = 2] = "Component", ProviderAstType[ProviderAstType.Directive = 3] = "Directive", ProviderAstType[ProviderAstType.Builtin = 4] = "Builtin";
  }(exports.ProviderAstType || (exports.ProviderAstType = {}));
  var NgContentAst = function() {
    function NgContentAst(index, ngContentIndex, sourceSpan) {
      this.index = index, this.ngContentIndex = ngContentIndex, this.sourceSpan = sourceSpan;
    }
    return NgContentAst.prototype.visit = function(visitor, context) {
      return visitor.visitNgContent(this, context);
    }, NgContentAst;
  }();
  exports.PropertyBindingType, function(PropertyBindingType) {
    PropertyBindingType[PropertyBindingType.Property = 0] = "Property", PropertyBindingType[PropertyBindingType.Attribute = 1] = "Attribute", PropertyBindingType[PropertyBindingType.Class = 2] = "Class", PropertyBindingType[PropertyBindingType.Style = 3] = "Style", PropertyBindingType[PropertyBindingType.Animation = 4] = "Animation";
  }(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
  var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy,
      ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus,
      LifecycleHooks = _angular_core.__core_private__.LifecycleHooks,
      LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES,
      ReflectorReader = _angular_core.__core_private__.ReflectorReader,
      AppElement = _angular_core.__core_private__.AppElement,
      CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver,
      AppView = _angular_core.__core_private__.AppView,
      DebugAppView = _angular_core.__core_private__.DebugAppView,
      NgModuleInjector = _angular_core.__core_private__.NgModuleInjector,
      ViewType = _angular_core.__core_private__.ViewType,
      MAX_INTERPOLATION_VALUES = _angular_core.__core_private__.MAX_INTERPOLATION_VALUES,
      checkBinding = _angular_core.__core_private__.checkBinding,
      flattenNestedViewRenderNodes = _angular_core.__core_private__.flattenNestedViewRenderNodes,
      interpolate = _angular_core.__core_private__.interpolate,
      ViewUtils = _angular_core.__core_private__.ViewUtils,
      DebugContext = _angular_core.__core_private__.DebugContext,
      StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo,
      devModeEqual = _angular_core.__core_private__.devModeEqual,
      UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED,
      ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper,
      TemplateRef_ = _angular_core.__core_private__.TemplateRef_,
      createProvider = _angular_core.__core_private__.createProvider,
      isProviderLiteral = _angular_core.__core_private__.isProviderLiteral,
      EMPTY_ARRAY = _angular_core.__core_private__.EMPTY_ARRAY,
      EMPTY_MAP = _angular_core.__core_private__.EMPTY_MAP,
      pureProxy1 = _angular_core.__core_private__.pureProxy1,
      pureProxy2 = _angular_core.__core_private__.pureProxy2,
      pureProxy3 = _angular_core.__core_private__.pureProxy3,
      pureProxy4 = _angular_core.__core_private__.pureProxy4,
      pureProxy5 = _angular_core.__core_private__.pureProxy5,
      pureProxy6 = _angular_core.__core_private__.pureProxy6,
      pureProxy7 = _angular_core.__core_private__.pureProxy7,
      pureProxy8 = _angular_core.__core_private__.pureProxy8,
      pureProxy9 = _angular_core.__core_private__.pureProxy9,
      pureProxy10 = _angular_core.__core_private__.pureProxy10,
      castByValue = _angular_core.__core_private__.castByValue,
      Console = _angular_core.__core_private__.Console,
      reflector = _angular_core.__core_private__.reflector,
      Reflector = _angular_core.__core_private__.Reflector,
      ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities,
      NoOpAnimationPlayer_ = _angular_core.__core_private__.NoOpAnimationPlayer,
      AnimationSequencePlayer_ = _angular_core.__core_private__.AnimationSequencePlayer,
      AnimationGroupPlayer_ = _angular_core.__core_private__.AnimationGroupPlayer,
      AnimationKeyframe_ = _angular_core.__core_private__.AnimationKeyframe,
      AnimationStyles_ = _angular_core.__core_private__.AnimationStyles,
      ANY_STATE = _angular_core.__core_private__.ANY_STATE,
      DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE,
      EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE,
      FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG,
      impBalanceAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles,
      impBalanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes,
      impClearStyles = _angular_core.__core_private__.clearStyles,
      impCollectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles,
      impRenderStyles = _angular_core.__core_private__.renderStyles,
      BaseException = function(_super) {
        function BaseException(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException, _super), BaseException.prototype.toString = function() {
          return this.message;
        }, BaseException;
      }(Error),
      _EMPTY_ATTR_VALUE = "",
      _SELECTOR_REGEXP = new RegExp("(\\:not\\()|([-\\w]+)|(?:\\.([-\\w]+))|(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|(\\))|(\\s*,\\s*)", "g"),
      CssSelector = function() {
        function CssSelector() {
          this.element = null, this.classNames = [], this.attrs = [], this.notSelectors = [];
        }
        return CssSelector.parse = function(selector) {
          var match,
              results = [],
              _addResult = function(res, cssSel) {
                cssSel.notSelectors.length > 0 && isBlank(cssSel.element) && ListWrapper.isEmpty(cssSel.classNames) && ListWrapper.isEmpty(cssSel.attrs) && (cssSel.element = "*"), res.push(cssSel);
              },
              cssSelector = new CssSelector,
              current = cssSelector,
              inNot = !1;
          for (_SELECTOR_REGEXP.lastIndex = 0; isPresent(match = _SELECTOR_REGEXP.exec(selector)); ) {
            if (isPresent(match[1])) {
              if (inNot)
                throw new BaseException("Nesting :not is not allowed in a selector");
              inNot = !0, current = new CssSelector, cssSelector.notSelectors.push(current);
            }
            if (isPresent(match[2]) && current.setElement(match[2]), isPresent(match[3]) && current.addClassName(match[3]), isPresent(match[4]) && current.addAttribute(match[4], match[5]), isPresent(match[6]) && (inNot = !1, current = cssSelector), isPresent(match[7])) {
              if (inNot)
                throw new BaseException("Multiple selectors in :not are not supported");
              _addResult(results, cssSelector), cssSelector = current = new CssSelector;
            }
          }
          return _addResult(results, cssSelector), results;
        }, CssSelector.prototype.isElementSelector = function() {
          return isPresent(this.element) && ListWrapper.isEmpty(this.classNames) && ListWrapper.isEmpty(this.attrs) && 0 === this.notSelectors.length;
        }, CssSelector.prototype.setElement = function(element) {
          void 0 === element && (element = null), this.element = element;
        }, CssSelector.prototype.getMatchingElementTemplate = function() {
          for (var tagName = isPresent(this.element) ? this.element : "div",
              classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "",
              attrs = "",
              i = 0; i < this.attrs.length; i += 2) {
            var attrName = this.attrs[i],
                attrValue = "" !== this.attrs[i + 1] ? '="' + this.attrs[i + 1] + '"' : "";
            attrs += " " + attrName + attrValue;
          }
          return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
        }, CssSelector.prototype.addAttribute = function(name, value) {
          void 0 === value && (value = _EMPTY_ATTR_VALUE), this.attrs.push(name), value = isPresent(value) ? value.toLowerCase() : _EMPTY_ATTR_VALUE, this.attrs.push(value);
        }, CssSelector.prototype.addClassName = function(name) {
          this.classNames.push(name.toLowerCase());
        }, CssSelector.prototype.toString = function() {
          var res = "";
          if (isPresent(this.element) && (res += this.element), isPresent(this.classNames))
            for (var i = 0; i < this.classNames.length; i++)
              res += "." + this.classNames[i];
          if (isPresent(this.attrs))
            for (var i = 0; i < this.attrs.length; ) {
              var attrName = this.attrs[i++],
                  attrValue = this.attrs[i++];
              res += "[" + attrName, attrValue.length > 0 && (res += "=" + attrValue), res += "]";
            }
          return this.notSelectors.forEach(function(notSelector) {
            return res += ":not(" + notSelector + ")";
          }), res;
        }, CssSelector;
      }(),
      SelectorMatcher = function() {
        function SelectorMatcher() {
          this._elementMap = new Map, this._elementPartialMap = new Map, this._classMap = new Map, this._classPartialMap = new Map, this._attrValueMap = new Map, this._attrValuePartialMap = new Map, this._listContexts = [];
        }
        return SelectorMatcher.createNotMatcher = function(notSelectors) {
          var notMatcher = new SelectorMatcher;
          return notMatcher.addSelectables(notSelectors, null), notMatcher;
        }, SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
          var listContext = null;
          cssSelectors.length > 1 && (listContext = new SelectorListContext(cssSelectors), this._listContexts.push(listContext));
          for (var i = 0; i < cssSelectors.length; i++)
            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
        }, SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
          var matcher = this,
              element = cssSelector.element,
              classNames = cssSelector.classNames,
              attrs = cssSelector.attrs,
              selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
          if (isPresent(element)) {
            var isTerminal = 0 === attrs.length && 0 === classNames.length;
            isTerminal ? this._addTerminal(matcher._elementMap, element, selectable) : matcher = this._addPartial(matcher._elementPartialMap, element);
          }
          if (isPresent(classNames))
            for (var index = 0; index < classNames.length; index++) {
              var isTerminal = 0 === attrs.length && index === classNames.length - 1,
                  className = classNames[index];
              isTerminal ? this._addTerminal(matcher._classMap, className, selectable) : matcher = this._addPartial(matcher._classPartialMap, className);
            }
          if (isPresent(attrs))
            for (var index = 0; index < attrs.length; ) {
              var isTerminal = index === attrs.length - 2,
                  attrName = attrs[index++],
                  attrValue = attrs[index++];
              if (isTerminal) {
                var terminalMap = matcher._attrValueMap,
                    terminalValuesMap = terminalMap.get(attrName);
                isBlank(terminalValuesMap) && (terminalValuesMap = new Map, terminalMap.set(attrName, terminalValuesMap)), this._addTerminal(terminalValuesMap, attrValue, selectable);
              } else {
                var parttialMap = matcher._attrValuePartialMap,
                    partialValuesMap = parttialMap.get(attrName);
                isBlank(partialValuesMap) && (partialValuesMap = new Map, parttialMap.set(attrName, partialValuesMap)), matcher = this._addPartial(partialValuesMap, attrValue);
              }
            }
        }, SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
          var terminalList = map.get(name);
          isBlank(terminalList) && (terminalList = [], map.set(name, terminalList)), terminalList.push(selectable);
        }, SelectorMatcher.prototype._addPartial = function(map, name) {
          var matcher = map.get(name);
          return isBlank(matcher) && (matcher = new SelectorMatcher, map.set(name, matcher)), matcher;
        }, SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
          for (var result = !1,
              element = cssSelector.element,
              classNames = cssSelector.classNames,
              attrs = cssSelector.attrs,
              i = 0; i < this._listContexts.length; i++)
            this._listContexts[i].alreadyMatched = !1;
          if (result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result, result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result, isPresent(classNames))
            for (var index = 0; index < classNames.length; index++) {
              var className = classNames[index];
              result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result, result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
            }
          if (isPresent(attrs))
            for (var index = 0; index < attrs.length; ) {
              var attrName = attrs[index++],
                  attrValue = attrs[index++],
                  terminalValuesMap = this._attrValueMap.get(attrName);
              StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE) || (result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result), result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
              var partialValuesMap = this._attrValuePartialMap.get(attrName);
              StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE) || (result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result), result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
            }
          return result;
        }, SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
          if (isBlank(map) || isBlank(name))
            return !1;
          var selectables = map.get(name),
              starSelectables = map.get("*");
          if (isPresent(starSelectables) && (selectables = selectables.concat(starSelectables)), isBlank(selectables))
            return !1;
          for (var selectable,
              result = !1,
              index = 0; index < selectables.length; index++)
            selectable = selectables[index], result = selectable.finalize(cssSelector, matchedCallback) || result;
          return result;
        }, SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
          if (isBlank(map) || isBlank(name))
            return !1;
          var nestedSelector = map.get(name);
          return !isBlank(nestedSelector) && nestedSelector.match(cssSelector, matchedCallback);
        }, SelectorMatcher;
      }(),
      SelectorListContext = function() {
        function SelectorListContext(selectors) {
          this.selectors = selectors, this.alreadyMatched = !1;
        }
        return SelectorListContext;
      }(),
      SelectorContext = function() {
        function SelectorContext(selector, cbContext, listContext) {
          this.selector = selector, this.cbContext = cbContext, this.listContext = listContext, this.notSelectors = selector.notSelectors;
        }
        return SelectorContext.prototype.finalize = function(cssSelector, callback) {
          var result = !0;
          if (this.notSelectors.length > 0 && (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
            result = !notMatcher.match(cssSelector, null);
          }
          return result && isPresent(callback) && (isBlank(this.listContext) || !this.listContext.alreadyMatched) && (isPresent(this.listContext) && (this.listContext.alreadyMatched = !0), callback(this.selector, this.cbContext)), result;
        }, SelectorContext;
      }(),
      _ASSET_SCHEME = "asset:",
      DEFAULT_PACKAGE_URL_PROVIDER = {
        provide: _angular_core.PACKAGE_ROOT_URL,
        useValue: "/"
      },
      UrlResolver = function() {
        function UrlResolver(_packagePrefix) {
          void 0 === _packagePrefix && (_packagePrefix = null), this._packagePrefix = _packagePrefix;
        }
        return UrlResolver.prototype.resolve = function(baseUrl, url) {
          var resolvedUrl = url;
          isPresent(baseUrl) && baseUrl.length > 0 && (resolvedUrl = _resolveUrl(baseUrl, resolvedUrl));
          var resolvedParts = _split(resolvedUrl),
              prefix = this._packagePrefix;
          if (isPresent(prefix) && isPresent(resolvedParts) && "package" == resolvedParts[_ComponentIndex.Scheme]) {
            var path = resolvedParts[_ComponentIndex.Path];
            if (this._packagePrefix !== _ASSET_SCHEME)
              return prefix = StringWrapper.stripRight(prefix, "/"), path = StringWrapper.stripLeft(path, "/"), prefix + "/" + path;
            var pathSegements = path.split(/\//);
            resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join("/");
          }
          return resolvedUrl;
        }, UrlResolver;
      }();
  UrlResolver.decorators = [{type: _angular_core.Injectable}], UrlResolver.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Inject,
      args: [_angular_core.PACKAGE_ROOT_URL]
    }]
  }];
  var _ComponentIndex,
      _splitRe = new RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$");
  !function(_ComponentIndex) {
    _ComponentIndex[_ComponentIndex.Scheme = 1] = "Scheme", _ComponentIndex[_ComponentIndex.UserInfo = 2] = "UserInfo", _ComponentIndex[_ComponentIndex.Domain = 3] = "Domain", _ComponentIndex[_ComponentIndex.Port = 4] = "Port", _ComponentIndex[_ComponentIndex.Path = 5] = "Path", _ComponentIndex[_ComponentIndex.QueryData = 6] = "QueryData", _ComponentIndex[_ComponentIndex.Fragment = 7] = "Fragment";
  }(_ComponentIndex || (_ComponentIndex = {}));
  var TypeModifier;
  !function(TypeModifier) {
    TypeModifier[TypeModifier.Const = 0] = "Const";
  }(TypeModifier || (TypeModifier = {}));
  var BuiltinTypeName,
      Type$1 = function() {
        function Type$1(modifiers) {
          void 0 === modifiers && (modifiers = null), this.modifiers = modifiers, isBlank(modifiers) && (this.modifiers = []);
        }
        return Type$1.prototype.hasModifier = function(modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        }, Type$1;
      }();
  !function(BuiltinTypeName) {
    BuiltinTypeName[BuiltinTypeName.Dynamic = 0] = "Dynamic", BuiltinTypeName[BuiltinTypeName.Bool = 1] = "Bool", BuiltinTypeName[BuiltinTypeName.String = 2] = "String", BuiltinTypeName[BuiltinTypeName.Int = 3] = "Int", BuiltinTypeName[BuiltinTypeName.Number = 4] = "Number", BuiltinTypeName[BuiltinTypeName.Function = 5] = "Function";
  }(BuiltinTypeName || (BuiltinTypeName = {}));
  var BinaryOperator,
      BuiltinType = function(_super) {
        function BuiltinType(name, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name;
        }
        return __extends(BuiltinType, _super), BuiltinType.prototype.visitType = function(visitor, context) {
          return visitor.visitBuiltintType(this, context);
        }, BuiltinType;
      }(Type$1),
      ExternalType = function(_super) {
        function ExternalType(value, typeParams, modifiers) {
          void 0 === typeParams && (typeParams = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.value = value, this.typeParams = typeParams;
        }
        return __extends(ExternalType, _super), ExternalType.prototype.visitType = function(visitor, context) {
          return visitor.visitExternalType(this, context);
        }, ExternalType;
      }(Type$1),
      ArrayType = function(_super) {
        function ArrayType(of, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.of = of;
        }
        return __extends(ArrayType, _super), ArrayType.prototype.visitType = function(visitor, context) {
          return visitor.visitArrayType(this, context);
        }, ArrayType;
      }(Type$1),
      MapType = function(_super) {
        function MapType(valueType, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.valueType = valueType;
        }
        return __extends(MapType, _super), MapType.prototype.visitType = function(visitor, context) {
          return visitor.visitMapType(this, context);
        }, MapType;
      }(Type$1),
      DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic),
      BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool),
      NUMBER_TYPE = (new BuiltinType(BuiltinTypeName.Int), new BuiltinType(BuiltinTypeName.Number)),
      STRING_TYPE = new BuiltinType(BuiltinTypeName.String),
      FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
  !function(BinaryOperator) {
    BinaryOperator[BinaryOperator.Equals = 0] = "Equals", BinaryOperator[BinaryOperator.NotEquals = 1] = "NotEquals", BinaryOperator[BinaryOperator.Identical = 2] = "Identical", BinaryOperator[BinaryOperator.NotIdentical = 3] = "NotIdentical", BinaryOperator[BinaryOperator.Minus = 4] = "Minus", BinaryOperator[BinaryOperator.Plus = 5] = "Plus", BinaryOperator[BinaryOperator.Divide = 6] = "Divide", BinaryOperator[BinaryOperator.Multiply = 7] = "Multiply", BinaryOperator[BinaryOperator.Modulo = 8] = "Modulo", BinaryOperator[BinaryOperator.And = 9] = "And", BinaryOperator[BinaryOperator.Or = 10] = "Or", BinaryOperator[BinaryOperator.Lower = 11] = "Lower", BinaryOperator[BinaryOperator.LowerEquals = 12] = "LowerEquals", BinaryOperator[BinaryOperator.Bigger = 13] = "Bigger", BinaryOperator[BinaryOperator.BiggerEquals = 14] = "BiggerEquals";
  }(BinaryOperator || (BinaryOperator = {}));
  var BuiltinVar,
      Expression = function() {
        function Expression(type) {
          this.type = type;
        }
        return Expression.prototype.prop = function(name) {
          return new ReadPropExpr(this, name);
        }, Expression.prototype.key = function(index, type) {
          return void 0 === type && (type = null), new ReadKeyExpr(this, index, type);
        }, Expression.prototype.callMethod = function(name, params) {
          return new InvokeMethodExpr(this, name, params);
        }, Expression.prototype.callFn = function(params) {
          return new InvokeFunctionExpr(this, params);
        }, Expression.prototype.instantiate = function(params, type) {
          return void 0 === type && (type = null), new InstantiateExpr(this, params, type);
        }, Expression.prototype.conditional = function(trueCase, falseCase) {
          return void 0 === falseCase && (falseCase = null), new ConditionalExpr(this, trueCase, falseCase);
        }, Expression.prototype.equals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
        }, Expression.prototype.notEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
        }, Expression.prototype.identical = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
        }, Expression.prototype.notIdentical = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
        }, Expression.prototype.minus = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
        }, Expression.prototype.plus = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
        }, Expression.prototype.divide = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
        }, Expression.prototype.multiply = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
        }, Expression.prototype.modulo = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
        }, Expression.prototype.and = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
        }, Expression.prototype.or = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
        }, Expression.prototype.lower = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
        }, Expression.prototype.lowerEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
        }, Expression.prototype.bigger = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
        }, Expression.prototype.biggerEquals = function(rhs) {
          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
        }, Expression.prototype.isBlank = function() {
          return this.equals(NULL_EXPR);
        }, Expression.prototype.cast = function(type) {
          return new CastExpr(this, type);
        }, Expression.prototype.toStmt = function() {
          return new ExpressionStatement(this);
        }, Expression;
      }();
  !function(BuiltinVar) {
    BuiltinVar[BuiltinVar.This = 0] = "This", BuiltinVar[BuiltinVar.Super = 1] = "Super", BuiltinVar[BuiltinVar.CatchError = 2] = "CatchError", BuiltinVar[BuiltinVar.CatchStack = 3] = "CatchStack";
  }(BuiltinVar || (BuiltinVar = {}));
  var BuiltinMethod,
      ReadVarExpr = function(_super) {
        function ReadVarExpr(name, type) {
          void 0 === type && (type = null), _super.call(this, type), isString(name) ? (this.name = name, this.builtin = null) : (this.name = null, this.builtin = name);
        }
        return __extends(ReadVarExpr, _super), ReadVarExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadVarExpr(this, context);
        }, ReadVarExpr.prototype.set = function(value) {
          return new WriteVarExpr(this.name, value);
        }, ReadVarExpr;
      }(Expression),
      WriteVarExpr = function(_super) {
        function WriteVarExpr(name, value, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : value.type), this.name = name, this.value = value;
        }
        return __extends(WriteVarExpr, _super), WriteVarExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWriteVarExpr(this, context);
        }, WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
          return void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), new DeclareVarStmt(this.name, this.value, type, modifiers);
        }, WriteVarExpr;
      }(Expression),
      WriteKeyExpr = function(_super) {
        function WriteKeyExpr(receiver, index, value, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : value.type), this.receiver = receiver, this.index = index, this.value = value;
        }
        return __extends(WriteKeyExpr, _super), WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWriteKeyExpr(this, context);
        }, WriteKeyExpr;
      }(Expression),
      WritePropExpr = function(_super) {
        function WritePropExpr(receiver, name, value, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : value.type), this.receiver = receiver, this.name = name, this.value = value;
        }
        return __extends(WritePropExpr, _super), WritePropExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitWritePropExpr(this, context);
        }, WritePropExpr;
      }(Expression);
  !function(BuiltinMethod) {
    BuiltinMethod[BuiltinMethod.ConcatArray = 0] = "ConcatArray", BuiltinMethod[BuiltinMethod.SubscribeObservable = 1] = "SubscribeObservable", BuiltinMethod[BuiltinMethod.bind = 2] = "bind";
  }(BuiltinMethod || (BuiltinMethod = {}));
  var StmtModifier,
      InvokeMethodExpr = function(_super) {
        function InvokeMethodExpr(receiver, method, args, type) {
          void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.args = args, isString(method) ? (this.name = method, this.builtin = null) : (this.name = null, this.builtin = method);
        }
        return __extends(InvokeMethodExpr, _super), InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInvokeMethodExpr(this, context);
        }, InvokeMethodExpr;
      }(Expression),
      InvokeFunctionExpr = function(_super) {
        function InvokeFunctionExpr(fn, args, type) {
          void 0 === type && (type = null), _super.call(this, type), this.fn = fn, this.args = args;
        }
        return __extends(InvokeFunctionExpr, _super), InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInvokeFunctionExpr(this, context);
        }, InvokeFunctionExpr;
      }(Expression),
      InstantiateExpr = function(_super) {
        function InstantiateExpr(classExpr, args, type) {
          _super.call(this, type), this.classExpr = classExpr, this.args = args;
        }
        return __extends(InstantiateExpr, _super), InstantiateExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitInstantiateExpr(this, context);
        }, InstantiateExpr;
      }(Expression),
      LiteralExpr = function(_super) {
        function LiteralExpr(value, type) {
          void 0 === type && (type = null), _super.call(this, type), this.value = value;
        }
        return __extends(LiteralExpr, _super), LiteralExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralExpr(this, context);
        }, LiteralExpr;
      }(Expression),
      ExternalExpr = function(_super) {
        function ExternalExpr(value, type, typeParams) {
          void 0 === type && (type = null), void 0 === typeParams && (typeParams = null), _super.call(this, type), this.value = value, this.typeParams = typeParams;
        }
        return __extends(ExternalExpr, _super), ExternalExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitExternalExpr(this, context);
        }, ExternalExpr;
      }(Expression),
      ConditionalExpr = function(_super) {
        function ConditionalExpr(condition, trueCase, falseCase, type) {
          void 0 === falseCase && (falseCase = null), void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : trueCase.type), this.condition = condition, this.falseCase = falseCase, this.trueCase = trueCase;
        }
        return __extends(ConditionalExpr, _super), ConditionalExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitConditionalExpr(this, context);
        }, ConditionalExpr;
      }(Expression),
      NotExpr = function(_super) {
        function NotExpr(condition) {
          _super.call(this, BOOL_TYPE), this.condition = condition;
        }
        return __extends(NotExpr, _super), NotExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitNotExpr(this, context);
        }, NotExpr;
      }(Expression),
      CastExpr = function(_super) {
        function CastExpr(value, type) {
          _super.call(this, type), this.value = value;
        }
        return __extends(CastExpr, _super), CastExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitCastExpr(this, context);
        }, CastExpr;
      }(Expression),
      FnParam = function() {
        function FnParam(name, type) {
          void 0 === type && (type = null), this.name = name, this.type = type;
        }
        return FnParam;
      }(),
      FunctionExpr = function(_super) {
        function FunctionExpr(params, statements, type) {
          void 0 === type && (type = null), _super.call(this, type), this.params = params, this.statements = statements;
        }
        return __extends(FunctionExpr, _super), FunctionExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitFunctionExpr(this, context);
        }, FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
          return void 0 === modifiers && (modifiers = null), new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
        }, FunctionExpr;
      }(Expression),
      BinaryOperatorExpr = function(_super) {
        function BinaryOperatorExpr(operator, lhs, rhs, type) {
          void 0 === type && (type = null), _super.call(this, isPresent(type) ? type : lhs.type), this.operator = operator, this.rhs = rhs, this.lhs = lhs;
        }
        return __extends(BinaryOperatorExpr, _super), BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitBinaryOperatorExpr(this, context);
        }, BinaryOperatorExpr;
      }(Expression),
      ReadPropExpr = function(_super) {
        function ReadPropExpr(receiver, name, type) {
          void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.name = name;
        }
        return __extends(ReadPropExpr, _super), ReadPropExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadPropExpr(this, context);
        }, ReadPropExpr.prototype.set = function(value) {
          return new WritePropExpr(this.receiver, this.name, value);
        }, ReadPropExpr;
      }(Expression),
      ReadKeyExpr = function(_super) {
        function ReadKeyExpr(receiver, index, type) {
          void 0 === type && (type = null), _super.call(this, type), this.receiver = receiver, this.index = index;
        }
        return __extends(ReadKeyExpr, _super), ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitReadKeyExpr(this, context);
        }, ReadKeyExpr.prototype.set = function(value) {
          return new WriteKeyExpr(this.receiver, this.index, value);
        }, ReadKeyExpr;
      }(Expression),
      LiteralArrayExpr = function(_super) {
        function LiteralArrayExpr(entries, type) {
          void 0 === type && (type = null), _super.call(this, type), this.entries = entries;
        }
        return __extends(LiteralArrayExpr, _super), LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralArrayExpr(this, context);
        }, LiteralArrayExpr;
      }(Expression),
      LiteralMapExpr = function(_super) {
        function LiteralMapExpr(entries, type) {
          void 0 === type && (type = null), _super.call(this, type), this.entries = entries, this.valueType = null, isPresent(type) && (this.valueType = type.valueType);
        }
        return __extends(LiteralMapExpr, _super), LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
          return visitor.visitLiteralMapExpr(this, context);
        }, LiteralMapExpr;
      }(Expression),
      THIS_EXPR = new ReadVarExpr(BuiltinVar.This),
      SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super),
      NULL_EXPR = (new ReadVarExpr(BuiltinVar.CatchError), new ReadVarExpr(BuiltinVar.CatchStack), new LiteralExpr(null, null));
  !function(StmtModifier) {
    StmtModifier[StmtModifier.Final = 0] = "Final", StmtModifier[StmtModifier.Private = 1] = "Private";
  }(StmtModifier || (StmtModifier = {}));
  var Statement = function() {
    function Statement(modifiers) {
      void 0 === modifiers && (modifiers = null), this.modifiers = modifiers, isBlank(modifiers) && (this.modifiers = []);
    }
    return Statement.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    }, Statement;
  }(),
      DeclareVarStmt = function(_super) {
        function DeclareVarStmt(name, value, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.value = value, this.type = isPresent(type) ? type : value.type;
        }
        return __extends(DeclareVarStmt, _super), DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareVarStmt(this, context);
        }, DeclareVarStmt;
      }(Statement),
      DeclareFunctionStmt = function(_super) {
        function DeclareFunctionStmt(name, params, statements, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.params = params, this.statements = statements, this.type = type;
        }
        return __extends(DeclareFunctionStmt, _super), DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareFunctionStmt(this, context);
        }, DeclareFunctionStmt;
      }(Statement),
      ExpressionStatement = function(_super) {
        function ExpressionStatement(expr) {
          _super.call(this), this.expr = expr;
        }
        return __extends(ExpressionStatement, _super), ExpressionStatement.prototype.visitStatement = function(visitor, context) {
          return visitor.visitExpressionStmt(this, context);
        }, ExpressionStatement;
      }(Statement),
      ReturnStatement = function(_super) {
        function ReturnStatement(value) {
          _super.call(this), this.value = value;
        }
        return __extends(ReturnStatement, _super), ReturnStatement.prototype.visitStatement = function(visitor, context) {
          return visitor.visitReturnStmt(this, context);
        }, ReturnStatement;
      }(Statement),
      AbstractClassPart = function() {
        function AbstractClassPart(type, modifiers) {
          void 0 === type && (type = null), this.type = type, this.modifiers = modifiers, isBlank(modifiers) && (this.modifiers = []);
        }
        return AbstractClassPart.prototype.hasModifier = function(modifier) {
          return this.modifiers.indexOf(modifier) !== -1;
        }, AbstractClassPart;
      }(),
      ClassField = function(_super) {
        function ClassField(name, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name;
        }
        return __extends(ClassField, _super), ClassField;
      }(AbstractClassPart),
      ClassMethod = function(_super) {
        function ClassMethod(name, params, body, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name, this.params = params, this.body = body;
        }
        return __extends(ClassMethod, _super), ClassMethod;
      }(AbstractClassPart),
      ClassGetter = function(_super) {
        function ClassGetter(name, body, type, modifiers) {
          void 0 === type && (type = null), void 0 === modifiers && (modifiers = null), _super.call(this, type, modifiers), this.name = name, this.body = body;
        }
        return __extends(ClassGetter, _super), ClassGetter;
      }(AbstractClassPart),
      ClassStmt = function(_super) {
        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
          void 0 === modifiers && (modifiers = null), _super.call(this, modifiers), this.name = name, this.parent = parent, this.fields = fields, this.getters = getters, this.constructorMethod = constructorMethod, this.methods = methods;
        }
        return __extends(ClassStmt, _super), ClassStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitDeclareClassStmt(this, context);
        }, ClassStmt;
      }(Statement),
      IfStmt = function(_super) {
        function IfStmt(condition, trueCase, falseCase) {
          void 0 === falseCase && (falseCase = []), _super.call(this), this.condition = condition, this.trueCase = trueCase, this.falseCase = falseCase;
        }
        return __extends(IfStmt, _super), IfStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitIfStmt(this, context);
        }, IfStmt;
      }(Statement),
      TryCatchStmt = function(_super) {
        function TryCatchStmt(bodyStmts, catchStmts) {
          _super.call(this), this.bodyStmts = bodyStmts, this.catchStmts = catchStmts;
        }
        return __extends(TryCatchStmt, _super), TryCatchStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitTryCatchStmt(this, context);
        }, TryCatchStmt;
      }(Statement),
      ThrowStmt = function(_super) {
        function ThrowStmt(error) {
          _super.call(this), this.error = error;
        }
        return __extends(ThrowStmt, _super), ThrowStmt.prototype.visitStatement = function(visitor, context) {
          return visitor.visitThrowStmt(this, context);
        }, ThrowStmt;
      }(Statement),
      ExpressionTransformer = function() {
        function ExpressionTransformer() {}
        return ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
          var method = isPresent(ast.builtin) ? ast.builtin : ast.name;
          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
        }, ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        }, ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
        }, ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
          return new NotExpr(ast.condition.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
          return new CastExpr(ast.value.visitExpression(this, context), context);
        }, ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
          return ast;
        }, ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
        }, ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
        }, ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
        }, ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
        }, ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
          var _this = this;
          return new LiteralMapExpr(ast.entries.map(function(entry) {
            return [entry[0], entry[1].visitExpression(_this, context)];
          }));
        }, ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
          var _this = this;
          return exprs.map(function(expr) {
            return expr.visitExpression(_this, context);
          });
        }, ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
        }, ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
          return stmt;
        }, ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
          return new ExpressionStatement(stmt.expr.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
          return new ReturnStatement(stmt.value.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
          return stmt;
        }, ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
        }, ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
        }, ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
          return new ThrowStmt(stmt.error.visitExpression(this, context));
        }, ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
          return stmt;
        }, ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
          var _this = this;
          return stmts.map(function(stmt) {
            return stmt.visitStatement(_this, context);
          });
        }, ExpressionTransformer;
      }(),
      RecursiveExpressionVisitor = function() {
        function RecursiveExpressionVisitor() {}
        return RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
          return expr.value.visitExpression(this, context), expr;
        }, RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
          return expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr;
        }, RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
          return expr.receiver.visitExpression(this, context), expr.value.visitExpression(this, context), expr;
        }, RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
          return ast.receiver.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
          return ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
          return ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
          return ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
          return ast.condition.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
          return ast.value.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
          return ast;
        }, RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
          return ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
          return ast.receiver.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
          return ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
          return this.visitAllExpressions(ast.entries, context), ast;
        }, RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
          var _this = this;
          return ast.entries.forEach(function(entry) {
            return entry[1].visitExpression(_this, context);
          }), ast;
        }, RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
          var _this = this;
          exprs.forEach(function(expr) {
            return expr.visitExpression(_this, context);
          });
        }, RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
          return stmt.value.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
          return stmt;
        }, RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
          return stmt.expr.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
          return stmt.value.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
          return stmt;
        }, RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
          return stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
          return this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
          return stmt.error.visitExpression(this, context), stmt;
        }, RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
          return stmt;
        }, RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
          var _this = this;
          stmts.forEach(function(stmt) {
            return stmt.visitStatement(_this, context);
          });
        }, RecursiveExpressionVisitor;
      }(),
      _ReplaceVariableTransformer = function(_super) {
        function _ReplaceVariableTransformer(_varName, _newValue) {
          _super.call(this), this._varName = _varName, this._newValue = _newValue;
        }
        return __extends(_ReplaceVariableTransformer, _super), _ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
          return ast.name == this._varName ? this._newValue : ast;
        }, _ReplaceVariableTransformer;
      }(ExpressionTransformer),
      _VariableFinder = function(_super) {
        function _VariableFinder() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          _super.apply(this, args), this.varNames = new Set;
        }
        return __extends(_VariableFinder, _super), _VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
          return this.varNames.add(ast.name), null;
        }, _VariableFinder;
      }(RecursiveExpressionVisitor),
      MODULE_SUFFIX = "",
      CAMEL_CASE_REGEXP = /([A-Z])/g,
      ValueTransformer = function() {
        function ValueTransformer() {}
        return ValueTransformer.prototype.visitArray = function(arr, context) {
          var _this = this;
          return arr.map(function(value) {
            return visitValue(value, _this, context);
          });
        }, ValueTransformer.prototype.visitStringMap = function(map, context) {
          var _this = this,
              result = {};
          return StringMapWrapper.forEach(map, function(value, key) {
            result[key] = visitValue(value, _this, context);
          }), result;
        }, ValueTransformer.prototype.visitPrimitive = function(value, context) {
          return value;
        }, ValueTransformer.prototype.visitOther = function(value, context) {
          return value;
        }, ValueTransformer;
      }(),
      SyncAsyncResult = function() {
        function SyncAsyncResult(syncResult, asyncResult) {
          void 0 === asyncResult && (asyncResult = null), this.syncResult = syncResult, this.asyncResult = asyncResult, asyncResult || (this.asyncResult = Promise.resolve(syncResult));
        }
        return SyncAsyncResult;
      }(),
      HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/,
      UNDEFINED = new Object,
      CompileMetadataWithIdentifier = function() {
        function CompileMetadataWithIdentifier() {}
        return Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileMetadataWithIdentifier.prototype, "runtimeCacheKey", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileMetadataWithIdentifier.prototype, "assetCacheKey", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), CompileMetadataWithIdentifier.prototype.equalsTo = function(id2) {
          return unimplemented();
        }, CompileMetadataWithIdentifier;
      }(),
      CompileAnimationEntryMetadata = function() {
        function CompileAnimationEntryMetadata(name, definitions) {
          void 0 === name && (name = null), void 0 === definitions && (definitions = null), this.name = name, this.definitions = definitions;
        }
        return CompileAnimationEntryMetadata;
      }(),
      CompileAnimationStateMetadata = function() {
        function CompileAnimationStateMetadata() {}
        return CompileAnimationStateMetadata;
      }(),
      CompileAnimationStateDeclarationMetadata = function(_super) {
        function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this), this.stateNameExpr = stateNameExpr, this.styles = styles;
        }
        return __extends(CompileAnimationStateDeclarationMetadata, _super), CompileAnimationStateDeclarationMetadata;
      }(CompileAnimationStateMetadata),
      CompileAnimationStateTransitionMetadata = function(_super) {
        function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this), this.stateChangeExpr = stateChangeExpr, this.steps = steps;
        }
        return __extends(CompileAnimationStateTransitionMetadata, _super), CompileAnimationStateTransitionMetadata;
      }(CompileAnimationStateMetadata),
      CompileAnimationMetadata = function() {
        function CompileAnimationMetadata() {}
        return CompileAnimationMetadata;
      }(),
      CompileAnimationKeyframesSequenceMetadata = function(_super) {
        function CompileAnimationKeyframesSequenceMetadata(steps) {
          void 0 === steps && (steps = []), _super.call(this), this.steps = steps;
        }
        return __extends(CompileAnimationKeyframesSequenceMetadata, _super), CompileAnimationKeyframesSequenceMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationStyleMetadata = function(_super) {
        function CompileAnimationStyleMetadata(offset, styles) {
          void 0 === styles && (styles = null), _super.call(this), this.offset = offset, this.styles = styles;
        }
        return __extends(CompileAnimationStyleMetadata, _super), CompileAnimationStyleMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationAnimateMetadata = function(_super) {
        function CompileAnimationAnimateMetadata(timings, styles) {
          void 0 === timings && (timings = 0), void 0 === styles && (styles = null), _super.call(this), this.timings = timings, this.styles = styles;
        }
        return __extends(CompileAnimationAnimateMetadata, _super), CompileAnimationAnimateMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationWithStepsMetadata = function(_super) {
        function CompileAnimationWithStepsMetadata(steps) {
          void 0 === steps && (steps = null), _super.call(this), this.steps = steps;
        }
        return __extends(CompileAnimationWithStepsMetadata, _super), CompileAnimationWithStepsMetadata;
      }(CompileAnimationMetadata),
      CompileAnimationSequenceMetadata = function(_super) {
        function CompileAnimationSequenceMetadata(steps) {
          void 0 === steps && (steps = null), _super.call(this, steps);
        }
        return __extends(CompileAnimationSequenceMetadata, _super), CompileAnimationSequenceMetadata;
      }(CompileAnimationWithStepsMetadata),
      CompileAnimationGroupMetadata = function(_super) {
        function CompileAnimationGroupMetadata(steps) {
          void 0 === steps && (steps = null), _super.call(this, steps);
        }
        return __extends(CompileAnimationGroupMetadata, _super), CompileAnimationGroupMetadata;
      }(CompileAnimationWithStepsMetadata),
      CompileIdentifierMetadata = function() {
        function CompileIdentifierMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              runtime = _b.runtime,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              value = _b.value;
          this._assetCacheKey = UNDEFINED, this.runtime = runtime, this.name = name, this.prefix = prefix, this.moduleUrl = moduleUrl, this.value = value;
        }
        return Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileIdentifierMetadata.prototype, "runtimeCacheKey", {
          get: function() {
            return this.identifier.runtime;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileIdentifierMetadata.prototype, "assetCacheKey", {
          get: function() {
            if (this._assetCacheKey === UNDEFINED)
              if (isPresent(this.moduleUrl) && isPresent(getUrlScheme(this.moduleUrl))) {
                var uri = reflector.importUri({
                  filePath: this.moduleUrl,
                  name: this.name
                });
                this._assetCacheKey = this.name + "|" + uri;
              } else
                this._assetCacheKey = null;
            return this._assetCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), CompileIdentifierMetadata.prototype.equalsTo = function(id2) {
          var rk = this.runtimeCacheKey,
              ak = this.assetCacheKey;
          return isPresent(rk) && rk == id2.runtimeCacheKey || isPresent(ak) && ak == id2.assetCacheKey;
        }, CompileIdentifierMetadata;
      }(),
      CompileDiDependencyMetadata = function() {
        function CompileDiDependencyMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              isAttribute = _b.isAttribute,
              isSelf = _b.isSelf,
              isHost = _b.isHost,
              isSkipSelf = _b.isSkipSelf,
              isOptional = _b.isOptional,
              isValue = _b.isValue,
              query = _b.query,
              viewQuery = _b.viewQuery,
              token = _b.token,
              value = _b.value;
          this.isAttribute = normalizeBool(isAttribute), this.isSelf = normalizeBool(isSelf), this.isHost = normalizeBool(isHost), this.isSkipSelf = normalizeBool(isSkipSelf), this.isOptional = normalizeBool(isOptional), this.isValue = normalizeBool(isValue), this.query = query, this.viewQuery = viewQuery, this.token = token, this.value = value;
        }
        return CompileDiDependencyMetadata;
      }(),
      CompileProviderMetadata = function() {
        function CompileProviderMetadata(_a) {
          var token = _a.token,
              useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token, this.useClass = useClass, this.useValue = useValue, this.useExisting = useExisting, this.useFactory = useFactory, this.deps = normalizeBlank(deps), this.multi = normalizeBool(multi);
        }
        return CompileProviderMetadata;
      }(),
      CompileFactoryMetadata = function(_super) {
        function CompileFactoryMetadata(_a) {
          var runtime = _a.runtime,
              name = _a.name,
              moduleUrl = _a.moduleUrl,
              prefix = _a.prefix,
              diDeps = _a.diDeps,
              value = _a.value;
          _super.call(this, {
            runtime: runtime,
            name: name,
            prefix: prefix,
            moduleUrl: moduleUrl,
            value: value
          }), this.diDeps = _normalizeArray(diDeps);
        }
        return __extends(CompileFactoryMetadata, _super), CompileFactoryMetadata;
      }(CompileIdentifierMetadata),
      CompileTokenMetadata = function() {
        function CompileTokenMetadata(_a) {
          var value = _a.value,
              identifier = _a.identifier,
              identifierIsInstance = _a.identifierIsInstance;
          this.value = value, this.identifier = identifier, this.identifierIsInstance = normalizeBool(identifierIsInstance);
        }
        return Object.defineProperty(CompileTokenMetadata.prototype, "runtimeCacheKey", {
          get: function() {
            return isPresent(this.identifier) ? this.identifier.runtimeCacheKey : this.value;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileTokenMetadata.prototype, "assetCacheKey", {
          get: function() {
            return isPresent(this.identifier) ? this.identifier.assetCacheKey : this.value;
          },
          enumerable: !0,
          configurable: !0
        }), CompileTokenMetadata.prototype.equalsTo = function(token2) {
          var rk = this.runtimeCacheKey,
              ak = this.assetCacheKey;
          return isPresent(rk) && rk == token2.runtimeCacheKey || isPresent(ak) && ak == token2.assetCacheKey;
        }, Object.defineProperty(CompileTokenMetadata.prototype, "name", {
          get: function() {
            return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
          },
          enumerable: !0,
          configurable: !0
        }), CompileTokenMetadata;
      }(),
      CompileIdentifierMap = function() {
        function CompileIdentifierMap() {
          this._valueMap = new Map, this._values = [], this._tokens = [];
        }
        return CompileIdentifierMap.prototype.add = function(token, value) {
          var existing = this.get(token);
          if (isPresent(existing))
            throw new BaseException("Cannot overwrite in a CompileIdentifierMap! Token: " + token.identifier.name);
          this._tokens.push(token), this._values.push(value);
          var rk = token.runtimeCacheKey;
          isPresent(rk) && this._valueMap.set(rk, value);
          var ak = token.assetCacheKey;
          isPresent(ak) && this._valueMap.set(ak, value);
        }, CompileIdentifierMap.prototype.get = function(token) {
          var result,
              rk = token.runtimeCacheKey,
              ak = token.assetCacheKey;
          return isPresent(rk) && (result = this._valueMap.get(rk)), isBlank(result) && isPresent(ak) && (result = this._valueMap.get(ak)), result;
        }, CompileIdentifierMap.prototype.keys = function() {
          return this._tokens;
        }, CompileIdentifierMap.prototype.values = function() {
          return this._values;
        }, Object.defineProperty(CompileIdentifierMap.prototype, "size", {
          get: function() {
            return this._values.length;
          },
          enumerable: !0,
          configurable: !0
        }), CompileIdentifierMap;
      }(),
      CompileTypeMetadata = function(_super) {
        function CompileTypeMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              runtime = _b.runtime,
              name = _b.name,
              moduleUrl = _b.moduleUrl,
              prefix = _b.prefix,
              isHost = _b.isHost,
              value = _b.value,
              diDeps = _b.diDeps,
              lifecycleHooks = _b.lifecycleHooks;
          _super.call(this, {
            runtime: runtime,
            name: name,
            moduleUrl: moduleUrl,
            prefix: prefix,
            value: value
          }), this.isHost = normalizeBool(isHost), this.diDeps = _normalizeArray(diDeps), this.lifecycleHooks = _normalizeArray(lifecycleHooks);
        }
        return __extends(CompileTypeMetadata, _super), CompileTypeMetadata;
      }(CompileIdentifierMetadata),
      CompileQueryMetadata = function() {
        function CompileQueryMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              selectors = _b.selectors,
              descendants = _b.descendants,
              first = _b.first,
              propertyName = _b.propertyName,
              read = _b.read;
          this.selectors = selectors, this.descendants = normalizeBool(descendants), this.first = normalizeBool(first), this.propertyName = propertyName, this.read = read;
        }
        return CompileQueryMetadata;
      }(),
      CompileStylesheetMetadata = function() {
        function CompileStylesheetMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              moduleUrl = _b.moduleUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls;
          this.moduleUrl = moduleUrl, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls);
        }
        return CompileStylesheetMetadata;
      }(),
      CompileTemplateMetadata = function() {
        function CompileTemplateMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              encapsulation = _b.encapsulation,
              template = _b.template,
              templateUrl = _b.templateUrl,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              externalStylesheets = _b.externalStylesheets,
              animations = _b.animations,
              ngContentSelectors = _b.ngContentSelectors,
              interpolation = _b.interpolation;
          if (this.encapsulation = encapsulation, this.template = template, this.templateUrl = templateUrl, this.styles = _normalizeArray(styles), this.styleUrls = _normalizeArray(styleUrls), this.externalStylesheets = _normalizeArray(externalStylesheets), this.animations = isPresent(animations) ? ListWrapper.flatten(animations) : [], this.ngContentSelectors = isPresent(ngContentSelectors) ? ngContentSelectors : [], isPresent(interpolation) && 2 != interpolation.length)
            throw new BaseException("'interpolation' should have a start and an end symbol.");
          this.interpolation = interpolation;
        }
        return CompileTemplateMetadata;
      }(),
      CompileDirectiveMetadata = function() {
        function CompileDirectiveMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              hostListeners = _b.hostListeners,
              hostProperties = _b.hostProperties,
              hostAttributes = _b.hostAttributes,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              entryComponents = _b.entryComponents,
              viewDirectives = _b.viewDirectives,
              viewPipes = _b.viewPipes,
              template = _b.template;
          this.type = type, this.isComponent = isComponent, this.selector = selector, this.exportAs = exportAs, this.changeDetection = changeDetection, this.inputs = inputs, this.outputs = outputs, this.hostListeners = hostListeners, this.hostProperties = hostProperties, this.hostAttributes = hostAttributes, this.providers = _normalizeArray(providers), this.viewProviders = _normalizeArray(viewProviders), this.queries = _normalizeArray(queries), this.viewQueries = _normalizeArray(viewQueries), this.entryComponents = _normalizeArray(entryComponents), this.viewDirectives = _normalizeArray(viewDirectives), this.viewPipes = _normalizeArray(viewPipes), this.template = template;
        }
        return CompileDirectiveMetadata.create = function(_a) {
          var _b = void 0 === _a ? {} : _a,
              type = _b.type,
              isComponent = _b.isComponent,
              selector = _b.selector,
              exportAs = _b.exportAs,
              changeDetection = _b.changeDetection,
              inputs = _b.inputs,
              outputs = _b.outputs,
              host = _b.host,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              queries = _b.queries,
              viewQueries = _b.viewQueries,
              entryComponents = _b.entryComponents,
              viewDirectives = _b.viewDirectives,
              viewPipes = _b.viewPipes,
              template = _b.template,
              hostListeners = {},
              hostProperties = {},
              hostAttributes = {};
          isPresent(host) && StringMapWrapper.forEach(host, function(value, key) {
            var matches = key.match(HOST_REG_EXP);
            null === matches ? hostAttributes[key] = value : isPresent(matches[1]) ? hostProperties[matches[1]] = value : isPresent(matches[2]) ? hostListeners[matches[2]] = value : isPresent(matches[3]) && (hostProperties["@" + matches[3]] = value);
          });
          var inputsMap = {};
          isPresent(inputs) && inputs.forEach(function(bindConfig) {
            var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
            inputsMap[parts[0]] = parts[1];
          });
          var outputsMap = {};
          return isPresent(outputs) && outputs.forEach(function(bindConfig) {
            var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
            outputsMap[parts[0]] = parts[1];
          }), new CompileDirectiveMetadata({
            type: type,
            isComponent: normalizeBool(isComponent),
            selector: selector,
            exportAs: exportAs,
            changeDetection: changeDetection,
            inputs: inputsMap,
            outputs: outputsMap,
            hostListeners: hostListeners,
            hostProperties: hostProperties,
            hostAttributes: hostAttributes,
            providers: providers,
            viewProviders: viewProviders,
            queries: queries,
            viewQueries: viewQueries,
            entryComponents: entryComponents,
            viewDirectives: viewDirectives,
            viewPipes: viewPipes,
            template: template
          });
        }, Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileDirectiveMetadata.prototype, "runtimeCacheKey", {
          get: function() {
            return this.type.runtimeCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileDirectiveMetadata.prototype, "assetCacheKey", {
          get: function() {
            return this.type.assetCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), CompileDirectiveMetadata.prototype.equalsTo = function(other) {
          return this.type.equalsTo(other.identifier);
        }, CompileDirectiveMetadata;
      }(),
      CompilePipeMetadata = function() {
        function CompilePipeMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              type = _b.type,
              name = _b.name,
              pure = _b.pure;
          this.type = type, this.name = name, this.pure = normalizeBool(pure);
        }
        return Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompilePipeMetadata.prototype, "runtimeCacheKey", {
          get: function() {
            return this.type.runtimeCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompilePipeMetadata.prototype, "assetCacheKey", {
          get: function() {
            return this.type.assetCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), CompilePipeMetadata.prototype.equalsTo = function(other) {
          return this.type.equalsTo(other.identifier);
        }, CompilePipeMetadata;
      }(),
      CompileNgModuleMetadata = function() {
        function CompileNgModuleMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              type = _b.type,
              providers = _b.providers,
              declaredDirectives = _b.declaredDirectives,
              exportedDirectives = _b.exportedDirectives,
              declaredPipes = _b.declaredPipes,
              exportedPipes = _b.exportedPipes,
              entryComponents = _b.entryComponents,
              bootstrapComponents = _b.bootstrapComponents,
              importedModules = _b.importedModules,
              exportedModules = _b.exportedModules,
              schemas = _b.schemas,
              transitiveModule = _b.transitiveModule;
          this.type = type, this.declaredDirectives = _normalizeArray(declaredDirectives), this.exportedDirectives = _normalizeArray(exportedDirectives), this.declaredPipes = _normalizeArray(declaredPipes), this.exportedPipes = _normalizeArray(exportedPipes), this.providers = _normalizeArray(providers), this.entryComponents = _normalizeArray(entryComponents), this.bootstrapComponents = _normalizeArray(bootstrapComponents), this.importedModules = _normalizeArray(importedModules), this.exportedModules = _normalizeArray(exportedModules), this.schemas = _normalizeArray(schemas), this.transitiveModule = transitiveModule;
        }
        return Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
          get: function() {
            return this.type;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileNgModuleMetadata.prototype, "runtimeCacheKey", {
          get: function() {
            return this.type.runtimeCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompileNgModuleMetadata.prototype, "assetCacheKey", {
          get: function() {
            return this.type.assetCacheKey;
          },
          enumerable: !0,
          configurable: !0
        }), CompileNgModuleMetadata.prototype.equalsTo = function(other) {
          return this.type.equalsTo(other.identifier);
        }, CompileNgModuleMetadata;
      }(),
      TransitiveCompileNgModuleMetadata = function() {
        function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes) {
          var _this = this;
          this.modules = modules, this.providers = providers, this.entryComponents = entryComponents, this.directives = directives, this.pipes = pipes, this.directivesSet = new Set, this.pipesSet = new Set, directives.forEach(function(dir) {
            return _this.directivesSet.add(dir.type.runtime);
          }), pipes.forEach(function(pipe) {
            return _this.pipesSet.add(pipe.type.runtime);
          });
        }
        return TransitiveCompileNgModuleMetadata;
      }(),
      APP_VIEW_MODULE_URL = assetUrl("core", "linker/view"),
      VIEW_UTILS_MODULE_URL = assetUrl("core", "linker/view_utils"),
      CD_MODULE_URL = assetUrl("core", "change_detection/change_detection"),
      impViewUtils = ViewUtils,
      impAppView = AppView,
      impDebugAppView = DebugAppView,
      impDebugContext = DebugContext,
      impAppElement = AppElement,
      impElementRef = _angular_core.ElementRef,
      impViewContainerRef = _angular_core.ViewContainerRef,
      impChangeDetectorRef = _angular_core.ChangeDetectorRef,
      impRenderComponentType = _angular_core.RenderComponentType,
      impQueryList = _angular_core.QueryList,
      impTemplateRef = _angular_core.TemplateRef,
      impTemplateRef_ = TemplateRef_,
      impValueUnwrapper = ValueUnwrapper,
      impInjector = _angular_core.Injector,
      impViewEncapsulation = _angular_core.ViewEncapsulation,
      impViewType = ViewType,
      impChangeDetectionStrategy = _angular_core.ChangeDetectionStrategy,
      impStaticNodeDebugInfo = StaticNodeDebugInfo,
      impRenderer = _angular_core.Renderer,
      impSimpleChange = _angular_core.SimpleChange,
      impUNINITIALIZED = UNINITIALIZED,
      impChangeDetectorStatus = ChangeDetectorStatus,
      impFlattenNestedViewRenderNodes = flattenNestedViewRenderNodes,
      impDevModeEqual = devModeEqual,
      impInterpolate = interpolate,
      impCheckBinding = checkBinding,
      impCastByValue = castByValue,
      impEMPTY_ARRAY = EMPTY_ARRAY,
      impEMPTY_MAP = EMPTY_MAP,
      impAnimationGroupPlayer = AnimationGroupPlayer_,
      impAnimationSequencePlayer = AnimationSequencePlayer_,
      impAnimationKeyframe = AnimationKeyframe_,
      impAnimationStyles = AnimationStyles_,
      impNoOpAnimationPlayer = NoOpAnimationPlayer_,
      ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl("core", "animation/animation_style_util"),
      Identifiers = function() {
        function Identifiers() {}
        return Identifiers;
      }();
  Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = new CompileIdentifierMetadata({
    name: "ANALYZE_FOR_ENTRY_COMPONENTS",
    moduleUrl: assetUrl("core", "metadata/di"),
    runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
  }), Identifiers.ViewUtils = new CompileIdentifierMetadata({
    name: "ViewUtils",
    moduleUrl: assetUrl("core", "linker/view_utils"),
    runtime: impViewUtils
  }), Identifiers.AppView = new CompileIdentifierMetadata({
    name: "AppView",
    moduleUrl: APP_VIEW_MODULE_URL,
    runtime: impAppView
  }), Identifiers.DebugAppView = new CompileIdentifierMetadata({
    name: "DebugAppView",
    moduleUrl: APP_VIEW_MODULE_URL,
    runtime: impDebugAppView
  }), Identifiers.AppElement = new CompileIdentifierMetadata({
    name: "AppElement",
    moduleUrl: assetUrl("core", "linker/element"),
    runtime: impAppElement
  }), Identifiers.ElementRef = new CompileIdentifierMetadata({
    name: "ElementRef",
    moduleUrl: assetUrl("core", "linker/element_ref"),
    runtime: impElementRef
  }), Identifiers.ViewContainerRef = new CompileIdentifierMetadata({
    name: "ViewContainerRef",
    moduleUrl: assetUrl("core", "linker/view_container_ref"),
    runtime: impViewContainerRef
  }), Identifiers.ChangeDetectorRef = new CompileIdentifierMetadata({
    name: "ChangeDetectorRef",
    moduleUrl: assetUrl("core", "change_detection/change_detector_ref"),
    runtime: impChangeDetectorRef
  }), Identifiers.RenderComponentType = new CompileIdentifierMetadata({
    name: "RenderComponentType",
    moduleUrl: assetUrl("core", "render/api"),
    runtime: impRenderComponentType
  }), Identifiers.QueryList = new CompileIdentifierMetadata({
    name: "QueryList",
    moduleUrl: assetUrl("core", "linker/query_list"),
    runtime: impQueryList
  }), Identifiers.TemplateRef = new CompileIdentifierMetadata({
    name: "TemplateRef",
    moduleUrl: assetUrl("core", "linker/template_ref"),
    runtime: impTemplateRef
  }), Identifiers.TemplateRef_ = new CompileIdentifierMetadata({
    name: "TemplateRef_",
    moduleUrl: assetUrl("core", "linker/template_ref"),
    runtime: impTemplateRef_
  }), Identifiers.CodegenComponentFactoryResolver = new CompileIdentifierMetadata({
    name: "CodegenComponentFactoryResolver",
    moduleUrl: assetUrl("core", "linker/component_factory_resolver"),
    runtime: CodegenComponentFactoryResolver
  }), Identifiers.ComponentFactoryResolver = new CompileIdentifierMetadata({
    name: "ComponentFactoryResolver",
    moduleUrl: assetUrl("core", "linker/component_factory_resolver"),
    runtime: _angular_core.ComponentFactoryResolver
  }), Identifiers.ComponentFactory = new CompileIdentifierMetadata({
    name: "ComponentFactory",
    runtime: _angular_core.ComponentFactory,
    moduleUrl: assetUrl("core", "linker/component_factory")
  }), Identifiers.NgModuleFactory = new CompileIdentifierMetadata({
    name: "NgModuleFactory",
    runtime: _angular_core.NgModuleFactory,
    moduleUrl: assetUrl("core", "linker/ng_module_factory")
  }), Identifiers.NgModuleInjector = new CompileIdentifierMetadata({
    name: "NgModuleInjector",
    runtime: NgModuleInjector,
    moduleUrl: assetUrl("core", "linker/ng_module_factory")
  }), Identifiers.ValueUnwrapper = new CompileIdentifierMetadata({
    name: "ValueUnwrapper",
    moduleUrl: CD_MODULE_URL,
    runtime: impValueUnwrapper
  }), Identifiers.Injector = new CompileIdentifierMetadata({
    name: "Injector",
    moduleUrl: assetUrl("core", "di/injector"),
    runtime: impInjector
  }), Identifiers.ViewEncapsulation = new CompileIdentifierMetadata({
    name: "ViewEncapsulation",
    moduleUrl: assetUrl("core", "metadata/view"),
    runtime: impViewEncapsulation
  }), Identifiers.ViewType = new CompileIdentifierMetadata({
    name: "ViewType",
    moduleUrl: assetUrl("core", "linker/view_type"),
    runtime: impViewType
  }), Identifiers.ChangeDetectionStrategy = new CompileIdentifierMetadata({
    name: "ChangeDetectionStrategy",
    moduleUrl: CD_MODULE_URL,
    runtime: impChangeDetectionStrategy
  }), Identifiers.StaticNodeDebugInfo = new CompileIdentifierMetadata({
    name: "StaticNodeDebugInfo",
    moduleUrl: assetUrl("core", "linker/debug_context"),
    runtime: impStaticNodeDebugInfo
  }), Identifiers.DebugContext = new CompileIdentifierMetadata({
    name: "DebugContext",
    moduleUrl: assetUrl("core", "linker/debug_context"),
    runtime: impDebugContext
  }), Identifiers.Renderer = new CompileIdentifierMetadata({
    name: "Renderer",
    moduleUrl: assetUrl("core", "render/api"),
    runtime: impRenderer
  }), Identifiers.SimpleChange = new CompileIdentifierMetadata({
    name: "SimpleChange",
    moduleUrl: CD_MODULE_URL,
    runtime: impSimpleChange
  }), Identifiers.UNINITIALIZED = new CompileIdentifierMetadata({
    name: "UNINITIALIZED",
    moduleUrl: CD_MODULE_URL,
    runtime: impUNINITIALIZED
  }), Identifiers.ChangeDetectorStatus = new CompileIdentifierMetadata({
    name: "ChangeDetectorStatus",
    moduleUrl: CD_MODULE_URL,
    runtime: impChangeDetectorStatus
  }), Identifiers.checkBinding = new CompileIdentifierMetadata({
    name: "checkBinding",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impCheckBinding
  }), Identifiers.flattenNestedViewRenderNodes = new CompileIdentifierMetadata({
    name: "flattenNestedViewRenderNodes",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impFlattenNestedViewRenderNodes
  }), Identifiers.devModeEqual = new CompileIdentifierMetadata({
    name: "devModeEqual",
    moduleUrl: CD_MODULE_URL,
    runtime: impDevModeEqual
  }), Identifiers.interpolate = new CompileIdentifierMetadata({
    name: "interpolate",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impInterpolate
  }), Identifiers.castByValue = new CompileIdentifierMetadata({
    name: "castByValue",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impCastByValue
  }), Identifiers.EMPTY_ARRAY = new CompileIdentifierMetadata({
    name: "EMPTY_ARRAY",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impEMPTY_ARRAY
  }), Identifiers.EMPTY_MAP = new CompileIdentifierMetadata({
    name: "EMPTY_MAP",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: impEMPTY_MAP
  }), Identifiers.pureProxies = [null, new CompileIdentifierMetadata({
    name: "pureProxy1",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy1
  }), new CompileIdentifierMetadata({
    name: "pureProxy2",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy2
  }), new CompileIdentifierMetadata({
    name: "pureProxy3",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy3
  }), new CompileIdentifierMetadata({
    name: "pureProxy4",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy4
  }), new CompileIdentifierMetadata({
    name: "pureProxy5",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy5
  }), new CompileIdentifierMetadata({
    name: "pureProxy6",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy6
  }), new CompileIdentifierMetadata({
    name: "pureProxy7",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy7
  }), new CompileIdentifierMetadata({
    name: "pureProxy8",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy8
  }), new CompileIdentifierMetadata({
    name: "pureProxy9",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy9
  }), new CompileIdentifierMetadata({
    name: "pureProxy10",
    moduleUrl: VIEW_UTILS_MODULE_URL,
    runtime: pureProxy10
  })], Identifiers.SecurityContext = new CompileIdentifierMetadata({
    name: "SecurityContext",
    moduleUrl: assetUrl("core", "security"),
    runtime: _angular_core.SecurityContext
  }), Identifiers.AnimationKeyframe = new CompileIdentifierMetadata({
    name: "AnimationKeyframe",
    moduleUrl: assetUrl("core", "animation/animation_keyframe"),
    runtime: impAnimationKeyframe
  }), Identifiers.AnimationStyles = new CompileIdentifierMetadata({
    name: "AnimationStyles",
    moduleUrl: assetUrl("core", "animation/animation_styles"),
    runtime: impAnimationStyles
  }), Identifiers.NoOpAnimationPlayer = new CompileIdentifierMetadata({
    name: "NoOpAnimationPlayer",
    moduleUrl: assetUrl("core", "animation/animation_player"),
    runtime: impNoOpAnimationPlayer
  }), Identifiers.AnimationGroupPlayer = new CompileIdentifierMetadata({
    name: "AnimationGroupPlayer",
    moduleUrl: assetUrl("core", "animation/animation_group_player"),
    runtime: impAnimationGroupPlayer
  }), Identifiers.AnimationSequencePlayer = new CompileIdentifierMetadata({
    name: "AnimationSequencePlayer",
    moduleUrl: assetUrl("core", "animation/animation_sequence_player"),
    runtime: impAnimationSequencePlayer
  }), Identifiers.prepareFinalAnimationStyles = new CompileIdentifierMetadata({
    name: "prepareFinalAnimationStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impBalanceAnimationStyles
  }), Identifiers.balanceAnimationKeyframes = new CompileIdentifierMetadata({
    name: "balanceAnimationKeyframes",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impBalanceAnimationKeyframes
  }), Identifiers.clearStyles = new CompileIdentifierMetadata({
    name: "clearStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impClearStyles
  }), Identifiers.renderStyles = new CompileIdentifierMetadata({
    name: "renderStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impRenderStyles
  }), Identifiers.collectAndResolveStyles = new CompileIdentifierMetadata({
    name: "collectAndResolveStyles",
    moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
    runtime: impCollectAndResolveStyles
  });
  var HtmlParser = function(_super) {
    function HtmlParser() {
      _super.call(this, getHtmlTagDefinition);
    }
    return __extends(HtmlParser, _super), HtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      return void 0 === parseExpansionForms && (parseExpansionForms = !1), void 0 === interpolationConfig && (interpolationConfig = DEFAULT_INTERPOLATION_CONFIG), _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
    }, HtmlParser;
  }(Parser$1);
  HtmlParser.decorators = [{type: _angular_core.Injectable}], HtmlParser.ctorParameters = [];
  var PreparsedElementType,
      PLURAL_CASES = ["zero", "one", "two", "few", "many", "other"],
      ExpansionResult = function() {
        function ExpansionResult(nodes, expanded, errors) {
          this.nodes = nodes, this.expanded = expanded, this.errors = errors;
        }
        return ExpansionResult;
      }(),
      ExpansionError = function(_super) {
        function ExpansionError(span, errorMsg) {
          _super.call(this, span, errorMsg);
        }
        return __extends(ExpansionError, _super), ExpansionError;
      }(ParseError),
      _Expander = function() {
        function _Expander() {
          this.isExpanded = !1, this.errors = [];
        }
        return _Expander.prototype.visitElement = function(element, context) {
          return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
        }, _Expander.prototype.visitAttribute = function(attribute, context) {
          return attribute;
        }, _Expander.prototype.visitText = function(text, context) {
          return text;
        }, _Expander.prototype.visitComment = function(comment, context) {
          return comment;
        }, _Expander.prototype.visitExpansion = function(icu, context) {
          return this.isExpanded = !0, "plural" == icu.type ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
        }, _Expander.prototype.visitExpansionCase = function(icuCase, context) {
          throw new Error("Should not be reached");
        }, _Expander;
      }(),
      ProviderError = function(_super) {
        function ProviderError(message, span) {
          _super.call(this, span, message);
        }
        return __extends(ProviderError, _super), ProviderError;
      }(ParseError),
      ProviderViewContext = function() {
        function ProviderViewContext(component, sourceSpan) {
          var _this = this;
          this.component = component, this.sourceSpan = sourceSpan, this.errors = [], this.viewQueries = _getViewQueries(component), this.viewProviders = new CompileIdentifierMap, _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function(provider) {
            isBlank(_this.viewProviders.get(provider.token)) && _this.viewProviders.add(provider.token, !0);
          });
        }
        return ProviderViewContext;
      }(),
      ProviderElementContext = function() {
        function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
          var _this = this;
          this._viewContext = _viewContext, this._parent = _parent, this._isViewRoot = _isViewRoot, this._directiveAsts = _directiveAsts, this._sourceSpan = _sourceSpan, this._transformedProviders = new CompileIdentifierMap, this._seenProviders = new CompileIdentifierMap, this._hasViewContainer = !1, this._attrs = {}, attrs.forEach(function(attrAst) {
            return _this._attrs[attrAst.name] = attrAst.value;
          });
          var directivesMeta = _directiveAsts.map(function(directiveAst) {
            return directiveAst.directive;
          });
          this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors), this._contentQueries = _getContentQueries(directivesMeta);
          var queriedTokens = new CompileIdentifierMap;
          this._allProviders.values().forEach(function(provider) {
            _this._addQueryReadsTo(provider.token, queriedTokens);
          }), refs.forEach(function(refAst) {
            _this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);
          }), isPresent(queriedTokens.get(identifierToken(Identifiers.ViewContainerRef))) && (this._hasViewContainer = !0), this._allProviders.values().forEach(function(provider) {
            var eager = provider.eager || isPresent(queriedTokens.get(provider.token));
            eager && _this._getOrCreateLocalProvider(provider.providerType, provider.token, !0);
          });
        }
        return ProviderElementContext.prototype.afterElement = function() {
          var _this = this;
          this._allProviders.values().forEach(function(provider) {
            _this._getOrCreateLocalProvider(provider.providerType, provider.token, !1);
          });
        }, Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
          get: function() {
            return this._transformedProviders.values();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
          get: function() {
            var sortedProviderTypes = this._transformedProviders.values().map(function(provider) {
              return provider.token.identifier;
            }),
                sortedDirectives = ListWrapper.clone(this._directiveAsts);
            return ListWrapper.sort(sortedDirectives, function(dir1, dir2) {
              return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
            }), sortedDirectives;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
          get: function() {
            return this._hasViewContainer;
          },
          enumerable: !0,
          configurable: !0
        }), ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
          this._getQueriesFor(token).forEach(function(query) {
            var queryReadToken = isPresent(query.read) ? query.read : token;
            isBlank(queryReadTokens.get(queryReadToken)) && queryReadTokens.add(queryReadToken, !0);
          });
        }, ProviderElementContext.prototype._getQueriesFor = function(token) {
          for (var queries,
              result = [],
              currentEl = this,
              distance = 0; null !== currentEl; )
            queries = currentEl._contentQueries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries.filter(function(query) {
              return query.descendants || distance <= 1;
            })), currentEl._directiveAsts.length > 0 && distance++, currentEl = currentEl._parent;
          return queries = this._viewContext.viewQueries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries), result;
        }, ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
          var _this = this,
              resolvedProvider = this._allProviders.get(token);
          if (isBlank(resolvedProvider) || (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService || (requestingProviderType === exports.ProviderAstType.PrivateService || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.Builtin)
            return null;
          var transformedProviderAst = this._transformedProviders.get(token);
          if (isPresent(transformedProviderAst))
            return transformedProviderAst;
          if (isPresent(this._seenProviders.get(token)))
            return this._viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan)), null;
          this._seenProviders.add(token, !0);
          var transformedProviders = resolvedProvider.providers.map(function(provider) {
            var transformedDeps,
                transformedUseValue = provider.useValue,
                transformedUseExisting = provider.useExisting;
            if (isPresent(provider.useExisting)) {
              var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}), eager);
              isPresent(existingDiDep.token) ? transformedUseExisting = existingDiDep.token : (transformedUseExisting = null, transformedUseValue = existingDiDep.value);
            } else if (isPresent(provider.useFactory)) {
              var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            } else if (isPresent(provider.useClass)) {
              var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(resolvedProvider.providerType, dep, eager);
              });
            }
            return _transformProvider(provider, {
              useExisting: transformedUseExisting,
              useValue: transformedUseValue,
              deps: transformedDeps
            });
          });
          return transformedProviderAst = _transformProviderAst(resolvedProvider, {
            eager: eager,
            providers: transformedProviders
          }), this._transformedProviders.add(token, transformedProviderAst), transformedProviderAst;
        }, ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
          if (void 0 === eager && (eager = null), dep.isAttribute) {
            var attrValue = this._attrs[dep.token.value];
            return new CompileDiDependencyMetadata({
              isValue: !0,
              value: normalizeBlank(attrValue)
            });
          }
          if (isPresent(dep.query) || isPresent(dep.viewQuery))
            return dep;
          if (isPresent(dep.token)) {
            if (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.Component) {
              if (dep.token.equalsTo(identifierToken(Identifiers.Renderer)) || dep.token.equalsTo(identifierToken(Identifiers.ElementRef)) || dep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)) || dep.token.equalsTo(identifierToken(Identifiers.TemplateRef)))
                return dep;
              dep.token.equalsTo(identifierToken(Identifiers.ViewContainerRef)) && (this._hasViewContainer = !0);
            }
            if (dep.token.equalsTo(identifierToken(Identifiers.Injector)))
              return dep;
            if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager)))
              return dep;
          }
          return null;
        }, ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
          void 0 === eager && (eager = null);
          var currElement = this,
              currEager = eager,
              result = null;
          if (dep.isSkipSelf || (result = this._getLocalDependency(requestingProviderType, dep, eager)), dep.isSelf)
            isBlank(result) && dep.isOptional && (result = new CompileDiDependencyMetadata({
              isValue: !0,
              value: null
            }));
          else {
            for (; isBlank(result) && isPresent(currElement._parent); ) {
              var prevElement = currElement;
              currElement = currElement._parent, prevElement._isViewRoot && (currEager = !1), result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
            }
            isBlank(result) && (result = !dep.isHost || this._viewContext.component.type.isHost || identifierToken(this._viewContext.component.type).equalsTo(dep.token) || isPresent(this._viewContext.viewProviders.get(dep.token)) ? dep : dep.isOptional ? result = new CompileDiDependencyMetadata({
              isValue: !0,
              value: null
            }) : null);
          }
          return isBlank(result) && this._viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan)), result;
        }, ProviderElementContext;
      }(),
      NgModuleProviderAnalyzer = function() {
        function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
          var _this = this;
          this._transformedProviders = new CompileIdentifierMap, this._seenProviders = new CompileIdentifierMap, this._unparsedProviders = [], this._errors = [], this._allProviders = new CompileIdentifierMap;
          var ngModuleTypes = ngModule.transitiveModule.modules.map(function(moduleMeta) {
            return moduleMeta.type;
          });
          ngModuleTypes.forEach(function(ngModuleType) {
            var ngModuleProvider = new CompileProviderMetadata({
              token: new CompileTokenMetadata({identifier: ngModuleType}),
              useClass: ngModuleType
            });
            _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, !0, sourceSpan, _this._errors, _this._allProviders);
          }), _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, !1, sourceSpan, this._errors, this._allProviders);
        }
        return NgModuleProviderAnalyzer.prototype.parse = function() {
          var _this = this;
          if (this._allProviders.values().forEach(function(provider) {
            _this._getOrCreateLocalProvider(provider.token, provider.eager);
          }), this._errors.length > 0) {
            var errorString = this._errors.join("\n");
            throw new BaseException("Provider parse errors:\n" + errorString);
          }
          return this._transformedProviders.values();
        }, NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function(token, eager) {
          var _this = this,
              resolvedProvider = this._allProviders.get(token);
          if (isBlank(resolvedProvider))
            return null;
          var transformedProviderAst = this._transformedProviders.get(token);
          if (isPresent(transformedProviderAst))
            return transformedProviderAst;
          if (isPresent(this._seenProviders.get(token)))
            return this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan)), null;
          this._seenProviders.add(token, !0);
          var transformedProviders = resolvedProvider.providers.map(function(provider) {
            var transformedDeps,
                transformedUseValue = provider.useValue,
                transformedUseExisting = provider.useExisting;
            if (isPresent(provider.useExisting)) {
              var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}), eager, resolvedProvider.sourceSpan);
              isPresent(existingDiDep.token) ? transformedUseExisting = existingDiDep.token : (transformedUseExisting = null, transformedUseValue = existingDiDep.value);
            } else if (isPresent(provider.useFactory)) {
              var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
              });
            } else if (isPresent(provider.useClass)) {
              var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
              transformedDeps = deps.map(function(dep) {
                return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
              });
            }
            return _transformProvider(provider, {
              useExisting: transformedUseExisting,
              useValue: transformedUseValue,
              deps: transformedDeps
            });
          });
          return transformedProviderAst = _transformProviderAst(resolvedProvider, {
            eager: eager,
            providers: transformedProviders
          }), this._transformedProviders.add(token, transformedProviderAst), transformedProviderAst;
        }, NgModuleProviderAnalyzer.prototype._getDependency = function(dep, eager, requestorSourceSpan) {
          void 0 === eager && (eager = null);
          var foundLocal = !1;
          !dep.isSkipSelf && isPresent(dep.token) && (dep.token.equalsTo(identifierToken(Identifiers.Injector)) || dep.token.equalsTo(identifierToken(Identifiers.ComponentFactoryResolver)) ? foundLocal = !0 : isPresent(this._getOrCreateLocalProvider(dep.token, eager)) && (foundLocal = !0));
          var result = dep;
          return dep.isSelf && !foundLocal && (dep.isOptional ? result = new CompileDiDependencyMetadata({
            isValue: !0,
            value: null
          }) : this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan))), result;
        }, NgModuleProviderAnalyzer;
      }(),
      ElementSchemaRegistry = function() {
        function ElementSchemaRegistry() {}
        return ElementSchemaRegistry;
      }(),
      StyleWithImports = function() {
        function StyleWithImports(style, styleUrls) {
          this.style = style, this.styleUrls = styleUrls;
        }
        return StyleWithImports;
      }(),
      _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g,
      _urlWithSchemaRe = /^([^:\/?#]+):/,
      NG_CONTENT_SELECT_ATTR = "select",
      NG_CONTENT_ELEMENT = "ng-content",
      LINK_ELEMENT = "link",
      LINK_STYLE_REL_ATTR = "rel",
      LINK_STYLE_HREF_ATTR = "href",
      LINK_STYLE_REL_VALUE = "stylesheet",
      STYLE_ELEMENT = "style",
      SCRIPT_ELEMENT = "script",
      NG_NON_BINDABLE_ATTR = "ngNonBindable",
      NG_PROJECT_AS = "ngProjectAs";
  !function(PreparsedElementType) {
    PreparsedElementType[PreparsedElementType.NG_CONTENT = 0] = "NG_CONTENT", PreparsedElementType[PreparsedElementType.STYLE = 1] = "STYLE", PreparsedElementType[PreparsedElementType.STYLESHEET = 2] = "STYLESHEET", PreparsedElementType[PreparsedElementType.SCRIPT = 3] = "SCRIPT", PreparsedElementType[PreparsedElementType.OTHER = 4] = "OTHER";
  }(PreparsedElementType || (PreparsedElementType = {}));
  var PreparsedElement = function() {
    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
      this.type = type, this.selectAttr = selectAttr, this.hrefAttr = hrefAttr, this.nonBindable = nonBindable, this.projectAs = projectAs;
    }
    return PreparsedElement;
  }(),
      BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-)|(let-)|(ref-|#)|(on-)|(bindon-)|(animate-|@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/,
      TEMPLATE_ELEMENT = "template",
      TEMPLATE_ATTR = "template",
      TEMPLATE_ATTR_PREFIX = "*",
      CLASS_ATTR = "class",
      PROPERTY_PARTS_SEPARATOR = ".",
      ATTRIBUTE_PREFIX = "attr",
      CLASS_PREFIX = "class",
      STYLE_PREFIX = "style",
      TEXT_CSS_SELECTOR = CssSelector.parse("*")[0],
      TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken("TemplateTransforms"),
      TemplateParseError = function(_super) {
        function TemplateParseError(message, span, level) {
          _super.call(this, span, message, level);
        }
        return __extends(TemplateParseError, _super), TemplateParseError;
      }(ParseError),
      TemplateParseResult = function() {
        function TemplateParseResult(templateAst, errors) {
          this.templateAst = templateAst, this.errors = errors;
        }
        return TemplateParseResult;
      }(),
      TemplateParser = function() {
        function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
          this._exprParser = _exprParser, this._schemaRegistry = _schemaRegistry, this._htmlParser = _htmlParser, this._console = _console, this.transforms = transforms;
        }
        return TemplateParser.prototype.parse = function(component, template, directives, pipes, schemas, templateUrl) {
          var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl),
              warnings = result.errors.filter(function(error) {
                return error.level === ParseErrorLevel.WARNING;
              }),
              errors = result.errors.filter(function(error) {
                return error.level === ParseErrorLevel.FATAL;
              });
          if (warnings.length > 0 && this._console.warn("Template parse warnings:\n" + warnings.join("\n")), errors.length > 0) {
            var errorString = errors.join("\n");
            throw new BaseException("Template parse errors:\n" + errorString);
          }
          return result.templateAst;
        }, TemplateParser.prototype.tryParse = function(component, template, directives, pipes, schemas, templateUrl) {
          var interpolationConfig;
          component.template && (interpolationConfig = InterpolationConfig.fromArray(component.template.interpolation));
          var result,
              htmlAstWithErrors = this._htmlParser.parse(template, templateUrl, !0, interpolationConfig),
              errors = htmlAstWithErrors.errors;
          if (0 == errors.length) {
            var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
            errors.push.apply(errors, expandedHtmlAst.errors), htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
          }
          if (htmlAstWithErrors.rootNodes.length > 0) {
            var uniqDirectives = removeIdentifierDuplicates(directives),
                uniqPipes = removeIdentifierDuplicates(pipes),
                providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan),
                parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, schemas, this._exprParser, this._schemaRegistry);
            result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT), errors.push.apply(errors, parseVisitor.errors.concat(providerViewContext.errors));
          } else
            result = [];
          return this._assertNoReferenceDuplicationOnTemplate(result, errors), errors.length > 0 ? new TemplateParseResult(result, errors) : (isPresent(this.transforms) && this.transforms.forEach(function(transform) {
            result = templateVisitAll(transform, result);
          }), new TemplateParseResult(result, errors));
        }, TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
          var existingReferences = [];
          result.filter(function(element) {
            return !!element.references;
          }).forEach(function(element) {
            return element.references.forEach(function(reference) {
              var name = reference.name;
              if (existingReferences.indexOf(name) < 0)
                existingReferences.push(name);
              else {
                var error = new TemplateParseError('Reference "#' + name + '" is defined several times', reference.sourceSpan, ParseErrorLevel.FATAL);
                errors.push(error);
              }
            });
          });
        }, TemplateParser;
      }();
  TemplateParser.decorators = [{type: _angular_core.Injectable}], TemplateParser.ctorParameters = [{type: Parser}, {type: ElementSchemaRegistry}, {type: HtmlParser}, {type: Console}, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {
      type: _angular_core.Inject,
      args: [TEMPLATE_TRANSFORMS]
    }]
  }];
  var TemplateParseVisitor = function() {
    function TemplateParseVisitor(providerViewContext, directives, pipes, _schemas, _exprParser, _schemaRegistry) {
      var _this = this;
      this.providerViewContext = providerViewContext, this._schemas = _schemas, this._exprParser = _exprParser, this._schemaRegistry = _schemaRegistry, this.errors = [], this.directivesIndex = new Map, this.ngContentCount = 0, this.selectorMatcher = new SelectorMatcher;
      var tempMeta = providerViewContext.component.template;
      isPresent(tempMeta) && isPresent(tempMeta.interpolation) && (this._interpolationConfig = {
        start: tempMeta.interpolation[0],
        end: tempMeta.interpolation[1]
      }), ListWrapper.forEachWithIndex(directives, function(directive, index) {
        var selector = CssSelector.parse(directive.selector);
        _this.selectorMatcher.addSelectables(selector, directive), _this.directivesIndex.set(directive, index);
      }), this.pipesByName = new Map, pipes.forEach(function(pipe) {
        return _this.pipesByName.set(pipe.name, pipe);
      });
    }
    return TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
      void 0 === level && (level = ParseErrorLevel.FATAL), this.errors.push(new TemplateParseError(message, sourceSpan, level));
    }, TemplateParseVisitor.prototype._reportParserErors = function(errors, sourceSpan) {
      for (var _i = 0,
          errors_1 = errors; _i < errors_1.length; _i++) {
        var error = errors_1[_i];
        this._reportError(error.message, sourceSpan);
      }
    }, TemplateParseVisitor.prototype._parseInterpolation = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
        if (ast && this._reportParserErors(ast.errors, sourceSpan), this._checkPipes(ast, sourceSpan), isPresent(ast) && ast.ast.expressions.length > MAX_INTERPOLATION_VALUES)
          throw new BaseException("Only support at most " + MAX_INTERPOLATION_VALUES + " interpolation values!");
        return ast;
      } catch (e) {
        return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
      }
    }, TemplateParseVisitor.prototype._parseAction = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
        return ast && this._reportParserErors(ast.errors, sourceSpan), !ast || ast.ast instanceof EmptyExpr ? (this._reportError("Empty expressions are not allowed", sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo)) : (this._checkPipes(ast, sourceSpan), ast);
      } catch (e) {
        return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
      }
    }, TemplateParseVisitor.prototype._parseBinding = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
        return ast && this._reportParserErors(ast.errors, sourceSpan), this._checkPipes(ast, sourceSpan), ast;
      } catch (e) {
        return this._reportError("" + e, sourceSpan), this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
      }
    }, TemplateParseVisitor.prototype._parseTemplateBindings = function(value, sourceSpan) {
      var _this = this,
          sourceInfo = sourceSpan.start.toString();
      try {
        var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
        return this._reportParserErors(bindingsResult.errors, sourceSpan), bindingsResult.templateBindings.forEach(function(binding) {
          isPresent(binding.expression) && _this._checkPipes(binding.expression, sourceSpan);
        }), bindingsResult.warnings.forEach(function(warning) {
          _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
        }), bindingsResult.templateBindings;
      } catch (e) {
        return this._reportError("" + e, sourceSpan), [];
      }
    }, TemplateParseVisitor.prototype._checkPipes = function(ast, sourceSpan) {
      var _this = this;
      if (isPresent(ast)) {
        var collector = new PipeCollector;
        ast.visit(collector), collector.pipes.forEach(function(pipeName) {
          _this.pipesByName.has(pipeName) || _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
        });
      }
    }, TemplateParseVisitor.prototype.visitExpansion = function(expansion, context) {
      return null;
    }, TemplateParseVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return null;
    }, TemplateParseVisitor.prototype.visitText = function(text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR),
          expr = this._parseInterpolation(text.value, text.sourceSpan);
      return isPresent(expr) ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) : new TextAst(text.value, ngContentIndex, text.sourceSpan);
    }, TemplateParseVisitor.prototype.visitAttribute = function(attribute, contex) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    }, TemplateParseVisitor.prototype.visitComment = function(comment, context) {
      return null;
    }, TemplateParseVisitor.prototype.visitElement = function(element, parent) {
      var _this = this,
          nodeName = element.name,
          preparsedElement = preparseElement(element);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE)
        return null;
      if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr))
        return null;
      var matchableAttrs = [],
          elementOrDirectiveProps = [],
          elementOrDirectiveRefs = [],
          elementVars = [],
          animationProps = [],
          events = [],
          templateElementOrDirectiveProps = [],
          templateMatchableAttrs = [],
          templateElementVars = [],
          hasInlineTemplates = !1,
          attrs = [],
          lcElName = splitNsName(nodeName.toLowerCase())[1],
          isTemplateElement = lcElName == TEMPLATE_ELEMENT;
      element.attrs.forEach(function(attr) {
        var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, animationProps, events, elementOrDirectiveRefs, elementVars),
            hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
        hasTemplateBinding && hasInlineTemplates && _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan), hasBinding || hasTemplateBinding || (attrs.push(_this.visitAttribute(attr, null)), matchableAttrs.push([attr.name, attr.value])), hasTemplateBinding && (hasInlineTemplates = !0);
      });
      var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs),
          directiveMetas = this._parseDirectives(this.selectorMatcher, elementCssSelector),
          references = [],
          directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references),
          elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts).concat(animationProps),
          isViewRoot = parent.isTemplateElement || hasInlineTemplates,
          providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan),
          children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
      providerContext.afterElement();
      var parsedElement,
          projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector,
          ngContentIndex = parent.findNgContentIndex(projectionSelector);
      if (preparsedElement.type === PreparsedElementType.NG_CONTENT)
        isPresent(element.children) && element.children.length > 0 && this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan), parsedElement = new NgContentAst((this.ngContentCount++), hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      else if (isTemplateElement)
        this._assertAllEventsPublishedByDirectives(directiveAsts, events), this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan), parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      else {
        this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
        var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
        parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);
      }
      if (hasInlineTemplates) {
        var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs),
            templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector),
            templateDirectiveAsts = this._createDirectiveAsts(!0, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []),
            templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
        this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
        var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
        templateProviderContext.afterElement(), parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
      }
      return parsedElement;
    }, TemplateParseVisitor.prototype._parseInlineTemplateBinding = function(attr, targetMatchableAttrs, targetProps, targetVars) {
      var templateBindingsSource = null;
      if (this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR)
        templateBindingsSource = attr.value;
      else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
        var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
        templateBindingsSource = 0 == attr.value.length ? key : key + " " + attr.value;
      }
      if (isPresent(templateBindingsSource)) {
        for (var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan),
            i = 0; i < bindings.length; i++) {
          var binding = bindings[i];
          binding.keyIsVar ? targetVars.push(new VariableAst(binding.key, binding.name, attr.sourceSpan)) : isPresent(binding.expression) ? this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps) : (targetMatchableAttrs.push([binding.key, ""]), this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps));
        }
        return !0;
      }
      return !1;
    }, TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetAnimationProps, targetEvents, targetRefs, targetVars) {
      var attrName = this._normalizeAttributeName(attr.name),
          attrValue = attr.value,
          bindParts = attrName.match(BIND_NAME_REGEXP),
          hasBinding = !1;
      if (null !== bindParts)
        if (hasBinding = !0, isPresent(bindParts[1]))
          this._parsePropertyOrAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
        else if (isPresent(bindParts[2])) {
          var identifier = bindParts[8];
          isTemplateElement ? (this._reportError('"var-" on <template> elements is deprecated. Use "let-" instead!', attr.sourceSpan, ParseErrorLevel.WARNING), this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars)) : (this._reportError('"var-" on non <template> elements is deprecated. Use "ref-" instead!', attr.sourceSpan, ParseErrorLevel.WARNING), this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs));
        } else if (isPresent(bindParts[3]))
          if (isTemplateElement) {
            var identifier = bindParts[8];
            this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
          } else
            this._reportError('"let-" is only supported on template elements.', attr.sourceSpan);
        else if (isPresent(bindParts[4])) {
          var identifier = bindParts[8];
          this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
        } else
          isPresent(bindParts[5]) ? this._parseEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents) : isPresent(bindParts[6]) ? (this._parsePropertyOrAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps), this._parseAssignmentEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents)) : isPresent(bindParts[7]) ? ("@" == attrName[0] && isPresent(attrValue) && attrValue.length > 0 && this._reportError('Assigning animation triggers via @prop="exp" attributes with an expression is deprecated. Use property bindings (e.g. [@prop]="exp") instead!', attr.sourceSpan, ParseErrorLevel.WARNING), this._parseAnimation(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetAnimationProps)) : isPresent(bindParts[9]) ? (this._parsePropertyOrAnimation(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps), this._parseAssignmentEvent(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents)) : isPresent(bindParts[10]) ? this._parsePropertyOrAnimation(bindParts[10], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps) : isPresent(bindParts[11]) && this._parseEvent(bindParts[11], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
      else
        hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
      return hasBinding || this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps), hasBinding;
    }, TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
      return attrName.toLowerCase().startsWith("data-") ? attrName.substring(5) : attrName;
    }, TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
      identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in variable names', sourceSpan), targetVars.push(new VariableAst(identifier, value, sourceSpan));
    }, TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
      identifier.indexOf("-") > -1 && this._reportError('"-" is not allowed in reference names', sourceSpan), targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
    }, TemplateParseVisitor.prototype._parsePropertyOrAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps) {
      "@" == name[0] ? this._parseAnimation(name.substr(1), expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) : this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
    }, TemplateParseVisitor.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) {
      isPresent(expression) && 0 != expression.length || (expression = "null");
      var ast = this._parseBinding(expression, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]), targetAnimationProps.push(new BoundElementPropertyAst(name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, ast, null, sourceSpan));
    }, TemplateParseVisitor.prototype._parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      var expr = this._parseInterpolation(value, sourceSpan);
      return !!isPresent(expr) && (this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps), !0);
    }, TemplateParseVisitor.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
      targetMatchableAttrs.push([name, ast.source]), targetProps.push(new BoundElementOrDirectiveProperty(name, ast, (!1), sourceSpan));
    }, TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
    }, TemplateParseVisitor.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      var parts = splitAtColon(name, [null, name]),
          target = parts[0],
          eventName = parts[1],
          ast = this._parseAction(expression, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]), targetEvents.push(new BoundEventAst(eventName, target, ast, sourceSpan));
    }, TemplateParseVisitor.prototype._parseLiteralAttr = function(name, value, sourceSpan, targetProps) {
      targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), (!0), sourceSpan));
    }, TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
      var _this = this,
          directives = ListWrapper.createFixedSize(this.directivesIndex.size);
      return selectorMatcher.match(elementCssSelector, function(selector, directive) {
        directives[_this.directivesIndex.get(directive)] = directive;
      }), directives.filter(function(dir) {
        return isPresent(dir);
      });
    }, TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
      var _this = this,
          matchedReferences = new Set,
          component = null,
          directiveAsts = directives.map(function(directive) {
            var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
            directive.isComponent && (component = directive);
            var hostProperties = [],
                hostEvents = [],
                directiveProperties = [];
            return _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties), _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents), _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties), elementOrDirectiveRefs.forEach(function(elOrDirRef) {
              (0 === elOrDirRef.value.length && directive.isComponent || directive.exportAs == elOrDirRef.value) && (targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan)), matchedReferences.add(elOrDirRef.name));
            }), new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
          });
      return elementOrDirectiveRefs.forEach(function(elOrDirRef) {
        if (elOrDirRef.value.length > 0)
          SetWrapper.has(matchedReferences, elOrDirRef.name) || _this._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan);
        else if (isBlank(component)) {
          var refToken = null;
          isTemplateElement && (refToken = identifierToken(Identifiers.TemplateRef)), targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
        }
      }), directiveAsts;
    }, TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function(elementName, hostProps, sourceSpan, targetPropertyAsts) {
      var _this = this;
      isPresent(hostProps) && StringMapWrapper.forEach(hostProps, function(expression, propName) {
        var exprAst = _this._parseBinding(expression, sourceSpan);
        targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
      });
    }, TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function(hostListeners, sourceSpan, targetEventAsts) {
      var _this = this;
      isPresent(hostListeners) && StringMapWrapper.forEach(hostListeners, function(expression, propName) {
        _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
      });
    }, TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
      if (isPresent(directiveProperties)) {
        var boundPropsByName_1 = new Map;
        boundProps.forEach(function(boundProp) {
          var prevValue = boundPropsByName_1.get(boundProp.name);
          (isBlank(prevValue) || prevValue.isLiteral) && boundPropsByName_1.set(boundProp.name, boundProp);
        }), StringMapWrapper.forEach(directiveProperties, function(elProp, dirProp) {
          var boundProp = boundPropsByName_1.get(elProp);
          isPresent(boundProp) && targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
        });
      }
    }, TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
      var _this = this,
          boundElementProps = [],
          boundDirectivePropsIndex = new Map;
      return directives.forEach(function(directive) {
        directive.inputs.forEach(function(prop) {
          boundDirectivePropsIndex.set(prop.templateName, prop);
        });
      }), props.forEach(function(prop) {
        !prop.isLiteral && isBlank(boundDirectivePropsIndex.get(prop.name)) && boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
      }), boundElementProps;
    }, TemplateParseVisitor.prototype._createElementPropertyAst = function(elementName, name, ast, sourceSpan) {
      var bindingType,
          boundPropertyName,
          securityContext,
          unit = null,
          parts = name.split(PROPERTY_PARTS_SEPARATOR);
      if (1 === parts.length) {
        var partValue = parts[0];
        if ("@" == partValue[0])
          boundPropertyName = partValue.substr(1), bindingType = exports.PropertyBindingType.Animation, securityContext = _angular_core.SecurityContext.NONE, "@" == boundPropertyName[0] && (this._reportError('Assigning animation triggers within host data as attributes such as "@prop": "exp" is deprecated. Use host bindings (e.g. "[@prop]": "exp") instead!', sourceSpan, ParseErrorLevel.WARNING), boundPropertyName = boundPropertyName.substr(1));
        else if (boundPropertyName = this._schemaRegistry.getMappedPropName(partValue), securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName), bindingType = exports.PropertyBindingType.Property, !this._schemaRegistry.hasProperty(elementName, boundPropertyName, this._schemas)) {
          var errorMsg = "Can't bind to '" + boundPropertyName + "' since it isn't a known property of '" + elementName + "'.";
          elementName.indexOf("-") !== -1 && (errorMsg += "\n1. If '" + elementName + "' is an Angular component and it has '" + boundPropertyName + "' input, then verify that it is part of this module." + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schema' of this component to suppress this message.\n")), this._reportError(errorMsg, sourceSpan);
        }
      } else if (parts[0] == ATTRIBUTE_PREFIX) {
        boundPropertyName = parts[1], boundPropertyName.toLowerCase().startsWith("on") && this._reportError("Binding to event attribute '" + boundPropertyName + "' is disallowed " + ("for security reasons, please use (" + boundPropertyName.slice(2) + ")=..."), sourceSpan), securityContext = this._schemaRegistry.securityContext(elementName, this._schemaRegistry.getMappedPropName(boundPropertyName));
        var nsSeparatorIdx = boundPropertyName.indexOf(":");
        if (nsSeparatorIdx > -1) {
          var ns = boundPropertyName.substring(0, nsSeparatorIdx),
              name_2 = boundPropertyName.substring(nsSeparatorIdx + 1);
          boundPropertyName = mergeNsAndName(ns, name_2);
        }
        bindingType = exports.PropertyBindingType.Attribute;
      } else
        parts[0] == CLASS_PREFIX ? (boundPropertyName = parts[1], bindingType = exports.PropertyBindingType.Class, securityContext = _angular_core.SecurityContext.NONE) : parts[0] == STYLE_PREFIX ? (unit = parts.length > 2 ? parts[2] : null, boundPropertyName = parts[1], bindingType = exports.PropertyBindingType.Style, securityContext = _angular_core.SecurityContext.STYLE) : (this._reportError("Invalid property name '" + name + "'", sourceSpan), bindingType = null, securityContext = null);
      return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);
    }, TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
      var componentTypeNames = [];
      return directives.forEach(function(directive) {
        var typeName = directive.directive.type.name;
        directive.directive.isComponent && componentTypeNames.push(typeName);
      }), componentTypeNames;
    }, TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
      var componentTypeNames = this._findComponentDirectiveNames(directives);
      componentTypeNames.length > 1 && this._reportError("More than one component: " + componentTypeNames.join(","), sourceSpan);
    }, TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
      var _this = this,
          componentTypeNames = this._findComponentDirectiveNames(directives);
      componentTypeNames.length > 0 && this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan), elementProps.forEach(function(prop) {
        _this._reportError("Property binding " + prop.name + ' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "directives" section.', sourceSpan);
      });
    }, TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
      var _this = this,
          allDirectiveEvents = new Set;
      directives.forEach(function(directive) {
        StringMapWrapper.forEach(directive.directive.outputs, function(eventName) {
          allDirectiveEvents.add(eventName);
        });
      }), events.forEach(function(event) {
        !isPresent(event.target) && SetWrapper.has(allDirectiveEvents, event.name) || _this._reportError("Event binding " + event.fullName + ' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "directives" section.', event.sourceSpan);
      });
    }, TemplateParseVisitor;
  }(),
      NonBindableVisitor = function() {
        function NonBindableVisitor() {}
        return NonBindableVisitor.prototype.visitElement = function(ast, parent) {
          var preparsedElement = preparseElement(ast);
          if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET)
            return null;
          var attrNameAndValues = ast.attrs.map(function(attrAst) {
            return [attrAst.name, attrAst.value];
          }),
              selector = createElementCssSelector(ast.name, attrNameAndValues),
              ngContentIndex = parent.findNgContentIndex(selector),
              children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], (!1), children, ngContentIndex, ast.sourceSpan);
        }, NonBindableVisitor.prototype.visitComment = function(comment, context) {
          return null;
        }, NonBindableVisitor.prototype.visitAttribute = function(attribute, context) {
          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        }, NonBindableVisitor.prototype.visitText = function(text, parent) {
          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
          return new TextAst(text.value, ngContentIndex, text.sourceSpan);
        }, NonBindableVisitor.prototype.visitExpansion = function(expansion, context) {
          return expansion;
        }, NonBindableVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
          return expansionCase;
        }, NonBindableVisitor;
      }(),
      BoundElementOrDirectiveProperty = function() {
        function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
          this.name = name, this.expression = expression, this.isLiteral = isLiteral, this.sourceSpan = sourceSpan;
        }
        return BoundElementOrDirectiveProperty;
      }(),
      ElementOrDirectiveRef = function() {
        function ElementOrDirectiveRef(name, value, sourceSpan) {
          this.name = name, this.value = value, this.sourceSpan = sourceSpan;
        }
        return ElementOrDirectiveRef;
      }(),
      ElementContext = function() {
        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
          this.isTemplateElement = isTemplateElement, this._ngContentIndexMatcher = _ngContentIndexMatcher, this._wildcardNgContentIndex = _wildcardNgContentIndex, this.providerContext = providerContext;
        }
        return ElementContext.create = function(isTemplateElement, directives, providerContext) {
          var matcher = new SelectorMatcher,
              wildcardNgContentIndex = null,
              component = directives.find(function(directive) {
                return directive.directive.isComponent;
              });
          if (isPresent(component))
            for (var ngContentSelectors = component.directive.template.ngContentSelectors,
                i = 0; i < ngContentSelectors.length; i++) {
              var selector = ngContentSelectors[i];
              "*" === selector ? wildcardNgContentIndex = i : matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
            }
          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
        }, ElementContext.prototype.findNgContentIndex = function(selector) {
          var ngContentIndices = [];
          return this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
            ngContentIndices.push(ngContentIndex);
          }), ListWrapper.sort(ngContentIndices), isPresent(this._wildcardNgContentIndex) && ngContentIndices.push(this._wildcardNgContentIndex), ngContentIndices.length > 0 ? ngContentIndices[0] : null;
        }, ElementContext;
      }(),
      EMPTY_ELEMENT_CONTEXT = new ElementContext((!0), new SelectorMatcher, null, null),
      NON_BINDABLE_VISITOR = new NonBindableVisitor,
      PipeCollector = function(_super) {
        function PipeCollector() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          _super.apply(this, args), this.pipes = new Set;
        }
        return __extends(PipeCollector, _super), PipeCollector.prototype.visitPipe = function(ast, context) {
          return this.pipes.add(ast.name), ast.exp.visit(this), this.visitAll(ast.args, context), null;
        }, PipeCollector;
      }(RecursiveAstVisitor),
      CompilerConfig = function() {
        function CompilerConfig(_a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.renderTypes,
              renderTypes = void 0 === _c ? new DefaultRenderTypes : _c,
              _d = _b.defaultEncapsulation,
              defaultEncapsulation = void 0 === _d ? _angular_core.ViewEncapsulation.Emulated : _d,
              genDebugInfo = _b.genDebugInfo,
              logBindingUpdate = _b.logBindingUpdate,
              _e = _b.useJit,
              useJit = void 0 === _e || _e,
              _f = _b.deprecatedPlatformDirectives,
              deprecatedPlatformDirectives = void 0 === _f ? [] : _f,
              _g = _b.deprecatedPlatformPipes,
              deprecatedPlatformPipes = void 0 === _g ? [] : _g;
          this.renderTypes = renderTypes, this.defaultEncapsulation = defaultEncapsulation, this._genDebugInfo = genDebugInfo, this._logBindingUpdate = logBindingUpdate, this.useJit = useJit, this.platformDirectives = deprecatedPlatformDirectives, this.platformPipes = deprecatedPlatformPipes;
        }
        return Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
          get: function() {
            return void 0 === this._genDebugInfo ? _angular_core.isDevMode() : this._genDebugInfo;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
          get: function() {
            return void 0 === this._logBindingUpdate ? _angular_core.isDevMode() : this._logBindingUpdate;
          },
          enumerable: !0,
          configurable: !0
        }), CompilerConfig;
      }(),
      RenderTypes = function() {
        function RenderTypes() {}
        return Object.defineProperty(RenderTypes.prototype, "renderer", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderText", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderElement", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderComment", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderNode", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderTypes.prototype, "renderEvent", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), RenderTypes;
      }(),
      DefaultRenderTypes = function() {
        function DefaultRenderTypes() {
          this.renderer = Identifiers.Renderer, this.renderText = null, this.renderElement = null, this.renderComment = null, this.renderNode = null, this.renderEvent = null;
        }
        return DefaultRenderTypes;
      }(),
      AnimationAst = function() {
        function AnimationAst() {
          this.startTime = 0, this.playTime = 0;
        }
        return AnimationAst;
      }(),
      AnimationStateAst = function(_super) {
        function AnimationStateAst() {
          _super.apply(this, arguments);
        }
        return __extends(AnimationStateAst, _super), AnimationStateAst;
      }(AnimationAst),
      AnimationEntryAst = function(_super) {
        function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
          _super.call(this), this.name = name, this.stateDeclarations = stateDeclarations, this.stateTransitions = stateTransitions;
        }
        return __extends(AnimationEntryAst, _super), AnimationEntryAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationEntry(this, context);
        }, AnimationEntryAst;
      }(AnimationAst),
      AnimationStateDeclarationAst = function(_super) {
        function AnimationStateDeclarationAst(stateName, styles) {
          _super.call(this), this.stateName = stateName, this.styles = styles;
        }
        return __extends(AnimationStateDeclarationAst, _super), AnimationStateDeclarationAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStateDeclaration(this, context);
        }, AnimationStateDeclarationAst;
      }(AnimationStateAst),
      AnimationStateTransitionExpression = function() {
        function AnimationStateTransitionExpression(fromState, toState) {
          this.fromState = fromState, this.toState = toState;
        }
        return AnimationStateTransitionExpression;
      }(),
      AnimationStateTransitionAst = function(_super) {
        function AnimationStateTransitionAst(stateChanges, animation) {
          _super.call(this), this.stateChanges = stateChanges, this.animation = animation;
        }
        return __extends(AnimationStateTransitionAst, _super), AnimationStateTransitionAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStateTransition(this, context);
        }, AnimationStateTransitionAst;
      }(AnimationStateAst),
      AnimationStepAst = function(_super) {
        function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
          _super.call(this), this.startingStyles = startingStyles, this.keyframes = keyframes, this.duration = duration, this.delay = delay, this.easing = easing;
        }
        return __extends(AnimationStepAst, _super), AnimationStepAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStep(this, context);
        }, AnimationStepAst;
      }(AnimationAst),
      AnimationStylesAst = function(_super) {
        function AnimationStylesAst(styles) {
          _super.call(this), this.styles = styles;
        }
        return __extends(AnimationStylesAst, _super), AnimationStylesAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationStyles(this, context);
        }, AnimationStylesAst;
      }(AnimationAst),
      AnimationKeyframeAst = function(_super) {
        function AnimationKeyframeAst(offset, styles) {
          _super.call(this), this.offset = offset, this.styles = styles;
        }
        return __extends(AnimationKeyframeAst, _super), AnimationKeyframeAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationKeyframe(this, context);
        }, AnimationKeyframeAst;
      }(AnimationAst),
      AnimationWithStepsAst = function(_super) {
        function AnimationWithStepsAst(steps) {
          _super.call(this), this.steps = steps;
        }
        return __extends(AnimationWithStepsAst, _super), AnimationWithStepsAst;
      }(AnimationAst),
      AnimationGroupAst = function(_super) {
        function AnimationGroupAst(steps) {
          _super.call(this, steps);
        }
        return __extends(AnimationGroupAst, _super), AnimationGroupAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationGroup(this, context);
        }, AnimationGroupAst;
      }(AnimationWithStepsAst),
      AnimationSequenceAst = function(_super) {
        function AnimationSequenceAst(steps) {
          _super.call(this, steps);
        }
        return __extends(AnimationSequenceAst, _super), AnimationSequenceAst.prototype.visit = function(visitor, context) {
          return visitor.visitAnimationSequence(this, context);
        }, AnimationSequenceAst;
      }(AnimationWithStepsAst),
      Math$1 = global$1.Math,
      StylesCollectionEntry = function() {
        function StylesCollectionEntry(time, value) {
          this.time = time, this.value = value;
        }
        return StylesCollectionEntry.prototype.matches = function(time, value) {
          return time == this.time && value == this.value;
        }, StylesCollectionEntry;
      }(),
      StylesCollection = function() {
        function StylesCollection() {
          this.styles = {};
        }
        return StylesCollection.prototype.insertAtTime = function(property, time, value) {
          var tuple = new StylesCollectionEntry(time, value),
              entries = this.styles[property];
          isPresent(entries) || (entries = this.styles[property] = []);
          for (var insertionIndex = 0,
              i = entries.length - 1; i >= 0; i--)
            if (entries[i].time <= time) {
              insertionIndex = i + 1;
              break;
            }
          ListWrapper.insert(entries, insertionIndex, tuple);
        }, StylesCollection.prototype.getByIndex = function(property, index) {
          var items = this.styles[property];
          return isPresent(items) ? index >= items.length ? null : items[index] : null;
        }, StylesCollection.prototype.indexOfAtOrBeforeTime = function(property, time) {
          var entries = this.styles[property];
          if (isPresent(entries))
            for (var i = entries.length - 1; i >= 0; i--)
              if (entries[i].time <= time)
                return i;
          return null;
        }, StylesCollection;
      }(),
      _INITIAL_KEYFRAME = 0,
      _TERMINAL_KEYFRAME = 1,
      _ONE_SECOND = 1e3,
      AnimationParseError = function(_super) {
        function AnimationParseError(message) {
          _super.call(this, null, message);
        }
        return __extends(AnimationParseError, _super), AnimationParseError.prototype.toString = function() {
          return "" + this.msg;
        }, AnimationParseError;
      }(ParseError),
      ParsedAnimationResult = function() {
        function ParsedAnimationResult(ast, errors) {
          this.ast = ast, this.errors = errors;
        }
        return ParsedAnimationResult;
      }(),
      _AnimationTimings = function() {
        function _AnimationTimings(duration, delay, easing) {
          this.duration = duration, this.delay = delay, this.easing = easing;
        }
        return _AnimationTimings;
      }(),
      CompiledAnimation = function() {
        function CompiledAnimation(name, statesMapStatement, statesVariableName, fnStatement, fnVariable) {
          this.name = name, this.statesMapStatement = statesMapStatement, this.statesVariableName = statesVariableName, this.fnStatement = fnStatement, this.fnVariable = fnVariable;
        }
        return CompiledAnimation;
      }(),
      AnimationCompiler = function() {
        function AnimationCompiler() {}
        return AnimationCompiler.prototype.compileComponent = function(component, template) {
          var compiledAnimations = [],
              groupedErrors = [],
              triggerLookup = {},
              componentName = component.type.name;
          if (component.template.animations.forEach(function(entry) {
            var result = parseAnimationEntry(entry),
                triggerName = entry.name;
            if (result.errors.length > 0) {
              var errorMessage = 'Unable to parse the animation sequence for "' + triggerName + '" due to the following errors:';
              result.errors.forEach(function(error) {
                errorMessage += "\n-- " + error.msg;
              }), groupedErrors.push(errorMessage);
            }
            if (triggerLookup[triggerName])
              groupedErrors.push('The animation trigger "' + triggerName + '" has already been registered on "' + componentName + '"');
            else {
              var factoryName = componentName + "_" + entry.name,
                  visitor = new _AnimationBuilder(triggerName, factoryName),
                  compileResult = visitor.build(result.ast);
              compiledAnimations.push(compileResult), triggerLookup[entry.name] = compileResult;
            }
          }), _validateAnimationProperties(compiledAnimations, template).forEach(function(entry) {
            groupedErrors.push(entry.msg);
          }), groupedErrors.length > 0) {
            var errorMessageStr = "Animation parsing for " + component.type.name + " has failed due to the following errors:";
            throw groupedErrors.forEach(function(error) {
              return errorMessageStr += "\n- " + error;
            }), new BaseException(errorMessageStr);
          }
          return compiledAnimations;
        }, AnimationCompiler;
      }(),
      _ANIMATION_FACTORY_ELEMENT_VAR = variable("element"),
      _ANIMATION_DEFAULT_STATE_VAR = variable("defaultStateStyles"),
      _ANIMATION_FACTORY_VIEW_VAR = variable("view"),
      _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop("renderer"),
      _ANIMATION_CURRENT_STATE_VAR = variable("currentState"),
      _ANIMATION_NEXT_STATE_VAR = variable("nextState"),
      _ANIMATION_PLAYER_VAR = variable("player"),
      _ANIMATION_START_STATE_STYLES_VAR = variable("startStateStyles"),
      _ANIMATION_END_STATE_STYLES_VAR = variable("endStateStyles"),
      _ANIMATION_COLLECTED_STYLES = variable("collectedStyles"),
      EMPTY_MAP$1 = literalMap([]),
      _AnimationBuilder = function() {
        function _AnimationBuilder(animationName, factoryName) {
          this.animationName = animationName, this._fnVarName = factoryName + "_factory", this._statesMapVarName = factoryName + "_states", this._statesMapVar = variable(this._statesMapVarName);
        }
        return _AnimationBuilder.prototype.visitAnimationStyles = function(ast, context) {
          var stylesArr = [];
          return context.isExpectingFirstStyleStep && (stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR), context.isExpectingFirstStyleStep = !1), ast.styles.forEach(function(entry) {
            stylesArr.push(literalMap(StringMapWrapper.keys(entry).map(function(key) {
              return [key, literal(entry[key])];
            })));
          }), importExpr(Identifiers.AnimationStyles).instantiate([importExpr(Identifiers.collectAndResolveStyles).callFn([_ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)])]);
        }, _AnimationBuilder.prototype.visitAnimationKeyframe = function(ast, context) {
          return importExpr(Identifiers.AnimationKeyframe).instantiate([literal(ast.offset), ast.styles.visit(this, context)]);
        }, _AnimationBuilder.prototype.visitAnimationStep = function(ast, context) {
          var _this = this;
          if (context.endStateAnimateStep === ast)
            return this._visitEndStateAnimation(ast, context);
          var startingStylesExpr = ast.startingStyles.visit(this, context),
              keyframeExpressions = ast.keyframes.map(function(keyframeEntry) {
                return keyframeEntry.visit(_this, context);
              });
          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions));
        }, _AnimationBuilder.prototype._visitEndStateAnimation = function(ast, context) {
          var _this = this,
              startingStylesExpr = ast.startingStyles.visit(this, context),
              keyframeExpressions = ast.keyframes.map(function(keyframe) {
                return keyframe.visit(_this, context);
              }),
              keyframesExpr = importExpr(Identifiers.balanceAnimationKeyframes).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions)]);
          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr);
        }, _AnimationBuilder.prototype._callAnimateMethod = function(ast, startingStylesExpr, keyframesExpr) {
          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod("animate", [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing)]);
        }, _AnimationBuilder.prototype.visitAnimationSequence = function(ast, context) {
          var _this = this,
              playerExprs = ast.steps.map(function(step) {
                return step.visit(_this, context);
              });
          return importExpr(Identifiers.AnimationSequencePlayer).instantiate([literalArr(playerExprs)]);
        }, _AnimationBuilder.prototype.visitAnimationGroup = function(ast, context) {
          var _this = this,
              playerExprs = ast.steps.map(function(step) {
                return step.visit(_this, context);
              });
          return importExpr(Identifiers.AnimationGroupPlayer).instantiate([literalArr(playerExprs)]);
        }, _AnimationBuilder.prototype.visitAnimationStateDeclaration = function(ast, context) {
          var flatStyles = {};
          _getStylesArray(ast).forEach(function(entry) {
            StringMapWrapper.forEach(entry, function(value, key) {
              flatStyles[key] = value;
            });
          }), context.stateMap.registerState(ast.stateName, flatStyles);
        }, _AnimationBuilder.prototype.visitAnimationStateTransition = function(ast, context) {
          var steps = ast.animation.steps,
              lastStep = steps[steps.length - 1];
          _isEndStateAnimateStep(lastStep) && (context.endStateAnimateStep = lastStep), context.isExpectingFirstStyleStep = !0;
          var stateChangePreconditions = [];
          ast.stateChanges.forEach(function(stateChange) {
            stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState))), stateChange.fromState != ANY_STATE && context.stateMap.registerState(stateChange.fromState), stateChange.toState != ANY_STATE && context.stateMap.registerState(stateChange.toState);
          });
          var animationPlayerExpr = ast.animation.visit(this, context),
              reducedStateChangesPrecondition = stateChangePreconditions.reduce(function(a, b) {
                return a.or(b);
              }),
              precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
          return new IfStmt(precondition, [_ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt()]);
        }, _AnimationBuilder.prototype.visitAnimationEntry = function(ast, context) {
          var _this = this;
          ast.stateDeclarations.forEach(function(def) {
            return def.visit(_this, context);
          }), context.stateMap.registerState(DEFAULT_STATE, {});
          var statements = [];
          statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod("cancelActiveAnimation", [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))]).toStmt()), statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP$1).toDeclStmt()), statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt()), statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt()), statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt()), statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()])), statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt()), statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
          var RENDER_STYLES_FN = importExpr(Identifiers.renderStyles);
          return statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(Identifiers.clearStyles).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt()), ast.stateTransitions.forEach(function(transAst) {
            return statements.push(transAst.visit(_this, context));
          }), statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(importExpr(Identifiers.NoOpAnimationPlayer).instantiate([])).toStmt()])), statements.push(_ANIMATION_PLAYER_VAR.callMethod("onDone", [fn([], [RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(Identifiers.prepareFinalAnimationStyles).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt()), statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod("queueAnimation", [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt()), fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(Identifiers.AppView, [DYNAMIC_TYPE])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)], statements);
        }, _AnimationBuilder.prototype.build = function(ast) {
          var context = new _AnimationBuilderContext,
              fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName),
              fnVariable = variable(this._fnVarName),
              lookupMap = [];
          StringMapWrapper.forEach(context.stateMap.states, function(value, stateName) {
            var variableValue = EMPTY_MAP$1;
            if (isPresent(value)) {
              var styleMap_1 = [];
              StringMapWrapper.forEach(value, function(value, key) {
                styleMap_1.push([key, literal(value)]);
              }), variableValue = literalMap(styleMap_1);
            }
            lookupMap.push([stateName, variableValue]);
          });
          var compiledStatesMapExpr = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
          return new CompiledAnimation(this.animationName, compiledStatesMapExpr, this._statesMapVarName, fnStatement, fnVariable);
        }, _AnimationBuilder;
      }(),
      _AnimationBuilderContext = function() {
        function _AnimationBuilderContext() {
          this.stateMap = new _AnimationBuilderStateMap, this.endStateAnimateStep = null, this.isExpectingFirstStyleStep = !1;
        }
        return _AnimationBuilderContext;
      }(),
      _AnimationBuilderStateMap = function() {
        function _AnimationBuilderStateMap() {
          this._states = {};
        }
        return Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
          get: function() {
            return this._states;
          },
          enumerable: !0,
          configurable: !0
        }), _AnimationBuilderStateMap.prototype.registerState = function(name, value) {
          void 0 === value && (value = null);
          var existingEntry = this._states[name];
          isBlank(existingEntry) && (this._states[name] = value);
        }, _AnimationBuilderStateMap;
      }(),
      _AnimationTemplatePropertyVisitor = function() {
        function _AnimationTemplatePropertyVisitor(animations) {
          var _this = this;
          this._animationRegistry = {}, this.errors = [], animations.forEach(function(entry) {
            _this._animationRegistry[entry.name] = !0;
          });
        }
        return _AnimationTemplatePropertyVisitor.prototype.visitElement = function(ast, ctx) {
          var _this = this;
          ast.inputs.forEach(function(input) {
            if (input.type == exports.PropertyBindingType.Animation) {
              var animationName = input.name;
              isPresent(_this._animationRegistry[animationName]) || _this.errors.push(new AnimationParseError("couldn't find an animation entry for " + animationName));
            }
          }), templateVisitAll(this, ast.children);
        }, _AnimationTemplatePropertyVisitor.prototype.visitBoundText = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitText = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitEmbeddedTemplate = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitNgContent = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitAttr = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitDirective = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitEvent = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitReference = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitVariable = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitDirectiveProperty = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor.prototype.visitElementProperty = function(ast, ctx) {}, _AnimationTemplatePropertyVisitor;
      }(),
      _ValueOutputAstTransformer = function() {
        function _ValueOutputAstTransformer() {}
        return _ValueOutputAstTransformer.prototype.visitArray = function(arr, type) {
          var _this = this;
          return literalArr(arr.map(function(value) {
            return visitValue(value, _this, null);
          }), type);
        }, _ValueOutputAstTransformer.prototype.visitStringMap = function(map, type) {
          var _this = this,
              entries = [];
          return StringMapWrapper.forEach(map, function(value, key) {
            entries.push([key, visitValue(value, _this, null)]);
          }), literalMap(entries, type);
        }, _ValueOutputAstTransformer.prototype.visitPrimitive = function(value, type) {
          return literal(value, type);
        }, _ValueOutputAstTransformer.prototype.visitOther = function(value, type) {
          if (value instanceof CompileIdentifierMetadata)
            return importExpr(value);
          if (value instanceof Expression)
            return value;
          throw new BaseException("Illegal state: Don't now how to compile value " + value);
        }, _ValueOutputAstTransformer;
      }(),
      _DebugState = function() {
        function _DebugState(nodeIndex, sourceAst) {
          this.nodeIndex = nodeIndex, this.sourceAst = sourceAst;
        }
        return _DebugState;
      }(),
      NULL_DEBUG_STATE = new _DebugState(null, null),
      CompileMethod = function() {
        function CompileMethod(_view) {
          this._view = _view, this._newState = NULL_DEBUG_STATE, this._currState = NULL_DEBUG_STATE, this._bodyStatements = [], this._debugEnabled = this._view.genConfig.genDebugInfo;
        }
        return CompileMethod.prototype._updateDebugContextIfNeeded = function() {
          if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
            var expr = this._updateDebugContext(this._newState);
            isPresent(expr) && this._bodyStatements.push(expr.toStmt());
          }
        }, CompileMethod.prototype._updateDebugContext = function(newState) {
          if (this._currState = this._newState = newState, this._debugEnabled) {
            var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
            return THIS_EXPR.callMethod("debug", [literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR]);
          }
          return null;
        }, CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
          return isPresent(res) ? res : NULL_EXPR;
        }, CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
          this._newState = new _DebugState(nodeIndex, templateAst);
        }, CompileMethod.prototype.addStmt = function(stmt) {
          this._updateDebugContextIfNeeded(), this._bodyStatements.push(stmt);
        }, CompileMethod.prototype.addStmts = function(stmts) {
          this._updateDebugContextIfNeeded(), ListWrapper.addAll(this._bodyStatements, stmts);
        }, CompileMethod.prototype.finish = function() {
          return this._bodyStatements;
        }, CompileMethod.prototype.isEmpty = function() {
          return 0 === this._bodyStatements.length;
        }, CompileMethod;
      }(),
      ViewQueryValues = function() {
        function ViewQueryValues(view, values) {
          this.view = view, this.values = values;
        }
        return ViewQueryValues;
      }(),
      CompileQuery = function() {
        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
          this.meta = meta, this.queryList = queryList, this.ownerDirectiveExpression = ownerDirectiveExpression, this.view = view, this._values = new ViewQueryValues(view, []);
        }
        return CompileQuery.prototype.addValue = function(value, view) {
          for (var currentView = view,
              elPath = []; isPresent(currentView) && currentView !== this.view; ) {
            var parentEl = currentView.declarationElement;
            elPath.unshift(parentEl), currentView = parentEl.view;
          }
          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view),
              viewValues = this._values;
          elPath.forEach(function(el) {
            var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
            if (last instanceof ViewQueryValues && last.view === el.embeddedView)
              viewValues = last;
            else {
              var newViewValues = new ViewQueryValues(el.embeddedView, []);
              viewValues.values.push(newViewValues), viewValues = newViewValues;
            }
          }), viewValues.values.push(value), elPath.length > 0 && view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod("setDirty", []).toStmt());
        }, CompileQuery.prototype._isStatic = function() {
          return !this._values.values.some(function(value) {
            return value instanceof ViewQueryValues;
          });
        }, CompileQuery.prototype.afterChildren = function(targetStaticMethod, targetDynamicMethod) {
          var values = createQueryValues(this._values),
              updateStmts = [this.queryList.callMethod("reset", [literalArr(values)]).toStmt()];
          if (isPresent(this.ownerDirectiveExpression)) {
            var valueExpr = this.meta.first ? this.queryList.prop("first") : this.queryList;
            updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
          }
          this.meta.first || updateStmts.push(this.queryList.callMethod("notifyOnChanges", []).toStmt()), this.meta.first && this._isStatic() ? targetStaticMethod.addStmts(updateStmts) : targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop("dirty"), updateStmts));
        }, CompileQuery;
      }(),
      ViewTypeEnum = function() {
        function ViewTypeEnum() {}
        return ViewTypeEnum.fromValue = function(value) {
          return _enumExpression(Identifiers.ViewType, value);
        }, ViewTypeEnum;
      }();
  ViewTypeEnum.HOST = ViewTypeEnum.fromValue(ViewType.HOST), ViewTypeEnum.COMPONENT = ViewTypeEnum.fromValue(ViewType.COMPONENT), ViewTypeEnum.EMBEDDED = ViewTypeEnum.fromValue(ViewType.EMBEDDED);
  var ViewEncapsulationEnum = function() {
    function ViewEncapsulationEnum() {}
    return ViewEncapsulationEnum.fromValue = function(value) {
      return _enumExpression(Identifiers.ViewEncapsulation, value);
    }, ViewEncapsulationEnum;
  }();
  ViewEncapsulationEnum.Emulated = ViewEncapsulationEnum.fromValue(_angular_core.ViewEncapsulation.Emulated), ViewEncapsulationEnum.Native = ViewEncapsulationEnum.fromValue(_angular_core.ViewEncapsulation.Native), ViewEncapsulationEnum.None = ViewEncapsulationEnum.fromValue(_angular_core.ViewEncapsulation.None);
  var ChangeDetectionStrategyEnum = function() {
    function ChangeDetectionStrategyEnum() {}
    return ChangeDetectionStrategyEnum.fromValue = function(value) {
      return _enumExpression(Identifiers.ChangeDetectionStrategy, value);
    }, ChangeDetectionStrategyEnum;
  }();
  ChangeDetectionStrategyEnum.OnPush = ChangeDetectionStrategyEnum.fromValue(_angular_core.ChangeDetectionStrategy.OnPush), ChangeDetectionStrategyEnum.Default = ChangeDetectionStrategyEnum.fromValue(_angular_core.ChangeDetectionStrategy.Default);
  var ChangeDetectorStatusEnum = function() {
    function ChangeDetectorStatusEnum() {}
    return ChangeDetectorStatusEnum.fromValue = function(value) {
      return _enumExpression(Identifiers.ChangeDetectorStatus, value);
    }, ChangeDetectorStatusEnum;
  }();
  ChangeDetectorStatusEnum.CheckOnce = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.CheckOnce), ChangeDetectorStatusEnum.Checked = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Checked), ChangeDetectorStatusEnum.CheckAlways = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.CheckAlways), ChangeDetectorStatusEnum.Detached = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Detached), ChangeDetectorStatusEnum.Errored = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Errored), ChangeDetectorStatusEnum.Destroyed = ChangeDetectorStatusEnum.fromValue(ChangeDetectorStatus.Destroyed);
  var ViewConstructorVars = function() {
    function ViewConstructorVars() {}
    return ViewConstructorVars;
  }();
  ViewConstructorVars.viewUtils = variable("viewUtils"), ViewConstructorVars.parentInjector = variable("parentInjector"), ViewConstructorVars.declarationEl = variable("declarationEl");
  var ViewProperties = function() {
    function ViewProperties() {}
    return ViewProperties;
  }();
  ViewProperties.renderer = THIS_EXPR.prop("renderer"), ViewProperties.projectableNodes = THIS_EXPR.prop("projectableNodes"), ViewProperties.viewUtils = THIS_EXPR.prop("viewUtils");
  var EventHandlerVars = function() {
    function EventHandlerVars() {}
    return EventHandlerVars;
  }();
  EventHandlerVars.event = variable("$event");
  var InjectMethodVars = function() {
    function InjectMethodVars() {}
    return InjectMethodVars;
  }();
  InjectMethodVars.token = variable("token"), InjectMethodVars.requestNodeIndex = variable("requestNodeIndex"), InjectMethodVars.notFoundResult = variable("notFoundResult");
  var DetectChangesVars = function() {
    function DetectChangesVars() {}
    return DetectChangesVars;
  }();
  DetectChangesVars.throwOnChange = variable("throwOnChange"), DetectChangesVars.changes = variable("changes"), DetectChangesVars.changed = variable("changed"), DetectChangesVars.valUnwrapper = variable("valUnwrapper");
  var _Mode,
      CompileNode = function() {
        function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
          this.parent = parent, this.view = view, this.nodeIndex = nodeIndex, this.renderNode = renderNode, this.sourceAst = sourceAst;
        }
        return CompileNode.prototype.isNull = function() {
          return isBlank(this.renderNode);
        }, CompileNode.prototype.isRootElement = function() {
          return this.view != this.parent.view;
        }, CompileNode;
      }(),
      CompileElement = function(_super) {
        function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
          var _this = this;
          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst), this.component = component, this._directives = _directives, this._resolvedProvidersArray = _resolvedProvidersArray, this.hasViewContainer = hasViewContainer, this.hasEmbeddedView = hasEmbeddedView, this._compViewExpr = null, this.instances = new CompileIdentifierMap, this._queryCount = 0, this._queries = new CompileIdentifierMap, this._componentConstructorViewQueryLists = [], this.contentNodesByNgContentIndex = null, this.referenceTokens = {}, references.forEach(function(ref) {
            return _this.referenceTokens[ref.name] = ref.value;
          }), this.elementRef = importExpr(Identifiers.ElementRef).instantiate([this.renderNode]), this.instances.add(identifierToken(Identifiers.ElementRef), this.elementRef), this.injector = THIS_EXPR.callMethod("injector", [literal(this.nodeIndex)]), this.instances.add(identifierToken(Identifiers.Injector), this.injector), this.instances.add(identifierToken(Identifiers.Renderer), THIS_EXPR.prop("renderer")), (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) && this._createAppElement();
        }
        return __extends(CompileElement, _super), CompileElement.createNull = function() {
          return new CompileElement(null, null, null, null, null, null, [], [], (!1), (!1), []);
        }, CompileElement.prototype._createAppElement = function() {
          var fieldName = "_appEl_" + this.nodeIndex,
              parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(Identifiers.AppElement), [StmtModifier.Private]));
          var statement = THIS_EXPR.prop(fieldName).set(importExpr(Identifiers.AppElement).instantiate([literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode])).toStmt();
          this.view.createMethod.addStmt(statement), this.appElement = THIS_EXPR.prop(fieldName), this.instances.add(identifierToken(Identifiers.AppElement), this.appElement);
        }, CompileElement.prototype.createComponentFactoryResolver = function(entryComponents) {
          if (entryComponents && 0 !== entryComponents.length) {
            var createComponentFactoryResolverExpr = importExpr(Identifiers.CodegenComponentFactoryResolver).instantiate([literalArr(entryComponents.map(function(entryComponent) {
              return importExpr(entryComponent);
            })), injectFromViewParentInjector(identifierToken(Identifiers.ComponentFactoryResolver), !1)]),
                provider = new CompileProviderMetadata({
                  token: identifierToken(Identifiers.ComponentFactoryResolver),
                  useValue: createComponentFactoryResolverExpr
                });
            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, (!1), (!0), [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
          }
        }, CompileElement.prototype.setComponentView = function(compViewExpr) {
          this._compViewExpr = compViewExpr, this.contentNodesByNgContentIndex = ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);
          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++)
            this.contentNodesByNgContentIndex[i] = [];
        }, CompileElement.prototype.setEmbeddedView = function(embeddedView) {
          if (this.embeddedView = embeddedView, isPresent(embeddedView)) {
            var createTemplateRefExpr = importExpr(Identifiers.TemplateRef_).instantiate([this.appElement, this.embeddedView.viewFactory]),
                provider = new CompileProviderMetadata({
                  token: identifierToken(Identifiers.TemplateRef),
                  useValue: createTemplateRefExpr
                });
            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, (!1), (!0), [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
          }
        }, CompileElement.prototype.beforeChildren = function() {
          var _this = this;
          this.hasViewContainer && this.instances.add(identifierToken(Identifiers.ViewContainerRef), this.appElement.prop("vcRef")), this._resolvedProviders = new CompileIdentifierMap, this._resolvedProvidersArray.forEach(function(provider) {
            return _this._resolvedProviders.add(provider.token, provider);
          }), this._resolvedProviders.values().forEach(function(resolvedProvider) {
            var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
              if (isPresent(provider.useExisting))
                return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}));
              if (isPresent(provider.useFactory)) {
                var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps,
                    depsExpr = deps.map(function(dep) {
                      return _this._getDependency(resolvedProvider.providerType, dep);
                    });
                return importExpr(provider.useFactory).callFn(depsExpr);
              }
              if (isPresent(provider.useClass)) {
                var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps,
                    depsExpr = deps.map(function(dep) {
                      return _this._getDependency(resolvedProvider.providerType, dep);
                    });
                return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
              }
              return convertValueToOutputAst(provider.useValue);
            }),
                propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size,
                instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
            _this.instances.add(resolvedProvider.token, instance);
          });
          for (var i = 0; i < this._directives.length; i++) {
            var directive = this._directives[i],
                directiveInstance = this.instances.get(identifierToken(directive.type));
            directive.queries.forEach(function(queryMeta) {
              _this._addQuery(queryMeta, directiveInstance);
            });
          }
          var queriesWithReads = [];
          if (this._resolvedProviders.values().forEach(function(resolvedProvider) {
            var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
            ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function(query) {
              return new _QueryWithRead(query, resolvedProvider.token);
            }));
          }), StringMapWrapper.forEach(this.referenceTokens, function(_, varName) {
            var varValue,
                token = _this.referenceTokens[varName];
            varValue = isPresent(token) ? _this.instances.get(token) : _this.renderNode, _this.view.locals.set(varName, varValue);
            var varToken = new CompileTokenMetadata({value: varName});
            ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function(query) {
              return new _QueryWithRead(query, varToken);
            }));
          }), queriesWithReads.forEach(function(queryWithRead) {
            var value;
            if (isPresent(queryWithRead.read.identifier))
              value = _this.instances.get(queryWithRead.read);
            else {
              var token = _this.referenceTokens[queryWithRead.read.value];
              value = isPresent(token) ? _this.instances.get(token) : _this.elementRef;
            }
            isPresent(value) && queryWithRead.query.addValue(value, _this.view);
          }), isPresent(this.component)) {
            var componentConstructorViewQueryList = isPresent(this.component) ? literalArr(this._componentConstructorViewQueryLists) : NULL_EXPR,
                compExpr = isPresent(this.getComponent()) ? this.getComponent() : NULL_EXPR;
            this.view.createMethod.addStmt(this.appElement.callMethod("initComponent", [compExpr, componentConstructorViewQueryList, this._compViewExpr]).toStmt());
          }
        }, CompileElement.prototype.afterChildren = function(childNodeCount) {
          var _this = this;
          this._resolvedProviders.values().forEach(function(resolvedProvider) {
            var providerExpr = _this.instances.get(resolvedProvider.token),
                providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
            _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
          }), this._queries.values().forEach(function(queries) {
            return queries.forEach(function(query) {
              return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
            });
          });
        }, CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
        }, CompileElement.prototype.getComponent = function() {
          return isPresent(this.component) ? this.instances.get(identifierToken(this.component.type)) : null;
        }, CompileElement.prototype.getProviderTokens = function() {
          return this._resolvedProviders.values().map(function(resolvedProvider) {
            return createDiTokenExpression(resolvedProvider.token);
          });
        }, CompileElement.prototype._getQueriesFor = function(token) {
          for (var queries,
              result = [],
              currentEl = this,
              distance = 0; !currentEl.isNull(); )
            queries = currentEl._queries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries.filter(function(query) {
              return query.meta.descendants || distance <= 1;
            })), currentEl._directives.length > 0 && distance++, currentEl = currentEl.parent;
          return queries = this.view.componentView.viewQueries.get(token), isPresent(queries) && ListWrapper.addAll(result, queries), result;
        }, CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
          var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++,
              queryList = createQueryList(queryMeta, directiveInstance, propName, this.view),
              query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
          return addQueryToTokenMap(this._queries, query), query;
        }, CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
          var result = null;
          if (isBlank(result) && isPresent(dep.query) && (result = this._addQuery(dep.query, null).queryList), isBlank(result) && isPresent(dep.viewQuery) && (result = createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view), this._componentConstructorViewQueryLists.push(result)), isPresent(dep.token)) {
            if (isBlank(result) && dep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)))
              return requestingProviderType === exports.ProviderAstType.Component ? this._compViewExpr.prop("ref") : getPropertyInView(THIS_EXPR.prop("ref"), this.view, this.view.componentView);
            if (isBlank(result)) {
              var resolvedProvider = this._resolvedProviders.get(dep.token);
              if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService)
                return null;
              result = this.instances.get(dep.token);
            }
          }
          return result;
        }, CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
          var currElement = this,
              result = null;
          for (dep.isValue && (result = literal(dep.value)), isBlank(result) && !dep.isSkipSelf && (result = this._getLocalDependency(requestingProviderType, dep)); isBlank(result) && !currElement.parent.isNull(); )
            currElement = currElement.parent, result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({token: dep.token}));
          return isBlank(result) && (result = injectFromViewParentInjector(dep.token, dep.isOptional)), isBlank(result) && (result = NULL_EXPR), getPropertyInView(result, this.view, currElement.view);
        }, CompileElement;
      }(CompileNode),
      _QueryWithRead = function() {
        function _QueryWithRead(query, match) {
          this.query = query, this.read = isPresent(query.meta.read) ? query.meta.read : match;
        }
        return _QueryWithRead;
      }(),
      CompilePipe = function() {
        function CompilePipe(view, meta) {
          var _this = this;
          this.view = view, this.meta = meta, this._purePipeProxyCount = 0, this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
          var deps = this.meta.type.diDeps.map(function(diDep) {
            return diDep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)) ? getPropertyInView(THIS_EXPR.prop("ref"), _this.view, _this.view.componentView) : injectFromViewParentInjector(diDep.token, !1);
          });
          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type))), this.view.createMethod.resetDebugInfo(null, null), this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt());
        }
        return CompilePipe.call = function(view, name, args) {
          var pipe,
              compView = view.componentView,
              meta = _findPipeMeta(compView, name);
          return meta.pure ? (pipe = compView.purePipes.get(name), isBlank(pipe) && (pipe = new CompilePipe(compView, meta), compView.purePipes.set(name, pipe), compView.pipes.push(pipe))) : (pipe = new CompilePipe(view, meta), view.pipes.push(pipe)), pipe._call(view, args);
        }, Object.defineProperty(CompilePipe.prototype, "pure", {
          get: function() {
            return this.meta.pure;
          },
          enumerable: !0,
          configurable: !0
        }), CompilePipe.prototype._call = function(callingView, args) {
          if (this.meta.pure) {
            var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++),
                pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
            return createPureProxy(pipeInstanceSeenFromPureProxy.prop("transform").callMethod(BuiltinMethod.bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, callingView), importExpr(Identifiers.castByValue).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop("transform")]).callFn(args);
          }
          return getPropertyInView(this.instance, callingView, this.view).callMethod("transform", args);
        }, CompilePipe;
      }(),
      CompileView = function() {
        function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
          var _this = this;
          this.component = component, this.genConfig = genConfig, this.pipeMetas = pipeMetas, this.styles = styles, this.animations = animations, this.viewIndex = viewIndex, this.declarationElement = declarationElement, this.templateVariableBindings = templateVariableBindings, this.nodes = [], this.rootNodesOrAppElements = [], this.bindings = [], this.classStatements = [], this.eventHandlerMethods = [], this.fields = [], this.getters = [], this.disposables = [], this.subscriptions = [], this.purePipes = new Map, this.pipes = [], this.locals = new Map, this.literalArrayCount = 0, this.literalMapCount = 0, this.pipeCount = 0, this.createMethod = new CompileMethod(this), this.injectorGetMethod = new CompileMethod(this), this.updateContentQueriesMethod = new CompileMethod(this), this.dirtyParentQueriesMethod = new CompileMethod(this), this.updateViewQueriesMethod = new CompileMethod(this), this.detectChangesInInputsMethod = new CompileMethod(this), this.detectChangesRenderPropertiesMethod = new CompileMethod(this), this.afterContentLifecycleCallbacksMethod = new CompileMethod(this), this.afterViewLifecycleCallbacksMethod = new CompileMethod(this), this.destroyMethod = new CompileMethod(this), this.detachMethod = new CompileMethod(this), this.viewType = getViewType(component, viewIndex), this.className = "_View_" + component.type.name + viewIndex, this.classType = importType(new CompileIdentifierMetadata({name: this.className})), this.viewFactory = variable(getViewFactoryName(component, viewIndex)), this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST ? this.componentView = this : this.componentView = this.declarationElement.view.componentView, this.componentContext = getPropertyInView(THIS_EXPR.prop("context"), this, this.componentView);
          var viewQueries = new CompileIdentifierMap;
          if (this.viewType === ViewType.COMPONENT) {
            var directiveInstance = THIS_EXPR.prop("context");
            ListWrapper.forEachWithIndex(this.component.viewQueries, function(queryMeta, queryIndex) {
              var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex,
                  queryList = createQueryList(queryMeta, directiveInstance, propName, _this),
                  query = new CompileQuery(queryMeta, queryList, directiveInstance, _this);
              addQueryToTokenMap(viewQueries, query);
            });
            var constructorViewQueryCount = 0;
            this.component.type.diDeps.forEach(function(dep) {
              if (isPresent(dep.viewQuery)) {
                var queryList = THIS_EXPR.prop("declarationAppElement").prop("componentConstructorViewQueries").key(literal(constructorViewQueryCount++)),
                    query = new CompileQuery(dep.viewQuery, queryList, null, _this);
                addQueryToTokenMap(viewQueries, query);
              }
            });
          }
          this.viewQueries = viewQueries, templateVariableBindings.forEach(function(entry) {
            _this.locals.set(entry[1], THIS_EXPR.prop("context").prop(entry[0]));
          }), this.declarationElement.isNull() || this.declarationElement.setEmbeddedView(this);
        }
        return CompileView.prototype.callPipe = function(name, input, args) {
          return CompilePipe.call(this, name, [input].concat(args));
        }, CompileView.prototype.getLocal = function(name) {
          if (name == EventHandlerVars.event.name)
            return EventHandlerVars.event;
          for (var currView = this,
              result = currView.locals.get(name); isBlank(result) && isPresent(currView.declarationElement.view); )
            currView = currView.declarationElement.view, result = currView.locals.get(name);
          return isPresent(result) ? getPropertyInView(result, this, currView) : null;
        }, CompileView.prototype.createLiteralArray = function(values) {
          if (0 === values.length)
            return importExpr(Identifiers.EMPTY_ARRAY);
          for (var proxyExpr = THIS_EXPR.prop("_arr_" + this.literalArrayCount++),
              proxyParams = [],
              proxyReturnEntries = [],
              i = 0; i < values.length; i++) {
            var paramName = "p" + i;
            proxyParams.push(new FnParam(paramName)), proxyReturnEntries.push(variable(paramName));
          }
          return createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, this), proxyExpr.callFn(values);
        }, CompileView.prototype.createLiteralMap = function(entries) {
          if (0 === entries.length)
            return importExpr(Identifiers.EMPTY_MAP);
          for (var proxyExpr = THIS_EXPR.prop("_map_" + this.literalMapCount++),
              proxyParams = [],
              proxyReturnEntries = [],
              values = [],
              i = 0; i < entries.length; i++) {
            var paramName = "p" + i;
            proxyParams.push(new FnParam(paramName)), proxyReturnEntries.push([entries[i][0], variable(paramName)]), values.push(entries[i][1]);
          }
          return createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, this), proxyExpr.callFn(values);
        }, CompileView.prototype.afterNodes = function() {
          var _this = this;
          this.viewQueries.values().forEach(function(queries) {
            return queries.forEach(function(query) {
              return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
            });
          });
        }, CompileView;
      }(),
      CompileBinding = function() {
        function CompileBinding(node, sourceAst) {
          this.node = node, this.sourceAst = sourceAst;
        }
        return CompileBinding;
      }(),
      ExpressionWithWrappedValueInfo = function() {
        function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper) {
          this.expression = expression, this.needsValueUnwrapper = needsValueUnwrapper;
        }
        return ExpressionWithWrappedValueInfo;
      }();
  !function(_Mode) {
    _Mode[_Mode.Statement = 0] = "Statement", _Mode[_Mode.Expression = 1] = "Expression";
  }(_Mode || (_Mode = {}));
  var _AstToIrVisitor = function() {
    function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper) {
      this._nameResolver = _nameResolver, this._implicitReceiver = _implicitReceiver, this._valueUnwrapper = _valueUnwrapper, this._map = new Map, this.needsValueUnwrapper = !1;
    }
    return _AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
      var op;
      switch (ast.operation) {
        case "+":
          op = BinaryOperator.Plus;
          break;
        case "-":
          op = BinaryOperator.Minus;
          break;
        case "*":
          op = BinaryOperator.Multiply;
          break;
        case "/":
          op = BinaryOperator.Divide;
          break;
        case "%":
          op = BinaryOperator.Modulo;
          break;
        case "&&":
          op = BinaryOperator.And;
          break;
        case "||":
          op = BinaryOperator.Or;
          break;
        case "==":
          op = BinaryOperator.Equals;
          break;
        case "!=":
          op = BinaryOperator.NotEquals;
          break;
        case "===":
          op = BinaryOperator.Identical;
          break;
        case "!==":
          op = BinaryOperator.NotIdentical;
          break;
        case "<":
          op = BinaryOperator.Lower;
          break;
        case ">":
          op = BinaryOperator.Bigger;
          break;
        case "<=":
          op = BinaryOperator.LowerEquals;
          break;
        case ">=":
          op = BinaryOperator.BiggerEquals;
          break;
        default:
          throw new BaseException("Unsupported operation " + ast.operation);
      }
      return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitChain = function(ast, mode) {
      return ensureStatementMode(mode, ast), this.visitAll(ast.expressions, mode);
    }, _AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
      var value = this.visit(ast.condition, _Mode.Expression);
      return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
      var input = this.visit(ast.exp, _Mode.Expression),
          args = this.visitAll(ast.args, _Mode.Expression),
          value = this._nameResolver.callPipe(ast.name, input, args);
      return this.needsValueUnwrapper = !0, convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod("unwrap", [value]));
    }, _AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
      return ensureExpressionMode(mode, ast), this._implicitReceiver;
    }, _AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      for (var args = [literal(ast.expressions.length)],
          i = 0; i < ast.strings.length - 1; i++)
        args.push(literal(ast.strings[i])), args.push(this.visit(ast.expressions[i], _Mode.Expression));
      return args.push(literal(ast.strings[ast.strings.length - 1])), importExpr(Identifiers.interpolate).callFn(args);
    }, _AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
      var obj = this.visit(ast.obj, _Mode.Expression),
          key = this.visit(ast.key, _Mode.Expression),
          value = this.visit(ast.value, _Mode.Expression);
      return convertToStatementIfNeeded(mode, obj.key(key).set(value));
    }, _AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));
    }, _AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
      for (var parts = [],
          i = 0; i < ast.keys.length; i++)
        parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
      return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));
    }, _AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
      return convertToStatementIfNeeded(mode, literal(ast.value));
    }, _AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe)
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      var args = this.visitAll(ast.args, _Mode.Expression),
          result = null,
          receiver = this.visit(ast.receiver, _Mode.Expression);
      if (receiver === this._implicitReceiver) {
        var varExpr = this._nameResolver.getLocal(ast.name);
        isPresent(varExpr) && (result = varExpr.callFn(args));
      }
      return isBlank(result) && (result = receiver.callMethod(ast.name, args)), convertToStatementIfNeeded(mode, result);
    }, _AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
      return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe)
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      var result = null,
          receiver = this.visit(ast.receiver, _Mode.Expression);
      return receiver === this._implicitReceiver && (result = this._nameResolver.getLocal(ast.name)), isBlank(result) && (result = receiver.prop(ast.name)), convertToStatementIfNeeded(mode, result);
    }, _AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
      var receiver = this.visit(ast.receiver, _Mode.Expression);
      if (receiver === this._implicitReceiver) {
        var varExpr = this._nameResolver.getLocal(ast.name);
        if (isPresent(varExpr))
          throw new BaseException("Cannot assign to a reference or variable!");
      }
      return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
    }, _AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    }, _AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    }, _AstToIrVisitor.prototype.visitAll = function(asts, mode) {
      var _this = this;
      return asts.map(function(ast) {
        return _this.visit(ast, mode);
      });
    }, _AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
      throw new BaseException("Quotes are not supported for evaluation!");
    }, _AstToIrVisitor.prototype.visit = function(ast, mode) {
      return (this._map.get(ast) || ast).visit(this, mode);
    }, _AstToIrVisitor.prototype.convertSafeAccess = function(ast, leftMostSafe, mode) {
      var condition = this.visit(leftMostSafe.receiver, mode).isBlank();
      leftMostSafe instanceof SafeMethodCall ? this._map.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args)) : this._map.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
      var access = this.visit(ast, mode);
      return this._map.delete(leftMostSafe), condition.conditional(literal(null), access);
    }, _AstToIrVisitor.prototype.leftMostSafeNode = function(ast) {
      var _this = this,
          visit = function(visitor, ast) {
            return (_this._map.get(ast) || ast).visit(visitor);
          };
      return ast.visit({
        visitBinary: function(ast) {
          return null;
        },
        visitChain: function(ast) {
          return null;
        },
        visitConditional: function(ast) {
          return null;
        },
        visitFunctionCall: function(ast) {
          return null;
        },
        visitImplicitReceiver: function(ast) {
          return null;
        },
        visitInterpolation: function(ast) {
          return null;
        },
        visitKeyedRead: function(ast) {
          return visit(this, ast.obj);
        },
        visitKeyedWrite: function(ast) {
          return null;
        },
        visitLiteralArray: function(ast) {
          return null;
        },
        visitLiteralMap: function(ast) {
          return null;
        },
        visitLiteralPrimitive: function(ast) {
          return null;
        },
        visitMethodCall: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPipe: function(ast) {
          return null;
        },
        visitPrefixNot: function(ast) {
          return null;
        },
        visitPropertyRead: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPropertyWrite: function(ast) {
          return null;
        },
        visitQuote: function(ast) {
          return null;
        },
        visitSafeMethodCall: function(ast) {
          return visit(this, ast.receiver) || ast;
        },
        visitSafePropertyRead: function(ast) {
          return visit(this, ast.receiver) || ast;
        }
      });
    }, _AstToIrVisitor;
  }(),
      CompileEventListener = function() {
        function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {
          this.compileElement = compileElement, this.eventTarget = eventTarget, this.eventName = eventName, this._hasComponentHostListener = !1, this._actionResultExprs = [], this._method = new CompileMethod(compileElement.view), this._methodName = "_handle_" + santitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex, this._eventParam = new FnParam(EventHandlerVars.event.name, importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
        }
        return CompileEventListener.getOrCreate = function(compileElement, eventTarget, eventName, targetEventListeners) {
          var listener = targetEventListeners.find(function(listener) {
            return listener.eventTarget == eventTarget && listener.eventName == eventName;
          });
          return isBlank(listener) && (listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length), targetEventListeners.push(listener)), listener;
        }, CompileEventListener.prototype.addAction = function(hostEvent, directive, directiveInstance) {
          isPresent(directive) && directive.isComponent && (this._hasComponentHostListener = !0), this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
          var context = isPresent(directiveInstance) ? directiveInstance : this.compileElement.view.componentContext,
              actionStmts = convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler),
              lastIndex = actionStmts.length - 1;
          if (lastIndex >= 0) {
            var lastStatement = actionStmts[lastIndex],
                returnExpr = convertStmtIntoExpression(lastStatement),
                preventDefaultVar = variable("pd_" + this._actionResultExprs.length);
            this._actionResultExprs.push(preventDefaultVar), isPresent(returnExpr) && (actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(!1))).toDeclStmt(null, [StmtModifier.Final]));
          }
          this._method.addStmts(actionStmts);
        }, CompileEventListener.prototype.finishMethod = function() {
          var markPathToRootStart = this._hasComponentHostListener ? this.compileElement.appElement.prop("componentView") : THIS_EXPR,
              resultExpr = literal(!0);
          this._actionResultExprs.forEach(function(expr) {
            resultExpr = resultExpr.and(expr);
          });
          var stmts = [markPathToRootStart.callMethod("markPathToRootAsCheckOnce", []).toStmt()].concat(this._method.finish()).concat([new ReturnStatement(resultExpr)]);
          this.compileElement.view.eventHandlerMethods.push(new ClassMethod(this._methodName, [this._eventParam], stmts, BOOL_TYPE, [StmtModifier.Private]));
        }, CompileEventListener.prototype.listenToRenderer = function() {
          var listenExpr,
              eventListener = THIS_EXPR.callMethod("eventHandler", [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.bind, [THIS_EXPR])]);
          listenExpr = isPresent(this.eventTarget) ? ViewProperties.renderer.callMethod("listenGlobal", [literal(this.eventTarget), literal(this.eventName), eventListener]) : ViewProperties.renderer.callMethod("listen", [this.compileElement.renderNode, literal(this.eventName), eventListener]);
          var disposable = variable("disposable_" + this.compileElement.view.disposables.length);
          this.compileElement.view.disposables.push(disposable), this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
        }, CompileEventListener.prototype.listenToDirective = function(directiveInstance, observablePropName) {
          var subscription = variable("subscription_" + this.compileElement.view.subscriptions.length);
          this.compileElement.view.subscriptions.push(subscription);
          var eventListener = THIS_EXPR.callMethod("eventHandler", [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.bind, [THIS_EXPR])]);
          this.compileElement.view.createMethod.addStmt(subscription.set(directiveInstance.prop(observablePropName).callMethod(BuiltinMethod.SubscribeObservable, [eventListener])).toDeclStmt(null, [StmtModifier.Final]));
        }, CompileEventListener;
      }(),
      STATE_IS_NEVER_CHECKED = THIS_EXPR.prop("numberOfChecks").identical(new LiteralExpr(0)),
      NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange),
      _animationViewCheckedFlagMap = new Map,
      ViewBinderVisitor = function() {
        function ViewBinderVisitor(view) {
          this.view = view, this._nodeIndex = 0;
        }
        return ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
          var node = this.view.nodes[this._nodeIndex++];
          return bindRenderText(ast, node, this.view), null;
        }, ViewBinderVisitor.prototype.visitText = function(ast, parent) {
          return this._nodeIndex++, null;
        }, ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
          return null;
        }, ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
          var compileElement = this.view.nodes[this._nodeIndex++],
              eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);
          return bindRenderInputs(ast.inputs, compileElement), bindRenderOutputs(eventListeners), ast.directives.forEach(function(directiveAst) {
            var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type));
            bindDirectiveInputs(directiveAst, directiveInstance, compileElement), bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement), bindDirectiveHostProps(directiveAst, directiveInstance, compileElement), bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
          }), templateVisitAll(this, ast.children, compileElement), ast.directives.forEach(function(directiveAst) {
            var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type));
            bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
          }), ast.providers.forEach(function(providerAst) {
            var providerInstance = compileElement.instances.get(providerAst.token);
            bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          }), null;
        }, ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
          var compileElement = this.view.nodes[this._nodeIndex++],
              eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);
          return ast.directives.forEach(function(directiveAst) {
            var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type));
            bindDirectiveInputs(directiveAst, directiveInstance, compileElement), bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement), bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners), bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement), bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
          }), ast.providers.forEach(function(providerAst) {
            var providerInstance = compileElement.instances.get(providerAst.token);
            bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
          }), bindView(compileElement.embeddedView, ast.children), null;
        }, ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
          return null;
        }, ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
          return null;
        }, ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
          return null;
        }, ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
          return null;
        }, ViewBinderVisitor;
      }(),
      IMPLICIT_TEMPLATE_VAR = "$implicit",
      CLASS_ATTR$1 = "class",
      STYLE_ATTR = "style",
      NG_CONTAINER_TAG = "ng-container",
      parentRenderNodeVar = variable("parentRenderNode"),
      rootSelectorVar = variable("rootSelector"),
      ViewFactoryDependency = function() {
        function ViewFactoryDependency(comp, placeholder) {
          this.comp = comp, this.placeholder = placeholder;
        }
        return ViewFactoryDependency;
      }(),
      ComponentFactoryDependency = function() {
        function ComponentFactoryDependency(comp, placeholder) {
          this.comp = comp, this.placeholder = placeholder;
        }
        return ComponentFactoryDependency;
      }(),
      ViewBuilderVisitor = function() {
        function ViewBuilderVisitor(view, targetDependencies) {
          this.view = view, this.targetDependencies = targetDependencies, this.nestedViewCount = 0, this._animationCompiler = new AnimationCompiler;
        }
        return ViewBuilderVisitor.prototype._isRootNode = function(parent) {
          return parent.view !== this.view;
        }, ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node) {
          var projectedNode = _getOuterContainerOrSelf(node),
              parent = projectedNode.parent,
              ngContentIndex = projectedNode.sourceAst.ngContentIndex,
              vcAppEl = node instanceof CompileElement && node.hasViewContainer ? node.appElement : null;
          this._isRootNode(parent) ? this.view.viewType !== ViewType.COMPONENT && this.view.rootNodesOrAppElements.push(isPresent(vcAppEl) ? vcAppEl : node.renderNode) : isPresent(parent.component) && isPresent(ngContentIndex) && parent.addContentNode(ngContentIndex, isPresent(vcAppEl) ? vcAppEl : node.renderNode);
        }, ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
          return parent = _getOuterContainerParentOrSelf(parent), this._isRootNode(parent) ? this.view.viewType === ViewType.COMPONENT ? parentRenderNodeVar : NULL_EXPR : isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode;
        }, ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
          return this._visitText(ast, "", parent);
        }, ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
          return this._visitText(ast, ast.value, parent);
        }, ViewBuilderVisitor.prototype._visitText = function(ast, value, parent) {
          var fieldName = "_text_" + this.view.nodes.length;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
          var renderNode = THIS_EXPR.prop(fieldName),
              compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast),
              createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createText", [this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
          return this.view.nodes.push(compileNode), this.view.createMethod.addStmt(createRenderNode), this._addRootNodeAndProject(compileNode), renderNode;
        }, ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
          this.view.createMethod.resetDebugInfo(null, ast);
          var parentRenderNode = this._getParentRenderNode(parent),
              nodesExpression = ViewProperties.projectableNodes.key(literal(ast.index), new ArrayType(importType(this.view.genConfig.renderTypes.renderNode)));
          return parentRenderNode !== NULL_EXPR ? this.view.createMethod.addStmt(ViewProperties.renderer.callMethod("projectNodes", [parentRenderNode, importExpr(Identifiers.flattenNestedViewRenderNodes).callFn([nodesExpression])]).toStmt()) : this._isRootNode(parent) ? this.view.viewType !== ViewType.COMPONENT && this.view.rootNodesOrAppElements.push(nodesExpression) : isPresent(parent.component) && isPresent(ast.ngContentIndex) && parent.addContentNode(ast.ngContentIndex, nodesExpression), null;
        }, ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
          var createRenderNodeExpr,
              _this = this,
              nodeIndex = this.view.nodes.length,
              debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
          createRenderNodeExpr = 0 === nodeIndex && this.view.viewType === ViewType.HOST ? THIS_EXPR.callMethod("selectOrCreateHostElement", [literal(ast.name), rootSelectorVar, debugContextExpr]) : ast.name === NG_CONTAINER_TAG ? ViewProperties.renderer.callMethod("createTemplateAnchor", [this._getParentRenderNode(parent), debugContextExpr]) : ViewProperties.renderer.callMethod("createElement", [this._getParentRenderNode(parent), literal(ast.name), debugContextExpr]);
          var fieldName = "_el_" + nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement))), this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
          for (var renderNode = THIS_EXPR.prop(fieldName),
              directives = ast.directives.map(function(directiveAst) {
                return directiveAst.directive;
              }),
              component = directives.find(function(directive) {
                return directive.isComponent;
              }),
              htmlAttrs = _readHtmlAttrs(ast.attrs),
              attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives),
              i = 0; i < attrNameAndValues.length; i++) {
            var attrName = attrNameAndValues[i][0],
                attrValue = attrNameAndValues[i][1];
            this.view.createMethod.addStmt(ViewProperties.renderer.callMethod("setElementAttribute", [renderNode, literal(attrName), literal(attrValue)]).toStmt());
          }
          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, (!1), ast.references);
          this.view.nodes.push(compileElement);
          var compViewExpr = null;
          if (isPresent(component)) {
            var nestedComponentIdentifier = new CompileIdentifierMetadata({name: getViewFactoryName(component, 0)});
            this.targetDependencies.push(new ViewFactoryDependency(component.type, nestedComponentIdentifier));
            var entryComponentIdentifiers = component.entryComponents.map(function(entryComponent) {
              var id = new CompileIdentifierMetadata({name: entryComponent.name});
              return _this.targetDependencies.push(new ComponentFactoryDependency(entryComponent, id)), id;
            });
            compileElement.createComponentFactoryResolver(entryComponentIdentifiers), compViewExpr = variable("compView_" + nodeIndex), compileElement.setComponentView(compViewExpr), this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).callFn([ViewProperties.viewUtils, compileElement.injector, compileElement.appElement])).toDeclStmt());
          }
          if (compileElement.beforeChildren(), this._addRootNodeAndProject(compileElement), templateVisitAll(this, ast.children, compileElement), compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1), isPresent(compViewExpr)) {
            var codeGenContentNodes;
            codeGenContentNodes = this.view.component.type.isHost ? ViewProperties.projectableNodes : literalArr(compileElement.contentNodesByNgContentIndex.map(function(nodes) {
              return createFlatArray(nodes);
            })), this.view.createMethod.addStmt(compViewExpr.callMethod("create", [compileElement.getComponent(), codeGenContentNodes, NULL_EXPR]).toStmt());
          }
          return null;
        }, ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
          var nodeIndex = this.view.nodes.length,
              fieldName = "_anchor_" + nodeIndex;
          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment))), this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod("createTemplateAnchor", [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
          var renderNode = THIS_EXPR.prop(fieldName),
              templateVariableBindings = ast.variables.map(function(varAst) {
                return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
              }),
              directives = ast.directives.map(function(directiveAst) {
                return directiveAst.directive;
              }),
              compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, (!0), ast.references);
          this.view.nodes.push(compileElement);
          var compiledAnimations = this._animationCompiler.compileComponent(this.view.component, [ast]);
          this.nestedViewCount++;
          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, compiledAnimations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
          return this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies), compileElement.beforeChildren(), this._addRootNodeAndProject(compileElement), compileElement.afterChildren(0), null;
        }, ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
          return null;
        }, ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
          return null;
        }, ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
          return null;
        }, ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
          return null;
        }, ViewBuilderVisitor;
      }(),
      ViewCompileResult = function() {
        function ViewCompileResult(statements, viewFactoryVar, dependencies) {
          this.statements = statements, this.viewFactoryVar = viewFactoryVar, this.dependencies = dependencies;
        }
        return ViewCompileResult;
      }(),
      ViewCompiler = function() {
        function ViewCompiler(_genConfig) {
          this._genConfig = _genConfig, this._animationCompiler = new AnimationCompiler;
        }
        return ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes) {
          var dependencies = [],
              compiledAnimations = this._animationCompiler.compileComponent(component, template),
              statements = [];
          compiledAnimations.map(function(entry) {
            statements.push(entry.statesMapStatement), statements.push(entry.fnStatement);
          });
          var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), []);
          return buildView(view, template, dependencies), bindView(view, template), finishView(view, statements), new ViewCompileResult(statements, view.viewFactory.name, dependencies);
        }, ViewCompiler;
      }();
  ViewCompiler.decorators = [{type: _angular_core.Injectable}], ViewCompiler.ctorParameters = [{type: CompilerConfig}];
  var SourceModule = function() {
    function SourceModule(moduleUrl, source) {
      this.moduleUrl = moduleUrl, this.source = source;
    }
    return SourceModule;
  }(),
      NgModulesSummary = function() {
        function NgModulesSummary(ngModuleByComponent) {
          this.ngModuleByComponent = ngModuleByComponent;
        }
        return NgModulesSummary;
      }(),
      OfflineCompiler = function() {
        function OfflineCompiler(_metadataResolver, _directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter) {
          this._metadataResolver = _metadataResolver, this._directiveNormalizer = _directiveNormalizer, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._ngModuleCompiler = _ngModuleCompiler, this._outputEmitter = _outputEmitter;
        }
        return OfflineCompiler.prototype.analyzeModules = function(ngModules) {
          var _this = this,
              ngModuleByComponent = new Map;
          return ngModules.forEach(function(ngModule) {
            var ngModuleMeta = _this._metadataResolver.getNgModuleMetadata(ngModule);
            ngModuleMeta.declaredDirectives.forEach(function(dirMeta) {
              dirMeta.isComponent && ngModuleByComponent.set(dirMeta.type.runtime, ngModuleMeta);
            });
          }), new NgModulesSummary(ngModuleByComponent);
        }, OfflineCompiler.prototype.clearCache = function() {
          this._directiveNormalizer.clearCache(), this._metadataResolver.clearCache();
        }, OfflineCompiler.prototype.compile = function(moduleUrl, ngModulesSummary, components, ngModules) {
          var _this = this,
              fileSuffix = _splitLastSuffix(moduleUrl)[1],
              statements = [],
              exportedVars = [],
              outputSourceModules = [];
          return exportedVars.push.apply(exportedVars, ngModules.map(function(ngModuleType) {
            return _this._compileModule(ngModuleType, statements);
          })), Promise.all(components.map(function(compType) {
            var compMeta = _this._metadataResolver.getDirectiveMetadata(compType),
                ngModule = ngModulesSummary.ngModuleByComponent.get(compType);
            if (!ngModule)
              throw new BaseException("Cannot determine the module for component " + compMeta.type.name + "!");
            return Promise.all([compMeta].concat(ngModule.transitiveModule.directives).map(function(dirMeta) {
              return _this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult;
            })).then(function(normalizedCompWithDirectives) {
              var compMeta = normalizedCompWithDirectives[0],
                  dirMetas = normalizedCompWithDirectives.slice(1);
              _assertComponent(compMeta);
              var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
              stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
                outputSourceModules.push(_this._codgenStyles(compiledStyleSheet, fileSuffix));
              }), exportedVars.push(_this._compileComponentFactory(compMeta, fileSuffix, statements)), exportedVars.push(_this._compileComponent(compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas, stylesCompileResults.componentStylesheet, fileSuffix, statements));
            });
          })).then(function() {
            return statements.length > 0 && outputSourceModules.unshift(_this._codegenSourceModule(_ngfactoryModuleUrl(moduleUrl), statements, exportedVars)), outputSourceModules;
          });
        }, OfflineCompiler.prototype._compileModule = function(ngModuleType, targetStatements) {
          var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType),
              appCompileResult = this._ngModuleCompiler.compile(ngModule, []);
          return appCompileResult.dependencies.forEach(function(dep) {
            dep.placeholder.name = _componentFactoryName(dep.comp), dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
          }), targetStatements.push.apply(targetStatements, appCompileResult.statements), appCompileResult.ngModuleFactoryVar;
        }, OfflineCompiler.prototype._compileComponentFactory = function(compMeta, fileSuffix, targetStatements) {
          var hostMeta = createHostComponentMeta(compMeta),
              hostViewFactoryVar = this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements),
              compFactoryVar = _componentFactoryName(compMeta.type);
          return targetStatements.push(variable(compFactoryVar).set(importExpr(Identifiers.ComponentFactory, [importType(compMeta.type)]).instantiate([literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type)], importType(Identifiers.ComponentFactory, [importType(compMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final])), compFactoryVar;
        }, OfflineCompiler.prototype._compileComponent = function(compMeta, directives, pipes, schemas, componentStyles, fileSuffix, targetStatements) {
          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name),
              stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]),
              viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes);
          return componentStyles && ListWrapper.addAll(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix)), ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult)), viewResult.viewFactoryVar;
        }, OfflineCompiler.prototype._codgenStyles = function(stylesCompileResult, fileSuffix) {
          return _resolveStyleStatements(stylesCompileResult, fileSuffix), this._codegenSourceModule(_stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
        }, OfflineCompiler.prototype._codegenSourceModule = function(moduleUrl, statements, exportedVars) {
          return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
        }, OfflineCompiler;
      }(),
      XHR = function() {
        function XHR() {}
        return XHR.prototype.get = function(url) {
          return null;
        }, XHR;
      }(),
      DirectiveNormalizer = function() {
        function DirectiveNormalizer(_xhr, _urlResolver, _htmlParser, _config) {
          this._xhr = _xhr, this._urlResolver = _urlResolver, this._htmlParser = _htmlParser, this._config = _config, this._xhrCache = new Map;
        }
        return DirectiveNormalizer.prototype.clearCache = function() {
          this._xhrCache.clear();
        }, DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
          var _this = this;
          normalizedDirective.isComponent && (this._xhrCache.delete(normalizedDirective.template.templateUrl), normalizedDirective.template.externalStylesheets.forEach(function(stylesheet) {
            _this._xhrCache.delete(stylesheet.moduleUrl);
          }));
        }, DirectiveNormalizer.prototype._fetch = function(url) {
          var result = this._xhrCache.get(url);
          return result || (result = this._xhr.get(url), this._xhrCache.set(url, result)), result;
        }, DirectiveNormalizer.prototype.normalizeDirective = function(directive) {
          var _this = this;
          if (!directive.isComponent)
            return new SyncAsyncResult(directive, Promise.resolve(directive));
          var normalizedTemplateAsync,
              normalizedTemplateSync = null;
          if (isPresent(directive.template.template))
            normalizedTemplateSync = this.normalizeTemplateSync(directive.type, directive.template), normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
          else {
            if (!directive.template.templateUrl)
              throw new BaseException("No template specified for component " + directive.type.name);
            normalizedTemplateAsync = this.normalizeTemplateAsync(directive.type, directive.template);
          }
          if (normalizedTemplateSync && 0 === normalizedTemplateSync.styleUrls.length) {
            var normalizedDirective = _cloneDirectiveWithTemplate(directive, normalizedTemplateSync);
            return new SyncAsyncResult(normalizedDirective, Promise.resolve(normalizedDirective));
          }
          return new SyncAsyncResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
            return _this.normalizeExternalStylesheets(normalizedTemplate);
          }).then(function(normalizedTemplate) {
            return _cloneDirectiveWithTemplate(directive, normalizedTemplate);
          }));
        }, DirectiveNormalizer.prototype.normalizeTemplateSync = function(directiveType, template) {
          return this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl);
        }, DirectiveNormalizer.prototype.normalizeTemplateAsync = function(directiveType, template) {
          var _this = this,
              templateUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
          return this._fetch(templateUrl).then(function(value) {
            return _this.normalizeLoadedTemplate(directiveType, template, value, templateUrl);
          });
        }, DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(directiveType, templateMeta, template, templateAbsUrl) {
          var interpolationConfig = InterpolationConfig.fromArray(templateMeta.interpolation),
              rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name, !1, interpolationConfig);
          if (rootNodesAndErrors.errors.length > 0) {
            var errorString = rootNodesAndErrors.errors.join("\n");
            throw new BaseException("Template parse errors:\n" + errorString);
          }
          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: templateMeta.styles,
            styleUrls: templateMeta.styleUrls,
            moduleUrl: directiveType.moduleUrl
          })),
              visitor = new TemplatePreparseVisitor;
          visitAll(visitor, rootNodesAndErrors.rootNodes);
          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: visitor.styles,
            styleUrls: visitor.styleUrls,
            moduleUrl: templateAbsUrl
          })),
              allStyles = templateMetadataStyles.styles.concat(templateStyles.styles),
              allStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls),
              encapsulation = templateMeta.encapsulation;
          return isBlank(encapsulation) && (encapsulation = this._config.defaultEncapsulation), encapsulation === _angular_core.ViewEncapsulation.Emulated && 0 === allStyles.length && 0 === allStyleUrls.length && (encapsulation = _angular_core.ViewEncapsulation.None), new CompileTemplateMetadata({
            encapsulation: encapsulation,
            template: template,
            templateUrl: templateAbsUrl,
            styles: allStyles,
            styleUrls: allStyleUrls,
            externalStylesheets: templateMeta.externalStylesheets,
            ngContentSelectors: visitor.ngContentSelectors,
            animations: templateMeta.animations,
            interpolation: templateMeta.interpolation
          });
        }, DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
          return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
            return new CompileTemplateMetadata({
              encapsulation: templateMeta.encapsulation,
              template: templateMeta.template,
              templateUrl: templateMeta.templateUrl,
              styles: templateMeta.styles,
              styleUrls: templateMeta.styleUrls,
              externalStylesheets: externalStylesheets,
              ngContentSelectors: templateMeta.ngContentSelectors,
              animations: templateMeta.animations,
              interpolation: templateMeta.interpolation
            });
          });
        }, DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
          var _this = this;
          return void 0 === loadedStylesheets && (loadedStylesheets = new Map), Promise.all(styleUrls.filter(function(styleUrl) {
            return !loadedStylesheets.has(styleUrl);
          }).map(function(styleUrl) {
            return _this._fetch(styleUrl).then(function(loadedStyle) {
              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
                styles: [loadedStyle],
                moduleUrl: styleUrl
              }));
              return loadedStylesheets.set(styleUrl, stylesheet), _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
            });
          })).then(function(_) {
            return MapWrapper.values(loadedStylesheets);
          });
        }, DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
          var _this = this,
              allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
                return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
              }),
              allStyles = stylesheet.styles.map(function(style) {
                var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
                return allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls), styleWithImports.style;
              });
          return new CompileStylesheetMetadata({
            styles: allStyles,
            styleUrls: allStyleUrls,
            moduleUrl: stylesheet.moduleUrl
          });
        }, DirectiveNormalizer;
      }();
  DirectiveNormalizer.decorators = [{type: _angular_core.Injectable}], DirectiveNormalizer.ctorParameters = [{type: XHR}, {type: UrlResolver}, {type: HtmlParser}, {type: CompilerConfig}];
  var TemplatePreparseVisitor = function() {
    function TemplatePreparseVisitor() {
      this.ngContentSelectors = [], this.styles = [], this.styleUrls = [], this.ngNonBindableStackCount = 0;
    }
    return TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
      var preparsedElement = preparseElement(ast);
      switch (preparsedElement.type) {
        case PreparsedElementType.NG_CONTENT:
          0 === this.ngNonBindableStackCount && this.ngContentSelectors.push(preparsedElement.selectAttr);
          break;
        case PreparsedElementType.STYLE:
          var textContent = "";
          ast.children.forEach(function(child) {
            child instanceof Text && (textContent += child.value);
          }), this.styles.push(textContent);
          break;
        case PreparsedElementType.STYLESHEET:
          this.styleUrls.push(preparsedElement.hrefAttr);
      }
      return preparsedElement.nonBindable && this.ngNonBindableStackCount++, visitAll(this, ast.children), preparsedElement.nonBindable && this.ngNonBindableStackCount--, null;
    }, TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitAttribute = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
      return null;
    }, TemplatePreparseVisitor;
  }(),
      DirectiveResolver = function() {
        function DirectiveResolver(_reflector) {
          void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector;
        }
        return DirectiveResolver.prototype.resolve = function(type, throwIfNotFound) {
          void 0 === throwIfNotFound && (throwIfNotFound = !0);
          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
          if (isPresent(typeMetadata)) {
            var metadata = typeMetadata.find(_isDirectiveMetadata);
            if (isPresent(metadata)) {
              var propertyMetadata = this._reflector.propMetadata(type);
              return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
            }
          }
          if (throwIfNotFound)
            throw new BaseException("No Directive annotation found on " + stringify(type));
          return null;
        }, DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
          var inputs = [],
              outputs = [],
              host = {},
              queries = {};
          return StringMapWrapper.forEach(propertyMetadata, function(metadata, propName) {
            metadata.forEach(function(a) {
              if (a instanceof _angular_core.InputMetadata)
                isPresent(a.bindingPropertyName) ? inputs.push(propName + ": " + a.bindingPropertyName) : inputs.push(propName);
              else if (a instanceof _angular_core.OutputMetadata)
                isPresent(a.bindingPropertyName) ? outputs.push(propName + ": " + a.bindingPropertyName) : outputs.push(propName);
              else if (a instanceof _angular_core.HostBindingMetadata)
                isPresent(a.hostPropertyName) ? host["[" + a.hostPropertyName + "]"] = propName : host["[" + propName + "]"] = propName;
              else if (a instanceof _angular_core.HostListenerMetadata) {
                var args = isPresent(a.args) ? a.args.join(", ") : "";
                host["(" + a.eventName + ")"] = propName + "(" + args + ")";
              } else
                a instanceof _angular_core.QueryMetadata && (queries[propName] = a);
            });
          }), this._merge(dm, inputs, outputs, host, queries, directiveType);
        }, DirectiveResolver.prototype._extractPublicName = function(def) {
          return splitAtColon(def, [null, def])[1].trim();
        }, DirectiveResolver.prototype._merge = function(dm, inputs, outputs, host, queries, directiveType) {
          var mergedInputs,
              _this = this;
          if (isPresent(dm.inputs)) {
            var inputNames_1 = dm.inputs.map(function(def) {
              return _this._extractPublicName(def);
            });
            inputs.forEach(function(inputDef) {
              var publicName = _this._extractPublicName(inputDef);
              if (inputNames_1.indexOf(publicName) > -1)
                throw new BaseException("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
            }), mergedInputs = dm.inputs.concat(inputs);
          } else
            mergedInputs = inputs;
          var mergedOutputs;
          if (isPresent(dm.outputs)) {
            var outputNames_1 = dm.outputs.map(function(def) {
              return _this._extractPublicName(def);
            });
            outputs.forEach(function(outputDef) {
              var publicName = _this._extractPublicName(outputDef);
              if (outputNames_1.indexOf(publicName) > -1)
                throw new BaseException("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
            }), mergedOutputs = dm.outputs.concat(outputs);
          } else
            mergedOutputs = outputs;
          var mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host,
              mergedQueries = isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;
          return dm instanceof _angular_core.ComponentMetadata ? new _angular_core.ComponentMetadata({
            selector: dm.selector,
            inputs: mergedInputs,
            outputs: mergedOutputs,
            host: mergedHost,
            exportAs: dm.exportAs,
            moduleId: dm.moduleId,
            queries: mergedQueries,
            changeDetection: dm.changeDetection,
            providers: dm.providers,
            viewProviders: dm.viewProviders,
            entryComponents: dm.entryComponents,
            directives: dm.directives,
            pipes: dm.pipes,
            template: dm.template,
            templateUrl: dm.templateUrl,
            styles: dm.styles,
            styleUrls: dm.styleUrls,
            encapsulation: dm.encapsulation,
            animations: dm.animations,
            interpolation: dm.interpolation
          }) : new _angular_core.DirectiveMetadata({
            selector: dm.selector,
            inputs: mergedInputs,
            outputs: mergedOutputs,
            host: mergedHost,
            exportAs: dm.exportAs,
            queries: mergedQueries,
            providers: dm.providers
          });
        }, DirectiveResolver;
      }();
  DirectiveResolver.decorators = [{type: _angular_core.Injectable}], DirectiveResolver.ctorParameters = [{type: ReflectorReader}];
  var LIFECYCLE_INTERFACES = MapWrapper.createFromPairs([[LifecycleHooks.OnInit, _angular_core.OnInit], [LifecycleHooks.OnDestroy, _angular_core.OnDestroy], [LifecycleHooks.DoCheck, _angular_core.DoCheck], [LifecycleHooks.OnChanges, _angular_core.OnChanges], [LifecycleHooks.AfterContentInit, _angular_core.AfterContentInit], [LifecycleHooks.AfterContentChecked, _angular_core.AfterContentChecked], [LifecycleHooks.AfterViewInit, _angular_core.AfterViewInit], [LifecycleHooks.AfterViewChecked, _angular_core.AfterViewChecked]]),
      LIFECYCLE_PROPS = MapWrapper.createFromPairs([[LifecycleHooks.OnInit, "ngOnInit"], [LifecycleHooks.OnDestroy, "ngOnDestroy"], [LifecycleHooks.DoCheck, "ngDoCheck"], [LifecycleHooks.OnChanges, "ngOnChanges"], [LifecycleHooks.AfterContentInit, "ngAfterContentInit"], [LifecycleHooks.AfterContentChecked, "ngAfterContentChecked"], [LifecycleHooks.AfterViewInit, "ngAfterViewInit"], [LifecycleHooks.AfterViewChecked, "ngAfterViewChecked"]]),
      NgModuleResolver = function() {
        function NgModuleResolver(_reflector) {
          void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector;
        }
        return NgModuleResolver.prototype.resolve = function(type, throwIfNotFound) {
          void 0 === throwIfNotFound && (throwIfNotFound = !0);
          var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
          if (isPresent(ngModuleMeta))
            return ngModuleMeta;
          if (throwIfNotFound)
            throw new BaseException("No NgModule metadata found for '" + stringify(type) + "'.");
          return null;
        }, NgModuleResolver;
      }();
  NgModuleResolver.decorators = [{type: _angular_core.Injectable}], NgModuleResolver.ctorParameters = [{type: ReflectorReader}];
  var PipeResolver = function() {
    function PipeResolver(_reflector) {
      void 0 === _reflector && (_reflector = reflector), this._reflector = _reflector;
    }
    return PipeResolver.prototype.resolve = function(type, throwIfNotFound) {
      void 0 === throwIfNotFound && (throwIfNotFound = !0);
      var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (isPresent(metas)) {
        var annotation = metas.find(_isPipeMetadata);
        if (isPresent(annotation))
          return annotation;
      }
      if (throwIfNotFound)
        throw new BaseException("No Pipe decorator found on " + stringify(type));
      return null;
    }, PipeResolver;
  }();
  PipeResolver.decorators = [{type: _angular_core.Injectable}], PipeResolver.ctorParameters = [{type: ReflectorReader}];
  var CompileMetadataResolver = function() {
    function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _config, _console, _schemaRegistry, _reflector) {
      void 0 === _reflector && (_reflector = reflector), this._ngModuleResolver = _ngModuleResolver, this._directiveResolver = _directiveResolver, this._pipeResolver = _pipeResolver, this._config = _config, this._console = _console, this._schemaRegistry = _schemaRegistry, this._reflector = _reflector, this._directiveCache = new Map, this._pipeCache = new Map, this._ngModuleCache = new Map, this._ngModuleOfTypes = new Map, this._anonymousTypes = new Map, this._anonymousTypeIndex = 0;
    }
    return CompileMetadataResolver.prototype.sanitizeTokenName = function(token) {
      var identifier = stringify(token);
      if (identifier.indexOf("(") >= 0) {
        var found = this._anonymousTypes.get(token);
        isBlank(found) && (this._anonymousTypes.set(token, this._anonymousTypeIndex++), found = this._anonymousTypes.get(token)), identifier = "anonymous_token_" + found + "_";
      }
      return sanitizeIdentifier(identifier);
    }, CompileMetadataResolver.prototype.clearCacheFor = function(type) {
      this._directiveCache.delete(type), this._pipeCache.delete(type), this._ngModuleOfTypes.delete(type), this._ngModuleCache.clear();
    }, CompileMetadataResolver.prototype.clearCache = function() {
      this._directiveCache.clear(), this._pipeCache.clear(), this._ngModuleCache.clear(), this._ngModuleOfTypes.clear();
    }, CompileMetadataResolver.prototype.getAnimationEntryMetadata = function(entry) {
      var _this = this,
          defs = entry.definitions.map(function(def) {
            return _this.getAnimationStateMetadata(def);
          });
      return new CompileAnimationEntryMetadata(entry.name, defs);
    }, CompileMetadataResolver.prototype.getAnimationStateMetadata = function(value) {
      if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
        var styles = this.getAnimationStyleMetadata(value.styles);
        return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
      }
      return value instanceof _angular_core.AnimationStateTransitionMetadata ? new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps)) : null;
    }, CompileMetadataResolver.prototype.getAnimationStyleMetadata = function(value) {
      return new CompileAnimationStyleMetadata(value.offset, value.styles);
    }, CompileMetadataResolver.prototype.getAnimationMetadata = function(value) {
      var _this = this;
      if (value instanceof _angular_core.AnimationStyleMetadata)
        return this.getAnimationStyleMetadata(value);
      if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata)
        return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function(entry) {
          return _this.getAnimationStyleMetadata(entry);
        }));
      if (value instanceof _angular_core.AnimationAnimateMetadata) {
        var animateData = this.getAnimationMetadata(value.styles);
        return new CompileAnimationAnimateMetadata(value.timings, animateData);
      }
      if (value instanceof _angular_core.AnimationWithStepsMetadata) {
        var steps = value.steps.map(function(step) {
          return _this.getAnimationMetadata(step);
        });
        return value instanceof _angular_core.AnimationGroupMetadata ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps);
      }
      return null;
    }, CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType, throwIfNotFound) {
      var _this = this;
      void 0 === throwIfNotFound && (throwIfNotFound = !0), directiveType = _angular_core.resolveForwardRef(directiveType);
      var meta = this._directiveCache.get(directiveType);
      if (isBlank(meta)) {
        var dirMeta = this._directiveResolver.resolve(directiveType, throwIfNotFound);
        if (!dirMeta)
          return null;
        var templateMeta = null,
            changeDetectionStrategy = null,
            viewProviders = [],
            moduleUrl = staticTypeModuleUrl(directiveType),
            viewDirectiveTypes = [],
            viewPipeTypes = [],
            entryComponentTypes = [],
            selector = dirMeta.selector;
        if (dirMeta instanceof _angular_core.ComponentMetadata) {
          var cmpMeta = dirMeta;
          assertArrayOfStrings("styles", cmpMeta.styles), assertInterpolationSymbols("interpolation", cmpMeta.interpolation);
          var animations = isPresent(cmpMeta.animations) ? cmpMeta.animations.map(function(e) {
            return _this.getAnimationEntryMetadata(e);
          }) : null;
          assertArrayOfStrings("styles", cmpMeta.styles), assertArrayOfStrings("styleUrls", cmpMeta.styleUrls), templateMeta = new CompileTemplateMetadata({
            encapsulation: cmpMeta.encapsulation,
            template: cmpMeta.template,
            templateUrl: cmpMeta.templateUrl,
            styles: cmpMeta.styles,
            styleUrls: cmpMeta.styleUrls,
            animations: animations,
            interpolation: cmpMeta.interpolation
          }), changeDetectionStrategy = cmpMeta.changeDetection, isPresent(dirMeta.viewProviders) && (viewProviders = this.getProvidersMetadata(verifyNonBlankProviders(directiveType, dirMeta.viewProviders, "viewProviders"), [])), moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta), cmpMeta.entryComponents && (entryComponentTypes = flattenArray(cmpMeta.entryComponents).map(function(type) {
            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
          })), cmpMeta.directives && (viewDirectiveTypes = flattenArray(cmpMeta.directives).map(function(type) {
            if (!type)
              throw new BaseException("Unexpected directive value '" + type + "' on the View of component '" + stringify(directiveType) + "'");
            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
          })), cmpMeta.pipes && (viewPipeTypes = flattenArray(cmpMeta.pipes).map(function(type) {
            if (!type)
              throw new BaseException("Unexpected pipe value '" + type + "' on the View of component '" + stringify(directiveType) + "'");
            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
          })), selector || (selector = this._schemaRegistry.getDefaultComponentElementName());
        } else if (!selector)
          throw new BaseException("Directive " + stringify(directiveType) + " has no selector, please add it!");
        var providers = [];
        isPresent(dirMeta.providers) && (providers = this.getProvidersMetadata(verifyNonBlankProviders(directiveType, dirMeta.providers, "providers"), entryComponentTypes));
        var queries = [],
            viewQueries = [];
        isPresent(dirMeta.queries) && (queries = this.getQueriesMetadata(dirMeta.queries, !1, directiveType), viewQueries = this.getQueriesMetadata(dirMeta.queries, !0, directiveType)), meta = CompileDirectiveMetadata.create({
          selector: selector,
          exportAs: dirMeta.exportAs,
          isComponent: isPresent(templateMeta),
          type: this.getTypeMetadata(directiveType, moduleUrl),
          template: templateMeta,
          changeDetection: changeDetectionStrategy,
          inputs: dirMeta.inputs,
          outputs: dirMeta.outputs,
          host: dirMeta.host,
          providers: providers,
          viewProviders: viewProviders,
          queries: queries,
          viewQueries: viewQueries,
          viewDirectives: viewDirectiveTypes,
          viewPipes: viewPipeTypes,
          entryComponents: entryComponentTypes
        }), this._directiveCache.set(directiveType, meta);
      }
      return meta;
    }, CompileMetadataResolver.prototype.getNgModuleMetadata = function(moduleType, throwIfNotFound) {
      var _this = this;
      void 0 === throwIfNotFound && (throwIfNotFound = !0), moduleType = _angular_core.resolveForwardRef(moduleType);
      var compileMeta = this._ngModuleCache.get(moduleType);
      if (!compileMeta) {
        var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
        if (!meta)
          return null;
        var declaredDirectives_1 = [],
            exportedDirectives_1 = [],
            declaredPipes_1 = [],
            exportedPipes_1 = [],
            importedModules_1 = [],
            exportedModules_1 = [],
            providers_1 = [],
            entryComponents_1 = [],
            bootstrapComponents = [],
            schemas = [];
        meta.imports && flattenArray(meta.imports).forEach(function(importedType) {
          var importedModuleType;
          if (isValidType(importedType))
            importedModuleType = importedType;
          else if (importedType && importedType.ngModule) {
            var moduleWithProviders = importedType;
            importedModuleType = moduleWithProviders.ngModule, moduleWithProviders.providers && providers_1.push.apply(providers_1, _this.getProvidersMetadata(moduleWithProviders.providers, entryComponents_1));
          }
          if (!importedModuleType)
            throw new BaseException("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
          importedModules_1.push(_this.getNgModuleMetadata(importedModuleType, !1));
        }), meta.exports && flattenArray(meta.exports).forEach(function(exportedType) {
          if (!isValidType(exportedType))
            throw new BaseException("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
          var exportedDirMeta,
              exportedPipeMeta,
              exportedModuleMeta;
          if (exportedDirMeta = _this.getDirectiveMetadata(exportedType, !1))
            exportedDirectives_1.push(exportedDirMeta);
          else if (exportedPipeMeta = _this.getPipeMetadata(exportedType, !1))
            exportedPipes_1.push(exportedPipeMeta);
          else {
            if (!(exportedModuleMeta = _this.getNgModuleMetadata(exportedType, !1)))
              throw new BaseException("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
            exportedModules_1.push(exportedModuleMeta);
          }
        });
        var transitiveModule_1 = this._getTransitiveNgModuleMetadata(importedModules_1, exportedModules_1);
        meta.declarations && flattenArray(meta.declarations).forEach(function(declaredType) {
          if (!isValidType(declaredType))
            throw new BaseException("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
          var declaredDirMeta,
              declaredPipeMeta;
          if (declaredDirMeta = _this.getDirectiveMetadata(declaredType, !1))
            _this._addDirectiveToModule(declaredDirMeta, moduleType, transitiveModule_1, declaredDirectives_1, !0);
          else {
            if (!(declaredPipeMeta = _this.getPipeMetadata(declaredType, !1)))
              throw new BaseException("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
            _this._addPipeToModule(declaredPipeMeta, moduleType, transitiveModule_1, declaredPipes_1, !0);
          }
        }), meta.providers && providers_1.push.apply(providers_1, this.getProvidersMetadata(meta.providers, entryComponents_1)), meta.entryComponents && entryComponents_1.push.apply(entryComponents_1, flattenArray(meta.entryComponents).map(function(type) {
          return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
        })), meta.bootstrap && bootstrapComponents.push.apply(bootstrapComponents, flattenArray(meta.bootstrap).map(function(type) {
          return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
        })), entryComponents_1.push.apply(entryComponents_1, bootstrapComponents), meta.schemas && schemas.push.apply(schemas, flattenArray(meta.schemas)), (_a = transitiveModule_1.entryComponents).push.apply(_a, entryComponents_1), (_b = transitiveModule_1.providers).push.apply(_b, providers_1), compileMeta = new CompileNgModuleMetadata({
          type: this.getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
          providers: providers_1,
          entryComponents: entryComponents_1,
          bootstrapComponents: bootstrapComponents,
          schemas: schemas,
          declaredDirectives: declaredDirectives_1,
          exportedDirectives: exportedDirectives_1,
          declaredPipes: declaredPipes_1,
          exportedPipes: exportedPipes_1,
          importedModules: importedModules_1,
          exportedModules: exportedModules_1,
          transitiveModule: transitiveModule_1
        }), transitiveModule_1.modules.push(compileMeta), this._verifyModule(compileMeta), this._ngModuleCache.set(moduleType, compileMeta);
      }
      return compileMeta;
      var _a,
          _b;
    }, CompileMetadataResolver.prototype.addComponentToModule = function(moduleType, compType) {
      var moduleMeta = this.getNgModuleMetadata(moduleType),
          compMeta = this.getDirectiveMetadata(compType, !1);
      this._addDirectiveToModule(compMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredDirectives), moduleMeta.transitiveModule.entryComponents.push(compMeta.type), moduleMeta.entryComponents.push(compMeta.type), this._verifyModule(moduleMeta);
    }, CompileMetadataResolver.prototype._verifyModule = function(moduleMeta) {
      var _this = this;
      moduleMeta.exportedDirectives.forEach(function(dirMeta) {
        if (!moduleMeta.transitiveModule.directivesSet.has(dirMeta.type.runtime))
          throw new BaseException("Can't export directive " + stringify(dirMeta.type.runtime) + " from " + stringify(moduleMeta.type.runtime) + " as it was neither declared nor imported!");
      }), moduleMeta.exportedPipes.forEach(function(pipeMeta) {
        if (!moduleMeta.transitiveModule.pipesSet.has(pipeMeta.type.runtime))
          throw new BaseException("Can't export pipe " + stringify(pipeMeta.type.runtime) + " from " + stringify(moduleMeta.type.runtime) + " as it was neither declared nor imported!");
      }), moduleMeta.entryComponents.forEach(function(entryComponentType) {
        moduleMeta.transitiveModule.directivesSet.has(entryComponentType.runtime) || (_this._addDirectiveToModule(_this.getDirectiveMetadata(entryComponentType.runtime), moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredDirectives), _this._console.warn("NgModule " + stringify(moduleMeta.type.runtime) + " uses " + stringify(entryComponentType.runtime) + ' via "entryComponents" but it was neither declared nor imported! This warning will become an error after final.'));
      }), moduleMeta.declaredDirectives.forEach(function(dirMeta) {
        _this._getTransitiveViewDirectivesAndPipes(dirMeta, moduleMeta);
      });
    }, CompileMetadataResolver.prototype._addTypeToModule = function(type, moduleType) {
      var oldModule = this._ngModuleOfTypes.get(type);
      if (oldModule && oldModule !== moduleType)
        throw new BaseException("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "!");
      this._ngModuleOfTypes.set(type, moduleType);
    }, CompileMetadataResolver.prototype._getTransitiveViewDirectivesAndPipes = function(compMeta, moduleMeta) {
      var _this = this;
      if (compMeta.isComponent) {
        var addPipe = function(pipeType) {
          var pipeMeta = _this.getPipeMetadata(pipeType);
          _this._addPipeToModule(pipeMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredPipes);
        },
            addDirective = function(dirType) {
              var dirMeta = _this.getDirectiveMetadata(dirType);
              _this._addDirectiveToModule(dirMeta, moduleMeta.type.runtime, moduleMeta.transitiveModule, moduleMeta.declaredDirectives) && _this._getTransitiveViewDirectivesAndPipes(dirMeta, moduleMeta);
            };
        compMeta.viewPipes && compMeta.viewPipes.forEach(function(cplType) {
          return addPipe(cplType.runtime);
        }), compMeta.viewDirectives && compMeta.viewDirectives.forEach(function(cplType) {
          return addDirective(cplType.runtime);
        }), compMeta.entryComponents.forEach(function(entryComponentType) {
          moduleMeta.transitiveModule.directivesSet.has(entryComponentType.runtime) || (_this._console.warn("Component " + stringify(compMeta.type.runtime) + " in NgModule " + stringify(moduleMeta.type.runtime) + " uses " + stringify(entryComponentType.runtime) + ' via "entryComponents" but it was neither declared nor imported into the module! This warning will become an error after final.'), addDirective(entryComponentType.runtime));
        });
      }
    }, CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function(importedModules, exportedModules) {
      var transitiveModules = getTransitiveModules(importedModules.concat(exportedModules), !0),
          providers = flattenArray(transitiveModules.map(function(ngModule) {
            return ngModule.providers;
          })),
          entryComponents = flattenArray(transitiveModules.map(function(ngModule) {
            return ngModule.entryComponents;
          })),
          transitiveExportedModules = getTransitiveModules(importedModules, !1),
          directives = flattenArray(transitiveExportedModules.map(function(ngModule) {
            return ngModule.exportedDirectives;
          })),
          pipes = flattenArray(transitiveExportedModules.map(function(ngModule) {
            return ngModule.exportedPipes;
          }));
      return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes);
    }, CompileMetadataResolver.prototype._addDirectiveToModule = function(dirMeta, moduleType, transitiveModule, declaredDirectives, force) {
      return void 0 === force && (force = !1), !(!force && transitiveModule.directivesSet.has(dirMeta.type.runtime)) && (transitiveModule.directivesSet.add(dirMeta.type.runtime), transitiveModule.directives.push(dirMeta), declaredDirectives.push(dirMeta), this._addTypeToModule(dirMeta.type.runtime, moduleType), !0);
    }, CompileMetadataResolver.prototype._addPipeToModule = function(pipeMeta, moduleType, transitiveModule, declaredPipes, force) {
      return void 0 === force && (force = !1), !(!force && transitiveModule.pipesSet.has(pipeMeta.type.runtime)) && (transitiveModule.pipesSet.add(pipeMeta.type.runtime), transitiveModule.pipes.push(pipeMeta), declaredPipes.push(pipeMeta), this._addTypeToModule(pipeMeta.type.runtime, moduleType), !0);
    }, CompileMetadataResolver.prototype.getTypeMetadata = function(type, moduleUrl, dependencies) {
      return void 0 === dependencies && (dependencies = null), type = _angular_core.resolveForwardRef(type), new CompileTypeMetadata({
        name: this.sanitizeTokenName(type),
        moduleUrl: moduleUrl,
        runtime: type,
        diDeps: this.getDependenciesMetadata(type, dependencies),
        lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
          return hasLifecycleHook(hook, type);
        })
      });
    }, CompileMetadataResolver.prototype.getFactoryMetadata = function(factory, moduleUrl, dependencies) {
      return void 0 === dependencies && (dependencies = null), factory = _angular_core.resolveForwardRef(factory), new CompileFactoryMetadata({
        name: this.sanitizeTokenName(factory),
        moduleUrl: moduleUrl,
        runtime: factory,
        diDeps: this.getDependenciesMetadata(factory, dependencies)
      });
    }, CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType, throwIfNotFound) {
      void 0 === throwIfNotFound && (throwIfNotFound = !0), pipeType = _angular_core.resolveForwardRef(pipeType);
      var meta = this._pipeCache.get(pipeType);
      if (isBlank(meta)) {
        var pipeMeta = this._pipeResolver.resolve(pipeType, throwIfNotFound);
        if (!pipeMeta)
          return null;
        meta = new CompilePipeMetadata({
          type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
          name: pipeMeta.name,
          pure: pipeMeta.pure
        }), this._pipeCache.set(pipeType, meta);
      }
      return meta;
    }, CompileMetadataResolver.prototype.getDependenciesMetadata = function(typeOrFunc, dependencies) {
      var _this = this,
          hasUnknownDeps = !1,
          params = isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);
      isBlank(params) && (params = []);
      var dependenciesMetadata = params.map(function(param) {
        var isAttribute = !1,
            isHost = !1,
            isSelf = !1,
            isSkipSelf = !1,
            isOptional = !1,
            query = null,
            viewQuery = null,
            token = null;
        return isArray(param) ? param.forEach(function(paramEntry) {
          paramEntry instanceof _angular_core.HostMetadata ? isHost = !0 : paramEntry instanceof _angular_core.SelfMetadata ? isSelf = !0 : paramEntry instanceof _angular_core.SkipSelfMetadata ? isSkipSelf = !0 : paramEntry instanceof _angular_core.OptionalMetadata ? isOptional = !0 : paramEntry instanceof _angular_core.AttributeMetadata ? (isAttribute = !0, token = paramEntry.attributeName) : paramEntry instanceof _angular_core.QueryMetadata ? paramEntry.isViewQuery ? viewQuery = paramEntry : query = paramEntry : paramEntry instanceof _angular_core.InjectMetadata ? token = paramEntry.token : isValidType(paramEntry) && isBlank(token) && (token = paramEntry);
        }) : token = param, isBlank(token) ? (hasUnknownDeps = !0, null) : new CompileDiDependencyMetadata({
          isAttribute: isAttribute,
          isHost: isHost,
          isSelf: isSelf,
          isSkipSelf: isSkipSelf,
          isOptional: isOptional,
          query: isPresent(query) ? _this.getQueryMetadata(query, null, typeOrFunc) : null,
          viewQuery: isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,
          token: _this.getTokenMetadata(token)
        });
      });
      if (hasUnknownDeps) {
        var depsTokens = dependenciesMetadata.map(function(dep) {
          return dep ? stringify(dep.token) : "?";
        }).join(", ");
        throw new BaseException("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
      }
      return dependenciesMetadata;
    }, CompileMetadataResolver.prototype.getTokenMetadata = function(token) {
      token = _angular_core.resolveForwardRef(token);
      var compileToken;
      return compileToken = new CompileTokenMetadata(isString(token) ? {value: token} : {identifier: new CompileIdentifierMetadata({
          runtime: token,
          name: this.sanitizeTokenName(token),
          moduleUrl: staticTypeModuleUrl(token)
        })});
    }, CompileMetadataResolver.prototype.getProvidersMetadata = function(providers, targetEntryComponents) {
      var _this = this,
          compileProviders = [];
      return providers.forEach(function(provider) {
        provider = _angular_core.resolveForwardRef(provider), isProviderLiteral(provider) && (provider = createProvider(provider));
        var compileProvider;
        if (isArray(provider))
          compileProvider = _this.getProvidersMetadata(provider, targetEntryComponents);
        else if (provider instanceof _angular_core.Provider) {
          var tokenMeta = _this.getTokenMetadata(provider.token);
          tokenMeta.equalsTo(identifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) ? targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider)) : compileProvider = _this.getProviderMetadata(provider);
        } else {
          if (!isValidType(provider))
            throw new BaseException("Invalid provider - only instances of Provider and Type are allowed, got: " + stringify(provider));
          compileProvider = _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
        }
        compileProvider && compileProviders.push(compileProvider);
      }), compileProviders;
    }, CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function(provider) {
      var _this = this,
          components = [],
          collectedIdentifiers = [];
      if (provider.useFactory || provider.useExisting || provider.useClass)
        throw new BaseException("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
      if (!provider.multi)
        throw new BaseException("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
      return convertToCompileValue(provider.useValue, collectedIdentifiers), collectedIdentifiers.forEach(function(identifier) {
        var dirMeta = _this.getDirectiveMetadata(identifier.runtime, !1);
        dirMeta && components.push(dirMeta.type);
      }), components;
    }, CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
      var compileDeps,
          compileTypeMetadata = null,
          compileFactoryMetadata = null;
      return isPresent(provider.useClass) ? (compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies), compileDeps = compileTypeMetadata.diDeps) : isPresent(provider.useFactory) && (compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies), compileDeps = compileFactoryMetadata.diDeps), new CompileProviderMetadata({
        token: this.getTokenMetadata(provider.token),
        useClass: compileTypeMetadata,
        useValue: convertToCompileValue(provider.useValue, []),
        useFactory: compileFactoryMetadata,
        useExisting: isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) : null,
        deps: compileDeps,
        multi: provider.multi
      });
    }, CompileMetadataResolver.prototype.getQueriesMetadata = function(queries, isViewQuery, directiveType) {
      var _this = this,
          res = [];
      return StringMapWrapper.forEach(queries, function(query, propertyName) {
        query.isViewQuery === isViewQuery && res.push(_this.getQueryMetadata(query, propertyName, directiveType));
      }), res;
    }, CompileMetadataResolver.prototype.getQueryMetadata = function(q, propertyName, typeOrFunc) {
      var selectors,
          _this = this;
      if (q.isVarBindingQuery)
        selectors = q.varBindings.map(function(varName) {
          return _this.getTokenMetadata(varName);
        });
      else {
        if (!isPresent(q.selector))
          throw new BaseException("Can't construct a query for the property \"" + propertyName + '" of "' + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
        selectors = [this.getTokenMetadata(q.selector)];
      }
      return new CompileQueryMetadata({
        selectors: selectors,
        first: q.first,
        descendants: q.descendants,
        propertyName: propertyName,
        read: isPresent(q.read) ? this.getTokenMetadata(q.read) : null
      });
    }, CompileMetadataResolver;
  }();
  CompileMetadataResolver.decorators = [{type: _angular_core.Injectable}], CompileMetadataResolver.ctorParameters = [{type: NgModuleResolver}, {type: DirectiveResolver}, {type: PipeResolver}, {type: CompilerConfig}, {type: Console}, {type: ElementSchemaRegistry}, {type: ReflectorReader}];
  var _CompileValueConverter = function(_super) {
    function _CompileValueConverter() {
      _super.apply(this, arguments);
    }
    return __extends(_CompileValueConverter, _super), _CompileValueConverter.prototype.visitOther = function(value, targetIdentifiers) {
      var identifier;
      return identifier = new CompileIdentifierMetadata(isStaticSymbol(value) ? {
        name: value.name,
        moduleUrl: value.filePath,
        runtime: value
      } : {runtime: value}), targetIdentifiers.push(identifier), identifier;
    }, _CompileValueConverter;
  }(ValueTransformer),
      ComponentFactoryDependency$1 = function() {
        function ComponentFactoryDependency$1(comp, placeholder) {
          this.comp = comp, this.placeholder = placeholder;
        }
        return ComponentFactoryDependency$1;
      }(),
      NgModuleCompileResult = function() {
        function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
          this.statements = statements, this.ngModuleFactoryVar = ngModuleFactoryVar, this.dependencies = dependencies;
        }
        return NgModuleCompileResult;
      }(),
      NgModuleCompiler = function() {
        function NgModuleCompiler() {}
        return NgModuleCompiler.prototype.compile = function(ngModuleMeta, extraProviders) {
          var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ? "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl : "in NgModule " + ngModuleMeta.type.name,
              sourceFile = new ParseSourceFile("", sourceFileName),
              sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null)),
              deps = [],
              bootstrapComponentFactories = [],
              entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent) {
                var id = new CompileIdentifierMetadata({name: entryComponent.name});
                return ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1 && bootstrapComponentFactories.push(id), deps.push(new ComponentFactoryDependency$1(entryComponent, id)), id;
              }),
              builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan),
              providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
          providerParser.parse().forEach(function(provider) {
            return builder.addProvider(provider);
          });
          var injectorClass = builder.build(),
              ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory",
              ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(Identifiers.NgModuleFactory).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(Identifiers.NgModuleFactory, [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
          return new NgModuleCompileResult([injectorClass, ngModuleFactoryStmt], ngModuleFactoryVar, deps);
        }, NgModuleCompiler;
      }();
  NgModuleCompiler.decorators = [{type: _angular_core.Injectable}];
  var _InjectorBuilder = function() {
    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
      this._ngModuleMeta = _ngModuleMeta, this._entryComponentFactories = _entryComponentFactories, this._bootstrapComponentFactories = _bootstrapComponentFactories, this._sourceSpan = _sourceSpan, this._instances = new CompileIdentifierMap, this._fields = [], this._createStmts = [], this._destroyStmts = [], this._getters = [];
    }
    return _InjectorBuilder.prototype.addProvider = function(resolvedProvider) {
      var _this = this,
          providerValueExpressions = resolvedProvider.providers.map(function(provider) {
            return _this._getProviderValue(provider);
          }),
          propName = "_" + resolvedProvider.token.name + "_" + this._instances.size,
          instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
      resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 && this._destroyStmts.push(instance.callMethod("ngOnDestroy", []).toStmt()), this._instances.add(resolvedProvider.token, instance);
    }, _InjectorBuilder.prototype.build = function() {
      var _this = this,
          getMethodStmts = this._instances.keys().map(function(token) {
            var providerExpr = _this._instances.get(token);
            return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
          }),
          methods = [new ClassMethod("createInternal", [], this._createStmts.concat(new ReturnStatement(this._instances.get(identifierToken(this._ngModuleMeta.type)))), importType(this._ngModuleMeta.type)), new ClassMethod("getInternal", [new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars$1.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod("destroyInternal", [], this._destroyStmts)],
          ctor = new ClassMethod(null, [new FnParam(InjectorProps.parent.name, importType(Identifiers.Injector))], [SUPER_EXPR.callFn([variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function(componentFactory) {
            return importExpr(componentFactory);
          })), literalArr(this._bootstrapComponentFactories.map(function(componentFactory) {
            return importExpr(componentFactory);
          }))]).toStmt()]),
          injClassName = this._ngModuleMeta.type.name + "Injector";
      return new ClassStmt(injClassName, importExpr(Identifiers.NgModuleInjector, [importType(this._ngModuleMeta.type)]), this._fields, this._getters, ctor, methods);
    }, _InjectorBuilder.prototype._getProviderValue = function(provider) {
      var result,
          _this = this;
      if (isPresent(provider.useExisting))
        result = this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}));
      else if (isPresent(provider.useFactory)) {
        var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps,
            depsExpr = deps.map(function(dep) {
              return _this._getDependency(dep);
            });
        result = importExpr(provider.useFactory).callFn(depsExpr);
      } else if (isPresent(provider.useClass)) {
        var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps,
            depsExpr = deps.map(function(dep) {
              return _this._getDependency(dep);
            });
        result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
      } else
        result = convertValueToOutputAst(provider.useValue);
      return result;
    }, _InjectorBuilder.prototype._createProviderProperty = function(propName, provider, providerValueExpressions, isMulti, isEager) {
      var resolvedProviderValueExpr,
          type;
      if (isMulti ? (resolvedProviderValueExpr = literalArr(providerValueExpressions), type = new ArrayType(DYNAMIC_TYPE)) : (resolvedProviderValueExpr = providerValueExpressions[0], type = providerValueExpressions[0].type), isBlank(type) && (type = DYNAMIC_TYPE), isEager)
        this._fields.push(new ClassField(propName, type)), this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
      else {
        var internalField = "_" + propName;
        this._fields.push(new ClassField(internalField, type));
        var getterStmts = [new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(THIS_EXPR.prop(internalField))];
        this._getters.push(new ClassGetter(propName, getterStmts, type));
      }
      return THIS_EXPR.prop(propName);
    }, _InjectorBuilder.prototype._getDependency = function(dep) {
      var result = null;
      if (dep.isValue && (result = literal(dep.value)), dep.isSkipSelf || (dep.token && (dep.token.equalsTo(identifierToken(Identifiers.Injector)) || dep.token.equalsTo(identifierToken(Identifiers.ComponentFactoryResolver))) && (result = THIS_EXPR), isBlank(result) && (result = this._instances.get(dep.token))), isBlank(result)) {
        var args = [createDiTokenExpression(dep.token)];
        dep.isOptional && args.push(NULL_EXPR), result = InjectorProps.parent.callMethod("get", args);
      }
      return result;
    }, _InjectorBuilder;
  }(),
      InjectorProps = function() {
        function InjectorProps() {}
        return InjectorProps;
      }();
  InjectorProps.parent = THIS_EXPR.prop("parent");
  var InjectMethodVars$1 = function() {
    function InjectMethodVars$1() {}
    return InjectMethodVars$1;
  }();
  InjectMethodVars$1.token = variable("token"), InjectMethodVars$1.notFoundResult = variable("notFoundResult");
  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g,
      CATCH_ERROR_VAR$2 = variable("error"),
      CATCH_STACK_VAR$2 = variable("stack"),
      _EmittedLine = function() {
        function _EmittedLine(indent) {
          this.indent = indent, this.parts = [];
        }
        return _EmittedLine;
      }(),
      EmitterVisitorContext = function() {
        function EmitterVisitorContext(_exportedVars, _indent) {
          this._exportedVars = _exportedVars, this._indent = _indent, this._classes = [], this._lines = [new _EmittedLine(_indent)];
        }
        return EmitterVisitorContext.createRoot = function(exportedVars) {
          return new EmitterVisitorContext(exportedVars, 0);
        }, Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
          get: function() {
            return this._lines[this._lines.length - 1];
          },
          enumerable: !0,
          configurable: !0
        }), EmitterVisitorContext.prototype.isExportedVar = function(varName) {
          return this._exportedVars.indexOf(varName) !== -1;
        }, EmitterVisitorContext.prototype.println = function(lastPart) {
          void 0 === lastPart && (lastPart = ""), this.print(lastPart, !0);
        }, EmitterVisitorContext.prototype.lineIsEmpty = function() {
          return 0 === this._currentLine.parts.length;
        }, EmitterVisitorContext.prototype.print = function(part, newLine) {
          void 0 === newLine && (newLine = !1), part.length > 0 && this._currentLine.parts.push(part), newLine && this._lines.push(new _EmittedLine(this._indent));
        }, EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
          this.lineIsEmpty() && this._lines.pop();
        }, EmitterVisitorContext.prototype.incIndent = function() {
          this._indent++, this._currentLine.indent = this._indent;
        }, EmitterVisitorContext.prototype.decIndent = function() {
          this._indent--, this._currentLine.indent = this._indent;
        }, EmitterVisitorContext.prototype.pushClass = function(clazz) {
          this._classes.push(clazz);
        }, EmitterVisitorContext.prototype.popClass = function() {
          return this._classes.pop();
        }, Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
          get: function() {
            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
          },
          enumerable: !0,
          configurable: !0
        }), EmitterVisitorContext.prototype.toSource = function() {
          var lines = this._lines;
          return 0 === lines[lines.length - 1].parts.length && (lines = lines.slice(0, lines.length - 1)), lines.map(function(line) {
            return line.parts.length > 0 ? _createIndent(line.indent) + line.parts.join("") : "";
          }).join("\n");
        }, EmitterVisitorContext;
      }(),
      AbstractEmitterVisitor = function() {
        function AbstractEmitterVisitor(_escapeDollarInStrings) {
          this._escapeDollarInStrings = _escapeDollarInStrings;
        }
        return AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
          return stmt.expr.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
          return ctx.print("return "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
          ctx.print("if ("), stmt.condition.visitExpression(this, ctx), ctx.print(") {");
          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
          return stmt.trueCase.length <= 1 && !hasElseCase ? (ctx.print(" "), this.visitAllStatements(stmt.trueCase, ctx), ctx.removeEmptyLastLine(), ctx.print(" ")) : (ctx.println(), ctx.incIndent(), this.visitAllStatements(stmt.trueCase, ctx), ctx.decIndent(), hasElseCase && (ctx.println("} else {"), ctx.incIndent(), this.visitAllStatements(stmt.falseCase, ctx), ctx.decIndent())), ctx.println("}"), null;
        }, AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
          return ctx.print("throw "), stmt.error.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
          var lines = stmt.comment.split("\n");
          return lines.forEach(function(line) {
            ctx.println("// " + line);
          }), null;
        }, AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          return lineWasEmpty || ctx.print("("), ctx.print(expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          return lineWasEmpty || ctx.print("("), expr.receiver.visitExpression(this, ctx), ctx.print("["), expr.index.visitExpression(this, ctx), ctx.print("] = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
          var lineWasEmpty = ctx.lineIsEmpty();
          return lineWasEmpty || ctx.print("("), expr.receiver.visitExpression(this, ctx), ctx.print("." + expr.name + " = "), expr.value.visitExpression(this, ctx), lineWasEmpty || ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
          expr.receiver.visitExpression(this, ctx);
          var name = expr.name;
          return isPresent(expr.builtin) && (name = this.getBuiltinMethodName(expr.builtin), isBlank(name)) ? null : (ctx.print("." + name + "("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(")"), null);
        }, AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
          return expr.fn.visitExpression(this, ctx), ctx.print("("), this.visitAllExpressions(expr.args, ctx, ","), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin))
            switch (ast.builtin) {
              case BuiltinVar.Super:
                varName = "super";
                break;
              case BuiltinVar.This:
                varName = "this";
                break;
              case BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR$2.name;
                break;
              case BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR$2.name;
                break;
              default:
                throw new BaseException("Unknown builtin variable " + ast.builtin);
            }
          return ctx.print(varName), null;
        }, AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
          return ctx.print("new "), ast.classExpr.visitExpression(this, ctx), ctx.print("("), this.visitAllExpressions(ast.args, ctx, ","), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
          var value = ast.value;
          return isString(value) ? ctx.print(escapeSingleQuoteString(value, this._escapeDollarInStrings)) : isBlank(value) ? ctx.print("null") : ctx.print("" + value), null;
        }, AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
          return ctx.print("("), ast.condition.visitExpression(this, ctx), ctx.print("? "), ast.trueCase.visitExpression(this, ctx), ctx.print(": "), ast.falseCase.visitExpression(this, ctx), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
          return ctx.print("!"), ast.condition.visitExpression(this, ctx), null;
        }, AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
          var opStr;
          switch (ast.operator) {
            case BinaryOperator.Equals:
              opStr = "==";
              break;
            case BinaryOperator.Identical:
              opStr = "===";
              break;
            case BinaryOperator.NotEquals:
              opStr = "!=";
              break;
            case BinaryOperator.NotIdentical:
              opStr = "!==";
              break;
            case BinaryOperator.And:
              opStr = "&&";
              break;
            case BinaryOperator.Or:
              opStr = "||";
              break;
            case BinaryOperator.Plus:
              opStr = "+";
              break;
            case BinaryOperator.Minus:
              opStr = "-";
              break;
            case BinaryOperator.Divide:
              opStr = "/";
              break;
            case BinaryOperator.Multiply:
              opStr = "*";
              break;
            case BinaryOperator.Modulo:
              opStr = "%";
              break;
            case BinaryOperator.Lower:
              opStr = "<";
              break;
            case BinaryOperator.LowerEquals:
              opStr = "<=";
              break;
            case BinaryOperator.Bigger:
              opStr = ">";
              break;
            case BinaryOperator.BiggerEquals:
              opStr = ">=";
              break;
            default:
              throw new BaseException("Unknown operator " + ast.operator);
          }
          return ctx.print("("), ast.lhs.visitExpression(this, ctx), ctx.print(" " + opStr + " "), ast.rhs.visitExpression(this, ctx), ctx.print(")"), null;
        }, AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
          return ast.receiver.visitExpression(this, ctx), ctx.print("."), ctx.print(ast.name), null;
        }, AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
          return ast.receiver.visitExpression(this, ctx), ctx.print("["), ast.index.visitExpression(this, ctx), ctx.print("]"), null;
        }, AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          var useNewLine = ast.entries.length > 1;
          return ctx.print("[", useNewLine), ctx.incIndent(), this.visitAllExpressions(ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print("]", useNewLine), null;
        }, AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
          var _this = this,
              useNewLine = ast.entries.length > 1;
          return ctx.print("{", useNewLine), ctx.incIndent(), this.visitAllObjects(function(entry) {
            ctx.print(escapeSingleQuoteString(entry[0], _this._escapeDollarInStrings) + ": "), entry[1].visitExpression(_this, ctx);
          }, ast.entries, ctx, ",", useNewLine), ctx.decIndent(), ctx.print("}", useNewLine), null;
        }, AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
          var _this = this;
          void 0 === newLine && (newLine = !1), this.visitAllObjects(function(expr) {
            return expr.visitExpression(_this, ctx);
          }, expressions, ctx, separator, newLine);
        }, AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
          void 0 === newLine && (newLine = !1);
          for (var i = 0; i < expressions.length; i++)
            i > 0 && ctx.print(separator, newLine), handler(expressions[i]);
          newLine && ctx.println();
        }, AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
          var _this = this;
          statements.forEach(function(stmt) {
            return stmt.visitStatement(_this, ctx);
          });
        }, AbstractEmitterVisitor;
      }(),
      _debugModuleUrl = "asset://debug/lib",
      TypeScriptEmitter = function() {
        function TypeScriptEmitter(_importGenerator) {
          this._importGenerator = _importGenerator;
        }
        return TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
          var _this = this,
              converter = new _TsEmitterVisitor(moduleUrl),
              ctx = EmitterVisitorContext.createRoot(exportedVars);
          converter.visitAllStatements(stmts, ctx);
          var srcParts = [];
          return converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
            srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
          }), srcParts.push(ctx.toSource()), srcParts.join("\n");
        }, TypeScriptEmitter;
      }(),
      _TsEmitterVisitor = function(_super) {
        function _TsEmitterVisitor(_moduleUrl) {
          _super.call(this, !1), this._moduleUrl = _moduleUrl, this.importsWithPrefixes = new Map;
        }
        return __extends(_TsEmitterVisitor, _super), _TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
          void 0 === defaultType && (defaultType = "any"), isPresent(t) ? t.visitType(this, ctx) : ctx.print(defaultType);
        }, _TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
          return this._visitIdentifier(ast.value, ast.typeParams, ctx), null;
        }, _TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          return ctx.isExportedVar(stmt.name) && ctx.print("export "), stmt.hasModifier(StmtModifier.Final) ? ctx.print("const") : ctx.print("var"), ctx.print(" " + stmt.name + ":"), this.visitType(stmt.type, ctx), ctx.print(" = "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null;
        }, _TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
          return ctx.print("(<"), ast.type.visitType(this, ctx), ctx.print(">"), ast.value.visitExpression(this, ctx), ctx.print(")"), null;
        }, _TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var _this = this;
          return ctx.pushClass(stmt), ctx.isExportedVar(stmt.name) && ctx.print("export "), ctx.print("class " + stmt.name), isPresent(stmt.parent) && (ctx.print(" extends "), stmt.parent.visitExpression(this, ctx)), ctx.println(" {"), ctx.incIndent(), stmt.fields.forEach(function(field) {
            return _this._visitClassField(field, ctx);
          }), isPresent(stmt.constructorMethod) && this._visitClassConstructor(stmt, ctx), stmt.getters.forEach(function(getter) {
            return _this._visitClassGetter(getter, ctx);
          }), stmt.methods.forEach(function(method) {
            return _this._visitClassMethod(method, ctx);
          }), ctx.decIndent(), ctx.println("}"), ctx.popClass(), null;
        }, _TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
          field.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print(field.name), ctx.print(":"), this.visitType(field.type, ctx), ctx.println(";");
        }, _TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
          getter.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print("get " + getter.name + "()"), ctx.print(":"), this.visitType(getter.type, ctx), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(getter.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
          ctx.print("constructor("), this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(stmt.constructorMethod.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
          method.hasModifier(StmtModifier.Private) && ctx.print("private "), ctx.print(method.name + "("), this._visitParams(method.params, ctx), ctx.print("):"), this.visitType(method.type, ctx, "void"), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(method.body, ctx), ctx.decIndent(), ctx.println("}");
        }, _TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
          return ctx.print("("), this._visitParams(ast.params, ctx), ctx.print("):"), this.visitType(ast.type, ctx, "void"), ctx.println(" => {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print("}"), null;
        }, _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          return ctx.isExportedVar(stmt.name) && ctx.print("export "), ctx.print("function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.print("):"), this.visitType(stmt.type, ctx, "void"), ctx.println(" {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, _TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
          ctx.println("try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {"), ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop("stack")).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
          return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, _TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
          var typeStr;
          switch (type.name) {
            case BuiltinTypeName.Bool:
              typeStr = "boolean";
              break;
            case BuiltinTypeName.Dynamic:
              typeStr = "any";
              break;
            case BuiltinTypeName.Function:
              typeStr = "Function";
              break;
            case BuiltinTypeName.Number:
              typeStr = "number";
              break;
            case BuiltinTypeName.Int:
              typeStr = "number";
              break;
            case BuiltinTypeName.String:
              typeStr = "string";
              break;
            default:
              throw new BaseException("Unsupported builtin type " + type.name);
          }
          return ctx.print(typeStr), null;
        }, _TsEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
          return this._visitIdentifier(ast.value, ast.typeParams, ctx), null;
        }, _TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
          return this.visitType(type.of, ctx), ctx.print("[]"), null;
        }, _TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
          return ctx.print("{[key: string]:"), this.visitType(type.valueType, ctx), ctx.print("}"), null;
        }, _TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
          var name;
          switch (method) {
            case BuiltinMethod.ConcatArray:
              name = "concat";
              break;
            case BuiltinMethod.SubscribeObservable:
              name = "subscribe";
              break;
            case BuiltinMethod.bind:
              name = "bind";
              break;
            default:
              throw new BaseException("Unknown builtin method: " + method);
          }
          return name;
        }, _TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
          var _this = this;
          this.visitAllObjects(function(param) {
            ctx.print(param.name), ctx.print(":"), _this.visitType(param.type, ctx);
          }, params, ctx, ",");
        }, _TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
          var _this = this;
          if (isBlank(value.name))
            throw new BaseException("Internal error: unknown identifier " + value);
          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
            var prefix = this.importsWithPrefixes.get(value.moduleUrl);
            isBlank(prefix) && (prefix = "import" + this.importsWithPrefixes.size, this.importsWithPrefixes.set(value.moduleUrl, prefix)), ctx.print(prefix + ".");
          }
          ctx.print(value.name), isPresent(typeParams) && typeParams.length > 0 && (ctx.print("<"), this.visitAllObjects(function(type) {
            return type.visitType(_this, ctx);
          }, typeParams, ctx, ","), ctx.print(">"));
        }, _TsEmitterVisitor;
      }(AbstractEmitterVisitor),
      _ExecutionContext = function() {
        function _ExecutionContext(parent, instance, className, vars) {
          this.parent = parent, this.instance = instance, this.className = className, this.vars = vars;
        }
        return _ExecutionContext.prototype.createChildWihtLocalVars = function() {
          return new _ExecutionContext(this, this.instance, this.className, new Map);
        }, _ExecutionContext;
      }(),
      ReturnValue = function() {
        function ReturnValue(value) {
          this.value = value;
        }
        return ReturnValue;
      }(),
      StatementInterpreter = function() {
        function StatementInterpreter() {}
        return StatementInterpreter.prototype.debugAst = function(ast) {
          return debugOutputAstAsTypeScript(ast);
        }, StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          return ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx)), null;
        }, StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
          for (var value = expr.value.visitExpression(this, ctx),
              currCtx = ctx; null != currCtx; ) {
            if (currCtx.vars.has(expr.name))
              return currCtx.vars.set(expr.name, value), value;
            currCtx = currCtx.parent;
          }
          throw new BaseException("Not declared variable " + expr.name);
        }, StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
          var varName = ast.name;
          if (isPresent(ast.builtin))
            switch (ast.builtin) {
              case BuiltinVar.Super:
                return ctx.instance.__proto__;
              case BuiltinVar.This:
                return ctx.instance;
              case BuiltinVar.CatchError:
                varName = CATCH_ERROR_VAR$1;
                break;
              case BuiltinVar.CatchStack:
                varName = CATCH_STACK_VAR$1;
                break;
              default:
                throw new BaseException("Unknown builtin variable " + ast.builtin);
            }
          for (var currCtx = ctx; null != currCtx; ) {
            if (currCtx.vars.has(varName))
              return currCtx.vars.get(varName);
            currCtx = currCtx.parent;
          }
          throw new BaseException("Not declared variable " + varName);
        }, StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx),
              index = expr.index.visitExpression(this, ctx),
              value = expr.value.visitExpression(this, ctx);
          return receiver[index] = value, value;
        }, StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
          var receiver = expr.receiver.visitExpression(this, ctx),
              value = expr.value.visitExpression(this, ctx);
          return receiver[expr.name] = value, value;
        }, StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
          var result,
              receiver = expr.receiver.visitExpression(this, ctx),
              args = this.visitAllExpressions(expr.args, ctx);
          if (isPresent(expr.builtin))
            switch (expr.builtin) {
              case BuiltinMethod.ConcatArray:
                result = ListWrapper.concat(receiver, args[0]);
                break;
              case BuiltinMethod.SubscribeObservable:
                result = receiver.subscribe({next: args[0]});
                break;
              case BuiltinMethod.bind:
                result = receiver.bind(args[0]);
                break;
              default:
                throw new BaseException("Unknown builtin method " + expr.builtin);
            }
          else
            result = receiver[expr.name].apply(receiver, args);
          return result;
        }, StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
          var args = this.visitAllExpressions(stmt.args, ctx),
              fnExpr = stmt.fn;
          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super)
            return ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args), null;
          var fn = stmt.fn.visitExpression(this, ctx);
          return fn.apply(null, args);
        }, StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
          return new ReturnValue(stmt.value.visitExpression(this, ctx));
        }, StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var clazz = createDynamicClass(stmt, ctx, this);
          return ctx.vars.set(stmt.name, clazz), null;
        }, StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
          return stmt.expr.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
          var condition = stmt.condition.visitExpression(this, ctx);
          return condition ? this.visitAllStatements(stmt.trueCase, ctx) : isPresent(stmt.falseCase) ? this.visitAllStatements(stmt.falseCase, ctx) : null;
        }, StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
          try {
            return this.visitAllStatements(stmt.bodyStmts, ctx);
          } catch (e) {
            var childCtx = ctx.createChildWihtLocalVars();
            return childCtx.vars.set(CATCH_ERROR_VAR$1, e), childCtx.vars.set(CATCH_STACK_VAR$1, e.stack), this.visitAllStatements(stmt.catchStmts, childCtx);
          }
        }, StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
          throw stmt.error.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
          return null;
        }, StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
          var args = this.visitAllExpressions(ast.args, ctx),
              clazz = ast.classExpr.visitExpression(this, ctx);
          return new (clazz.bind.apply(clazz, [void 0].concat(args)));
        }, StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
          return ast.value;
        }, StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
          return ast.value.runtime;
        }, StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
          return ast.condition.visitExpression(this, ctx) ? ast.trueCase.visitExpression(this, ctx) : isPresent(ast.falseCase) ? ast.falseCase.visitExpression(this, ctx) : null;
        }, StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
          return !ast.condition.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
          return ast.value.visitExpression(this, ctx);
        }, StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
          var paramNames = ast.params.map(function(param) {
            return param.name;
          });
          return _declareFn(paramNames, ast.statements, ctx, this);
        }, StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          var paramNames = stmt.params.map(function(param) {
            return param.name;
          });
          return ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this)), null;
        }, StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
          var _this = this,
              lhs = function() {
                return ast.lhs.visitExpression(_this, ctx);
              },
              rhs = function() {
                return ast.rhs.visitExpression(_this, ctx);
              };
          switch (ast.operator) {
            case BinaryOperator.Equals:
              return lhs() == rhs();
            case BinaryOperator.Identical:
              return lhs() === rhs();
            case BinaryOperator.NotEquals:
              return lhs() != rhs();
            case BinaryOperator.NotIdentical:
              return lhs() !== rhs();
            case BinaryOperator.And:
              return lhs() && rhs();
            case BinaryOperator.Or:
              return lhs() || rhs();
            case BinaryOperator.Plus:
              return lhs() + rhs();
            case BinaryOperator.Minus:
              return lhs() - rhs();
            case BinaryOperator.Divide:
              return lhs() / rhs();
            case BinaryOperator.Multiply:
              return lhs() * rhs();
            case BinaryOperator.Modulo:
              return lhs() % rhs();
            case BinaryOperator.Lower:
              return lhs() < rhs();
            case BinaryOperator.LowerEquals:
              return lhs() <= rhs();
            case BinaryOperator.Bigger:
              return lhs() > rhs();
            case BinaryOperator.BiggerEquals:
              return lhs() >= rhs();
            default:
              throw new BaseException("Unknown operator " + ast.operator);
          }
        }, StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
          var result,
              receiver = ast.receiver.visitExpression(this, ctx);
          return result = receiver[ast.name];
        }, StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
          var receiver = ast.receiver.visitExpression(this, ctx),
              prop = ast.index.visitExpression(this, ctx);
          return receiver[prop];
        }, StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
          return this.visitAllExpressions(ast.entries, ctx);
        }, StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
          var _this = this,
              result = {};
          return ast.entries.forEach(function(entry) {
            return result[entry[0]] = entry[1].visitExpression(_this, ctx);
          }), result;
        }, StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
          var _this = this;
          return expressions.map(function(expr) {
            return expr.visitExpression(_this, ctx);
          });
        }, StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
          for (var i = 0; i < statements.length; i++) {
            var stmt = statements[i],
                val = stmt.visitStatement(this, ctx);
            if (val instanceof ReturnValue)
              return val;
          }
          return null;
        }, StatementInterpreter;
      }(),
      CATCH_ERROR_VAR$1 = "error",
      CATCH_STACK_VAR$1 = "stack",
      AbstractJsEmitterVisitor = function(_super) {
        function AbstractJsEmitterVisitor() {
          _super.call(this, !1);
        }
        return __extends(AbstractJsEmitterVisitor, _super), AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
          var _this = this;
          return ctx.pushClass(stmt), this._visitClassConstructor(stmt, ctx), isPresent(stmt.parent) && (ctx.print(stmt.name + ".prototype = Object.create("), stmt.parent.visitExpression(this, ctx), ctx.println(".prototype);")), stmt.getters.forEach(function(getter) {
            return _this._visitClassGetter(stmt, getter, ctx);
          }), stmt.methods.forEach(function(method) {
            return _this._visitClassMethod(stmt, method, ctx);
          }), ctx.popClass(), null;
        }, AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
          ctx.print("function " + stmt.name + "("), isPresent(stmt.constructorMethod) && this._visitParams(stmt.constructorMethod.params, ctx), ctx.println(") {"), ctx.incIndent(), isPresent(stmt.constructorMethod) && stmt.constructorMethod.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(stmt.constructorMethod.body, ctx)), ctx.decIndent(), ctx.println("}");
        }, AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
          ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {"), ctx.incIndent(), getter.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(getter.body, ctx)), ctx.decIndent(), ctx.println("}});");
        }, AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
          ctx.print(stmt.name + ".prototype." + method.name + " = function("), this._visitParams(method.params, ctx), ctx.println(") {"), ctx.incIndent(), method.body.length > 0 && (ctx.println("var self = this;"), this.visitAllStatements(method.body, ctx)), ctx.decIndent(), ctx.println("};");
        }, AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
          if (ast.builtin === BuiltinVar.This)
            ctx.print("self");
          else {
            if (ast.builtin === BuiltinVar.Super)
              throw new BaseException("'super' needs to be handled at a parent ast node, not at the variable level!");
            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
          }
          return null;
        }, AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
          return ctx.print("var " + stmt.name + " = "), stmt.value.visitExpression(this, ctx), ctx.println(";"), null;
        }, AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
          return ast.value.visitExpression(this, ctx), null;
        }, AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
          var fnExpr = expr.fn;
          return fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super ? (ctx.currentClass.parent.visitExpression(this, ctx), ctx.print(".call(this"), expr.args.length > 0 && (ctx.print(", "), this.visitAllExpressions(expr.args, ctx, ",")), ctx.print(")")) : _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx), null;
        }, AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
          return ctx.print("function("), this._visitParams(ast.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(ast.statements, ctx), ctx.decIndent(), ctx.print("}"), null;
        }, AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
          return ctx.print("function " + stmt.name + "("), this._visitParams(stmt.params, ctx), ctx.println(") {"), ctx.incIndent(), this.visitAllStatements(stmt.statements, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
          ctx.println("try {"), ctx.incIndent(), this.visitAllStatements(stmt.bodyStmts, ctx), ctx.decIndent(), ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {"), ctx.incIndent();
          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop("stack")).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
          return this.visitAllStatements(catchStmts, ctx), ctx.decIndent(), ctx.println("}"), null;
        }, AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
          this.visitAllObjects(function(param) {
            return ctx.print(param.name);
          }, params, ctx, ",");
        }, AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
          var name;
          switch (method) {
            case BuiltinMethod.ConcatArray:
              name = "concat";
              break;
            case BuiltinMethod.SubscribeObservable:
              name = "subscribe";
              break;
            case BuiltinMethod.bind:
              name = "bind";
              break;
            default:
              throw new BaseException("Unknown builtin method: " + method);
          }
          return name;
        }, AbstractJsEmitterVisitor;
      }(AbstractEmitterVisitor),
      JitEmitterVisitor = function(_super) {
        function JitEmitterVisitor() {
          for (var args = [],
              _i = 0; _i < arguments.length; _i++)
            args[_i - 0] = arguments[_i];
          _super.apply(this, args), this._evalArgNames = [], this._evalArgValues = [];
        }
        return __extends(JitEmitterVisitor, _super), JitEmitterVisitor.prototype.getArgs = function() {
          for (var result = {},
              i = 0; i < this._evalArgNames.length; i++)
            result[this._evalArgNames[i]] = this._evalArgValues[i];
          return result;
        }, JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
          var value = ast.value.runtime,
              id = this._evalArgValues.indexOf(value);
          if (id === -1) {
            id = this._evalArgValues.length, this._evalArgValues.push(value);
            var name = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : "val";
            this._evalArgNames.push(sanitizeIdentifier("jit_" + name + id));
          }
          return ctx.print(this._evalArgNames[id]), null;
        }, JitEmitterVisitor;
      }(AbstractJsEmitterVisitor),
      ShadowCss = function() {
        function ShadowCss() {
          this.strictStyling = !0;
        }
        return ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
          return void 0 === hostSelector && (hostSelector = ""), cssText = stripComments(cssText), cssText = this._insertDirectives(cssText), this._scopeCssText(cssText, selector, hostSelector);
        }, ShadowCss.prototype._insertDirectives = function(cssText) {
          return cssText = this._insertPolyfillDirectivesInCssText(cssText), this._insertPolyfillRulesInCssText(cssText);
        }, ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
          return StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function(m) {
            return m[1] + "{";
          });
        }, ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
          return StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function(m) {
            var rule = m[0];
            return rule = StringWrapper.replace(rule, m[1], ""), rule = StringWrapper.replace(rule, m[2], ""), m[3] + rule;
          });
        }, ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
          var unscoped = this._extractUnscopedRulesFromCssText(cssText);
          return cssText = this._insertPolyfillHostInCssText(cssText), cssText = this._convertColonHost(cssText), cssText = this._convertColonHostContext(cssText), cssText = this._convertShadowDOMSelectors(cssText), isPresent(scopeSelector) && (cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector)), cssText = cssText + "\n" + unscoped, cssText.trim();
        }, ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
          var m,
              r = "";
          for (_cssContentUnscopedRuleRe.lastIndex = 0; null !== (m = _cssContentUnscopedRuleRe.exec(cssText)); ) {
            var rule = m[0];
            rule = StringWrapper.replace(rule, m[2], ""), rule = StringWrapper.replace(rule, m[1], m[3]), r += rule + "\n\n";
          }
          return r;
        }, ShadowCss.prototype._convertColonHost = function(cssText) {
          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
        }, ShadowCss.prototype._convertColonHostContext = function(cssText) {
          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
        }, ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
          return StringWrapper.replaceAllMapped(cssText, regExp, function(m) {
            if (isPresent(m[2])) {
              for (var parts = m[2].split(","),
                  r = [],
                  i = 0; i < parts.length; i++) {
                var p = parts[i];
                if (isBlank(p))
                  break;
                p = p.trim(), r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
              }
              return r.join(",");
            }
            return _polyfillHostNoCombinator + m[3];
          });
        }, ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
          return StringWrapper.contains(part, _polyfillHost) ? this._colonHostPartReplacer(host, part, suffix) : host + part + suffix + ", " + part + " " + host + suffix;
        }, ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
          return host + StringWrapper.replace(part, _polyfillHost, "") + suffix;
        }, ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
          for (var i = 0; i < _shadowDOMSelectorsRe.length; i++)
            cssText = StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], " ");
          return cssText;
        }, ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
          var _this = this;
          return processRules(cssText, function(rule) {
            var selector = rule.selector,
                content = rule.content;
            return "@" != rule.selector[0] || rule.selector.startsWith("@page") ? selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling) : (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports")) && (content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector)), new CssRule(selector, content);
          });
        }, ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
          for (var r = [],
              parts = selector.split(","),
              i = 0; i < parts.length; i++) {
            var p = parts[i].trim(),
                deepParts = StringWrapper.split(p, _shadowDeepSelectors),
                shallowPart = deepParts[0];
            this._selectorNeedsScoping(shallowPart, scopeSelector) && (deepParts[0] = strict && !StringWrapper.contains(shallowPart, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(shallowPart, scopeSelector) : this._applySelectorScope(shallowPart, scopeSelector, hostSelector)), r.push(deepParts.join(" "));
          }
          return r.join(", ");
        }, ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
          var re = this._makeScopeMatcher(scopeSelector);
          return !re.test(selector);
        }, ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
          var lre = /\[/g,
              rre = /\]/g;
          return scopeSelector = StringWrapper.replaceAll(scopeSelector, lre, "\\["), scopeSelector = StringWrapper.replaceAll(scopeSelector, rre, "\\]"), new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
        }, ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
        }, ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
          if (_polyfillHostRe.test(selector)) {
            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
            return selector = StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy), StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + " ");
          }
          return scopeSelector + " " + selector;
        }, ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector) {
          var isRe = /\[is=([^\]]*)\]/g;
          scopeSelector = StringWrapper.replaceAllMapped(scopeSelector, isRe, function(m) {
            return m[1];
          });
          for (var splits = [" ", ">", "+", "~"],
              scoped = selector,
              attrName = "[" + scopeSelector + "]",
              i = 0; i < splits.length; i++) {
            var sep = splits[i],
                parts = scoped.split(sep);
            scoped = parts.map(function(p) {
              var t = StringWrapper.replaceAll(p.trim(), _polyfillHostRe, "");
              if (t.length > 0 && !ListWrapper.contains(splits, t) && !StringWrapper.contains(t, attrName)) {
                var m = t.match(/([^:]*)(:*)(.*)/);
                null !== m && (p = m[1] + attrName + m[2] + m[3]);
              }
              return p;
            }).join(sep);
          }
          return scoped;
        }, ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
          return selector = StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext), selector = StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
        }, ShadowCss;
      }(),
      _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim,
      _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,
      _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim,
      _polyfillHost = "-shadowcsshost",
      _polyfillHostContext = "-shadowcsscontext",
      _parenSuffix = ")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",
      _cssColonHostRe = new RegExp("(" + _polyfillHost + _parenSuffix, "gim"),
      _cssColonHostContextRe = new RegExp("(" + _polyfillHostContext + _parenSuffix, "gim"),
      _polyfillHostNoCombinator = _polyfillHost + "-no-combinator",
      _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g],
      _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g,
      _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$",
      _polyfillHostRe = new RegExp(_polyfillHost, "im"),
      _colonHostRe = /:host/gim,
      _colonHostContextRe = /:host-context/gim,
      _commentRe = /\/\*[\s\S]*?\*\//g,
      _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g,
      _curlyRe = /([{}])/g,
      OPEN_CURLY = "{",
      CLOSE_CURLY = "}",
      BLOCK_PLACEHOLDER = "%BLOCK%",
      CssRule = function() {
        function CssRule(selector, content) {
          this.selector = selector, this.content = content;
        }
        return CssRule;
      }(),
      StringWithEscapedBlocks = function() {
        function StringWithEscapedBlocks(escapedString, blocks) {
          this.escapedString = escapedString, this.blocks = blocks;
        }
        return StringWithEscapedBlocks;
      }(),
      COMPONENT_VARIABLE = "%COMP%",
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE,
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE,
      StylesCompileDependency = function() {
        function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
          this.moduleUrl = moduleUrl, this.isShimmed = isShimmed, this.valuePlaceholder = valuePlaceholder;
        }
        return StylesCompileDependency;
      }(),
      StylesCompileResult = function() {
        function StylesCompileResult(componentStylesheet, externalStylesheets) {
          this.componentStylesheet = componentStylesheet, this.externalStylesheets = externalStylesheets;
        }
        return StylesCompileResult;
      }(),
      CompiledStylesheet = function() {
        function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
          this.statements = statements, this.stylesVar = stylesVar, this.dependencies = dependencies, this.isShimmed = isShimmed, this.meta = meta;
        }
        return CompiledStylesheet;
      }(),
      StyleCompiler = function() {
        function StyleCompiler(_urlResolver) {
          this._urlResolver = _urlResolver, this._shadowCss = new ShadowCss;
        }
        return StyleCompiler.prototype.compileComponent = function(comp) {
          var _this = this,
              externalStylesheets = [],
              componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
                styles: comp.template.styles,
                styleUrls: comp.template.styleUrls,
                moduleUrl: comp.type.moduleUrl
              }), !0);
          return comp.template.externalStylesheets.forEach(function(stylesheetMeta) {
            var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, !1);
            externalStylesheets.push(compiledStylesheet);
          }), new StylesCompileResult(componentStylesheet, externalStylesheets);
        }, StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
          for (var _this = this,
              shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated,
              styleExpressions = stylesheet.styles.map(function(plainStyle) {
                return literal(_this._shimIfNeeded(plainStyle, shim));
              }),
              dependencies = [],
              i = 0; i < stylesheet.styleUrls.length; i++) {
            var identifier = new CompileIdentifierMetadata({name: getStylesVarName(null)});
            dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier)), styleExpressions.push(new ExternalExpr(identifier));
          }
          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null),
              stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
        }, StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
        }, StyleCompiler;
      }();
  StyleCompiler.decorators = [{type: _angular_core.Injectable}], StyleCompiler.ctorParameters = [{type: UrlResolver}];
  var RuntimeCompiler = function() {
    function RuntimeCompiler(_injector, _metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig, _console) {
      this._injector = _injector, this._metadataResolver = _metadataResolver, this._templateNormalizer = _templateNormalizer, this._templateParser = _templateParser, this._styleCompiler = _styleCompiler, this._viewCompiler = _viewCompiler, this._ngModuleCompiler = _ngModuleCompiler, this._compilerConfig = _compilerConfig, this._console = _console, this._compiledTemplateCache = new Map, this._compiledHostTemplateCache = new Map, this._compiledNgModuleCache = new Map;
    }
    return Object.defineProperty(RuntimeCompiler.prototype, "injector", {
      get: function() {
        return this._injector;
      },
      enumerable: !0,
      configurable: !0
    }), RuntimeCompiler.prototype.compileModuleSync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, !0).syncResult;
    }, RuntimeCompiler.prototype.compileModuleAsync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, !1).asyncResult;
    }, RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, !0).syncResult;
    }, RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, !1).asyncResult;
    }, RuntimeCompiler.prototype.compileComponentAsync = function(compType, ngModule) {
      if (void 0 === ngModule && (ngModule = null), !ngModule)
        throw new BaseException("Calling compileComponentAsync on the root compiler without a module is not allowed! (Compiling component " + stringify(compType) + ")");
      return this._compileComponentInModule(compType, !1, ngModule).asyncResult;
    }, RuntimeCompiler.prototype.compileComponentSync = function(compType, ngModule) {
      if (void 0 === ngModule && (ngModule = null), !ngModule)
        throw new BaseException("Calling compileComponentSync on the root compiler without a module is not allowed! (Compiling component " + stringify(compType) + ")");
      return this._compileComponentInModule(compType, !0, ngModule).syncResult;
    }, RuntimeCompiler.prototype._compileModuleAndComponents = function(moduleType, isSync) {
      var componentPromise = this._compileComponents(moduleType, isSync),
          ngModuleFactory = this._compileModule(moduleType);
      return new SyncAsyncResult(ngModuleFactory, componentPromise.then(function() {
        return ngModuleFactory;
      }));
    }, RuntimeCompiler.prototype._compileModuleAndAllComponents = function(moduleType, isSync) {
      var _this = this,
          componentPromise = this._compileComponents(moduleType, isSync),
          ngModuleFactory = this._compileModule(moduleType),
          moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType),
          componentFactories = [],
          templates = new Set;
      moduleMeta.transitiveModule.modules.forEach(function(moduleMeta) {
        moduleMeta.declaredDirectives.forEach(function(dirMeta) {
          if (dirMeta.isComponent) {
            var template = _this._createCompiledHostTemplate(dirMeta.type.runtime);
            templates.add(template), componentFactories.push(template.proxyComponentFactory);
          }
        });
      });
      var syncResult = new _angular_core.ModuleWithComponentFactories(ngModuleFactory, componentFactories),
          compile = function() {
            return templates.forEach(function(template) {
              _this._compileTemplate(template);
            }), syncResult;
          },
          asyncResult = isSync ? Promise.resolve(compile()) : componentPromise.then(compile);
      return new SyncAsyncResult(syncResult, asyncResult);
    }, RuntimeCompiler.prototype._compileModule = function(moduleType) {
      var _this = this,
          ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
      if (!ngModuleFactory) {
        var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType),
            boundCompilerFactory = (moduleMeta_1.transitiveModule, function(parentResolver) {
              return new ModuleBoundCompiler(_this, moduleMeta_1.type.runtime, parentResolver, _this._console);
            }),
            extraProviders = [this._metadataResolver.getProviderMetadata(new _angular_core.Provider(_angular_core.Compiler, {
              useFactory: boundCompilerFactory,
              deps: [[new _angular_core.OptionalMetadata, new _angular_core.SkipSelfMetadata, _angular_core.ComponentResolver]]
            })), this._metadataResolver.getProviderMetadata(new _angular_core.Provider(_angular_core.ComponentResolver, {useExisting: _angular_core.Compiler}))],
            compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
        compileResult.dependencies.forEach(function(dep) {
          dep.placeholder.runtime = _this._assertComponentKnown(dep.comp.runtime, !0).proxyComponentFactory, dep.placeholder.name = "compFactory_" + dep.comp.name;
        }), ngModuleFactory = this._compilerConfig.useJit ? jitStatements(moduleMeta_1.type.name + ".ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar) : interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar), this._compiledNgModuleCache.set(moduleMeta_1.type.runtime, ngModuleFactory);
      }
      return ngModuleFactory;
    }, RuntimeCompiler.prototype._compileComponentInModule = function(compType, isSync, moduleType) {
      this._metadataResolver.addComponentToModule(moduleType, compType);
      var componentPromise = this._compileComponents(moduleType, isSync),
          componentFactory = this._assertComponentKnown(compType, !0).proxyComponentFactory;
      return new SyncAsyncResult(componentFactory, componentPromise.then(function() {
        return componentFactory;
      }));
    }, RuntimeCompiler.prototype._compileComponents = function(mainModule, isSync) {
      var _this = this,
          templates = new Set,
          loadingPromises = [],
          ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
      ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
        localModuleMeta.declaredDirectives.forEach(function(dirMeta) {
          dirMeta.isComponent && (templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta)), dirMeta.entryComponents.forEach(function(entryComponentType) {
            templates.add(_this._createCompiledHostTemplate(entryComponentType.runtime));
          }));
        }), localModuleMeta.entryComponents.forEach(function(entryComponentType) {
          templates.add(_this._createCompiledHostTemplate(entryComponentType.runtime));
        });
      }), templates.forEach(function(template) {
        if (template.loading) {
          if (isSync)
            throw new _angular_core.ComponentStillLoadingError(template.compType.runtime);
          loadingPromises.push(template.loading);
        }
      });
      var compile = function() {
        templates.forEach(function(template) {
          _this._compileTemplate(template);
        });
      };
      return isSync ? (compile(), Promise.resolve(null)) : Promise.all(loadingPromises).then(compile);
    }, RuntimeCompiler.prototype.clearCacheFor = function(type) {
      this._compiledNgModuleCache.delete(type), this._metadataResolver.clearCacheFor(type), this._compiledHostTemplateCache.delete(type);
      var compiledTemplate = this._compiledTemplateCache.get(type);
      compiledTemplate && (this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta), this._compiledTemplateCache.delete(type));
    }, RuntimeCompiler.prototype.clearCache = function() {
      this._metadataResolver.clearCache(), this._compiledTemplateCache.clear(), this._compiledHostTemplateCache.clear(), this._templateNormalizer.clearCache(), this._compiledNgModuleCache.clear();
    }, RuntimeCompiler.prototype._createCompiledHostTemplate = function(compType) {
      var compiledTemplate = this._compiledHostTemplateCache.get(compType);
      if (isBlank(compiledTemplate)) {
        var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
        assertComponent(compMeta);
        var hostMeta = createHostComponentMeta(compMeta);
        compiledTemplate = new CompiledTemplate((!0), compMeta.selector, compMeta.type, [compMeta], [], [], this._templateNormalizer.normalizeDirective(hostMeta)), this._compiledHostTemplateCache.set(compType, compiledTemplate);
      }
      return compiledTemplate;
    }, RuntimeCompiler.prototype._createCompiledTemplate = function(compMeta, ngModule) {
      var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.runtime);
      return isBlank(compiledTemplate) && (assertComponent(compMeta), compiledTemplate = new CompiledTemplate((!1), compMeta.selector, compMeta.type, ngModule.transitiveModule.directives, ngModule.transitiveModule.pipes, ngModule.schemas, this._templateNormalizer.normalizeDirective(compMeta)), this._compiledTemplateCache.set(compMeta.type.runtime, compiledTemplate)), compiledTemplate;
    }, RuntimeCompiler.prototype._assertComponentKnown = function(compType, isHost) {
      var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
      if (!compiledTemplate)
        throw new BaseException("Illegal state: CompiledTemplate for " + stringify(compType) + " (isHost: " + isHost + ") does not exist!");
      return compiledTemplate;
    }, RuntimeCompiler.prototype._assertComponentLoaded = function(compType, isHost) {
      var compiledTemplate = this._assertComponentKnown(compType, isHost);
      if (compiledTemplate.loading)
        throw new BaseException("Illegal state: CompiledTemplate for " + stringify(compType) + " (isHost: " + isHost + ") is still loading!");
      return compiledTemplate;
    }, RuntimeCompiler.prototype._compileTemplate = function(template) {
      var _this = this;
      if (!template.isCompiled) {
        var compMeta = template.normalizedCompMeta,
            externalStylesheetsByModuleUrl = new Map,
            stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
        stylesCompileResult.externalStylesheets.forEach(function(r) {
          externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
        }), this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
        var viewCompMetas = template.viewComponentTypes.map(function(compType) {
          return _this._assertComponentLoaded(compType, !1).normalizedCompMeta;
        }),
            parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas), template.viewPipes, template.schemas, compMeta.type.name),
            compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), template.viewPipes);
        compileResult.dependencies.forEach(function(dep) {
          var depTemplate;
          if (dep instanceof ViewFactoryDependency) {
            var vfd = dep;
            depTemplate = _this._assertComponentLoaded(vfd.comp.runtime, !1), vfd.placeholder.runtime = depTemplate.proxyViewFactory, vfd.placeholder.name = "viewFactory_" + vfd.comp.name;
          } else if (dep instanceof ComponentFactoryDependency) {
            var cfd = dep;
            depTemplate = _this._assertComponentLoaded(cfd.comp.runtime, !0), cfd.placeholder.runtime = depTemplate.proxyComponentFactory, cfd.placeholder.name = "compFactory_" + cfd.comp.name;
          }
        });
        var factory,
            statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
        factory = this._compilerConfig.useJit ? jitStatements(template.compType.name + ".ngfactory.js", statements, compileResult.viewFactoryVar) : interpretStatements(statements, compileResult.viewFactoryVar), template.compiled(factory);
      }
    }, RuntimeCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      var _this = this;
      result.dependencies.forEach(function(dep, i) {
        var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl),
            nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
        dep.valuePlaceholder.runtime = nestedStylesArr, dep.valuePlaceholder.name = "importedStyles" + i;
      });
    }, RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      return this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl), this._compilerConfig.useJit ? jitStatements(result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar) : interpretStatements(result.statements, result.stylesVar);
    }, RuntimeCompiler;
  }();
  RuntimeCompiler.decorators = [{type: _angular_core.Injectable}], RuntimeCompiler.ctorParameters = [{type: _angular_core.Injector}, {type: CompileMetadataResolver}, {type: DirectiveNormalizer}, {type: TemplateParser}, {type: StyleCompiler}, {type: ViewCompiler}, {type: NgModuleCompiler}, {type: CompilerConfig}, {type: Console}];
  var CompiledTemplate = function() {
    function CompiledTemplate(isHost, selector, compType, viewDirectivesAndComponents, viewPipes, schemas, _normalizeResult) {
      var _this = this;
      this.isHost = isHost, this.compType = compType, this.viewPipes = viewPipes, this.schemas = schemas, this._viewFactory = null, this.loading = null, this._normalizedCompMeta = null, this.isCompiled = !1, this.isCompiledWithDeps = !1, this.viewComponentTypes = [], this.viewDirectives = [], viewDirectivesAndComponents.forEach(function(dirMeta) {
        dirMeta.isComponent ? _this.viewComponentTypes.push(dirMeta.type.runtime) : _this.viewDirectives.push(dirMeta);
      }), this.proxyViewFactory = function() {
        for (var args = [],
            _i = 0; _i < arguments.length; _i++)
          args[_i - 0] = arguments[_i];
        if (!_this._viewFactory)
          throw new BaseException("Illegal state: CompiledTemplate for " + stringify(_this.compType) + " is not compiled yet!");
        return _this._viewFactory.apply(null, args);
      }, this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewFactory, compType.runtime) : null, _normalizeResult.syncResult ? this._normalizedCompMeta = _normalizeResult.syncResult : this.loading = _normalizeResult.asyncResult.then(function(normalizedCompMeta) {
        _this._normalizedCompMeta = normalizedCompMeta, _this.loading = null;
      });
    }
    return Object.defineProperty(CompiledTemplate.prototype, "normalizedCompMeta", {
      get: function() {
        if (this.loading)
          throw new BaseException("Template is still loading for " + this.compType.name + "!");
        return this._normalizedCompMeta;
      },
      enumerable: !0,
      configurable: !0
    }), CompiledTemplate.prototype.compiled = function(viewFactory) {
      this._viewFactory = viewFactory, this.isCompiled = !0;
    }, CompiledTemplate.prototype.depsCompiled = function() {
      this.isCompiledWithDeps = !0;
    }, CompiledTemplate;
  }(),
      ModuleBoundCompiler = function() {
        function ModuleBoundCompiler(_delegate, _ngModule, _parentComponentResolver, _console) {
          this._delegate = _delegate, this._ngModule = _ngModule, this._parentComponentResolver = _parentComponentResolver, this._console = _console, this._warnOnComponentResolver = !0;
        }
        return Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
          get: function() {
            return this._delegate.injector;
          },
          enumerable: !0,
          configurable: !0
        }), ModuleBoundCompiler.prototype.resolveComponent = function(component) {
          return isString(component) ? this._parentComponentResolver ? this._parentComponentResolver.resolveComponent(component) : Promise.reject(new BaseException("Cannot resolve component using '" + component + "'.")) : (this._warnOnComponentResolver && (this._console.warn(_angular_core.ComponentResolver.DynamicCompilationDeprecationMsg), this._warnOnComponentResolver = !1), this.compileComponentAsync(component));
        }, ModuleBoundCompiler.prototype.compileComponentAsync = function(compType, ngModule) {
          return void 0 === ngModule && (ngModule = null), this._delegate.compileComponentAsync(compType, ngModule ? ngModule : this._ngModule);
        }, ModuleBoundCompiler.prototype.compileComponentSync = function(compType, ngModule) {
          return void 0 === ngModule && (ngModule = null), this._delegate.compileComponentSync(compType, ngModule ? ngModule : this._ngModule);
        }, ModuleBoundCompiler.prototype.compileModuleSync = function(moduleType) {
          return this._delegate.compileModuleSync(moduleType);
        }, ModuleBoundCompiler.prototype.compileModuleAsync = function(moduleType) {
          return this._delegate.compileModuleAsync(moduleType);
        }, ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
          return this._delegate.compileModuleAndAllComponentsSync(moduleType);
        }, ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
        }, ModuleBoundCompiler.prototype.clearCache = function() {
          this._delegate.clearCache(), this._parentComponentResolver && this._parentComponentResolver.clearCache();
        }, ModuleBoundCompiler.prototype.clearCacheFor = function(type) {
          this._delegate.clearCacheFor(type);
        }, ModuleBoundCompiler;
      }(),
      SECURITY_SCHEMA = {};
  registerContext(_angular_core.SecurityContext.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]), registerContext(_angular_core.SecurityContext.STYLE, ["*|style"]), registerContext(_angular_core.SecurityContext.URL, ["*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "img|srcset", "input|src", "ins|cite", "q|cite", "source|src", "source|srcset", "track|src", "video|poster", "video|src"]), registerContext(_angular_core.SecurityContext.RESOURCE_URL, ["applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src"]);
  var BOOLEAN = "boolean",
      NUMBER = "number",
      STRING = "string",
      OBJECT = "object",
      SCHEMA = ["*|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop", "^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*autocomplete,*autocompleteerror,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "media|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,#volume", ":svg:^*|*abort,*autocomplete,*autocompleteerror,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerpolicy,rel,rev,search,shape,target,text,type,username", "area|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerpolicy,search,shape,target,username", "audio^media|", "br|clear", "base|href,target", "body|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas|#height,#width", "content|select", "dl|!compact", "datalist|", "details|!open", "dialog|!open,returnValue", "dir|!compact", "div|align", "embed|align,height,name,src,type,width", "fieldset|!disabled,name", "font|color,face,size", "form|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr|align,color,!noShade,size,width", "head|", "h1,h2,h3,h4,h5,h6|align", "html|version", "iframe|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerpolicy,%sandbox,scrolling,src,srcdoc,width", "img|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerpolicy,sizes,src,srcset,useMap,#vspace,#width", "input|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "keygen|!autofocus,challenge,!disabled,keytype,name", "li|type,#value", "label|htmlFor", "legend|align", "link|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type", "map|name", "marquee|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu|!compact", "meta|content,httpEquiv,name,scheme", "meter|#high,#low,#max,#min,#optimum,#value", "ins,del|cite,dateTime", "ol|!compact,!reversed,#start,type", "object|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup|!disabled,label", "option|!defaultSelected,!disabled,label,!selected,text,value", "output|defaultValue,%htmlFor,name,value", "p|align", "param|name,type,value,valueType", "picture|", "pre|#width", "progress|#max,#value", "q,blockquote,cite|", "script|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type", "select|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "shadow|", "source|media,sizes,src,srcset,type", "span|", "style|!disabled,media,type", "caption|align", "th,td|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup|align,ch,chOff,#span,vAlign,width", "table|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody|align,ch,chOff,vAlign", "template|", "textarea|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "title|text", "track|!default,kind,label,src,srclang", "ul|!compact,type", "unknown|", "video^media|#height,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:cursor^:svg:|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan"],
      attrToPropMap = {
        class: "className",
        formaction: "formAction",
        innerHtml: "innerHTML",
        readonly: "readOnly",
        tabindex: "tabIndex"
      },
      DomElementSchemaRegistry = function(_super) {
        function DomElementSchemaRegistry() {
          var _this = this;
          _super.call(this), this.schema = {}, SCHEMA.forEach(function(encodedType) {
            var parts = encodedType.split("|"),
                properties = parts[1].split(","),
                typeParts = (parts[0] + "^").split("^"),
                typeName = typeParts[0],
                type = {};
            typeName.split(",").forEach(function(tag) {
              return _this.schema[tag] = type;
            });
            var superType = _this.schema[typeParts[1]];
            isPresent(superType) && StringMapWrapper.forEach(superType, function(v, k) {
              return type[k] = v;
            }), properties.forEach(function(property) {
              "" == property || property.startsWith("*") || (property.startsWith("!") ? type[property.substring(1)] = BOOLEAN : property.startsWith("#") ? type[property.substring(1)] = NUMBER : property.startsWith("%") ? type[property.substring(1)] = OBJECT : type[property] = STRING);
            });
          });
        }
        return __extends(DomElementSchemaRegistry, _super), DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {
          if (tagName.indexOf("-") !== -1) {
            if ("ng-container" === tagName || "ng-content" === tagName)
              return !1;
            if (schemaMetas.some(function(schema) {
              return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
            }))
              return !0;
          }
          var elementProperties = this.schema[tagName.toLowerCase()];
          return isPresent(elementProperties) || (elementProperties = this.schema.unknown), isPresent(elementProperties[propName]);
        }, DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName) {
          tagName = tagName.toLowerCase(), propName = propName.toLowerCase();
          var ctx = SECURITY_SCHEMA[tagName + "|" + propName];
          return void 0 !== ctx ? ctx : (ctx = SECURITY_SCHEMA["*|" + propName], void 0 !== ctx ? ctx : _angular_core.SecurityContext.NONE);
        }, DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
          var mappedPropName = StringMapWrapper.get(attrToPropMap, propName);
          return isPresent(mappedPropName) ? mappedPropName : propName;
        }, DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
          return "ng-component";
        }, DomElementSchemaRegistry;
      }(ElementSchemaRegistry);
  DomElementSchemaRegistry.decorators = [{type: _angular_core.Injectable}], DomElementSchemaRegistry.ctorParameters = [];
  var _NO_XHR = {get: function(url) {
      throw new Error("No XHR implementation has been provided. Can't read the url \"" + url + '"');
    }},
      COMPILER_PROVIDERS = [{
        provide: Reflector,
        useValue: reflector
      }, {
        provide: ReflectorReader,
        useExisting: Reflector
      }, {
        provide: XHR,
        useValue: _NO_XHR
      }, Console, Lexer, Parser, HtmlParser, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, {
        provide: CompilerConfig,
        useValue: new CompilerConfig
      }, RuntimeCompiler, {
        provide: _angular_core.Compiler,
        useExisting: RuntimeCompiler
      }, DomElementSchemaRegistry, {
        provide: ElementSchemaRegistry,
        useExisting: DomElementSchemaRegistry
      }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver],
      RuntimeCompilerFactory = function() {
        function RuntimeCompilerFactory(defaultOptions) {
          this._defaultOptions = [{
            useDebug: _angular_core.isDevMode(),
            useJit: !0,
            defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
          }].concat(defaultOptions);
        }
        return RuntimeCompilerFactory.prototype.createCompiler = function(options) {
          void 0 === options && (options = []);
          var mergedOptions = _mergeOptions(this._defaultOptions.concat(options)),
              injector = _angular_core.ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, {
                provide: CompilerConfig,
                useFactory: function() {
                  return new CompilerConfig({
                    genDebugInfo: mergedOptions.useDebug,
                    useJit: mergedOptions.useJit,
                    defaultEncapsulation: mergedOptions.defaultEncapsulation,
                    logBindingUpdate: mergedOptions.useDebug
                  });
                },
                deps: []
              }, mergedOptions.providers]);
          return injector.get(_angular_core.Compiler);
        }, RuntimeCompilerFactory;
      }();
  RuntimeCompilerFactory.decorators = [{type: _angular_core.Injectable}], RuntimeCompilerFactory.ctorParameters = [{
    type: Array,
    decorators: [{
      type: _angular_core.Inject,
      args: [_angular_core.COMPILER_OPTIONS]
    }]
  }];
  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, "coreDynamic", [{
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {},
    multi: !0
  }, {
    provide: _angular_core.CompilerFactory,
    useClass: RuntimeCompilerFactory
  }, {
    provide: _angular_core.PLATFORM_INITIALIZER,
    useValue: _initReflector,
    multi: !0
  }]),
      _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/,
      ImportGenerator = function() {
        function ImportGenerator() {}
        return ImportGenerator.parseAssetUrl = function(url) {
          return AssetUrl.parse(url);
        }, ImportGenerator;
      }(),
      AssetUrl = function() {
        function AssetUrl(packageName, firstLevelDir, modulePath) {
          this.packageName = packageName, this.firstLevelDir = firstLevelDir, this.modulePath = modulePath;
        }
        return AssetUrl.parse = function(url, allowNonMatching) {
          void 0 === allowNonMatching && (allowNonMatching = !0);
          var match = url.match(_ASSET_URL_RE);
          if (null !== match)
            return new AssetUrl(match[1], match[2], match[3]);
          if (allowNonMatching)
            return null;
          throw new BaseException("Url " + url + " is not a valid asset: url");
        }, AssetUrl;
      }();
  exports.__compiler_private__, function(__compiler_private__) {
    __compiler_private__.SelectorMatcher = SelectorMatcher, __compiler_private__.CssSelector = CssSelector, __compiler_private__.AssetUrl = AssetUrl, __compiler_private__.ImportGenerator = ImportGenerator, __compiler_private__.CompileMetadataResolver = CompileMetadataResolver, __compiler_private__.HtmlParser = HtmlParser, __compiler_private__.InterpolationConfig = InterpolationConfig, __compiler_private__.DirectiveNormalizer = DirectiveNormalizer, __compiler_private__.Lexer = Lexer, __compiler_private__.Parser = Parser, __compiler_private__.ParseLocation = ParseLocation, __compiler_private__.ParseError = ParseError, __compiler_private__.ParseErrorLevel = ParseErrorLevel, __compiler_private__.ParseSourceFile = ParseSourceFile, __compiler_private__.ParseSourceSpan = ParseSourceSpan, __compiler_private__.TemplateParser = TemplateParser, __compiler_private__.DomElementSchemaRegistry = DomElementSchemaRegistry, __compiler_private__.StyleCompiler = StyleCompiler, __compiler_private__.ViewCompiler = ViewCompiler, __compiler_private__.NgModuleCompiler = NgModuleCompiler, __compiler_private__.TypeScriptEmitter = TypeScriptEmitter;
  }(exports.__compiler_private__ || (exports.__compiler_private__ = {})), exports.i18n = i18n, exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS, exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata, exports.CompileDirectiveMetadata = CompileDirectiveMetadata, exports.CompileFactoryMetadata = CompileFactoryMetadata, exports.CompileIdentifierMetadata = CompileIdentifierMetadata, exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier, exports.CompilePipeMetadata = CompilePipeMetadata, exports.CompileProviderMetadata = CompileProviderMetadata, exports.CompileQueryMetadata = CompileQueryMetadata, exports.CompileTemplateMetadata = CompileTemplateMetadata, exports.CompileTokenMetadata = CompileTokenMetadata, exports.CompileTypeMetadata = CompileTypeMetadata, exports.CompilerConfig = CompilerConfig, exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER, exports.DirectiveResolver = DirectiveResolver, exports.NgModuleResolver = NgModuleResolver, exports.OfflineCompiler = OfflineCompiler, exports.PipeResolver = PipeResolver, exports.RenderTypes = RenderTypes, exports.RuntimeCompiler = RuntimeCompiler, exports.SourceModule = SourceModule, exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS, exports.UrlResolver = UrlResolver, exports.XHR = XHR, exports.analyzeAppProvidersForDeprecatedConfiguration = analyzeAppProvidersForDeprecatedConfiguration, exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver, exports.platformCoreDynamic = platformCoreDynamic, exports.InterpolationConfig = InterpolationConfig, exports.ElementSchemaRegistry = ElementSchemaRegistry, exports.TextAst = TextAst, exports.BoundTextAst = BoundTextAst, exports.AttrAst = AttrAst, exports.BoundElementPropertyAst = BoundElementPropertyAst, exports.BoundEventAst = BoundEventAst, exports.ReferenceAst = ReferenceAst, exports.VariableAst = VariableAst, exports.ElementAst = ElementAst, exports.EmbeddedTemplateAst = EmbeddedTemplateAst, exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst, exports.DirectiveAst = DirectiveAst, exports.ProviderAst = ProviderAst, exports.NgContentAst = NgContentAst, exports.templateVisitAll = templateVisitAll;
});

})();
(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/compiler"), require("@angular/core"), require("@angular/platform-browser")) : "function" == typeof define && define.amd ? define("4", ["exports", "2", "3", "5"], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.platformBrowser);
}(this, function(exports, _angular_compiler, _angular_core, _angular_platformBrowser) {
  "use strict";
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function bootstrap(appComponentType, customProviders) {
    var compilerOptions,
        declarations = [],
        entryComponents = [],
        deprecationMessages = [],
        deprecatedConfiguration = _angular_compiler.analyzeAppProvidersForDeprecatedConfiguration(customProviders);
    declarations = deprecatedConfiguration.moduleDeclarations.concat(declarations), compilerOptions = deprecatedConfiguration.compilerOptions, deprecationMessages = deprecatedConfiguration.deprecationMessages;
    var DynamicModule = function() {
      function DynamicModule() {}
      return DynamicModule;
    }();
    return DynamicModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        providers: customProviders,
        declarations: declarations.concat([appComponentType]),
        imports: [_angular_platformBrowser.BrowserModule],
        entryComponents: entryComponents,
        bootstrap: [appComponentType],
        schemas: [_angular_core.CUSTOM_ELEMENTS_SCHEMA]
      }]
    }], platformBrowserDynamic().bootstrapModule(DynamicModule, compilerOptions).then(function(moduleRef) {
      var console = moduleRef.injector.get(Console);
      deprecationMessages.forEach(function(msg) {
        return console.warn(msg);
      });
      var appRef = moduleRef.injector.get(_angular_core.ApplicationRef);
      return appRef.components[0];
    });
  }
  function bootstrapWorkerUi(workerScriptUri, customProviders) {
    return void 0 === customProviders && (customProviders = []), Promise.resolve(_angular_platformBrowser.platformWorkerUi([{
      provide: _angular_platformBrowser.WORKER_SCRIPT,
      useValue: workerScriptUri
    }].concat(customProviders)));
  }
  function bootstrapWorkerApp(appComponentType, customProviders) {
    console.warn("bootstrapWorkerApp is deprecated. Create an @NgModule that includes the `WorkerAppModule` and use `bootstrapModule` with the `workerAppDynamicPlatform()` instead.");
    var deprecatedConfiguration = _angular_compiler.analyzeAppProvidersForDeprecatedConfiguration(customProviders),
        declarations = [deprecatedConfiguration.moduleDeclarations.concat([appComponentType])],
        DynamicModule = function() {
          function DynamicModule() {}
          return DynamicModule;
        }();
    return DynamicModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        providers: customProviders,
        declarations: declarations,
        imports: [_angular_platformBrowser.WorkerAppModule],
        bootstrap: [appComponentType]
      }]
    }], platformWorkerAppDynamic().bootstrapModule(DynamicModule, deprecatedConfiguration.compilerOptions).then(function(moduleRef) {
      var console = moduleRef.injector.get(Console);
      deprecatedConfiguration.deprecationMessages.forEach(function(msg) {
        return console.warn(msg);
      });
      var appRef = moduleRef.injector.get(_angular_core.ApplicationRef);
      return appRef.components[0];
    });
  }
  var globalScope,
      Console = _angular_core.__core_private__.Console,
      INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var global$1 = globalScope;
  global$1.assert = function(condition) {};
  var XHRImpl = function(_super) {
    function XHRImpl() {
      _super.apply(this, arguments);
    }
    return __extends(XHRImpl, _super), XHRImpl.prototype.get = function(url) {
      var resolve,
          reject,
          promise = new Promise(function(res, rej) {
            resolve = res, reject = rej;
          }),
          xhr = new XMLHttpRequest;
      return xhr.open("GET", url, !0), xhr.responseType = "text", xhr.onload = function() {
        var response = isPresent(xhr.response) ? xhr.response : xhr.responseText,
            status = 1223 === xhr.status ? 204 : xhr.status;
        0 === status && (status = response ? 200 : 0), 200 <= status && status <= 300 ? resolve(response) : reject("Failed to load " + url);
      }, xhr.onerror = function() {
        reject("Failed to load " + url);
      }, xhr.send(), promise;
    }, XHRImpl;
  }(_angular_compiler.XHR);
  XHRImpl.decorators = [{type: _angular_core.Injectable}];
  var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {providers: [{
        provide: _angular_compiler.XHR,
        useClass: XHRImpl
      }]},
    multi: !0
  }],
      Map$1 = global$1.Map,
      Set = global$1.Set,
      ListWrapper = (function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(), function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(), function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(), function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(), function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }()),
      BaseException = (function() {
        var test = new Set([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set(lst);
        } : function(lst) {
          var res = new Set(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(), function(_super) {
        function BaseException(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException, _super), BaseException.prototype.toString = function() {
          return this.message;
        }, BaseException;
      }(Error)),
      CachedXHR = function(_super) {
        function CachedXHR() {
          if (_super.call(this), this._cache = global$1.$templateCache, null == this._cache)
            throw new BaseException("CachedXHR: Template cache was not found in $templateCache.");
        }
        return __extends(CachedXHR, _super), CachedXHR.prototype.get = function(url) {
          return this._cache.hasOwnProperty(url) ? Promise.resolve(this._cache[url]) : Promise.reject("CachedXHR: Did not find cached template for " + url);
        }, CachedXHR;
      }(_angular_compiler.XHR),
      BROWSER_APP_COMPILER_PROVIDERS = [],
      CACHED_TEMPLATE_PROVIDER = [{
        provide: _angular_compiler.XHR,
        useClass: CachedXHR
      }],
      platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, "browserDynamic", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS),
      browserDynamicPlatform = platformBrowserDynamic,
      platformWorkerAppDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, "workerAppDynamic", [{
        provide: _angular_core.COMPILER_OPTIONS,
        useValue: {providers: [{
            provide: _angular_compiler.XHR,
            useClass: XHRImpl
          }]},
        multi: !0
      }]),
      workerAppDynamicPlatform = platformWorkerAppDynamic;
  exports.BROWSER_APP_COMPILER_PROVIDERS = BROWSER_APP_COMPILER_PROVIDERS, exports.CACHED_TEMPLATE_PROVIDER = CACHED_TEMPLATE_PROVIDER, exports.platformBrowserDynamic = platformBrowserDynamic, exports.browserDynamicPlatform = browserDynamicPlatform, exports.bootstrap = bootstrap, exports.bootstrapWorkerUi = bootstrapWorkerUi, exports.platformWorkerAppDynamic = platformWorkerAppDynamic, exports.workerAppDynamicPlatform = workerAppDynamicPlatform, exports.bootstrapWorkerApp = bootstrapWorkerApp;
});

})();
$__System.registerDynamic("6", ["3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var AppComponent = (function() {
    function AppComponent() {
      this.tabs = {one: "<sc-tabs>\n    <sc-tab title=\"Tab 1\" [active]=\"true\">\n        <h1>Tab 1</h1>\n        <p>Lorem...</p>\n    </sc-tab>\n    <sc-tab title=\"Tab 2\">\n        <h1>Tab 2</h1>\n        <p>Lorem...</p>\n        <p>Lorem...</p>\n        <p>Lorem...</p>\n    </sc-tab>\n    <sc-tab title=\"Tab 3\">\n        <h1>Tab 3</h1>\n        <p>Lorem...</p>\n    </sc-tab>                             \n</sc-tabs>"};
      this.accord = {one: "<sc-accordion [singleActive]=\"true\">\n    <sc-accord title=\"Accord 1\" [active]=\"true\">\n        <p>Lorem...</p>\n    </sc-accord>\n    <sc-accord title=\"Accord 2\">\n        <p>Lorem...</p>\n    </sc-accord>\n    <sc-accord title=\"Accord 3\">\n        <p>Lorem...</p>\n    </sc-accord>\n</sc-accordion>"};
    }
    AppComponent.prototype.ngOnInit = function() {
      this.tabs.one = Prism.highlight(this.tabs.one, Prism.languages.markup);
      this.accord.one = Prism.highlight(this.accord.one, Prism.languages.markup);
    };
    AppComponent = __decorate([core_1.Component({
      selector: 'sc-app',
      template: "\n        <div class=\"container\">\n            <h1 class=\"title\">Ng2 Simple Components</h1>\n            <section>\n                <h2 class=\"section-title\">Tabs</h2>\n                <div class=\"inner-wrapper\">\n                    <div class=\"example\">\n                        <h3>Basic Example</h3>\n                        <sc-accordion>\n                            <sc-accord title=\"Example\" [active]=\"true\" [locked]=\"true\">\n                                <div class=\"example-inner\">\n                                    <sc-tabs>\n                                        <sc-tab title=\"Tab 1\" [active]=\"true\">\n                                            <h1>Tab 1</h1>\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Asperiores aut, beatae, cum, dolorum excepturi fugiat fugit hic maiores maxime molestiae mollitia praesentium quaerat quasi repellendus sit velit voluptas voluptates voluptatum?</p>\n                                        </sc-tab>\n                                        <sc-tab title=\"Tab 2\">\n                                            <h1>Tab 2</h1>\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Asperiores aut, beatae, cum, dolorum excepturi fugiat fugit hic maiores maxime molestiae mollitia praesentium quaerat quasi repellendus sit velit voluptas voluptates voluptatum?</p>\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ad aliquid deleniti dignissimos earum excepturi fugiat minima molestias quibusdam reprehenderit tenetur. Ducimus explicabo facilis ipsam, pariatur reiciendis tempore unde vel voluptate!</p>\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci animi aut deserunt dicta fugit iste laboriosam pariatur veniam, voluptate voluptatem! Adipisci commodi consectetur dolores expedita facere nobis odit reprehenderit veritatis?</p>\n                                        </sc-tab>\n                                        <sc-tab title=\"Tab 3\">\n                                            <h1>Tab 3</h1>\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Asperiores aut, beatae, cum, dolorum excepturi fugiat fugit hic maiores maxime molestiae mollitia praesentium quaerat quasi repellendus sit velit voluptas voluptates voluptatum?</p>\n                                        </sc-tab>                             \n                                    </sc-tabs>\n                                </div>   \n                            </sc-accord>\n                            <sc-accord title=\"HTML\">\n                                <pre class=\"language-html\"><code class=\"language-html\" [innerHTML]=\"tabs.one\"></code></pre>\n                            </sc-accord>\n                        </sc-accordion>     \n                    </div>                    \n                </div>   \n            </section>        \n            <section>\n                <h2 class=\"section-title\">Accordion</h2>\n                <div class=\"inner-wrapper\">\n                    <div class=\"example\">\n                        <h3>Basic Example</h3>\n                        <sc-accordion>\n                            <sc-accord title=\"Example\" [active]=\"true\" [locked]=\"true\">\n                                <div class=\"example-inner\">\n                                    <sc-accordion [singleActive]=\"true\">\n                                        <sc-accord title=\"Accord 1\" [active]=\"true\">\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Blanditiis, debitis delectus eius esse eum in modi nemo quae quaerat recusandae rem sequi sunt vel veritatis voluptates? At debitis nisi nobis?</p>\n                                        </sc-accord>\n                                        <sc-accord title=\"Accord 2\">\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Blanditiis, debitis delectus eius esse eum in modi nemo quae quaerat recusandae rem sequi sunt vel veritatis voluptates? At debitis nisi nobis?</p>\n                                        </sc-accord>\n                                        <sc-accord title=\"Accord 3\">\n                                            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Blanditiis, debitis delectus eius esse eum in modi nemo quae quaerat recusandae rem sequi sunt vel veritatis voluptates? At debitis nisi nobis?</p>\n                                        </sc-accord>\n                                    </sc-accordion>                        \n                                </div>\n                            </sc-accord>\n                            <sc-accord title=\"HTML\">\n                                <pre class=\"language-html\"><code class=\"language-html\" [innerHTML]=\"accord.one\"></code></pre>\n                            </sc-accord>    \n                        </sc-accordion>                            \n                    </div> \n                </div>            \n            </section>\n            <section>\n                <h2 class=\"section-title\">Block Slider</h2>\n            </section>\n        </div>\n    "
    }), __metadata('design:paramtypes', [])], AppComponent);
    return AppComponent;
  }());
  exports.AppComponent = AppComponent;
  return module.exports;
});

$__System.registerDynamic("7", ["3", "5", "8", "9"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var platform_browser_1 = $__require('5');
  var tabs_component_1 = $__require('8');
  var tab_component_1 = $__require('9');
  var TabsModule = (function() {
    function TabsModule() {}
    TabsModule = __decorate([core_1.NgModule({
      imports: [platform_browser_1.BrowserModule],
      declarations: [tabs_component_1.TabsComponent, tab_component_1.TabComponent],
      exports: [tabs_component_1.TabsComponent, tab_component_1.TabComponent],
      bootstrap: [tabs_component_1.TabsComponent]
    }), __metadata('design:paramtypes', [])], TabsModule);
    return TabsModule;
  }());
  exports.TabsModule = TabsModule;
  return module.exports;
});

$__System.registerDynamic("8", ["3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var TabsComponent = (function() {
    function TabsComponent() {
      this.tabs = [];
    }
    TabsComponent.prototype.selectTab = function(tab) {
      if (tab.disabled)
        return;
      var oldActive = this.tabs.findIndex(function(a) {
        return a.act;
      }),
          direction = tab.position > oldActive ? 'Left' : 'Right';
      this.tabs.forEach(function(tab) {
        return tab.act = false;
      });
      tab.act = true;
      if (oldActive !== tab.position) {
        tab.animate = 'enter' + direction;
        this.tabs[oldActive].animate = 'leave' + direction;
      }
      this.setStyle(tab.height);
    };
    TabsComponent.prototype.setStyle = function(tabHeight) {
      this.style = {height: tabHeight + "px"};
    };
    TabsComponent.prototype.addTab = function(tab) {
      this.tabs.push(tab);
    };
    TabsComponent.prototype.indicatorStyle = function() {
      var active = this.tabs.findIndex(function(a) {
        return a.act;
      }),
          percent = 100 / this.tabs.length,
          style = {width: percent + '%'};
      if (active) {
        if (active === this.tabs.length)
          style['right'] = 0;
        else
          style['left'] = percent * active + '%';
      } else
        style['left'] = '0';
      return style;
    };
    TabsComponent = __decorate([core_1.Component({
      selector: 'sc-tabs',
      template: "\n        <div class=\"tab-nav\">\n          <div class=\"col\" \n            *ngFor=\"let tab of tabs\"\n            [class.disabled]=\"tab.disabled\"\n            [class.active]=\"tab.act\"\n            [ngStyle]=\"{flex: tabs.length}\" \n            (click)=\"selectTab(tab, i)\">\n                {{tab.title}}\n            </div>\n            <div class=\"indicator\" [ngStyle]=\"indicatorStyle()\"></div>\n        </div>\n        <div class=\"tab-content\" [ngStyle]=\"style\">\n            <ng-content></ng-content>\n        </div>\n    ",
      styles: ["\n        :host {\n            width: 100%;\n            box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12);\n            display: block;\n            border: 1px solid rgba(0, 0, 0, 0.12);\n            box-sizing: border-box;\n            color: #212121;\n        }\n        \n        .tab-nav {\n            display: flex;\n            position: relative;\n            background: #fff;\n            border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n            width: 100%;\n        }\n        \n        .indicator {\n            position: absolute;\n            bottom: 0;\n            height: 2px;\n            background-color: #8BC34A;\n            will-change: left, right;\n            transition: all 0.2s ease-in-out;\n        }\n        \n        .col {\n            text-align: center;\n            padding: 1rem 0.5rem;\n            cursor: pointer;\n            text-transform: uppercase;\n        }\n        \n        .col.disabled {\n            cursor: default;\n            color: #d6d6d6;\n        }\n        \n        .col.active {\n            color: #8BC34A;\n        }\n        \n        .tab-content {\n            position: relative;\n            background: #F6F6F6;\n            top: auto;\n            left: auto;\n            right: auto;\n            bottom: auto;\n            overflow: hidden;\n            transition: all 0.3s ease-in-out;\n        }\n    "]
    }), __metadata('design:paramtypes', [])], TabsComponent);
    return TabsComponent;
  }());
  exports.TabsComponent = TabsComponent;
  return module.exports;
});

$__System.registerDynamic("9", ["3", "8"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var tabs_component_1 = $__require('8');
  var TabComponent = (function() {
    function TabComponent(tabsComp, _el) {
      this.tabsComp = tabsComp;
      this._el = _el;
      this.title = 'Tab';
      this.disabled = false;
      this.act = false;
      this.animate = 'default';
    }
    Object.defineProperty(TabComponent.prototype, "active", {
      set: function(act) {
        this.act = act;
        if (act) {
          this.animate = 'first';
          this.tabsComp.setStyle(this._el.nativeElement.offsetHeight);
        }
      },
      enumerable: true,
      configurable: true
    });
    ;
    TabComponent.prototype.ngOnInit = function() {
      this.height = this._el.nativeElement.offsetHeight;
      this.position = this.tabsComp.tabs.length;
      this.tabsComp.addTab(this);
    };
    __decorate([core_1.Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], TabComponent.prototype, "active", null);
    __decorate([core_1.Input(), __metadata('design:type', String)], TabComponent.prototype, "title", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Boolean)], TabComponent.prototype, "disabled", void 0);
    TabComponent = __decorate([core_1.Component({
      selector: 'sc-tab',
      template: "\n      <ng-content></ng-content>\n    ",
      host: {'[@anim]': 'animate'},
      animations: [core_1.trigger('anim', [core_1.state('default', core_1.style({
        position: 'absolute',
        opacity: 0
      })), core_1.state('first', core_1.style({
        position: 'relative',
        opacity: 1
      })), core_1.state('leaveLeft', core_1.style({
        position: 'absolute',
        opacity: 0
      })), core_1.state('leaveRight', core_1.style({
        position: 'absolute',
        opacity: 0
      })), core_1.state('enterRight', core_1.style({
        position: 'relative',
        opacity: 1
      })), core_1.state('enterLeft', core_1.style({
        position: 'relative',
        opacity: 1
      })), core_1.transition('* => enterRight', [core_1.style({
        transform: 'translateX(-100%)',
        opacity: 0
      }), core_1.animate('300ms ease-in-out', core_1.style({
        transform: 'translateX(0)',
        opacity: 1
      }))]), core_1.transition('* => enterLeft', [core_1.style({
        transform: 'translateX(100%)',
        opacity: 0
      }), core_1.animate('300ms ease-in-out', core_1.style({
        transform: 'translateX(0)',
        opacity: 1
      }))]), core_1.transition('* => leaveLeft', [core_1.style({
        transform: 'translateX(0)',
        opacity: 1
      }), core_1.animate('300ms ease-in-out', core_1.style({
        transform: 'translateX(-100%)',
        opacity: 0
      }))]), core_1.transition('* => leaveRight', [core_1.style({
        transform: 'translateX(0)',
        opacity: 1
      }), core_1.animate('300ms ease-in-out', core_1.style({
        transform: 'translateX(100%)',
        opacity: 0
      }))])])],
      styles: ["\n        :host {\n            display: block;\n            opacity: 0;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            padding: 1rem;\n        }\n    "]
    }), __metadata('design:paramtypes', [tabs_component_1.TabsComponent, core_1.ElementRef])], TabComponent);
    return TabComponent;
  }());
  exports.TabComponent = TabComponent;
  return module.exports;
});

$__System.registerDynamic("a", ["3", "5", "b", "c"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var platform_browser_1 = $__require('5');
  var accordion_component_1 = $__require('b');
  var accord_component_1 = $__require('c');
  var AccordionModule = (function() {
    function AccordionModule() {}
    AccordionModule = __decorate([core_1.NgModule({
      imports: [platform_browser_1.BrowserModule],
      declarations: [accordion_component_1.AccordionComponent, accord_component_1.AccordComponent],
      exports: [accordion_component_1.AccordionComponent, accord_component_1.AccordComponent],
      bootstrap: [accordion_component_1.AccordionComponent]
    }), __metadata('design:paramtypes', [])], AccordionModule);
    return AccordionModule;
  }());
  exports.AccordionModule = AccordionModule;
  return module.exports;
});

$__System.registerDynamic("b", ["3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var AccordionComponent = (function() {
    function AccordionComponent() {
      this.singleActive = false;
      this.accords = [];
    }
    AccordionComponent.prototype.trigger = function(accord) {
      if (!accord.locked) {
        var toSet = !accord.act,
            state = toSet ? 'open' : 'closed';
        if (this.singleActive) {
          this.accords.forEach(function(a) {
            if (!a.locked) {
              a.act = false;
              a.inner = 'closed';
            }
          });
        }
        accord.act = toSet;
        accord.inner = state;
      }
    };
    AccordionComponent.prototype.addAccord = function(accord) {
      this.accords.push(accord);
    };
    __decorate([core_1.Input(), __metadata('design:type', Boolean)], AccordionComponent.prototype, "singleActive", void 0);
    AccordionComponent = __decorate([core_1.Component({
      selector: 'sc-accordion',
      template: "\n        <ng-content></ng-content>\n    ",
      styles: ["\n        :host {\n            width: 100%;\n            display: block;\n            color: #212121;\n            box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12)\n        }\n    "]
    }), __metadata('design:paramtypes', [])], AccordionComponent);
    return AccordionComponent;
  }());
  exports.AccordionComponent = AccordionComponent;
  return module.exports;
});

$__System.registerDynamic("c", ["3", "b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var accordion_component_1 = $__require('b');
  var AccordComponent = (function() {
    function AccordComponent(accordionComp) {
      this.accordionComp = accordionComp;
      this.title = 'Accord';
      this.locked = false;
      this.act = false;
      this.inner = 'closed';
      accordionComp.addAccord(this);
    }
    Object.defineProperty(AccordComponent.prototype, "active", {
      set: function(act) {
        this.act = act;
        this.inner = act ? 'open' : 'closed';
      },
      enumerable: true,
      configurable: true
    });
    ;
    AccordComponent.prototype.trigger = function() {
      this.accordionComp.trigger(this);
    };
    __decorate([core_1.Input(), __metadata('design:type', String)], AccordComponent.prototype, "title", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Boolean)], AccordComponent.prototype, "locked", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Boolean), __metadata('design:paramtypes', [Boolean])], AccordComponent.prototype, "active", null);
    AccordComponent = __decorate([core_1.Component({
      selector: 'sc-accord',
      template: "\n        <div class=\"accord\" [class.active]=\"act\">\n            <div class=\"bar\" (click)=\"trigger()\">\n                <span>{{title}}</span>\n            </div>\n            <div class=\"inner\" [@anim]=\"inner\">\n                <div class=\"pad\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </div>\n    ",
      animations: [core_1.trigger('anim', [core_1.state('open', core_1.style({height: '*'})), core_1.state('closed', core_1.style({height: 0})), core_1.transition('closed => open', [core_1.style({height: 0}), core_1.animate('300ms ease-in-out', core_1.style({height: '*'}))]), core_1.transition('open => closed', [core_1.style({height: '*'}), core_1.animate('300ms ease-in-out', core_1.style({height: 0}))])])],
      styles: ["  \n        .bar {\n            width: 100%;\n            height: 50px;\n            border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n            border-top: 1px solid rgba(0, 0, 0, 0.12);\n            cursor: pointer;\n            background: #fff;\n        }\n        \n        span {\n            line-height: 50px;\n            padding: 0 1rem;\n            font-size: 1.1rem;\n            text-transform: uppercase;\n        }\n        \n        .inner {\n            overflow: hidden;\n            display: block;\n            background: #F6F6F6;\n        }\n        \n        .pad {\n            padding: 0.5rem 1rem;\n        }\n    "]
    }), __metadata('design:paramtypes', [accordion_component_1.AccordionComponent])], AccordComponent);
    return AccordComponent;
  }());
  exports.AccordComponent = AccordComponent;
  return module.exports;
});

$__System.registerDynamic("d", ["e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  function toPromise(PromiseCtor) {
    var _this = this;
    if (!PromiseCtor) {
      if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
        PromiseCtor = root_1.root.Rx.config.Promise;
      } else if (root_1.root.Promise) {
        PromiseCtor = root_1.root.Promise;
      }
    }
    if (!PromiseCtor) {
      throw new Error('no Promise impl found');
    }
    return new PromiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  }
  exports.toPromise = toPromise;
  return module.exports;
});

$__System.registerDynamic("f", ["e", "10"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var root_1 = $__require('e');
  var Observable_1 = $__require('10');
  var PromiseObservable = (function(_super) {
    __extends(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
      if (scheduler === void 0) {
        scheduler = null;
      }
      _super.call(this);
      this.promise = promise;
      this.scheduler = scheduler;
    }
    PromiseObservable.create = function(promise, scheduler) {
      if (scheduler === void 0) {
        scheduler = null;
      }
      return new PromiseObservable(promise, scheduler);
    };
    PromiseObservable.prototype._subscribe = function(subscriber) {
      var _this = this;
      var promise = this.promise;
      var scheduler = this.scheduler;
      if (scheduler == null) {
        if (this._isScalar) {
          if (!subscriber.isUnsubscribed) {
            subscriber.next(this.value);
            subscriber.complete();
          }
        } else {
          promise.then(function(value) {
            _this.value = value;
            _this._isScalar = true;
            if (!subscriber.isUnsubscribed) {
              subscriber.next(value);
              subscriber.complete();
            }
          }, function(err) {
            if (!subscriber.isUnsubscribed) {
              subscriber.error(err);
            }
          }).then(null, function(err) {
            root_1.root.setTimeout(function() {
              throw err;
            });
          });
        }
      } else {
        if (this._isScalar) {
          if (!subscriber.isUnsubscribed) {
            return scheduler.schedule(dispatchNext, 0, {
              value: this.value,
              subscriber: subscriber
            });
          }
        } else {
          promise.then(function(value) {
            _this.value = value;
            _this._isScalar = true;
            if (!subscriber.isUnsubscribed) {
              subscriber.add(scheduler.schedule(dispatchNext, 0, {
                value: value,
                subscriber: subscriber
              }));
            }
          }, function(err) {
            if (!subscriber.isUnsubscribed) {
              subscriber.add(scheduler.schedule(dispatchError, 0, {
                err: err,
                subscriber: subscriber
              }));
            }
          }).then(null, function(err) {
            root_1.root.setTimeout(function() {
              throw err;
            });
          });
        }
      }
    };
    return PromiseObservable;
  }(Observable_1.Observable));
  exports.PromiseObservable = PromiseObservable;
  function dispatchNext(arg) {
    var value = arg.value,
        subscriber = arg.subscriber;
    if (!subscriber.isUnsubscribed) {
      subscriber.next(value);
      subscriber.complete();
    }
  }
  function dispatchError(arg) {
    var err = arg.err,
        subscriber = arg.subscriber;
    if (!subscriber.isUnsubscribed) {
      subscriber.error(err);
    }
  }
  return module.exports;
});

(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/core"), require("rxjs/operator/toPromise"), require("rxjs/Subject"), require("rxjs/Observable"), require("rxjs/observable/PromiseObservable")) : "function" == typeof define && define.amd ? define("11", ["exports", "3", "d", "12", "10", "f"], factory) : factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core, global.Rx.Observable.prototype, global.Rx, global.Rx, global.Rx);
}(this, function(exports, _angular_core, rxjs_operator_toPromise, rxjs_Subject, rxjs_Observable, rxjs_observable_PromiseObservable) {
  "use strict";
  function getTypeNameForDebugging(type) {
    return type.name ? type.name : typeof type;
  }
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isNumber(obj) {
    return "number" == typeof obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isFunction(obj) {
    return "function" == typeof obj;
  }
  function isStringMap(obj) {
    return "object" == typeof obj && null !== obj;
  }
  function isPromise(obj) {
    return isPresent(obj) && isFunction(obj.then);
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.overriddenName)
      return token.overriddenName;
    if (token.name)
      return token.name;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || "number" == typeof a && "number" == typeof b && isNaN(a) && isNaN(b);
  }
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  function normalizeBool(obj) {
    return !isBlank(obj) && obj;
  }
  function isJsObject(o) {
    return null !== o && ("function" == typeof o || "object" == typeof o);
  }
  function getSymbolIterator() {
    if (isBlank(_symbolIterator))
      if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator))
        _symbolIterator = Symbol.iterator;
      else
        for (var keys = Object.getOwnPropertyNames(Map.prototype),
            i = 0; i < keys.length; ++i) {
          var key = keys[i];
          "entries" !== key && "size" !== key && Map.prototype[key] === Map.prototype.entries && (_symbolIterator = key);
        }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function hasConstructor(value, type) {
    return value.constructor === type;
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function isListLikeIterable(obj) {
    return !!isJsObject(obj) && (isArray(obj) || !(obj instanceof Map$1) && getSymbolIterator() in obj);
  }
  function unimplemented() {
    throw new BaseException("unimplemented");
  }
  function getPluralCategory(value, cases, ngLocalization) {
    var nbCase = "=" + value;
    return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
  }
  function digitModifier(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return 1 == result.length ? "0" + result : result;
    };
  }
  function hourClockExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(" ")[1];
    };
  }
  function hourExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(" ")[0];
    };
  }
  function timeZoneGetter(timezone) {
    var format = {
      hour: "2-digit",
      hour12: !1,
      timeZoneName: timezone
    };
    return function(date, locale) {
      var result = new Intl.DateTimeFormat(locale, format).format(date);
      return result ? result.substring(3) : "";
    };
  }
  function hour12Modify(options, value) {
    return options.hour12 = value, options;
  }
  function digitCondition(prop, len) {
    var result = {};
    return result[prop] = 2 == len ? "2-digit" : "numeric", result;
  }
  function nameCondition(prop, len) {
    var result = {};
    return result[prop] = len < 4 ? "short" : "long", result;
  }
  function combine(options) {
    var result = {};
    return options.forEach(function(option) {
      Object.assign(result, option);
    }), result;
  }
  function datePartGetterFactory(ret) {
    return function(date, locale) {
      return new Intl.DateTimeFormat(locale, ret).format(date);
    };
  }
  function dateFormatter(format, date, locale) {
    var match,
        fn,
        text = "",
        parts = [];
    if (PATTERN_ALIASES[format])
      return PATTERN_ALIASES[format](date, locale);
    if (datePartsFormatterCache.has(format))
      parts = datePartsFormatterCache.get(format);
    else {
      for (DATE_FORMATS_SPLIT.exec(format); format; )
        match = DATE_FORMATS_SPLIT.exec(format), match ? (parts = concat(parts, match, 1), format = parts.pop()) : (parts.push(format), format = null);
      datePartsFormatterCache.set(format, parts);
    }
    return parts.forEach(function(part) {
      fn = DATE_FORMATS[part], text += fn ? fn(date, locale) : "''" === part ? "'" : part.replace(/(^'|'$)/g, "").replace(/''/g, "'");
    }), text;
  }
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  function formatNumber(pipe, value, style, digits, currency, currencyAsSymbol) {
    if (void 0 === currency && (currency = null), void 0 === currencyAsSymbol && (currencyAsSymbol = !1), isBlank(value))
      return null;
    if (value = isString(value) && NumberWrapper.isNumeric(value) ? +value : value, !isNumber(value))
      throw new InvalidPipeArgumentException(pipe, value);
    var minInt,
        minFraction,
        maxFraction;
    if (style !== NumberFormatStyle.Currency && (minInt = 1, minFraction = 0, maxFraction = 3), isPresent(digits)) {
      var parts = digits.match(_NUMBER_FORMAT_REGEXP);
      if (null === parts)
        throw new Error(digits + " is not a valid digit info for number pipes");
      isPresent(parts[1]) && (minInt = NumberWrapper.parseIntAutoRadix(parts[1])), isPresent(parts[3]) && (minFraction = NumberWrapper.parseIntAutoRadix(parts[3])), isPresent(parts[5]) && (maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]));
    }
    return NumberFormatter.format(value, defaultLocale$1, style, {
      minimumIntegerDigits: minInt,
      minimumFractionDigits: minFraction,
      maximumFractionDigits: maxFraction,
      currency: currency,
      currencyAsSymbol: currencyAsSymbol
    });
  }
  function _convertToPromise(obj) {
    return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
  }
  function _executeValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _executeAsyncValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _mergeErrors(arrayOfErrors) {
    var res = arrayOfErrors.reduce(function(res, errors) {
      return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
    }, {});
    return StringMapWrapper.isEmpty(res) ? null : res;
  }
  function normalizeValidator(validator) {
    return void 0 !== validator.validate ? function(c) {
      return validator.validate(c);
    } : validator;
  }
  function normalizeAsyncValidator(validator) {
    return void 0 !== validator.validate ? function(c) {
      return validator.validate(c);
    } : validator;
  }
  function _buildValueString(id, value) {
    return isBlank(id) ? "" + value : (isPrimitive(value) || (value = "Object"), StringWrapper.slice(id + ": " + value, 0, 50));
  }
  function _extractId(valueString) {
    return valueString.split(":")[0];
  }
  function _buildValueString$1(id, value) {
    return isBlank(id) ? "" + value : (isString(value) && (value = "'" + value + "'"), isPrimitive(value) || (value = "Object"), StringWrapper.slice(id + ": " + value, 0, 50));
  }
  function _extractId$1(valueString) {
    return valueString.split(":")[0];
  }
  function controlPath(name, parent) {
    var p = ListWrapper.clone(parent.path);
    return p.push(name), p;
  }
  function setUpControl(control, dir) {
    isBlank(control) && _throwError(dir, "Cannot find control with"), isBlank(dir.valueAccessor) && _throwError(dir, "No value accessor for form control with"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]), dir.valueAccessor.writeValue(control.value), dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue), control.updateValue(newValue, {emitModelToViewChange: !1}), control.markAsDirty();
    }), control.registerOnChange(function(newValue) {
      return dir.valueAccessor.writeValue(newValue);
    }), dir.valueAccessor.registerOnTouched(function() {
      return control.markAsTouched();
    });
  }
  function setUpControlGroup(control, dir) {
    isBlank(control) && _throwError(dir, "Cannot find control with"), control.validator = Validators.compose([control.validator, dir.validator]), control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
  }
  function _throwError(dir, message) {
    var messageEnd;
    throw messageEnd = dir.path.length > 1 ? "path: '" + dir.path.join(" -> ") + "'" : dir.path[0] ? "name: '" + dir.path + "'" : "unspecified name", new BaseException(message + " " + messageEnd);
  }
  function composeValidators(validators) {
    return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
  }
  function composeAsyncValidators(validators) {
    return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
  }
  function isPropertyUpdated(changes, viewModel) {
    if (!StringMapWrapper.contains(changes, "model"))
      return !1;
    var change = changes.model;
    return !!change.isFirstChange() || !looseIdentical(viewModel, change.currentValue);
  }
  function selectValueAccessor(dir, valueAccessors) {
    if (isBlank(valueAccessors))
      return null;
    var defaultAccessor,
        builtinAccessor,
        customAccessor;
    return valueAccessors.forEach(function(v) {
      hasConstructor(v, DefaultValueAccessor) ? defaultAccessor = v : hasConstructor(v, CheckboxControlValueAccessor) || hasConstructor(v, NumberValueAccessor) || hasConstructor(v, SelectControlValueAccessor) || hasConstructor(v, SelectMultipleControlValueAccessor) || hasConstructor(v, RadioControlValueAccessor) ? (isPresent(builtinAccessor) && _throwError(dir, "More than one built-in value accessor matches form control with"), builtinAccessor = v) : (isPresent(customAccessor) && _throwError(dir, "More than one custom value accessor matches form control with"), customAccessor = v);
    }), isPresent(customAccessor) ? customAccessor : isPresent(builtinAccessor) ? builtinAccessor : isPresent(defaultAccessor) ? defaultAccessor : (_throwError(dir, "No valid value accessor for form control with"), null);
  }
  function _find(control, path) {
    return isBlank(path) ? null : (path instanceof Array || (path = path.split("/")), path instanceof Array && ListWrapper.isEmpty(path) ? null : path.reduce(function(v, name) {
      if (v instanceof ControlGroup)
        return isPresent(v.controls[name]) ? v.controls[name] : null;
      if (v instanceof ControlArray) {
        var index = name;
        return isPresent(v.at(index)) ? v.at(index) : null;
      }
      return null;
    }, control));
  }
  function toObservable(r) {
    return isPromise(r) ? rxjs_observable_PromiseObservable.PromiseObservable.create(r) : r;
  }
  function _stripBaseHref(baseHref, url) {
    return baseHref.length > 0 && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
  }
  function _stripIndexHtml(url) {
    return /\/index.html$/g.test(url) ? url.substring(0, url.length - 11) : url;
  }
  var globalScope;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var _global = globalScope,
      Date = _global.Date;
  _global.assert = function(condition) {};
  var StringWrapper = function() {
    function StringWrapper() {}
    return StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    }, StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    }, StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    }, StringWrapper.equals = function(s, s2) {
      return s === s2;
    }, StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        for (var pos = 0,
            i = 0; i < s.length && s[i] == charVal; i++)
          pos++;
        s = s.substring(pos);
      }
      return s;
    }, StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        for (var pos = s.length,
            i = s.length - 1; i >= 0 && s[i] == charVal; i--)
          pos--;
        s = s.substring(0, pos);
      }
      return s;
    }, StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.slice = function(s, from, to) {
      return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
    }, StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        for (var matches = [],
            _i = 0; _i < arguments.length; _i++)
          matches[_i - 0] = arguments[_i];
        return matches.splice(-2, 2), cb(matches);
      });
    }, StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    }, StringWrapper.compare = function(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }, StringWrapper;
  }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }(),
      Json = function() {
        function Json() {}
        return Json.parse = function(s) {
          return _global.JSON.parse(s);
        }, Json.stringify = function(data) {
          return _global.JSON.stringify(data, null, 2);
        }, Json;
      }(),
      DateWrapper = function() {
        function DateWrapper() {}
        return DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
          return void 0 === month && (month = 1), void 0 === day && (day = 1), void 0 === hour && (hour = 0), void 0 === minutes && (minutes = 0), void 0 === seconds && (seconds = 0), void 0 === milliseconds && (milliseconds = 0), new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        }, DateWrapper.fromISOString = function(str) {
          return new Date(str);
        }, DateWrapper.fromMillis = function(ms) {
          return new Date(ms);
        }, DateWrapper.toMillis = function(date) {
          return date.getTime();
        }, DateWrapper.now = function() {
          return new Date;
        }, DateWrapper.toJson = function(date) {
          return date.toJSON();
        }, DateWrapper;
      }(),
      _symbolIterator = null,
      Map$1 = _global.Map,
      Set$1 = _global.Set,
      createMapFromPairs = function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(),
      createMapFromMap = function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(),
      _clearValues = function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(),
      _arrayFromMap = function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(),
      MapWrapper = function() {
        function MapWrapper() {}
        return MapWrapper.clone = function(m) {
          return createMapFromMap(m);
        }, MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map$1;
          for (var prop in stringMap)
            result.set(prop, stringMap[prop]);
          return result;
        }, MapWrapper.toStringMap = function(m) {
          var r = {};
          return m.forEach(function(v, k) {
            return r[k] = v;
          }), r;
        }, MapWrapper.createFromPairs = function(pairs) {
          return createMapFromPairs(pairs);
        }, MapWrapper.clearValues = function(m) {
          _clearValues(m);
        }, MapWrapper.iterable = function(m) {
          return m;
        }, MapWrapper.keys = function(m) {
          return _arrayFromMap(m, !1);
        }, MapWrapper.values = function(m) {
          return _arrayFromMap(m, !0);
        }, MapWrapper;
      }(),
      StringMapWrapper = function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).map(function(k) {
            return map[k];
          });
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var _i = 0,
              _a = Object.keys(map); _i < _a.length; _i++) {
            var k = _a[_i];
            callback(map[k], k);
          }
        }, StringMapWrapper.merge = function(m1, m2) {
          for (var m = {},
              _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }(),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      NgClass = (function() {
        var test = new Set$1([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set$1(lst);
        } : function(lst) {
          var res = new Set$1(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(), function() {
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
          this._iterableDiffers = _iterableDiffers, this._keyValueDiffers = _keyValueDiffers, this._ngEl = _ngEl, this._renderer = _renderer, this._initialClasses = [];
        }
        return Object.defineProperty(NgClass.prototype, "initialClasses", {
          set: function(v) {
            this._applyInitialClasses(!0), this._initialClasses = isPresent(v) && isString(v) ? v.split(" ") : [], this._applyInitialClasses(!1), this._applyClasses(this._rawClass, !1);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgClass.prototype, "ngClass", {
          set: function(v) {
            this._cleanupClasses(this._rawClass), isString(v) && (v = v.split(" ")), this._rawClass = v, this._iterableDiffer = null, this._keyValueDiffer = null, isPresent(v) && (isListLikeIterable(v) ? this._iterableDiffer = this._iterableDiffers.find(v).create(null) : this._keyValueDiffer = this._keyValueDiffers.find(v).create(null));
          },
          enumerable: !0,
          configurable: !0
        }), NgClass.prototype.ngDoCheck = function() {
          if (isPresent(this._iterableDiffer)) {
            var changes = this._iterableDiffer.diff(this._rawClass);
            isPresent(changes) && this._applyIterableChanges(changes);
          }
          if (isPresent(this._keyValueDiffer)) {
            var changes = this._keyValueDiffer.diff(this._rawClass);
            isPresent(changes) && this._applyKeyValueChanges(changes);
          }
        }, NgClass.prototype._cleanupClasses = function(rawClassVal) {
          this._applyClasses(rawClassVal, !0), this._applyInitialClasses(!1);
        }, NgClass.prototype._applyKeyValueChanges = function(changes) {
          var _this = this;
          changes.forEachAddedItem(function(record) {
            _this._toggleClass(record.key, record.currentValue);
          }), changes.forEachChangedItem(function(record) {
            _this._toggleClass(record.key, record.currentValue);
          }), changes.forEachRemovedItem(function(record) {
            record.previousValue && _this._toggleClass(record.key, !1);
          });
        }, NgClass.prototype._applyIterableChanges = function(changes) {
          var _this = this;
          changes.forEachAddedItem(function(record) {
            _this._toggleClass(record.item, !0);
          }), changes.forEachRemovedItem(function(record) {
            _this._toggleClass(record.item, !1);
          });
        }, NgClass.prototype._applyInitialClasses = function(isCleanup) {
          var _this = this;
          this._initialClasses.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          });
        }, NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
          var _this = this;
          isPresent(rawClassVal) && (isArray(rawClassVal) ? rawClassVal.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          }) : rawClassVal instanceof Set ? rawClassVal.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          }) : StringMapWrapper.forEach(rawClassVal, function(expVal, className) {
            isPresent(expVal) && _this._toggleClass(className, !isCleanup);
          }));
        }, NgClass.prototype._toggleClass = function(className, enabled) {
          if (className = className.trim(), className.length > 0)
            if (className.indexOf(" ") > -1)
              for (var classes = className.split(/\s+/g),
                  i = 0,
                  len = classes.length; i < len; i++)
                this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
            else
              this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
        }, NgClass;
      }());
  NgClass.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngClass]"}]
  }], NgClass.ctorParameters = [{type: _angular_core.IterableDiffers}, {type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}], NgClass.propDecorators = {
    initialClasses: [{
      type: _angular_core.Input,
      args: ["class"]
    }],
    ngClass: [{type: _angular_core.Input}]
  };
  var BaseException = function(_super) {
    function BaseException(message) {
      void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
    }
    return __extends(BaseException, _super), BaseException.prototype.toString = function() {
      return this.message;
    }, BaseException;
  }(Error),
      NgForRow = function() {
        function NgForRow($implicit, index, count) {
          this.$implicit = $implicit, this.index = index, this.count = count;
        }
        return Object.defineProperty(NgForRow.prototype, "first", {
          get: function() {
            return 0 === this.index;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForRow.prototype, "last", {
          get: function() {
            return this.index === this.count - 1;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForRow.prototype, "even", {
          get: function() {
            return this.index % 2 === 0;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForRow.prototype, "odd", {
          get: function() {
            return !this.even;
          },
          enumerable: !0,
          configurable: !0
        }), NgForRow;
      }(),
      NgFor = function() {
        function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
          this._viewContainer = _viewContainer, this._templateRef = _templateRef, this._iterableDiffers = _iterableDiffers, this._cdr = _cdr;
        }
        return Object.defineProperty(NgFor.prototype, "ngForTemplate", {
          set: function(value) {
            isPresent(value) && (this._templateRef = value);
          },
          enumerable: !0,
          configurable: !0
        }), NgFor.prototype.ngOnChanges = function(changes) {
          if ("ngForOf" in changes) {
            var value = changes.ngForOf.currentValue;
            if (isBlank(this._differ) && isPresent(value))
              try {
                this._differ = this._iterableDiffers.find(value).create(this._cdr, this.ngForTrackBy);
              } catch (e) {
                throw new BaseException("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
              }
          }
        }, NgFor.prototype.ngDoCheck = function() {
          if (isPresent(this._differ)) {
            var changes = this._differ.diff(this.ngForOf);
            isPresent(changes) && this._applyChanges(changes);
          }
        }, NgFor.prototype._applyChanges = function(changes) {
          var _this = this,
              insertTuples = [];
          changes.forEachOperation(function(item, adjustedPreviousIndex, currentIndex) {
            if (null == item.previousIndex) {
              var view = _this._viewContainer.createEmbeddedView(_this._templateRef, new NgForRow(null, null, null), currentIndex),
                  tuple = new RecordViewTuple(item, view);
              insertTuples.push(tuple);
            } else if (null == currentIndex)
              _this._viewContainer.remove(adjustedPreviousIndex);
            else {
              var view = _this._viewContainer.get(adjustedPreviousIndex);
              _this._viewContainer.move(view, currentIndex);
              var tuple = new RecordViewTuple(item, view);
              insertTuples.push(tuple);
            }
          });
          for (var i = 0; i < insertTuples.length; i++)
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
          for (var i = 0,
              ilen = this._viewContainer.length; i < ilen; i++) {
            var viewRef = this._viewContainer.get(i);
            viewRef.context.index = i, viewRef.context.count = ilen;
          }
          changes.forEachIdentityChange(function(record) {
            var viewRef = _this._viewContainer.get(record.currentIndex);
            viewRef.context.$implicit = record.item;
          });
        }, NgFor.prototype._perViewChange = function(view, record) {
          view.context.$implicit = record.item;
        }, NgFor;
      }();
  NgFor.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngFor][ngForOf]"}]
  }], NgFor.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {type: _angular_core.IterableDiffers}, {type: _angular_core.ChangeDetectorRef}], NgFor.propDecorators = {
    ngForOf: [{type: _angular_core.Input}],
    ngForTrackBy: [{type: _angular_core.Input}],
    ngForTemplate: [{type: _angular_core.Input}]
  };
  var RecordViewTuple = function() {
    function RecordViewTuple(record, view) {
      this.record = record, this.view = view;
    }
    return RecordViewTuple;
  }(),
      NgIf = function() {
        function NgIf(_viewContainer, _templateRef) {
          this._viewContainer = _viewContainer, this._templateRef = _templateRef, this._prevCondition = null;
        }
        return Object.defineProperty(NgIf.prototype, "ngIf", {
          set: function(newCondition) {
            !newCondition || !isBlank(this._prevCondition) && this._prevCondition ? newCondition || !isBlank(this._prevCondition) && !this._prevCondition || (this._prevCondition = !1, this._viewContainer.clear()) : (this._prevCondition = !0, this._viewContainer.createEmbeddedView(this._templateRef));
          },
          enumerable: !0,
          configurable: !0
        }), NgIf;
      }();
  NgIf.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngIf]"}]
  }], NgIf.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}], NgIf.propDecorators = {ngIf: [{type: _angular_core.Input}]};
  var NgLocalization = function() {
    function NgLocalization() {}
    return NgLocalization;
  }(),
      _CASE_DEFAULT = new Object,
      _warned = !1,
      SwitchView = function() {
        function SwitchView(_viewContainerRef, _templateRef) {
          this._viewContainerRef = _viewContainerRef, this._templateRef = _templateRef;
        }
        return SwitchView.prototype.create = function() {
          this._viewContainerRef.createEmbeddedView(this._templateRef);
        }, SwitchView.prototype.destroy = function() {
          this._viewContainerRef.clear();
        }, SwitchView;
      }(),
      NgSwitch = function() {
        function NgSwitch() {
          this._useDefault = !1, this._valueViews = new Map, this._activeViews = [];
        }
        return Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
          set: function(value) {
            this._emptyAllActiveViews(), this._useDefault = !1;
            var views = this._valueViews.get(value);
            isBlank(views) && (this._useDefault = !0, views = normalizeBlank(this._valueViews.get(_CASE_DEFAULT))), this._activateViews(views), this._switchValue = value;
          },
          enumerable: !0,
          configurable: !0
        }), NgSwitch.prototype._onCaseValueChanged = function(oldCase, newCase, view) {
          this._deregisterView(oldCase, view), this._registerView(newCase, view), oldCase === this._switchValue ? (view.destroy(), ListWrapper.remove(this._activeViews, view)) : newCase === this._switchValue && (this._useDefault && (this._useDefault = !1, this._emptyAllActiveViews()), view.create(), this._activeViews.push(view)), 0 !== this._activeViews.length || this._useDefault || (this._useDefault = !0, this._activateViews(this._valueViews.get(_CASE_DEFAULT)));
        }, NgSwitch.prototype._emptyAllActiveViews = function() {
          for (var activeContainers = this._activeViews,
              i = 0; i < activeContainers.length; i++)
            activeContainers[i].destroy();
          this._activeViews = [];
        }, NgSwitch.prototype._activateViews = function(views) {
          if (isPresent(views)) {
            for (var i = 0; i < views.length; i++)
              views[i].create();
            this._activeViews = views;
          }
        }, NgSwitch.prototype._registerView = function(value, view) {
          var views = this._valueViews.get(value);
          isBlank(views) && (views = [], this._valueViews.set(value, views)), views.push(view);
        }, NgSwitch.prototype._deregisterView = function(value, view) {
          if (value !== _CASE_DEFAULT) {
            var views = this._valueViews.get(value);
            1 == views.length ? this._valueViews.delete(value) : ListWrapper.remove(views, view);
          }
        }, NgSwitch;
      }();
  NgSwitch.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngSwitch]"}]
  }], NgSwitch.propDecorators = {ngSwitch: [{type: _angular_core.Input}]};
  var NgSwitchCase = function() {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
      this._value = _CASE_DEFAULT, this._switch = ngSwitch, this._view = new SwitchView(viewContainer, templateRef);
    }
    return Object.defineProperty(NgSwitchCase.prototype, "ngSwitchCase", {
      set: function(value) {
        this._switch._onCaseValueChanged(this._value, value, this._view), this._value = value;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgSwitchCase.prototype, "ngSwitchWhen", {
      set: function(value) {
        _warned || (_warned = !0, console.warn("*ngSwitchWhen is deprecated and will be removed. Use *ngSwitchCase instead")), this._switch._onCaseValueChanged(this._value, value, this._view), this._value = value;
      },
      enumerable: !0,
      configurable: !0
    }), NgSwitchCase;
  }();
  NgSwitchCase.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngSwitchCase],[ngSwitchWhen]"}]
  }], NgSwitchCase.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
    type: NgSwitch,
    decorators: [{type: _angular_core.Host}]
  }], NgSwitchCase.propDecorators = {
    ngSwitchCase: [{type: _angular_core.Input}],
    ngSwitchWhen: [{type: _angular_core.Input}]
  };
  var NgSwitchDefault = function() {
    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
      sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));
    }
    return NgSwitchDefault;
  }();
  NgSwitchDefault.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngSwitchDefault]"}]
  }], NgSwitchDefault.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
    type: NgSwitch,
    decorators: [{type: _angular_core.Host}]
  }];
  var NgPlural = function() {
    function NgPlural(_localization) {
      this._localization = _localization, this._caseViews = {};
    }
    return Object.defineProperty(NgPlural.prototype, "ngPlural", {
      set: function(value) {
        this._switchValue = value, this._updateView();
      },
      enumerable: !0,
      configurable: !0
    }), NgPlural.prototype.addCase = function(value, switchView) {
      this._caseViews[value] = switchView;
    }, NgPlural.prototype._updateView = function() {
      this._clearViews();
      var key = getPluralCategory(this._switchValue, Object.keys(this._caseViews), this._localization);
      this._activateView(this._caseViews[key]);
    }, NgPlural.prototype._clearViews = function() {
      isPresent(this._activeView) && this._activeView.destroy();
    }, NgPlural.prototype._activateView = function(view) {
      isPresent(view) && (this._activeView = view, this._activeView.create());
    }, NgPlural;
  }();
  NgPlural.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngPlural]"}]
  }], NgPlural.ctorParameters = [{type: NgLocalization}], NgPlural.propDecorators = {ngPlural: [{type: _angular_core.Input}]};
  var NgPluralCase = function() {
    function NgPluralCase(value, template, viewContainer, ngPlural) {
      this.value = value, ngPlural.addCase(value, new SwitchView(viewContainer, template));
    }
    return NgPluralCase;
  }();
  NgPluralCase.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngPluralCase]"}]
  }], NgPluralCase.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["ngPluralCase"]
    }]
  }, {type: _angular_core.TemplateRef}, {type: _angular_core.ViewContainerRef}, {
    type: NgPlural,
    decorators: [{type: _angular_core.Host}]
  }];
  var NgStyle = function() {
    function NgStyle(_differs, _ngEl, _renderer) {
      this._differs = _differs, this._ngEl = _ngEl, this._renderer = _renderer;
    }
    return Object.defineProperty(NgStyle.prototype, "ngStyle", {
      set: function(v) {
        this._ngStyle = v, isBlank(this._differ) && isPresent(v) && (this._differ = this._differs.find(this._ngStyle).create(null));
      },
      enumerable: !0,
      configurable: !0
    }), NgStyle.prototype.ngDoCheck = function() {
      if (isPresent(this._differ)) {
        var changes = this._differ.diff(this._ngStyle);
        isPresent(changes) && this._applyChanges(changes);
      }
    }, NgStyle.prototype._applyChanges = function(changes) {
      var _this = this;
      changes.forEachRemovedItem(function(record) {
        _this._setStyle(record.key, null);
      }), changes.forEachAddedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      }), changes.forEachChangedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      });
    }, NgStyle.prototype._setStyle = function(name, val) {
      var nameParts = name.split("."),
          nameToSet = nameParts[0],
          valToSet = isPresent(val) && 2 === nameParts.length ? "" + val + nameParts[1] : val;
      this._renderer.setElementStyle(this._ngEl.nativeElement, nameToSet, valToSet);
    }, NgStyle;
  }();
  NgStyle.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngStyle]"}]
  }], NgStyle.ctorParameters = [{type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}], NgStyle.propDecorators = {ngStyle: [{type: _angular_core.Input}]};
  var NgTemplateOutlet = function() {
    function NgTemplateOutlet(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
    }
    return Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
      set: function(context) {
        this._context = context;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
      set: function(templateRef) {
        this._templateRef = templateRef;
      },
      enumerable: !0,
      configurable: !0
    }), NgTemplateOutlet.prototype.ngOnChanges = function() {
      this._viewRef && this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef)), this._templateRef && (this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context));
    }, NgTemplateOutlet;
  }();
  NgTemplateOutlet.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "[ngTemplateOutlet]"}]
  }], NgTemplateOutlet.ctorParameters = [{type: _angular_core.ViewContainerRef}], NgTemplateOutlet.propDecorators = {
    ngOutletContext: [{type: _angular_core.Input}],
    ngTemplateOutlet: [{type: _angular_core.Input}]
  };
  var CORE_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase],
      COMMON_DIRECTIVES = [CORE_DIRECTIVES],
      InvalidPipeArgumentException = function(_super) {
        function InvalidPipeArgumentException(type, value) {
          _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
        }
        return __extends(InvalidPipeArgumentException, _super), InvalidPipeArgumentException;
      }(BaseException),
      ObservableStrategy = function() {
        function ObservableStrategy() {}
        return ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
          return async.subscribe({
            next: updateLatestValue,
            error: function(e) {
              throw e;
            }
          });
        }, ObservableStrategy.prototype.dispose = function(subscription) {
          subscription.unsubscribe();
        }, ObservableStrategy.prototype.onDestroy = function(subscription) {
          subscription.unsubscribe();
        }, ObservableStrategy;
      }(),
      PromiseStrategy = function() {
        function PromiseStrategy() {}
        return PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
          return async.then(updateLatestValue, function(e) {
            throw e;
          });
        }, PromiseStrategy.prototype.dispose = function(subscription) {}, PromiseStrategy.prototype.onDestroy = function(subscription) {}, PromiseStrategy;
      }(),
      _promiseStrategy = new PromiseStrategy,
      _observableStrategy = new ObservableStrategy,
      AsyncPipe = function() {
        function AsyncPipe(_ref) {
          this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null, this._strategy = null, this._ref = _ref;
        }
        return AsyncPipe.prototype.ngOnDestroy = function() {
          isPresent(this._subscription) && this._dispose();
        }, AsyncPipe.prototype.transform = function(obj) {
          return isBlank(this._obj) ? (isPresent(obj) && this._subscribe(obj), this._latestReturnedValue = this._latestValue, this._latestValue) : obj !== this._obj ? (this._dispose(), this.transform(obj)) : this._latestValue === this._latestReturnedValue ? this._latestReturnedValue : (this._latestReturnedValue = this._latestValue, _angular_core.WrappedValue.wrap(this._latestValue));
        }, AsyncPipe.prototype._subscribe = function(obj) {
          var _this = this;
          this._obj = obj, this._strategy = this._selectStrategy(obj), this._subscription = this._strategy.createSubscription(obj, function(value) {
            return _this._updateLatestValue(obj, value);
          });
        }, AsyncPipe.prototype._selectStrategy = function(obj) {
          if (isPromise(obj))
            return _promiseStrategy;
          if (obj.subscribe)
            return _observableStrategy;
          throw new InvalidPipeArgumentException(AsyncPipe, obj);
        }, AsyncPipe.prototype._dispose = function() {
          this._strategy.dispose(this._subscription), this._latestValue = null, this._latestReturnedValue = null, this._subscription = null, this._obj = null;
        }, AsyncPipe.prototype._updateLatestValue = function(async, value) {
          async === this._obj && (this._latestValue = value, this._ref.markForCheck());
        }, AsyncPipe;
      }();
  AsyncPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "async",
      pure: !1
    }]
  }], AsyncPipe.ctorParameters = [{type: _angular_core.ChangeDetectorRef}];
  var NumberFormatStyle;
  !function(NumberFormatStyle) {
    NumberFormatStyle[NumberFormatStyle.Decimal = 0] = "Decimal", NumberFormatStyle[NumberFormatStyle.Percent = 1] = "Percent", NumberFormatStyle[NumberFormatStyle.Currency = 2] = "Currency";
  }(NumberFormatStyle || (NumberFormatStyle = {}));
  var NumberFormatter = function() {
    function NumberFormatter() {}
    return NumberFormatter.format = function(num, locale, style, _a) {
      var _b = void 0 === _a ? {} : _a,
          minimumIntegerDigits = _b.minimumIntegerDigits,
          minimumFractionDigits = _b.minimumFractionDigits,
          maximumFractionDigits = _b.maximumFractionDigits,
          currency = _b.currency,
          _c = _b.currencyAsSymbol,
          currencyAsSymbol = void 0 !== _c && _c,
          options = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits,
            style: NumberFormatStyle[style].toLowerCase()
          };
      return style == NumberFormatStyle.Currency && (options.currency = currency, options.currencyDisplay = currencyAsSymbol ? "symbol" : "code"), new Intl.NumberFormat(locale, options).format(num);
    }, NumberFormatter;
  }(),
      DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/,
      PATTERN_ALIASES = {
        yMMMdjms: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1), digitCondition("second", 1)])),
        yMdjm: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1), digitCondition("hour", 1), digitCondition("minute", 1)])),
        yMMMMEEEEd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), nameCondition("weekday", 4), digitCondition("day", 1)])),
        yMMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 4), digitCondition("day", 1)])),
        yMMMd: datePartGetterFactory(combine([digitCondition("year", 1), nameCondition("month", 3), digitCondition("day", 1)])),
        yMd: datePartGetterFactory(combine([digitCondition("year", 1), digitCondition("month", 1), digitCondition("day", 1)])),
        jms: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("second", 1), digitCondition("minute", 1)])),
        jm: datePartGetterFactory(combine([digitCondition("hour", 1), digitCondition("minute", 1)]))
      },
      DATE_FORMATS = {
        yyyy: datePartGetterFactory(digitCondition("year", 4)),
        yy: datePartGetterFactory(digitCondition("year", 2)),
        y: datePartGetterFactory(digitCondition("year", 1)),
        MMMM: datePartGetterFactory(nameCondition("month", 4)),
        MMM: datePartGetterFactory(nameCondition("month", 3)),
        MM: datePartGetterFactory(digitCondition("month", 2)),
        M: datePartGetterFactory(digitCondition("month", 1)),
        LLLL: datePartGetterFactory(nameCondition("month", 4)),
        dd: datePartGetterFactory(digitCondition("day", 2)),
        d: datePartGetterFactory(digitCondition("day", 1)),
        HH: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !1)))),
        H: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !1))),
        hh: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 2), !0)))),
        h: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))),
        jj: datePartGetterFactory(digitCondition("hour", 2)),
        j: datePartGetterFactory(digitCondition("hour", 1)),
        mm: digitModifier(datePartGetterFactory(digitCondition("minute", 2))),
        m: datePartGetterFactory(digitCondition("minute", 1)),
        ss: digitModifier(datePartGetterFactory(digitCondition("second", 2))),
        s: datePartGetterFactory(digitCondition("second", 1)),
        sss: datePartGetterFactory(digitCondition("second", 3)),
        EEEE: datePartGetterFactory(nameCondition("weekday", 4)),
        EEE: datePartGetterFactory(nameCondition("weekday", 3)),
        EE: datePartGetterFactory(nameCondition("weekday", 2)),
        E: datePartGetterFactory(nameCondition("weekday", 1)),
        a: hourClockExtracter(datePartGetterFactory(hour12Modify(digitCondition("hour", 1), !0))),
        Z: timeZoneGetter("short"),
        z: timeZoneGetter("long"),
        ww: datePartGetterFactory({}),
        w: datePartGetterFactory({}),
        G: datePartGetterFactory(nameCondition("era", 1)),
        GG: datePartGetterFactory(nameCondition("era", 2)),
        GGG: datePartGetterFactory(nameCondition("era", 3)),
        GGGG: datePartGetterFactory(nameCondition("era", 4))
      },
      datePartsFormatterCache = new Map,
      slice = [].slice,
      DateFormatter = function() {
        function DateFormatter() {}
        return DateFormatter.format = function(date, locale, pattern) {
          return dateFormatter(pattern, date, locale);
        }, DateFormatter;
      }(),
      defaultLocale = "en-US",
      DatePipe = function() {
        function DatePipe() {}
        return DatePipe.prototype.transform = function(value, pattern) {
          if (void 0 === pattern && (pattern = "mediumDate"), isBlank(value))
            return null;
          if (!this.supports(value))
            throw new InvalidPipeArgumentException(DatePipe, value);
          return NumberWrapper.isNumeric(value) ? value = DateWrapper.fromMillis(NumberWrapper.parseInt(value, 10)) : isString(value) && (value = DateWrapper.fromISOString(value)), StringMapWrapper.contains(DatePipe._ALIASES, pattern) && (pattern = StringMapWrapper.get(DatePipe._ALIASES, pattern)), DateFormatter.format(value, defaultLocale, pattern);
        }, DatePipe.prototype.supports = function(obj) {
          return !(!isDate(obj) && !NumberWrapper.isNumeric(obj)) || !(!isString(obj) || !isDate(DateWrapper.fromISOString(obj)));
        }, DatePipe;
      }();
  DatePipe._ALIASES = {
    medium: "yMMMdjms",
    short: "yMdjm",
    fullDate: "yMMMMEEEEd",
    longDate: "yMMMMd",
    mediumDate: "yMMMd",
    shortDate: "yMd",
    mediumTime: "jms",
    shortTime: "jm"
  }, DatePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "date",
      pure: !0
    }]
  }];
  var _INTERPOLATION_REGEXP = /#/g,
      I18nPluralPipe = function() {
        function I18nPluralPipe(_localization) {
          this._localization = _localization;
        }
        return I18nPluralPipe.prototype.transform = function(value, pluralMap) {
          if (isBlank(value))
            return "";
          if (!isStringMap(pluralMap))
            throw new InvalidPipeArgumentException(I18nPluralPipe, pluralMap);
          var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
          return StringWrapper.replaceAll(pluralMap[key], _INTERPOLATION_REGEXP, value.toString());
        }, I18nPluralPipe;
      }();
  I18nPluralPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "i18nPlural",
      pure: !0
    }]
  }], I18nPluralPipe.ctorParameters = [{type: NgLocalization}];
  var I18nSelectPipe = function() {
    function I18nSelectPipe() {}
    return I18nSelectPipe.prototype.transform = function(value, mapping) {
      if (isBlank(value))
        return "";
      if (!isStringMap(mapping))
        throw new InvalidPipeArgumentException(I18nSelectPipe, mapping);
      return mapping.hasOwnProperty(value) ? mapping[value] : "";
    }, I18nSelectPipe;
  }();
  I18nSelectPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "i18nSelect",
      pure: !0
    }]
  }];
  var JsonPipe = function() {
    function JsonPipe() {}
    return JsonPipe.prototype.transform = function(value) {
      return Json.stringify(value);
    }, JsonPipe;
  }();
  JsonPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "json",
      pure: !1
    }]
  }];
  var LowerCasePipe = function() {
    function LowerCasePipe() {}
    return LowerCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (!isString(value))
        throw new InvalidPipeArgumentException(LowerCasePipe, value);
      return value.toLowerCase();
    }, LowerCasePipe;
  }();
  LowerCasePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "lowercase"}]
  }];
  var defaultLocale$1 = "en-US",
      _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/,
      DecimalPipe = function() {
        function DecimalPipe() {}
        return DecimalPipe.prototype.transform = function(value, digits) {
          return void 0 === digits && (digits = null), formatNumber(DecimalPipe, value, NumberFormatStyle.Decimal, digits);
        }, DecimalPipe;
      }();
  DecimalPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "number"}]
  }];
  var PercentPipe = function() {
    function PercentPipe() {}
    return PercentPipe.prototype.transform = function(value, digits) {
      return void 0 === digits && (digits = null), formatNumber(PercentPipe, value, NumberFormatStyle.Percent, digits);
    }, PercentPipe;
  }();
  PercentPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "percent"}]
  }];
  var CurrencyPipe = function() {
    function CurrencyPipe() {}
    return CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
      return void 0 === currencyCode && (currencyCode = "USD"), void 0 === symbolDisplay && (symbolDisplay = !1), void 0 === digits && (digits = null), formatNumber(CurrencyPipe, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    }, CurrencyPipe;
  }();
  CurrencyPipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "currency"}]
  }];
  var ReplacePipe = function() {
    function ReplacePipe() {}
    return ReplacePipe.prototype.transform = function(value, pattern, replacement) {
      if (isBlank(value))
        return value;
      if (!this._supportedInput(value))
        throw new InvalidPipeArgumentException(ReplacePipe, value);
      var input = value.toString();
      if (!this._supportedPattern(pattern))
        throw new InvalidPipeArgumentException(ReplacePipe, pattern);
      if (!this._supportedReplacement(replacement))
        throw new InvalidPipeArgumentException(ReplacePipe, replacement);
      if (isFunction(replacement)) {
        var rgxPattern = isString(pattern) ? new RegExp(pattern, "g") : pattern;
        return StringWrapper.replaceAllMapped(input, rgxPattern, replacement);
      }
      return pattern instanceof RegExp ? StringWrapper.replaceAll(input, pattern, replacement) : StringWrapper.replace(input, pattern, replacement);
    }, ReplacePipe.prototype._supportedInput = function(input) {
      return isString(input) || isNumber(input);
    }, ReplacePipe.prototype._supportedPattern = function(pattern) {
      return isString(pattern) || pattern instanceof RegExp;
    }, ReplacePipe.prototype._supportedReplacement = function(replacement) {
      return isString(replacement) || isFunction(replacement);
    }, ReplacePipe;
  }();
  ReplacePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "replace"}]
  }];
  var SlicePipe = function() {
    function SlicePipe() {}
    return SlicePipe.prototype.transform = function(value, start, end) {
      if (void 0 === end && (end = null), isBlank(value))
        return value;
      if (!this.supports(value))
        throw new InvalidPipeArgumentException(SlicePipe, value);
      return isString(value) ? StringWrapper.slice(value, start, end) : ListWrapper.slice(value, start, end);
    }, SlicePipe.prototype.supports = function(obj) {
      return isString(obj) || isArray(obj);
    }, SlicePipe;
  }();
  SlicePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{
      name: "slice",
      pure: !1
    }]
  }];
  var UpperCasePipe = function() {
    function UpperCasePipe() {}
    return UpperCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (!isString(value))
        throw new InvalidPipeArgumentException(UpperCasePipe, value);
      return value.toUpperCase();
    }, UpperCasePipe;
  }();
  UpperCasePipe.decorators = [{
    type: _angular_core.Pipe,
    args: [{name: "uppercase"}]
  }];
  var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, ReplacePipe, I18nPluralPipe, I18nSelectPipe],
      NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken("NgValueAccessor"),
      CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function() {
          return CheckboxControlValueAccessor;
        }),
        multi: !0
      },
      CheckboxControlValueAccessor = function() {
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return CheckboxControlValueAccessor.prototype.writeValue = function(value) {
          this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value);
        }, CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = fn;
        }, CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, CheckboxControlValueAccessor;
      }();
  CheckboxControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]",
      host: {
        "(change)": "onChange($event.target.checked)",
        "(blur)": "onTouched()"
      },
      providers: [CHECKBOX_VALUE_ACCESSOR]
    }]
  }], CheckboxControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return DefaultValueAccessor;
    }),
    multi: !0
  },
      DefaultValueAccessor = function() {
        function DefaultValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return DefaultValueAccessor.prototype.writeValue = function(value) {
          var normalizedValue = isBlank(value) ? "" : value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
        }, DefaultValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = fn;
        }, DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, DefaultValueAccessor;
      }();
  DefaultValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
      host: {
        "(input)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [DEFAULT_VALUE_ACCESSOR]
    }]
  }], DefaultValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var NG_VALIDATORS = new _angular_core.OpaqueToken("NgValidators"),
      NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken("NgAsyncValidators"),
      Validators = function() {
        function Validators() {}
        return Validators.required = function(control) {
          return isBlank(control.value) || isString(control.value) && "" == control.value ? {required: !0} : null;
        }, Validators.minLength = function(minLength) {
          return function(control) {
            if (isPresent(Validators.required(control)))
              return null;
            var v = control.value;
            return v.length < minLength ? {minlength: {
                requiredLength: minLength,
                actualLength: v.length
              }} : null;
          };
        }, Validators.maxLength = function(maxLength) {
          return function(control) {
            if (isPresent(Validators.required(control)))
              return null;
            var v = control.value;
            return v.length > maxLength ? {maxlength: {
                requiredLength: maxLength,
                actualLength: v.length
              }} : null;
          };
        }, Validators.pattern = function(pattern) {
          return function(control) {
            if (isPresent(Validators.required(control)))
              return null;
            var regex = new RegExp("^" + pattern + "$"),
                v = control.value;
            return regex.test(v) ? null : {pattern: {
                requiredPattern: "^" + pattern + "$",
                actualValue: v
              }};
          };
        }, Validators.nullValidator = function(c) {
          return null;
        }, Validators.compose = function(validators) {
          if (isBlank(validators))
            return null;
          var presentValidators = validators.filter(isPresent);
          return 0 == presentValidators.length ? null : function(control) {
            return _mergeErrors(_executeValidators(control, presentValidators));
          };
        }, Validators.composeAsync = function(validators) {
          if (isBlank(validators))
            return null;
          var presentValidators = validators.filter(isPresent);
          return 0 == presentValidators.length ? null : function(control) {
            var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
            return Promise.all(promises).then(_mergeErrors);
          };
        }, Validators;
      }(),
      AbstractControlDirective = function() {
        function AbstractControlDirective() {}
        return Object.defineProperty(AbstractControlDirective.prototype, "control", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "value", {
          get: function() {
            return isPresent(this.control) ? this.control.value : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "valid", {
          get: function() {
            return isPresent(this.control) ? this.control.valid : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "errors", {
          get: function() {
            return isPresent(this.control) ? this.control.errors : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
          get: function() {
            return isPresent(this.control) ? this.control.pristine : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
          get: function() {
            return isPresent(this.control) ? this.control.dirty : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "touched", {
          get: function() {
            return isPresent(this.control) ? this.control.touched : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
          get: function() {
            return isPresent(this.control) ? this.control.untouched : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControlDirective.prototype, "path", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), AbstractControlDirective;
      }(),
      ControlContainer = function(_super) {
        function ControlContainer() {
          _super.apply(this, arguments);
        }
        return __extends(ControlContainer, _super), Object.defineProperty(ControlContainer.prototype, "formDirective", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ControlContainer.prototype, "path", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), ControlContainer;
      }(AbstractControlDirective),
      NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function() {
          return NumberValueAccessor;
        }),
        multi: !0
      },
      NumberValueAccessor = function() {
        function NumberValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return NumberValueAccessor.prototype.writeValue = function(value) {
          var normalizedValue = isBlank(value) ? "" : value;
          this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
        }, NumberValueAccessor.prototype.registerOnChange = function(fn) {
          this.onChange = function(value) {
            fn("" == value ? null : NumberWrapper.parseFloat(value));
          };
        }, NumberValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, NumberValueAccessor;
      }();
  NumberValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]",
      host: {
        "(change)": "onChange($event.target.value)",
        "(input)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [NUMBER_VALUE_ACCESSOR]
    }]
  }], NumberValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var NgControl = function(_super) {
    function NgControl() {
      for (var args = [],
          _i = 0; _i < arguments.length; _i++)
        args[_i - 0] = arguments[_i];
      _super.apply(this, args), this.name = null, this.valueAccessor = null;
    }
    return __extends(NgControl, _super), Object.defineProperty(NgControl.prototype, "validator", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControl.prototype, "asyncValidator", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), NgControl;
  }(AbstractControlDirective),
      RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: _angular_core.forwardRef(function() {
          return RadioControlValueAccessor;
        }),
        multi: !0
      },
      RadioControlRegistry = function() {
        function RadioControlRegistry() {
          this._accessors = [];
        }
        return RadioControlRegistry.prototype.add = function(control, accessor) {
          this._accessors.push([control, accessor]);
        }, RadioControlRegistry.prototype.remove = function(accessor) {
          for (var indexToRemove = -1,
              i = 0; i < this._accessors.length; ++i)
            this._accessors[i][1] === accessor && (indexToRemove = i);
          ListWrapper.removeAt(this._accessors, indexToRemove);
        }, RadioControlRegistry.prototype.select = function(accessor) {
          var _this = this;
          this._accessors.forEach(function(c) {
            _this._isSameGroup(c, accessor) && c[1] !== accessor && c[1].fireUncheck();
          });
        }, RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
          return controlPair[0].control.root === accessor._control.control.root && controlPair[1].name === accessor.name;
        }, RadioControlRegistry;
      }();
  RadioControlRegistry.decorators = [{type: _angular_core.Injectable}];
  var RadioButtonState = function() {
    function RadioButtonState(checked, value) {
      this.checked = checked, this.value = value;
    }
    return RadioButtonState;
  }(),
      RadioControlValueAccessor = function() {
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
          this._renderer = _renderer, this._elementRef = _elementRef, this._registry = _registry, this._injector = _injector, this.onChange = function() {}, this.onTouched = function() {};
        }
        return RadioControlValueAccessor.prototype.ngOnInit = function() {
          this._control = this._injector.get(NgControl), this._registry.add(this._control, this);
        }, RadioControlValueAccessor.prototype.ngOnDestroy = function() {
          this._registry.remove(this);
        }, RadioControlValueAccessor.prototype.writeValue = function(value) {
          this._state = value, isPresent(value) && value.checked && this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", !0);
        }, RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this._fn = fn, this.onChange = function() {
            fn(new RadioButtonState((!0), _this._state.value)), _this._registry.select(_this);
          };
        }, RadioControlValueAccessor.prototype.fireUncheck = function() {
          this._fn(new RadioButtonState((!1), this._state.value));
        }, RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, RadioControlValueAccessor;
      }();
  RadioControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]",
      host: {
        "(change)": "onChange()",
        "(blur)": "onTouched()"
      },
      providers: [RADIO_VALUE_ACCESSOR]
    }]
  }], RadioControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}, {type: RadioControlRegistry}, {type: _angular_core.Injector}], RadioControlValueAccessor.propDecorators = {name: [{type: _angular_core.Input}]};
  var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectControlValueAccessor;
    }),
    multi: !0
  },
      SelectControlValueAccessor = function() {
        function SelectControlValueAccessor(_renderer, _elementRef) {
          this._renderer = _renderer, this._elementRef = _elementRef, this._optionMap = new Map, this._idCounter = 0, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return SelectControlValueAccessor.prototype.writeValue = function(value) {
          this.value = value;
          var valueString = _buildValueString(this._getOptionId(value), value);
          this._renderer.setElementProperty(this._elementRef.nativeElement, "value", valueString);
        }, SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this.onChange = function(valueString) {
            _this.value = valueString, fn(_this._getOptionValue(valueString));
          };
        }, SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, SelectControlValueAccessor.prototype._registerOption = function() {
          return (this._idCounter++).toString();
        }, SelectControlValueAccessor.prototype._getOptionId = function(value) {
          for (var _i = 0,
              _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id), value))
              return id;
          }
          return null;
        }, SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
          var value = this._optionMap.get(_extractId(valueString));
          return isPresent(value) ? value : valueString;
        }, SelectControlValueAccessor;
      }();
  SelectControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "select:not([multiple])[ngControl],select:not([multiple])[ngFormControl],select:not([multiple])[ngModel]",
      host: {
        "(change)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [SELECT_VALUE_ACCESSOR]
    }]
  }], SelectControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
  var NgSelectOption = function() {
    function NgSelectOption(_element, _renderer, _select) {
      this._element = _element, this._renderer = _renderer, this._select = _select, isPresent(this._select) && (this.id = this._select._registerOption());
    }
    return Object.defineProperty(NgSelectOption.prototype, "ngValue", {
      set: function(value) {
        null != this._select && (this._select._optionMap.set(this.id, value), this._setElementValue(_buildValueString(this.id, value)), this._select.writeValue(this._select.value));
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgSelectOption.prototype, "value", {
      set: function(value) {
        this._setElementValue(value), isPresent(this._select) && this._select.writeValue(this._select.value);
      },
      enumerable: !0,
      configurable: !0
    }), NgSelectOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, "value", value);
    }, NgSelectOption.prototype.ngOnDestroy = function() {
      isPresent(this._select) && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value));
    }, NgSelectOption;
  }();
  NgSelectOption.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "option"}]
  }], NgSelectOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
    type: SelectControlValueAccessor,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
  }], NgSelectOption.propDecorators = {
    ngValue: [{
      type: _angular_core.Input,
      args: ["ngValue"]
    }],
    value: [{
      type: _angular_core.Input,
      args: ["value"]
    }]
  };
  var SELECT_MULTIPLE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectMultipleControlValueAccessor;
    }),
    multi: !0
  },
      SelectMultipleControlValueAccessor = function() {
        function SelectMultipleControlValueAccessor() {
          this._optionMap = new Map, this._idCounter = 0, this.onChange = function(_) {}, this.onTouched = function() {};
        }
        return SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
          var _this = this;
          if (this.value = value, null != value) {
            var values = value,
                ids = values.map(function(v) {
                  return _this._getOptionId(v);
                });
            this._optionMap.forEach(function(opt, o) {
              opt._setSelected(ids.indexOf(o.toString()) > -1);
            });
          }
        }, SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
          var _this = this;
          this.onChange = function(_) {
            var selected = [];
            if (_.hasOwnProperty("selectedOptions"))
              for (var options = _.selectedOptions,
                  i = 0; i < options.length; i++) {
                var opt = options.item(i),
                    val = _this._getOptionValue(opt.value);
                selected.push(val);
              }
            else
              for (var options = _.options,
                  i = 0; i < options.length; i++) {
                var opt = options.item(i);
                if (opt.selected) {
                  var val = _this._getOptionValue(opt.value);
                  selected.push(val);
                }
              }
            fn(selected);
          };
        }, SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
          this.onTouched = fn;
        }, SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
          var id = (this._idCounter++).toString();
          return this._optionMap.set(id, value), id;
        }, SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
          for (var _i = 0,
              _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical(this._optionMap.get(id)._value, value))
              return id;
          }
          return null;
        }, SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
          var opt = this._optionMap.get(_extractId$1(valueString));
          return isPresent(opt) ? opt._value : valueString;
        }, SelectMultipleControlValueAccessor;
      }();
  SelectMultipleControlValueAccessor.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "select[multiple][ngControl],select[multiple][ngFormControl],select[multiple][ngModel]",
      host: {
        "(change)": "onChange($event.target)",
        "(blur)": "onTouched()"
      },
      providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
    }]
  }], SelectMultipleControlValueAccessor.ctorParameters = [];
  var NgSelectMultipleOption = function() {
    function NgSelectMultipleOption(_element, _renderer, _select) {
      this._element = _element, this._renderer = _renderer, this._select = _select, isPresent(this._select) && (this.id = this._select._registerOption(this));
    }
    return Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
      set: function(value) {
        null != this._select && (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value));
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
      set: function(value) {
        isPresent(this._select) ? (this._value = value, this._setElementValue(_buildValueString$1(this.id, value)), this._select.writeValue(this._select.value)) : this._setElementValue(value);
      },
      enumerable: !0,
      configurable: !0
    }), NgSelectMultipleOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, "value", value);
    }, NgSelectMultipleOption.prototype._setSelected = function(selected) {
      this._renderer.setElementProperty(this._element.nativeElement, "selected", selected);
    }, NgSelectMultipleOption.prototype.ngOnDestroy = function() {
      isPresent(this._select) && (this._select._optionMap.delete(this.id), this._select.writeValue(this._select.value));
    }, NgSelectMultipleOption;
  }();
  NgSelectMultipleOption.decorators = [{
    type: _angular_core.Directive,
    args: [{selector: "option"}]
  }], NgSelectMultipleOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
    type: SelectMultipleControlValueAccessor,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
  }], NgSelectMultipleOption.propDecorators = {
    ngValue: [{
      type: _angular_core.Input,
      args: ["ngValue"]
    }],
    value: [{
      type: _angular_core.Input,
      args: ["value"]
    }]
  };
  var controlGroupProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgControlGroup;
    })
  },
      NgControlGroup = function(_super) {
        function NgControlGroup(parent, _validators, _asyncValidators) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this._parent = parent;
        }
        return __extends(NgControlGroup, _super), NgControlGroup.prototype.ngOnInit = function() {
          this.formDirective.addControlGroup(this);
        }, NgControlGroup.prototype.ngOnDestroy = function() {
          this.formDirective.removeControlGroup(this);
        }, Object.defineProperty(NgControlGroup.prototype, "control", {
          get: function() {
            return this.formDirective.getControlGroup(this);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "path", {
          get: function() {
            return controlPath(this.name, this._parent);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "formDirective", {
          get: function() {
            return this._parent.formDirective;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), NgControlGroup;
      }(ControlContainer);
  NgControlGroup.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngControlGroup]",
      providers: [controlGroupProvider],
      inputs: ["name: ngControlGroup"],
      exportAs: "ngForm"
    }]
  }], NgControlGroup.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  var EventEmitter$1 = function(_super) {
    function EventEmitter$1(isAsync) {
      void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync;
    }
    return __extends(EventEmitter$1, _super), EventEmitter$1.prototype.emit = function(value) {
      _super.prototype.next.call(this, value);
    }, EventEmitter$1.prototype.next = function(value) {
      _super.prototype.next.call(this, value);
    }, EventEmitter$1.prototype.subscribe = function(generatorOrNext, error, complete) {
      var schedulerFn,
          errorFn = function(err) {
            return null;
          },
          completeFn = function() {
            return null;
          };
      return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function(value) {
        setTimeout(function() {
          return generatorOrNext.next(value);
        });
      } : function(value) {
        generatorOrNext.next(value);
      }, generatorOrNext.error && (errorFn = this.__isAsync ? function(err) {
        setTimeout(function() {
          return generatorOrNext.error(err);
        });
      } : function(err) {
        generatorOrNext.error(err);
      }), generatorOrNext.complete && (completeFn = this.__isAsync ? function() {
        setTimeout(function() {
          return generatorOrNext.complete();
        });
      } : function() {
        generatorOrNext.complete();
      })) : (schedulerFn = this.__isAsync ? function(value) {
        setTimeout(function() {
          return generatorOrNext(value);
        });
      } : function(value) {
        generatorOrNext(value);
      }, error && (errorFn = this.__isAsync ? function(err) {
        setTimeout(function() {
          return error(err);
        });
      } : function(err) {
        error(err);
      }), complete && (completeFn = this.__isAsync ? function() {
        setTimeout(function() {
          return complete();
        });
      } : function() {
        complete();
      })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    }, EventEmitter$1;
  }(rxjs_Subject.Subject),
      controlNameBinding = {
        provide: NgControl,
        useExisting: _angular_core.forwardRef(function() {
          return NgControlName;
        })
      },
      NgControlName = function(_super) {
        function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
          _super.call(this), this._parent = _parent, this._validators = _validators, this._asyncValidators = _asyncValidators, this.update = new EventEmitter$1, this._added = !1, this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        return __extends(NgControlName, _super), NgControlName.prototype.ngOnChanges = function(changes) {
          this._added || (this.formDirective.addControl(this), this._added = !0), isPropertyUpdated(changes, this.viewModel) && (this.viewModel = this.model, this.formDirective.updateModel(this, this.model));
        }, NgControlName.prototype.ngOnDestroy = function() {
          this.formDirective.removeControl(this);
        }, NgControlName.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue, this.update.emit(newValue);
        }, Object.defineProperty(NgControlName.prototype, "path", {
          get: function() {
            return controlPath(this.name, this._parent);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "formDirective", {
          get: function() {
            return this._parent.formDirective;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgControlName.prototype, "control", {
          get: function() {
            return this.formDirective.getControl(this);
          },
          enumerable: !0,
          configurable: !0
        }), NgControlName;
      }(NgControl);
  NgControlName.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngControl]",
      providers: [controlNameBinding],
      inputs: ["name: ngControl", "model: ngModel"],
      outputs: ["update: ngModelChange"],
      exportAs: "ngForm"
    }]
  }], NgControlName.ctorParameters = [{
    type: ControlContainer,
    decorators: [{type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  var NgControlStatus = function() {
    function NgControlStatus(cd) {
      this._cd = cd;
    }
    return Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.untouched;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.touched;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.pristine;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.dirty;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
      get: function() {
        return !!isPresent(this._cd.control) && this._cd.control.valid;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
      get: function() {
        return !!isPresent(this._cd.control) && !this._cd.control.valid;
      },
      enumerable: !0,
      configurable: !0
    }), NgControlStatus;
  }();
  NgControlStatus.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngControl],[ngModel],[ngFormControl]",
      host: {
        "[class.ng-untouched]": "ngClassUntouched",
        "[class.ng-touched]": "ngClassTouched",
        "[class.ng-pristine]": "ngClassPristine",
        "[class.ng-dirty]": "ngClassDirty",
        "[class.ng-valid]": "ngClassValid",
        "[class.ng-invalid]": "ngClassInvalid"
      }
    }]
  }], NgControlStatus.ctorParameters = [{
    type: NgControl,
    decorators: [{type: _angular_core.Self}]
  }];
  var VALID = "VALID",
      INVALID = "INVALID",
      PENDING = "PENDING",
      AbstractControl = function() {
        function AbstractControl(validator, asyncValidator) {
          this.validator = validator, this.asyncValidator = asyncValidator, this._pristine = !0, this._touched = !1;
        }
        return Object.defineProperty(AbstractControl.prototype, "value", {
          get: function() {
            return this._value;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "status", {
          get: function() {
            return this._status;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "valid", {
          get: function() {
            return this._status === VALID;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "errors", {
          get: function() {
            return this._errors;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "pristine", {
          get: function() {
            return this._pristine;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "dirty", {
          get: function() {
            return !this.pristine;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "touched", {
          get: function() {
            return this._touched;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "untouched", {
          get: function() {
            return !this._touched;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "valueChanges", {
          get: function() {
            return this._valueChanges;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "statusChanges", {
          get: function() {
            return this._statusChanges;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AbstractControl.prototype, "pending", {
          get: function() {
            return this._status == PENDING;
          },
          enumerable: !0,
          configurable: !0
        }), AbstractControl.prototype.markAsTouched = function() {
          this._touched = !0;
        }, AbstractControl.prototype.markAsDirty = function(_a) {
          var onlySelf = (void 0 === _a ? {} : _a).onlySelf;
          onlySelf = normalizeBool(onlySelf), this._pristine = !1, isPresent(this._parent) && !onlySelf && this._parent.markAsDirty({onlySelf: onlySelf});
        }, AbstractControl.prototype.markAsPending = function(_a) {
          var onlySelf = (void 0 === _a ? {} : _a).onlySelf;
          onlySelf = normalizeBool(onlySelf), this._status = PENDING, isPresent(this._parent) && !onlySelf && this._parent.markAsPending({onlySelf: onlySelf});
        }, AbstractControl.prototype.setParent = function(parent) {
          this._parent = parent;
        }, AbstractControl.prototype.updateValueAndValidity = function(_a) {
          var _b = void 0 === _a ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent;
          onlySelf = normalizeBool(onlySelf), emitEvent = !isPresent(emitEvent) || emitEvent, this._updateValue(), this._errors = this._runValidator(), this._status = this._calculateStatus(), this._status != VALID && this._status != PENDING || this._runAsyncValidator(emitEvent), emitEvent && (this._valueChanges.emit(this._value), this._statusChanges.emit(this._status)), isPresent(this._parent) && !onlySelf && this._parent.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        }, AbstractControl.prototype._runValidator = function() {
          return isPresent(this.validator) ? this.validator(this) : null;
        }, AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
          var _this = this;
          if (isPresent(this.asyncValidator)) {
            this._status = PENDING, this._cancelExistingSubscription();
            var obs = toObservable(this.asyncValidator(this));
            this._asyncValidationSubscription = obs.subscribe({next: function(res) {
                return _this.setErrors(res, {emitEvent: emitEvent});
              }});
          }
        }, AbstractControl.prototype._cancelExistingSubscription = function() {
          isPresent(this._asyncValidationSubscription) && this._asyncValidationSubscription.unsubscribe();
        }, AbstractControl.prototype.setErrors = function(errors, _a) {
          var emitEvent = (void 0 === _a ? {} : _a).emitEvent;
          emitEvent = !isPresent(emitEvent) || emitEvent, this._errors = errors, this._status = this._calculateStatus(), emitEvent && this._statusChanges.emit(this._status), isPresent(this._parent) && this._parent._updateControlsErrors();
        }, AbstractControl.prototype.find = function(path) {
          return _find(this, path);
        }, AbstractControl.prototype.getError = function(errorCode, path) {
          void 0 === path && (path = null);
          var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.find(path) : this;
          return isPresent(control) && isPresent(control._errors) ? StringMapWrapper.get(control._errors, errorCode) : null;
        }, AbstractControl.prototype.hasError = function(errorCode, path) {
          return void 0 === path && (path = null), isPresent(this.getError(errorCode, path));
        }, Object.defineProperty(AbstractControl.prototype, "root", {
          get: function() {
            for (var x = this; isPresent(x._parent); )
              x = x._parent;
            return x;
          },
          enumerable: !0,
          configurable: !0
        }), AbstractControl.prototype._updateControlsErrors = function() {
          this._status = this._calculateStatus(), isPresent(this._parent) && this._parent._updateControlsErrors();
        }, AbstractControl.prototype._initObservables = function() {
          this._valueChanges = new EventEmitter$1, this._statusChanges = new EventEmitter$1;
        }, AbstractControl.prototype._calculateStatus = function() {
          return isPresent(this._errors) ? INVALID : this._anyControlsHaveStatus(PENDING) ? PENDING : this._anyControlsHaveStatus(INVALID) ? INVALID : VALID;
        }, AbstractControl;
      }(),
      Control = function(_super) {
        function Control(value, validator, asyncValidator) {
          void 0 === value && (value = null), void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this._value = value, this.updateValueAndValidity({
            onlySelf: !0,
            emitEvent: !1
          }), this._initObservables();
        }
        return __extends(Control, _super), Control.prototype.updateValue = function(value, _a) {
          var _b = void 0 === _a ? {} : _a,
              onlySelf = _b.onlySelf,
              emitEvent = _b.emitEvent,
              emitModelToViewChange = _b.emitModelToViewChange;
          emitModelToViewChange = !isPresent(emitModelToViewChange) || emitModelToViewChange, this._value = value, isPresent(this._onChange) && emitModelToViewChange && this._onChange(this._value), this.updateValueAndValidity({
            onlySelf: onlySelf,
            emitEvent: emitEvent
          });
        }, Control.prototype._updateValue = function() {}, Control.prototype._anyControlsHaveStatus = function(status) {
          return !1;
        }, Control.prototype.registerOnChange = function(fn) {
          this._onChange = fn;
        }, Control;
      }(AbstractControl),
      ControlGroup = function(_super) {
        function ControlGroup(controls, optionals, validator, asyncValidator) {
          void 0 === optionals && (optionals = null), void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this.controls = controls, this._optionals = isPresent(optionals) ? optionals : {}, this._initObservables(), this._setParentForControls(), this.updateValueAndValidity({
            onlySelf: !0,
            emitEvent: !1
          });
        }
        return __extends(ControlGroup, _super), ControlGroup.prototype.registerControl = function(name, control) {
          this.controls[name] = control, control.setParent(this);
        }, ControlGroup.prototype.addControl = function(name, control) {
          this.registerControl(name, control), this.updateValueAndValidity();
        }, ControlGroup.prototype.removeControl = function(name) {
          StringMapWrapper.delete(this.controls, name), this.updateValueAndValidity();
        }, ControlGroup.prototype.include = function(controlName) {
          StringMapWrapper.set(this._optionals, controlName, !0), this.updateValueAndValidity();
        }, ControlGroup.prototype.exclude = function(controlName) {
          StringMapWrapper.set(this._optionals, controlName, !1), this.updateValueAndValidity();
        }, ControlGroup.prototype.contains = function(controlName) {
          var c = StringMapWrapper.contains(this.controls, controlName);
          return c && this._included(controlName);
        }, ControlGroup.prototype._setParentForControls = function() {
          var _this = this;
          StringMapWrapper.forEach(this.controls, function(control, name) {
            control.setParent(_this);
          });
        }, ControlGroup.prototype._updateValue = function() {
          this._value = this._reduceValue();
        }, ControlGroup.prototype._anyControlsHaveStatus = function(status) {
          var _this = this,
              res = !1;
          return StringMapWrapper.forEach(this.controls, function(control, name) {
            res = res || _this.contains(name) && control.status == status;
          }), res;
        }, ControlGroup.prototype._reduceValue = function() {
          return this._reduceChildren({}, function(acc, control, name) {
            return acc[name] = control.value, acc;
          });
        }, ControlGroup.prototype._reduceChildren = function(initValue, fn) {
          var _this = this,
              res = initValue;
          return StringMapWrapper.forEach(this.controls, function(control, name) {
            _this._included(name) && (res = fn(res, control, name));
          }), res;
        }, ControlGroup.prototype._included = function(controlName) {
          var isOptional = StringMapWrapper.contains(this._optionals, controlName);
          return !isOptional || StringMapWrapper.get(this._optionals, controlName);
        }, ControlGroup;
      }(AbstractControl),
      ControlArray = function(_super) {
        function ControlArray(controls, validator, asyncValidator) {
          void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), _super.call(this, validator, asyncValidator), this.controls = controls, this._initObservables(), this._setParentForControls(), this.updateValueAndValidity({
            onlySelf: !0,
            emitEvent: !1
          });
        }
        return __extends(ControlArray, _super), ControlArray.prototype.at = function(index) {
          return this.controls[index];
        }, ControlArray.prototype.push = function(control) {
          this.controls.push(control), control.setParent(this), this.updateValueAndValidity();
        }, ControlArray.prototype.insert = function(index, control) {
          ListWrapper.insert(this.controls, index, control), control.setParent(this), this.updateValueAndValidity();
        }, ControlArray.prototype.removeAt = function(index) {
          ListWrapper.removeAt(this.controls, index), this.updateValueAndValidity();
        }, Object.defineProperty(ControlArray.prototype, "length", {
          get: function() {
            return this.controls.length;
          },
          enumerable: !0,
          configurable: !0
        }), ControlArray.prototype._updateValue = function() {
          this._value = this.controls.map(function(control) {
            return control.value;
          });
        }, ControlArray.prototype._anyControlsHaveStatus = function(status) {
          return this.controls.some(function(c) {
            return c.status == status;
          });
        }, ControlArray.prototype._setParentForControls = function() {
          var _this = this;
          this.controls.forEach(function(control) {
            control.setParent(_this);
          });
        }, ControlArray;
      }(AbstractControl),
      formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: _angular_core.forwardRef(function() {
          return NgForm;
        })
      },
      _formWarningDisplayed = !1,
      resolvedPromise = Promise.resolve(null),
      NgForm = function(_super) {
        function NgForm(validators, asyncValidators) {
          _super.call(this), this._submitted = !1, this.ngSubmit = new EventEmitter$1, this._displayWarning(), this.form = new ControlGroup({}, null, composeValidators(validators), composeAsyncValidators(asyncValidators));
        }
        return __extends(NgForm, _super), NgForm.prototype._displayWarning = function() {
          _formWarningDisplayed || (_formWarningDisplayed = !0, console.warn("\n      *It looks like you're using the old forms module. This will be opt-in in the next RC, and\n      will eventually be removed in favor of the new forms module. For more information, see:\n      https://docs.google.com/document/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/preview\n    "));
        }, Object.defineProperty(NgForm.prototype, "submitted", {
          get: function() {
            return this._submitted;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "formDirective", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgForm.prototype, "controls", {
          get: function() {
            return this.form.controls;
          },
          enumerable: !0,
          configurable: !0
        }), NgForm.prototype.addControl = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path),
                ctrl = new Control;
            setUpControl(ctrl, dir), container.registerControl(dir.name, ctrl), ctrl.updateValueAndValidity({emitEvent: !1});
          });
        }, NgForm.prototype.getControl = function(dir) {
          return this.form.find(dir.path);
        }, NgForm.prototype.removeControl = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path);
            isPresent(container) && container.removeControl(dir.name);
          });
        }, NgForm.prototype.addControlGroup = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path),
                group = new ControlGroup({});
            setUpControlGroup(group, dir), container.registerControl(dir.name, group), group.updateValueAndValidity({emitEvent: !1});
          });
        }, NgForm.prototype.removeControlGroup = function(dir) {
          var _this = this;
          resolvedPromise.then(function() {
            var container = _this._findContainer(dir.path);
            isPresent(container) && container.removeControl(dir.name);
          });
        }, NgForm.prototype.getControlGroup = function(dir) {
          return this.form.find(dir.path);
        }, NgForm.prototype.updateModel = function(dir, value) {
          var _this = this;
          resolvedPromise.then(function() {
            var ctrl = _this.form.find(dir.path);
            ctrl.updateValue(value);
          });
        }, NgForm.prototype.onSubmit = function() {
          return this._submitted = !0, this.ngSubmit.emit(null), !1;
        }, NgForm.prototype._findContainer = function(path) {
          return path.pop(), ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
        }, NgForm;
      }(ControlContainer);
  NgForm.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]",
      providers: [formDirectiveProvider],
      host: {"(submit)": "onSubmit()"},
      outputs: ["ngSubmit"],
      exportAs: "ngForm"
    }]
  }], NgForm.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  var formControlBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgFormControl;
    })
  },
      NgFormControl = function(_super) {
        function NgFormControl(_validators, _asyncValidators, valueAccessors) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this.update = new EventEmitter$1, this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        return __extends(NgFormControl, _super), NgFormControl.prototype.ngOnChanges = function(changes) {
          this._isControlChanged(changes) && (setUpControl(this.form, this), this.form.updateValueAndValidity({emitEvent: !1})), isPropertyUpdated(changes, this.viewModel) && (this.form.updateValue(this.model), this.viewModel = this.model);
        }, Object.defineProperty(NgFormControl.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormControl.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormControl.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: !0,
          configurable: !0
        }), NgFormControl.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue, this.update.emit(newValue);
        }, NgFormControl.prototype._isControlChanged = function(changes) {
          return StringMapWrapper.contains(changes, "form");
        }, NgFormControl;
      }(NgControl);
  NgFormControl.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngFormControl]",
      providers: [formControlBinding],
      inputs: ["form: ngFormControl", "model: ngModel"],
      outputs: ["update: ngModelChange"],
      exportAs: "ngForm"
    }]
  }], NgFormControl.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  var formDirectiveProvider$1 = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgFormModel;
    })
  },
      _formModelWarningDisplayed = !1,
      NgFormModel = function(_super) {
        function NgFormModel(_validators, _asyncValidators) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this._submitted = !1, this.form = null, this.directives = [], this.ngSubmit = new EventEmitter$1, this._displayWarning();
        }
        return __extends(NgFormModel, _super), NgFormModel.prototype._displayWarning = function() {
          _formModelWarningDisplayed || (_formModelWarningDisplayed = !0, console.warn("\n      *It looks like you're using the old forms module. This will be opt-in in the next RC, and\n      will eventually be removed in favor of the new forms module. For more information, see:\n      https://docs.google.com/document/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/preview\n    "));
        }, NgFormModel.prototype.ngOnChanges = function(changes) {
          if (this._checkFormPresent(), StringMapWrapper.contains(changes, "form")) {
            var sync = composeValidators(this._validators);
            this.form.validator = Validators.compose([this.form.validator, sync]);
            var async = composeAsyncValidators(this._asyncValidators);
            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]), this.form.updateValueAndValidity({
              onlySelf: !0,
              emitEvent: !1
            });
          }
          this._updateDomValue();
        }, Object.defineProperty(NgFormModel.prototype, "submitted", {
          get: function() {
            return this._submitted;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormModel.prototype, "formDirective", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormModel.prototype, "control", {
          get: function() {
            return this.form;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgFormModel.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), NgFormModel.prototype.addControl = function(dir) {
          var ctrl = this.form.find(dir.path);
          setUpControl(ctrl, dir), ctrl.updateValueAndValidity({emitEvent: !1}), this.directives.push(dir);
        }, NgFormModel.prototype.getControl = function(dir) {
          return this.form.find(dir.path);
        }, NgFormModel.prototype.removeControl = function(dir) {
          ListWrapper.remove(this.directives, dir);
        }, NgFormModel.prototype.addControlGroup = function(dir) {
          var ctrl = this.form.find(dir.path);
          setUpControlGroup(ctrl, dir), ctrl.updateValueAndValidity({emitEvent: !1});
        }, NgFormModel.prototype.removeControlGroup = function(dir) {}, NgFormModel.prototype.getControlGroup = function(dir) {
          return this.form.find(dir.path);
        }, NgFormModel.prototype.updateModel = function(dir, value) {
          var ctrl = this.form.find(dir.path);
          ctrl.updateValue(value);
        }, NgFormModel.prototype.onSubmit = function() {
          return this._submitted = !0, this.ngSubmit.emit(null), !1;
        }, NgFormModel.prototype._updateDomValue = function() {
          var _this = this;
          this.directives.forEach(function(dir) {
            var ctrl = _this.form.find(dir.path);
            dir.valueAccessor.writeValue(ctrl.value);
          });
        }, NgFormModel.prototype._checkFormPresent = function() {
          if (isBlank(this.form))
            throw new BaseException('ngFormModel expects a form. Please pass one in. Example: <form [ngFormModel]="myCoolForm">');
        }, NgFormModel;
      }(ControlContainer);
  NgFormModel.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngFormModel]",
      providers: [formDirectiveProvider$1],
      inputs: ["form: ngFormModel"],
      host: {"(submit)": "onSubmit()"},
      outputs: ["ngSubmit"],
      exportAs: "ngForm"
    }]
  }], NgFormModel.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }];
  var formControlBinding$1 = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgModel;
    })
  },
      NgModel = function(_super) {
        function NgModel(_validators, _asyncValidators, valueAccessors) {
          _super.call(this), this._validators = _validators, this._asyncValidators = _asyncValidators, this._control = new Control, this._added = !1, this.update = new EventEmitter$1, this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        return __extends(NgModel, _super), NgModel.prototype.ngOnChanges = function(changes) {
          this._added || (setUpControl(this._control, this), this._control.updateValueAndValidity({emitEvent: !1}), this._added = !0), isPropertyUpdated(changes, this.viewModel) && (this._control.updateValue(this.model), this.viewModel = this.model);
        }, Object.defineProperty(NgModel.prototype, "control", {
          get: function() {
            return this._control;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgModel.prototype, "path", {
          get: function() {
            return [];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgModel.prototype, "validator", {
          get: function() {
            return composeValidators(this._validators);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgModel.prototype, "asyncValidator", {
          get: function() {
            return composeAsyncValidators(this._asyncValidators);
          },
          enumerable: !0,
          configurable: !0
        }), NgModel.prototype.viewToModelUpdate = function(newValue) {
          this.viewModel = newValue, this.update.emit(newValue);
        }, NgModel;
      }(NgControl);
  NgModel.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[ngModel]:not([ngControl]):not([ngFormControl])",
      providers: [formControlBinding$1],
      inputs: ["model: ngModel"],
      outputs: ["update: ngModelChange"],
      exportAs: "ngForm"
    }]
  }], NgModel.ctorParameters = [{
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: Array,
    decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
      type: _angular_core.Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }];
  var REQUIRED = Validators.required,
      REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useValue: REQUIRED,
        multi: !0
      },
      RequiredValidator = function() {
        function RequiredValidator() {}
        return RequiredValidator;
      }();
  RequiredValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[required][ngControl],[required][ngFormControl],[required][ngModel]",
      providers: [REQUIRED_VALIDATOR]
    }]
  }];
  var MIN_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MinLengthValidator;
    }),
    multi: !0
  },
      MinLengthValidator = function() {
        function MinLengthValidator(minLength) {
          this._validator = Validators.minLength(NumberWrapper.parseInt(minLength, 10));
        }
        return MinLengthValidator.prototype.validate = function(c) {
          return this._validator(c);
        }, MinLengthValidator;
      }();
  MinLengthValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]",
      providers: [MIN_LENGTH_VALIDATOR]
    }]
  }], MinLengthValidator.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["minlength"]
    }]
  }];
  var MAX_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MaxLengthValidator;
    }),
    multi: !0
  },
      MaxLengthValidator = function() {
        function MaxLengthValidator(maxLength) {
          this._validator = Validators.maxLength(NumberWrapper.parseInt(maxLength, 10));
        }
        return MaxLengthValidator.prototype.validate = function(c) {
          return this._validator(c);
        }, MaxLengthValidator;
      }();
  MaxLengthValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]",
      providers: [MAX_LENGTH_VALIDATOR]
    }]
  }], MaxLengthValidator.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["maxlength"]
    }]
  }];
  var PATTERN_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return PatternValidator;
    }),
    multi: !0
  },
      PatternValidator = function() {
        function PatternValidator(pattern) {
          this._validator = Validators.pattern(pattern);
        }
        return PatternValidator.prototype.validate = function(c) {
          return this._validator(c);
        }, PatternValidator;
      }();
  PatternValidator.decorators = [{
    type: _angular_core.Directive,
    args: [{
      selector: "[pattern][ngControl],[pattern][ngFormControl],[pattern][ngModel]",
      providers: [PATTERN_VALIDATOR]
    }]
  }], PatternValidator.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Attribute,
      args: ["pattern"]
    }]
  }];
  var FORM_DIRECTIVES = [NgControlName, NgControlGroup, NgFormControl, NgModel, NgFormModel, NgForm, NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator],
      FormBuilder = function() {
        function FormBuilder() {}
        return FormBuilder.prototype.group = function(controlsConfig, extra) {
          void 0 === extra && (extra = null);
          var controls = this._reduceControls(controlsConfig),
              optionals = isPresent(extra) ? StringMapWrapper.get(extra, "optionals") : null,
              validator = isPresent(extra) ? StringMapWrapper.get(extra, "validator") : null,
              asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, "asyncValidator") : null;
          return new ControlGroup(controls, optionals, validator, asyncValidator);
        }, FormBuilder.prototype.control = function(value, validator, asyncValidator) {
          return void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null), new Control(value, validator, asyncValidator);
        }, FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
          var _this = this;
          void 0 === validator && (validator = null), void 0 === asyncValidator && (asyncValidator = null);
          var controls = controlsConfig.map(function(c) {
            return _this._createControl(c);
          });
          return new ControlArray(controls, validator, asyncValidator);
        }, FormBuilder.prototype._reduceControls = function(controlsConfig) {
          var _this = this,
              controls = {};
          return StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
            controls[controlName] = _this._createControl(controlConfig);
          }), controls;
        }, FormBuilder.prototype._createControl = function(controlConfig) {
          if (controlConfig instanceof Control || controlConfig instanceof ControlGroup || controlConfig instanceof ControlArray)
            return controlConfig;
          if (isArray(controlConfig)) {
            var value = controlConfig[0],
                validator = controlConfig.length > 1 ? controlConfig[1] : null,
                asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
            return this.control(value, validator, asyncValidator);
          }
          return this.control(controlConfig);
        }, FormBuilder;
      }();
  FormBuilder.decorators = [{type: _angular_core.Injectable}];
  var FORM_PROVIDERS = [FormBuilder, RadioControlRegistry],
      DeprecatedFormsModule = function() {
        function DeprecatedFormsModule() {}
        return DeprecatedFormsModule;
      }();
  DeprecatedFormsModule.decorators = [{
    type: _angular_core.NgModule,
    args: [{
      providers: [FORM_PROVIDERS],
      declarations: FORM_DIRECTIVES,
      exports: FORM_DIRECTIVES
    }]
  }];
  var PlatformLocation = function() {
    function PlatformLocation() {}
    return Object.defineProperty(PlatformLocation.prototype, "pathname", {
      get: function() {
        return null;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(PlatformLocation.prototype, "search", {
      get: function() {
        return null;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(PlatformLocation.prototype, "hash", {
      get: function() {
        return null;
      },
      enumerable: !0,
      configurable: !0
    }), PlatformLocation;
  }(),
      LocationStrategy = function() {
        function LocationStrategy() {}
        return LocationStrategy;
      }(),
      APP_BASE_HREF = new _angular_core.OpaqueToken("appBaseHref"),
      Location = function() {
        function Location(platformStrategy) {
          var _this = this;
          this._subject = new _angular_core.EventEmitter, this._platformStrategy = platformStrategy;
          var browserBaseHref = this._platformStrategy.getBaseHref();
          this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref)), this._platformStrategy.onPopState(function(ev) {
            _this._subject.emit({
              url: _this.path(!0),
              pop: !0,
              type: ev.type
            });
          });
        }
        return Location.prototype.path = function(includeHash) {
          return void 0 === includeHash && (includeHash = !1), this.normalize(this._platformStrategy.path(includeHash));
        }, Location.prototype.isCurrentPathEqualTo = function(path, query) {
          return void 0 === query && (query = ""), this.path() == this.normalize(path + Location.normalizeQueryParams(query));
        }, Location.prototype.normalize = function(url) {
          return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
        }, Location.prototype.prepareExternalUrl = function(url) {
          return url.length > 0 && !url.startsWith("/") && (url = "/" + url), this._platformStrategy.prepareExternalUrl(url);
        }, Location.prototype.go = function(path, query) {
          void 0 === query && (query = ""), this._platformStrategy.pushState(null, "", path, query);
        }, Location.prototype.replaceState = function(path, query) {
          void 0 === query && (query = ""), this._platformStrategy.replaceState(null, "", path, query);
        }, Location.prototype.forward = function() {
          this._platformStrategy.forward();
        }, Location.prototype.back = function() {
          this._platformStrategy.back();
        }, Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
          return void 0 === onThrow && (onThrow = null), void 0 === onReturn && (onReturn = null), this._subject.subscribe({
            next: onNext,
            error: onThrow,
            complete: onReturn
          });
        }, Location.normalizeQueryParams = function(params) {
          return params.length > 0 && "?" != params.substring(0, 1) ? "?" + params : params;
        }, Location.joinWithSlash = function(start, end) {
          if (0 == start.length)
            return end;
          if (0 == end.length)
            return start;
          var slashes = 0;
          return start.endsWith("/") && slashes++, end.startsWith("/") && slashes++, 2 == slashes ? start + end.substring(1) : 1 == slashes ? start + end : start + "/" + end;
        }, Location.stripTrailingSlash = function(url) {
          return /\/$/g.test(url) && (url = url.substring(0, url.length - 1)), url;
        }, Location;
      }();
  Location.decorators = [{type: _angular_core.Injectable}], Location.ctorParameters = [{type: LocationStrategy}];
  var HashLocationStrategy = function(_super) {
    function HashLocationStrategy(_platformLocation, _baseHref) {
      _super.call(this), this._platformLocation = _platformLocation, this._baseHref = "", isPresent(_baseHref) && (this._baseHref = _baseHref);
    }
    return __extends(HashLocationStrategy, _super), HashLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn);
    }, HashLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    }, HashLocationStrategy.prototype.path = function(includeHash) {
      void 0 === includeHash && (includeHash = !1);
      var path = this._platformLocation.hash;
      return isPresent(path) || (path = "#"), path.length > 0 ? path.substring(1) : path;
    }, HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      var url = Location.joinWithSlash(this._baseHref, internal);
      return url.length > 0 ? "#" + url : url;
    }, HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.pushState(state, title, url);
    }, HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      0 == url.length && (url = this._platformLocation.pathname), this._platformLocation.replaceState(state, title, url);
    }, HashLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    }, HashLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    }, HashLocationStrategy;
  }(LocationStrategy);
  HashLocationStrategy.decorators = [{type: _angular_core.Injectable}], HashLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
    type: void 0,
    decorators: [{type: _angular_core.Optional}, {
      type: _angular_core.Inject,
      args: [APP_BASE_HREF]
    }]
  }];
  var PathLocationStrategy = function(_super) {
    function PathLocationStrategy(_platformLocation, href) {
      if (_super.call(this), this._platformLocation = _platformLocation, isBlank(href) && (href = this._platformLocation.getBaseHrefFromDOM()), isBlank(href))
        throw new BaseException("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
      this._baseHref = href;
    }
    return __extends(PathLocationStrategy, _super), PathLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn);
    }, PathLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    }, PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      return Location.joinWithSlash(this._baseHref, internal);
    }, PathLocationStrategy.prototype.path = function(includeHash) {
      void 0 === includeHash && (includeHash = !1);
      var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search),
          hash = this._platformLocation.hash;
      return hash && includeHash ? "" + pathname + hash : pathname;
    }, PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.pushState(state, title, externalUrl);
    }, PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.replaceState(state, title, externalUrl);
    }, PathLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    }, PathLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    }, PathLocationStrategy;
  }(LocationStrategy);
  PathLocationStrategy.decorators = [{type: _angular_core.Injectable}], PathLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
    type: void 0,
    decorators: [{type: _angular_core.Optional}, {
      type: _angular_core.Inject,
      args: [APP_BASE_HREF]
    }]
  }];
  var CommonModule = function() {
    function CommonModule() {}
    return CommonModule;
  }();
  CommonModule.decorators = [{
    type: _angular_core.NgModule,
    args: [{
      declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
      exports: [COMMON_DIRECTIVES, COMMON_PIPES]
    }]
  }], exports.CommonModule = CommonModule, exports.NgLocalization = NgLocalization, exports.AsyncPipe = AsyncPipe, exports.COMMON_PIPES = COMMON_PIPES, exports.DatePipe = DatePipe, exports.I18nPluralPipe = I18nPluralPipe, exports.I18nSelectPipe = I18nSelectPipe, exports.JsonPipe = JsonPipe, exports.LowerCasePipe = LowerCasePipe, exports.CurrencyPipe = CurrencyPipe, exports.DecimalPipe = DecimalPipe, exports.PercentPipe = PercentPipe, exports.ReplacePipe = ReplacePipe, exports.SlicePipe = SlicePipe, exports.UpperCasePipe = UpperCasePipe, exports.CORE_DIRECTIVES = CORE_DIRECTIVES, exports.NgClass = NgClass, exports.NgFor = NgFor, exports.NgIf = NgIf, exports.NgPlural = NgPlural, exports.NgPluralCase = NgPluralCase, exports.NgStyle = NgStyle, exports.NgSwitch = NgSwitch, exports.NgSwitchCase = NgSwitchCase, exports.NgSwitchDefault = NgSwitchDefault, exports.NgTemplateOutlet = NgTemplateOutlet, exports.FORM_PROVIDERS = FORM_PROVIDERS, exports.DeprecatedFormsModule = DeprecatedFormsModule, exports.FORM_DIRECTIVES = FORM_DIRECTIVES, exports.RadioButtonState = RadioButtonState, exports.AbstractControlDirective = AbstractControlDirective, exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor, exports.ControlContainer = ControlContainer, exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR, exports.DefaultValueAccessor = DefaultValueAccessor, exports.NgControl = NgControl, exports.NgControlGroup = NgControlGroup, exports.NgControlName = NgControlName, exports.NgControlStatus = NgControlStatus, exports.NgForm = NgForm, exports.NgFormControl = NgFormControl, exports.NgFormModel = NgFormModel, exports.NgModel = NgModel, exports.NgSelectOption = NgSelectOption, exports.SelectControlValueAccessor = SelectControlValueAccessor, exports.MaxLengthValidator = MaxLengthValidator, exports.MinLengthValidator = MinLengthValidator, exports.PatternValidator = PatternValidator, exports.RequiredValidator = RequiredValidator, exports.FormBuilder = FormBuilder, exports.AbstractControl = AbstractControl, exports.Control = Control, exports.ControlArray = ControlArray, exports.ControlGroup = ControlGroup, exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS, exports.NG_VALIDATORS = NG_VALIDATORS, exports.Validators = Validators, exports.COMMON_DIRECTIVES = COMMON_DIRECTIVES, exports.PlatformLocation = PlatformLocation, exports.LocationStrategy = LocationStrategy, exports.APP_BASE_HREF = APP_BASE_HREF, exports.HashLocationStrategy = HashLocationStrategy, exports.PathLocationStrategy = PathLocationStrategy, exports.Location = Location;
});

})();
(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("@angular/common"), require("@angular/core"), require("rxjs/Subject"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define("5", ["exports", "11", "3", "12", "10"], factory) : factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core, global.Rx, global.Rx);
}(this, function(exports, _angular_common, _angular_core, rxjs_Subject, rxjs_Observable) {
  "use strict";
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isNumber(obj) {
    return "number" == typeof obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isFunction(obj) {
    return "function" == typeof obj;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.overriddenName)
      return token.overriddenName;
    if (token.name)
      return token.name;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function serializeEnum(val) {
    return val;
  }
  function print(obj) {
    console.log(obj);
  }
  function setValueOnPath(global, path, value) {
    for (var parts = path.split("."),
        obj = global; parts.length > 1; ) {
      var name = parts.shift();
      obj = obj.hasOwnProperty(name) && isPresent(obj[name]) ? obj[name] : obj[name] = {};
    }
    void 0 !== obj && null !== obj || (obj = {}), obj[parts.shift()] = value;
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function camelCaseToDashCase(input) {
    return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return "-" + m[1].toLowerCase();
    });
  }
  function dashCaseToCamelCase(input) {
    return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
      return m[1].toUpperCase();
    });
  }
  function getDOM() {
    return _DOM;
  }
  function setRootDomAdapter(adapter) {
    isBlank(_DOM) && (_DOM = adapter);
  }
  function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
  }
  function _populateStyles(element, styles, defaultStyles) {
    var data = {};
    return styles.styles.forEach(function(entry) {
      StringMapWrapper.forEach(entry, function(val, prop) {
        var formattedProp = dashCaseToCamelCase(prop);
        data[formattedProp] = val == _angular_core.AUTO_STYLE ? val : val.toString() + _resolveStyleUnit(val, prop, formattedProp);
      });
    }), StringMapWrapper.forEach(defaultStyles, function(value, prop) {
      isPresent(data[prop]) || (data[prop] = value);
    }), data;
  }
  function _resolveStyleUnit(val, userProvidedProp, formattedProp) {
    var unit = "";
    if (_isPixelDimensionStyle(formattedProp) && 0 != val && "0" != val)
      if (isNumber(val))
        unit = "px";
      else if (0 == _findDimensionalSuffix(val.toString()).length)
        throw new _angular_core.BaseException("Please provide a CSS unit value for " + userProvidedProp + ":" + val);
    return unit;
  }
  function _findDimensionalSuffix(value) {
    for (var i = 0; i < value.length; i++) {
      var c = StringWrapper.charCodeAt(value, i);
      if (!(c >= _$0 && c <= _$9 || c == _$PERIOD))
        return value.substring(i, value.length);
    }
    return "";
  }
  function _isPixelDimensionStyle(prop) {
    switch (prop) {
      case "width":
      case "height":
      case "minWidth":
      case "minHeight":
      case "maxWidth":
      case "maxHeight":
      case "left":
      case "top":
      case "bottom":
      case "right":
      case "fontSize":
      case "outlineWidth":
      case "outlineOffset":
      case "paddingTop":
      case "paddingLeft":
      case "paddingBottom":
      case "paddingRight":
      case "marginTop":
      case "marginLeft":
      case "marginBottom":
      case "marginRight":
      case "borderRadius":
      case "borderWidth":
      case "borderTopWidth":
      case "borderLeftWidth":
      case "borderRightWidth":
      case "borderBottomWidth":
      case "textIndent":
        return !0;
      default:
        return !1;
    }
  }
  function getBaseElementHref() {
    return isBlank(baseElement) && (baseElement = document.querySelector("base"), isBlank(baseElement)) ? null : baseElement.getAttribute("href");
  }
  function relativePath(url) {
    return isBlank(urlParsingNode) && (urlParsingNode = document.createElement("a")), urlParsingNode.setAttribute("href", url), "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname;
  }
  function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0,
        _a = cookieStr.split(";"); _i < _a.length; _i++) {
      var cookie = _a[_i],
          eqIndex = cookie.indexOf("="),
          _b = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          cookieName = _b[0],
          cookieValue = _b[1];
      if (cookieName.trim() === name)
        return decodeURIComponent(cookieValue);
    }
    return null;
  }
  function supportsState() {
    return !!window.history.pushState;
  }
  function moveNodesAfterSibling(sibling, nodes) {
    var parent = getDOM().parentElement(sibling);
    if (nodes.length > 0 && isPresent(parent)) {
      var nextSibling = getDOM().nextSibling(sibling);
      if (isPresent(nextSibling))
        for (var i = 0; i < nodes.length; i++)
          getDOM().insertBefore(nextSibling, nodes[i]);
      else
        for (var i = 0; i < nodes.length; i++)
          getDOM().appendChild(parent, nodes[i]);
    }
  }
  function appendNodes(parent, nodes) {
    for (var i = 0; i < nodes.length; i++)
      getDOM().appendChild(parent, nodes[i]);
  }
  function decoratePreventDefault(eventHandler) {
    return function(event) {
      var allowDefaultBehavior = eventHandler(event);
      allowDefaultBehavior === !1 && getDOM().preventDefault(event);
    };
  }
  function _shimContentAttribute(componentShortId) {
    return StringWrapper.replaceAll(CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
  }
  function _shimHostAttribute(componentShortId) {
    return StringWrapper.replaceAll(HOST_ATTR, COMPONENT_REGEX, componentShortId);
  }
  function _flattenStyles(compId, styles, target) {
    for (var i = 0; i < styles.length; i++) {
      var style = styles[i];
      isArray(style) ? _flattenStyles(compId, style, target) : (style = StringWrapper.replaceAll(style, COMPONENT_REGEX, compId), target.push(style));
    }
    return target;
  }
  function splitNamespace(name) {
    if (":" != name[0])
      return [null, name];
    var match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
  }
  function inspectNativeElement(element) {
    return _angular_core.getDebugNode(element);
  }
  function _createConditionalRootRenderer(rootRenderer) {
    return _angular_core.isDevMode() ? _createRootRenderer(rootRenderer) : rootRenderer;
  }
  function _createRootRenderer(rootRenderer) {
    return getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement), getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, CORE_TOKENS), new DebugDomRootRenderer(rootRenderer);
  }
  function sanitizeUrl(url) {
    return url = String(url), url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN) ? url : (_angular_core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)"), "unsafe:" + url);
  }
  function sanitizeSrcset(srcset) {
    return srcset = String(srcset), srcset.split(",").map(function(srcset) {
      return sanitizeUrl(srcset.trim());
    }).join(", ");
  }
  function getInertElement() {
    if (inertElement)
      return inertElement;
    DOM = getDOM();
    var templateEl = DOM.createElement("template");
    if ("content" in templateEl)
      return templateEl;
    var doc = DOM.createHtmlDocument();
    if (inertElement = DOM.querySelector(doc, "body"), null == inertElement) {
      var html = DOM.createElement("html", doc);
      inertElement = DOM.createElement("body", doc), DOM.appendChild(html, inertElement), DOM.appendChild(doc, html);
    }
    return inertElement;
  }
  function tagSet(tags) {
    for (var res = {},
        _i = 0,
        _a = tags.split(","); _i < _a.length; _i++) {
      var t = _a[_i];
      res[t] = !0;
    }
    return res;
  }
  function merge() {
    for (var sets = [],
        _i = 0; _i < arguments.length; _i++)
      sets[_i - 0] = arguments[_i];
    for (var res = {},
        _a = 0,
        sets_1 = sets; _a < sets_1.length; _a++) {
      var s = sets_1[_a];
      for (var v in s)
        s.hasOwnProperty(v) && (res[v] = !0);
    }
    return res;
  }
  function encodeEntities(value) {
    return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match) {
      var hi = match.charCodeAt(0),
          low = match.charCodeAt(1);
      return "&#" + (1024 * (hi - 55296) + (low - 56320) + 65536) + ";";
    }).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
      return "&#" + match.charCodeAt(0) + ";";
    }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
  function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function(_, attrName) {
      "xmlns:ns1" !== attrName && 0 !== attrName.indexOf("ns1:") || DOM.removeAttribute(el, attrName);
    });
    for (var _i = 0,
        _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
      var n = _a[_i];
      DOM.isElementNode(n) && stripCustomNsAttrs(n);
    }
  }
  function sanitizeHtml(unsafeHtmlInput) {
    try {
      var containerEl = getInertElement(),
          unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "",
          mXSSAttempts = 5,
          parsedHtml = unsafeHtml;
      do {
        if (0 === mXSSAttempts)
          throw new Error("Failed to sanitize html because the input is unstable");
        mXSSAttempts--, unsafeHtml = parsedHtml, DOM.setInnerHTML(containerEl, unsafeHtml), DOM.defaultDoc().documentMode && stripCustomNsAttrs(containerEl), parsedHtml = DOM.getInnerHTML(containerEl);
      } while (unsafeHtml !== parsedHtml);
      for (var sanitizer = new SanitizingHtmlSerializer,
          safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl),
          parent_1 = DOM.getTemplateContent(containerEl) || containerEl,
          _i = 0,
          _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
        var child = _a[_i];
        DOM.removeChild(parent_1, child);
      }
      return _angular_core.isDevMode() && sanitizer.sanitizedSomething && DOM.log("WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss)."), safeHtml;
    } catch (e) {
      throw inertElement = null, e;
    }
  }
  function hasBalancedQuotes(value) {
    for (var outsideSingle = !0,
        outsideDouble = !0,
        i = 0; i < value.length; i++) {
      var c = value.charAt(i);
      "'" === c && outsideDouble ? outsideSingle = !outsideSingle : '"' === c && outsideSingle && (outsideDouble = !outsideDouble);
    }
    return outsideSingle && outsideDouble;
  }
  function sanitizeStyle(value) {
    if (value = String(value).trim(), !value)
      return "";
    var urlMatch = value.match(URL_RE);
    return urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value) ? value : (_angular_core.isDevMode() && getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss)."), "unsafe");
  }
  function initDomAdapter() {
    BrowserDomAdapter.makeCurrent(), wtfInit(), BrowserGetTestability.init();
  }
  function _exceptionHandler() {
    return new _angular_core.ExceptionHandler(getDOM());
  }
  function _document() {
    return getDOM().defaultDoc();
  }
  function _resolveDefaultAnimationDriver() {
    return getDOM().supportsWebAnimation() ? new WebAnimationsDriver : AnimationDriver.NOOP;
  }
  function enableDebugTools(ref) {
    return context.ng = new AngularTools(ref), ref;
  }
  function disableDebugTools() {
    delete context.ng;
  }
  function deserializeGenericEvent(serializedEvent) {
    return serializedEvent;
  }
  function appInitFnFactory(platformLocation, zone) {
    return function() {
      return zone.runGuarded(function() {
        return platformLocation.init();
      });
    };
  }
  function initUiLocation(injector) {
    return function() {
      var zone = injector.get(_angular_core.NgZone);
      zone.runGuarded(function() {
        return injector.get(MessageBasedPlatformLocation).start();
      });
    };
  }
  function serializeGenericEvent(e) {
    return serializeEvent(e, EVENT_PROPERTIES);
  }
  function serializeEventWithTarget(e) {
    var serializedEvent = serializeEvent(e, EVENT_PROPERTIES);
    return addTarget(e, serializedEvent);
  }
  function serializeMouseEvent(e) {
    return serializeEvent(e, MOUSE_EVENT_PROPERTIES);
  }
  function serializeKeyboardEvent(e) {
    var serializedEvent = serializeEvent(e, KEYBOARD_EVENT_PROPERTIES);
    return addTarget(e, serializedEvent);
  }
  function serializeTransitionEvent(e) {
    var serializedEvent = serializeEvent(e, TRANSITION_EVENT_PROPERTIES);
    return addTarget(e, serializedEvent);
  }
  function addTarget(e, serializedEvent) {
    if (NODES_WITH_VALUE.has(e.target.tagName.toLowerCase())) {
      var target = e.target;
      serializedEvent.target = {value: target.value}, isPresent(target.files) && (serializedEvent.target.files = target.files);
    }
    return serializedEvent;
  }
  function serializeEvent(e, properties) {
    for (var serialized = {},
        i = 0; i < properties.length; i++) {
      var prop = properties[i];
      serialized[prop] = e[prop];
    }
    return serialized;
  }
  function initializeGenericWorkerRenderer(injector) {
    var bus = injector.get(MessageBus),
        zone = injector.get(_angular_core.NgZone);
    bus.attachToZone(zone);
    var services = injector.get(WORKER_UI_STARTABLE_MESSAGING_SERVICE);
    zone.runGuarded(function() {
      services.forEach(function(svc) {
        svc.start();
      });
    });
  }
  function messageBusFactory(instance) {
    return instance.bus;
  }
  function initWebWorkerRenderPlatform(injector) {
    return function() {
      BrowserDomAdapter.makeCurrent(), wtfInit(), BrowserGetTestability.init();
      var scriptUri;
      try {
        scriptUri = injector.get(WORKER_SCRIPT);
      } catch (e) {
        throw new BaseException$1("You must provide your WebWorker's initialization script with the WORKER_SCRIPT token");
      }
      var instance = injector.get(WebWorkerInstance);
      spawnWebWorker(scriptUri, instance), initializeGenericWorkerRenderer(injector);
    };
  }
  function _exceptionHandler$1() {
    return new _angular_core.ExceptionHandler(getDOM());
  }
  function _document$1() {
    return getDOM().defaultDoc();
  }
  function createNgZone() {
    return new _angular_core.NgZone({enableLongStackTrace: _angular_core.isDevMode()});
  }
  function spawnWebWorker(uri, instance) {
    var webWorker = new Worker(uri),
        sink = new PostMessageBusSink(webWorker),
        source = new PostMessageBusSource(webWorker),
        bus = new PostMessageBus(sink, source);
    instance.init(webWorker, bus);
  }
  function _resolveDefaultAnimationDriver$1() {
    return AnimationDriver.NOOP;
  }
  function eventNameWithTarget(target, eventName) {
    return target + ":" + eventName;
  }
  function _exceptionHandler$2() {
    return new _angular_core.ExceptionHandler(new PrintLogger);
  }
  function createMessageBus(zone) {
    var sink = new PostMessageBusSink(_postMessage),
        source = new PostMessageBusSource,
        bus = new PostMessageBus(sink, source);
    return bus.attachToZone(zone), bus;
  }
  function setupWebWorker() {
    WorkerDomAdapter.makeCurrent();
  }
  var wtfInit = _angular_core.__core_private__.wtfInit,
      VIEW_ENCAPSULATION_VALUES = _angular_core.__core_private__.VIEW_ENCAPSULATION_VALUES,
      DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer,
      NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer,
      _NoOpAnimationDriver = function() {
        function _NoOpAnimationDriver() {}
        return _NoOpAnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          return new NoOpAnimationPlayer;
        }, _NoOpAnimationDriver;
      }(),
      AnimationDriver = function() {
        function AnimationDriver() {}
        return AnimationDriver;
      }();
  AnimationDriver.NOOP = new _NoOpAnimationDriver;
  var globalScope;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var global$1 = globalScope,
      Date = global$1.Date;
  global$1.assert = function(condition) {};
  var StringWrapper = function() {
    function StringWrapper() {}
    return StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    }, StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    }, StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    }, StringWrapper.equals = function(s, s2) {
      return s === s2;
    }, StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        for (var pos = 0,
            i = 0; i < s.length && s[i] == charVal; i++)
          pos++;
        s = s.substring(pos);
      }
      return s;
    }, StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        for (var pos = s.length,
            i = s.length - 1; i >= 0 && s[i] == charVal; i--)
          pos--;
        s = s.substring(0, pos);
      }
      return s;
    }, StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.slice = function(s, from, to) {
      return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
    }, StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        for (var matches = [],
            _i = 0; _i < arguments.length; _i++)
          matches[_i - 0] = arguments[_i];
        return matches.splice(-2, 2), cb(matches);
      });
    }, StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    }, StringWrapper.compare = function(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }, StringWrapper;
  }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }(),
      FunctionWrapper = function() {
        function FunctionWrapper() {}
        return FunctionWrapper.apply = function(fn, posArgs) {
          return fn.apply(null, posArgs);
        }, FunctionWrapper.bind = function(fn, scope) {
          return fn.bind(scope);
        }, FunctionWrapper;
      }(),
      Json = function() {
        function Json() {}
        return Json.parse = function(s) {
          return global$1.JSON.parse(s);
        }, Json.stringify = function(data) {
          return global$1.JSON.stringify(data, null, 2);
        }, Json;
      }(),
      DateWrapper = function() {
        function DateWrapper() {}
        return DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
          return void 0 === month && (month = 1), void 0 === day && (day = 1), void 0 === hour && (hour = 0), void 0 === minutes && (minutes = 0), void 0 === seconds && (seconds = 0), void 0 === milliseconds && (milliseconds = 0), new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
        }, DateWrapper.fromISOString = function(str) {
          return new Date(str);
        }, DateWrapper.fromMillis = function(ms) {
          return new Date(ms);
        }, DateWrapper.toMillis = function(date) {
          return date.getTime();
        }, DateWrapper.now = function() {
          return new Date;
        }, DateWrapper.toJson = function(date) {
          return date.toJSON();
        }, DateWrapper;
      }(),
      Map$1 = global$1.Map,
      Set$1 = global$1.Set,
      StringMapWrapper = (function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(), function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(), function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(), function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(), function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).map(function(k) {
            return map[k];
          });
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var _i = 0,
              _a = Object.keys(map); _i < _a.length; _i++) {
            var k = _a[_i];
            callback(map[k], k);
          }
        }, StringMapWrapper.merge = function(m1, m2) {
          for (var m = {},
              _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }()),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      createSetFromList = function() {
        var test = new Set$1([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set$1(lst);
        } : function(lst) {
          var res = new Set$1(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(),
      SetWrapper = function() {
        function SetWrapper() {}
        return SetWrapper.createFromList = function(lst) {
          return createSetFromList(lst);
        }, SetWrapper.has = function(s, key) {
          return s.has(key);
        }, SetWrapper.delete = function(m, k) {
          m.delete(k);
        }, SetWrapper;
      }(),
      CAMEL_CASE_REGEXP = /([A-Z])/g,
      DASH_CASE_REGEXP = /-([a-z])/g,
      _DOM = null,
      DomAdapter = function() {
        function DomAdapter() {
          this.xhrType = null;
        }
        return DomAdapter.prototype.getXHR = function() {
          return this.xhrType;
        }, Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
          get: function() {
            return this._attrToPropMap;
          },
          set: function(value) {
            this._attrToPropMap = value;
          },
          enumerable: !0,
          configurable: !0
        }), DomAdapter;
      }(),
      WebAnimationsPlayer = function() {
        function WebAnimationsPlayer(element, keyframes, options) {
          this.element = element, this.keyframes = keyframes, this.options = options, this._subscriptions = [], this._finished = !1, this._initialized = !1, this._started = !1, this.parentPlayer = null, this._duration = options.duration;
        }
        return WebAnimationsPlayer.prototype._onFinish = function() {
          this._finished || (this._finished = !0, isPresent(this.parentPlayer) || this.destroy(), this._subscriptions.forEach(function(fn) {
            return fn();
          }), this._subscriptions = []);
        }, WebAnimationsPlayer.prototype.init = function() {
          var _this = this;
          if (!this._initialized) {
            this._initialized = !0;
            var keyframes = this.keyframes.map(function(styles) {
              var formattedKeyframe = {};
              return StringMapWrapper.forEach(styles, function(value, prop) {
                formattedKeyframe[prop] = value == _angular_core.AUTO_STYLE ? _computeStyle(_this.element, prop) : value;
              }), formattedKeyframe;
            });
            this._player = this._triggerWebAnimation(this.element, keyframes, this.options), this.reset(), this._player.onfinish = function() {
              return _this._onFinish();
            };
          }
        }, WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
          return element.animate(keyframes, options);
        }, WebAnimationsPlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, WebAnimationsPlayer.prototype.play = function() {
          this.init(), this._player.play();
        }, WebAnimationsPlayer.prototype.pause = function() {
          this.init(), this._player.pause();
        }, WebAnimationsPlayer.prototype.finish = function() {
          this.init(), this._onFinish(), this._player.finish();
        }, WebAnimationsPlayer.prototype.reset = function() {
          this._player.cancel();
        }, WebAnimationsPlayer.prototype.restart = function() {
          this.reset(), this.play();
        }, WebAnimationsPlayer.prototype.hasStarted = function() {
          return this._started;
        }, WebAnimationsPlayer.prototype.destroy = function() {
          this.reset(), this._onFinish();
        }, Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
          get: function() {
            return this._duration;
          },
          enumerable: !0,
          configurable: !0
        }), WebAnimationsPlayer.prototype.setPosition = function(p) {
          this._player.currentTime = p * this.totalTime;
        }, WebAnimationsPlayer.prototype.getPosition = function() {
          return this._player.currentTime / this.totalTime;
        }, WebAnimationsPlayer;
      }(),
      WebAnimationsDriver = function() {
        function WebAnimationsDriver() {}
        return WebAnimationsDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          var formattedSteps = [],
              startingStyleLookup = {};
          if (isPresent(startingStyles) && startingStyles.styles.length > 0 && (startingStyleLookup = _populateStyles(element, startingStyles, {}), startingStyleLookup.offset = 0, formattedSteps.push(startingStyleLookup)), keyframes.forEach(function(keyframe) {
            var data = _populateStyles(element, keyframe.styles, startingStyleLookup);
            data.offset = keyframe.offset, formattedSteps.push(data);
          }), 1 == formattedSteps.length) {
            var start = formattedSteps[0];
            start.offset = null, formattedSteps = [start, start];
          }
          var playerOptions = {
            duration: duration,
            delay: delay,
            fill: "both"
          };
          return easing && (playerOptions.easing = easing), new WebAnimationsPlayer(element, formattedSteps, playerOptions);
        }, WebAnimationsDriver;
      }(),
      _$0 = 48,
      _$9 = 57,
      _$PERIOD = 46,
      GenericBrowserDomAdapter = function(_super) {
        function GenericBrowserDomAdapter() {
          var _this = this;
          _super.call(this), this._animationPrefix = null, this._transitionEnd = null;
          try {
            var element = this.createElement("div", this.defaultDoc());
            if (isPresent(this.getStyle(element, "animationName")))
              this._animationPrefix = "";
            else
              for (var domPrefixes = ["Webkit", "Moz", "O", "ms"],
                  i = 0; i < domPrefixes.length; i++)
                if (isPresent(this.getStyle(element, domPrefixes[i] + "AnimationName"))) {
                  this._animationPrefix = "-" + domPrefixes[i].toLowerCase() + "-";
                  break;
                }
            var transEndEventNames = {
              WebkitTransition: "webkitTransitionEnd",
              MozTransition: "transitionend",
              OTransition: "oTransitionEnd otransitionend",
              transition: "transitionend"
            };
            StringMapWrapper.forEach(transEndEventNames, function(value, key) {
              isPresent(_this.getStyle(element, key)) && (_this._transitionEnd = value);
            });
          } catch (e) {
            this._animationPrefix = null, this._transitionEnd = null;
          }
        }
        return __extends(GenericBrowserDomAdapter, _super), GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
          return el.getDistributedNodes();
        }, GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
          el.href = null == href ? baseUrl : baseUrl + "/../" + href;
        }, GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
          return !0;
        }, GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
          return isFunction(this.defaultDoc().body.createShadowRoot);
        }, GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
          return isPresent(this._animationPrefix) ? this._animationPrefix : "";
        }, GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
          return isPresent(this._transitionEnd) ? this._transitionEnd : "";
        }, GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
          return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
        }, GenericBrowserDomAdapter;
      }(DomAdapter),
      _attrToPropMap = {
        class: "className",
        innerHtml: "innerHTML",
        readonly: "readOnly",
        tabindex: "tabIndex"
      },
      DOM_KEY_LOCATION_NUMPAD = 3,
      _keyMap = {
        "\b": "Backspace",
        "\t": "Tab",
        "": "Delete",
        "": "Escape",
        Del: "Delete",
        Esc: "Escape",
        Left: "ArrowLeft",
        Right: "ArrowRight",
        Up: "ArrowUp",
        Down: "ArrowDown",
        Menu: "ContextMenu",
        Scroll: "ScrollLock",
        Win: "OS"
      },
      _chromeNumKeyPadMap = {
        A: "1",
        B: "2",
        C: "3",
        D: "4",
        E: "5",
        F: "6",
        G: "7",
        H: "8",
        I: "9",
        J: "*",
        K: "+",
        M: "-",
        N: ".",
        O: "/",
        "`": "0",
        "Â": "NumLock"
      },
      BrowserDomAdapter = function(_super) {
        function BrowserDomAdapter() {
          _super.apply(this, arguments);
        }
        return __extends(BrowserDomAdapter, _super), BrowserDomAdapter.prototype.parse = function(templateHtml) {
          throw new Error("parse not implemented");
        }, BrowserDomAdapter.makeCurrent = function() {
          setRootDomAdapter(new BrowserDomAdapter);
        }, BrowserDomAdapter.prototype.hasProperty = function(element, name) {
          return name in element;
        }, BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
          el[name] = value;
        }, BrowserDomAdapter.prototype.getProperty = function(el, name) {
          return el[name];
        }, BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
          el[methodName].apply(el, args);
        }, BrowserDomAdapter.prototype.logError = function(error) {
          window.console.error ? window.console.error(error) : window.console.log(error);
        }, BrowserDomAdapter.prototype.log = function(error) {
          window.console.log(error);
        }, BrowserDomAdapter.prototype.logGroup = function(error) {
          window.console.group ? (window.console.group(error), this.logError(error)) : window.console.log(error);
        }, BrowserDomAdapter.prototype.logGroupEnd = function() {
          window.console.groupEnd && window.console.groupEnd();
        }, Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
          get: function() {
            return _attrToPropMap;
          },
          enumerable: !0,
          configurable: !0
        }), BrowserDomAdapter.prototype.query = function(selector) {
          return document.querySelector(selector);
        }, BrowserDomAdapter.prototype.querySelector = function(el, selector) {
          return el.querySelector(selector);
        }, BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
          return el.querySelectorAll(selector);
        }, BrowserDomAdapter.prototype.on = function(el, evt, listener) {
          el.addEventListener(evt, listener, !1);
        }, BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
          return el.addEventListener(evt, listener, !1), function() {
            el.removeEventListener(evt, listener, !1);
          };
        }, BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
          el.dispatchEvent(evt);
        }, BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
          var evt = document.createEvent("MouseEvent");
          return evt.initEvent(eventType, !0, !0), evt;
        }, BrowserDomAdapter.prototype.createEvent = function(eventType) {
          var evt = document.createEvent("Event");
          return evt.initEvent(eventType, !0, !0), evt;
        }, BrowserDomAdapter.prototype.preventDefault = function(evt) {
          evt.preventDefault(), evt.returnValue = !1;
        }, BrowserDomAdapter.prototype.isPrevented = function(evt) {
          return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
        }, BrowserDomAdapter.prototype.getInnerHTML = function(el) {
          return el.innerHTML;
        }, BrowserDomAdapter.prototype.getTemplateContent = function(el) {
          return "content" in el && el instanceof HTMLTemplateElement ? el.content : null;
        }, BrowserDomAdapter.prototype.getOuterHTML = function(el) {
          return el.outerHTML;
        }, BrowserDomAdapter.prototype.nodeName = function(node) {
          return node.nodeName;
        }, BrowserDomAdapter.prototype.nodeValue = function(node) {
          return node.nodeValue;
        }, BrowserDomAdapter.prototype.type = function(node) {
          return node.type;
        }, BrowserDomAdapter.prototype.content = function(node) {
          return this.hasProperty(node, "content") ? node.content : node;
        }, BrowserDomAdapter.prototype.firstChild = function(el) {
          return el.firstChild;
        }, BrowserDomAdapter.prototype.nextSibling = function(el) {
          return el.nextSibling;
        }, BrowserDomAdapter.prototype.parentElement = function(el) {
          return el.parentNode;
        }, BrowserDomAdapter.prototype.childNodes = function(el) {
          return el.childNodes;
        }, BrowserDomAdapter.prototype.childNodesAsList = function(el) {
          for (var childNodes = el.childNodes,
              res = ListWrapper.createFixedSize(childNodes.length),
              i = 0; i < childNodes.length; i++)
            res[i] = childNodes[i];
          return res;
        }, BrowserDomAdapter.prototype.clearNodes = function(el) {
          for (; el.firstChild; )
            el.removeChild(el.firstChild);
        }, BrowserDomAdapter.prototype.appendChild = function(el, node) {
          el.appendChild(node);
        }, BrowserDomAdapter.prototype.removeChild = function(el, node) {
          el.removeChild(node);
        }, BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
          el.replaceChild(newChild, oldChild);
        }, BrowserDomAdapter.prototype.remove = function(node) {
          return node.parentNode && node.parentNode.removeChild(node), node;
        }, BrowserDomAdapter.prototype.insertBefore = function(el, node) {
          el.parentNode.insertBefore(node, el);
        }, BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
          nodes.forEach(function(n) {
            return el.parentNode.insertBefore(n, el);
          });
        }, BrowserDomAdapter.prototype.insertAfter = function(el, node) {
          el.parentNode.insertBefore(node, el.nextSibling);
        }, BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
          el.innerHTML = value;
        }, BrowserDomAdapter.prototype.getText = function(el) {
          return el.textContent;
        }, BrowserDomAdapter.prototype.setText = function(el, value) {
          el.textContent = value;
        }, BrowserDomAdapter.prototype.getValue = function(el) {
          return el.value;
        }, BrowserDomAdapter.prototype.setValue = function(el, value) {
          el.value = value;
        }, BrowserDomAdapter.prototype.getChecked = function(el) {
          return el.checked;
        }, BrowserDomAdapter.prototype.setChecked = function(el, value) {
          el.checked = value;
        }, BrowserDomAdapter.prototype.createComment = function(text) {
          return document.createComment(text);
        }, BrowserDomAdapter.prototype.createTemplate = function(html) {
          var t = document.createElement("template");
          return t.innerHTML = html, t;
        }, BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
          return void 0 === doc && (doc = document), doc.createElement(tagName);
        }, BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
          return void 0 === doc && (doc = document), doc.createElementNS(ns, tagName);
        }, BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
          return void 0 === doc && (doc = document), doc.createTextNode(text);
        }, BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
          void 0 === doc && (doc = document);
          var el = doc.createElement("SCRIPT");
          return el.setAttribute(attrName, attrValue), el;
        }, BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
          void 0 === doc && (doc = document);
          var style = doc.createElement("style");
          return this.appendChild(style, this.createTextNode(css)), style;
        }, BrowserDomAdapter.prototype.createShadowRoot = function(el) {
          return el.createShadowRoot();
        }, BrowserDomAdapter.prototype.getShadowRoot = function(el) {
          return el.shadowRoot;
        }, BrowserDomAdapter.prototype.getHost = function(el) {
          return el.host;
        }, BrowserDomAdapter.prototype.clone = function(node) {
          return node.cloneNode(!0);
        }, BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
          return element.getElementsByClassName(name);
        }, BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
          return element.getElementsByTagName(name);
        }, BrowserDomAdapter.prototype.classList = function(element) {
          return Array.prototype.slice.call(element.classList, 0);
        }, BrowserDomAdapter.prototype.addClass = function(element, className) {
          element.classList.add(className);
        }, BrowserDomAdapter.prototype.removeClass = function(element, className) {
          element.classList.remove(className);
        }, BrowserDomAdapter.prototype.hasClass = function(element, className) {
          return element.classList.contains(className);
        }, BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
          element.style[styleName] = styleValue;
        }, BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
          element.style[stylename] = null;
        }, BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
          return element.style[stylename];
        }, BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
          void 0 === styleValue && (styleValue = null);
          var value = this.getStyle(element, styleName) || "";
          return styleValue ? value == styleValue : value.length > 0;
        }, BrowserDomAdapter.prototype.tagName = function(element) {
          return element.tagName;
        }, BrowserDomAdapter.prototype.attributeMap = function(element) {
          for (var res = new Map,
              elAttrs = element.attributes,
              i = 0; i < elAttrs.length; i++) {
            var attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
          }
          return res;
        }, BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
          return element.hasAttribute(attribute);
        }, BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
          return element.hasAttributeNS(ns, attribute);
        }, BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
          return element.getAttribute(attribute);
        }, BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
          return element.getAttributeNS(ns, name);
        }, BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
          element.setAttribute(name, value);
        }, BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
          element.setAttributeNS(ns, name, value);
        }, BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
          element.removeAttribute(attribute);
        }, BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
          element.removeAttributeNS(ns, name);
        }, BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
          return this.isTemplateElement(el) ? this.content(el) : el;
        }, BrowserDomAdapter.prototype.createHtmlDocument = function() {
          return document.implementation.createHTMLDocument("fakeTitle");
        }, BrowserDomAdapter.prototype.defaultDoc = function() {
          return document;
        }, BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
          try {
            return el.getBoundingClientRect();
          } catch (e) {
            return {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              width: 0,
              height: 0
            };
          }
        }, BrowserDomAdapter.prototype.getTitle = function() {
          return document.title;
        }, BrowserDomAdapter.prototype.setTitle = function(newTitle) {
          document.title = newTitle || "";
        }, BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
          var matches = !1;
          return n instanceof HTMLElement && (n.matches ? matches = n.matches(selector) : n.msMatchesSelector ? matches = n.msMatchesSelector(selector) : n.webkitMatchesSelector && (matches = n.webkitMatchesSelector(selector))), matches;
        }, BrowserDomAdapter.prototype.isTemplateElement = function(el) {
          return el instanceof HTMLElement && "TEMPLATE" == el.nodeName;
        }, BrowserDomAdapter.prototype.isTextNode = function(node) {
          return node.nodeType === Node.TEXT_NODE;
        }, BrowserDomAdapter.prototype.isCommentNode = function(node) {
          return node.nodeType === Node.COMMENT_NODE;
        }, BrowserDomAdapter.prototype.isElementNode = function(node) {
          return node.nodeType === Node.ELEMENT_NODE;
        }, BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
          return node instanceof HTMLElement && isPresent(node.shadowRoot);
        }, BrowserDomAdapter.prototype.isShadowRoot = function(node) {
          return node instanceof DocumentFragment;
        }, BrowserDomAdapter.prototype.importIntoDoc = function(node) {
          var toImport = node;
          return this.isTemplateElement(node) && (toImport = this.content(node)), document.importNode(toImport, !0);
        }, BrowserDomAdapter.prototype.adoptNode = function(node) {
          return document.adoptNode(node);
        }, BrowserDomAdapter.prototype.getHref = function(el) {
          return el.href;
        }, BrowserDomAdapter.prototype.getEventKey = function(event) {
          var key = event.key;
          if (isBlank(key)) {
            if (key = event.keyIdentifier, isBlank(key))
              return "Unidentified";
            key.startsWith("U+") && (key = String.fromCharCode(parseInt(key.substring(2), 16)), event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key) && (key = _chromeNumKeyPadMap[key]));
          }
          return _keyMap.hasOwnProperty(key) && (key = _keyMap[key]), key;
        }, BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
          return "window" == target ? window : "document" == target ? document : "body" == target ? document.body : void 0;
        }, BrowserDomAdapter.prototype.getHistory = function() {
          return window.history;
        }, BrowserDomAdapter.prototype.getLocation = function() {
          return window.location;
        }, BrowserDomAdapter.prototype.getBaseHref = function() {
          var href = getBaseElementHref();
          return isBlank(href) ? null : relativePath(href);
        }, BrowserDomAdapter.prototype.resetBaseElement = function() {
          baseElement = null;
        }, BrowserDomAdapter.prototype.getUserAgent = function() {
          return window.navigator.userAgent;
        }, BrowserDomAdapter.prototype.setData = function(element, name, value) {
          this.setAttribute(element, "data-" + name, value);
        }, BrowserDomAdapter.prototype.getData = function(element, name) {
          return this.getAttribute(element, "data-" + name);
        }, BrowserDomAdapter.prototype.getComputedStyle = function(element) {
          return getComputedStyle(element);
        }, BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
          setValueOnPath(global$1, path, value);
        }, BrowserDomAdapter.prototype.requestAnimationFrame = function(callback) {
          return window.requestAnimationFrame(callback);
        }, BrowserDomAdapter.prototype.cancelAnimationFrame = function(id) {
          window.cancelAnimationFrame(id);
        }, BrowserDomAdapter.prototype.supportsWebAnimation = function() {
          return isFunction(Element.prototype.animate);
        }, BrowserDomAdapter.prototype.performanceNow = function() {
          return isPresent(window.performance) && isPresent(window.performance.now) ? window.performance.now() : DateWrapper.toMillis(DateWrapper.now());
        }, BrowserDomAdapter.prototype.supportsCookies = function() {
          return !0;
        }, BrowserDomAdapter.prototype.getCookie = function(name) {
          return parseCookieValue(document.cookie, name);
        }, BrowserDomAdapter.prototype.setCookie = function(name, value) {
          document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
        }, BrowserDomAdapter;
      }(GenericBrowserDomAdapter),
      baseElement = null,
      urlParsingNode = null,
      BrowserPlatformLocation = function(_super) {
        function BrowserPlatformLocation() {
          _super.call(this), this._init();
        }
        return __extends(BrowserPlatformLocation, _super), BrowserPlatformLocation.prototype._init = function() {
          this._location = getDOM().getLocation(), this._history = getDOM().getHistory();
        }, Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
          get: function() {
            return this._location;
          },
          enumerable: !0,
          configurable: !0
        }), BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
          return getDOM().getBaseHref();
        }, BrowserPlatformLocation.prototype.onPopState = function(fn) {
          getDOM().getGlobalEventTarget("window").addEventListener("popstate", fn, !1);
        }, BrowserPlatformLocation.prototype.onHashChange = function(fn) {
          getDOM().getGlobalEventTarget("window").addEventListener("hashchange", fn, !1);
        }, Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
          get: function() {
            return this._location.pathname;
          },
          set: function(newPath) {
            this._location.pathname = newPath;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
          get: function() {
            return this._location.search;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
          get: function() {
            return this._location.hash;
          },
          enumerable: !0,
          configurable: !0
        }), BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
          supportsState() ? this._history.pushState(state, title, url) : this._location.hash = url;
        }, BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
          supportsState() ? this._history.replaceState(state, title, url) : this._location.hash = url;
        }, BrowserPlatformLocation.prototype.forward = function() {
          this._history.forward();
        }, BrowserPlatformLocation.prototype.back = function() {
          this._history.back();
        }, BrowserPlatformLocation;
      }(_angular_common.PlatformLocation);
  BrowserPlatformLocation.decorators = [{type: _angular_core.Injectable}], BrowserPlatformLocation.ctorParameters = [];
  var PublicTestability = function() {
    function PublicTestability(testability) {
      this._testability = testability;
    }
    return PublicTestability.prototype.isStable = function() {
      return this._testability.isStable();
    }, PublicTestability.prototype.whenStable = function(callback) {
      this._testability.whenStable(callback);
    }, PublicTestability.prototype.findBindings = function(using, provider, exactMatch) {
      return this.findProviders(using, provider, exactMatch);
    }, PublicTestability.prototype.findProviders = function(using, provider, exactMatch) {
      return this._testability.findBindings(using, provider, exactMatch);
    }, PublicTestability;
  }(),
      BrowserGetTestability = function() {
        function BrowserGetTestability() {}
        return BrowserGetTestability.init = function() {
          _angular_core.setTestabilityGetter(new BrowserGetTestability);
        }, BrowserGetTestability.prototype.addToWindow = function(registry) {
          global$1.getAngularTestability = function(elem, findInAncestors) {
            void 0 === findInAncestors && (findInAncestors = !0);
            var testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (null == testability)
              throw new Error("Could not find testability for element.");
            return new PublicTestability(testability);
          }, global$1.getAllAngularTestabilities = function() {
            var testabilities = registry.getAllTestabilities();
            return testabilities.map(function(testability) {
              return new PublicTestability(testability);
            });
          }, global$1.getAllAngularRootElements = function() {
            return registry.getAllRootElements();
          };
          var whenAllStable = function(callback) {
            var testabilities = global$1.getAllAngularTestabilities(),
                count = testabilities.length,
                didWork = !1,
                decrement = function(didWork_) {
                  didWork = didWork || didWork_, count--, 0 == count && callback(didWork);
                };
            testabilities.forEach(function(testability) {
              testability.whenStable(decrement);
            });
          };
          global$1.frameworkStabilizers || (global$1.frameworkStabilizers = ListWrapper.createGrowableSize(0)), global$1.frameworkStabilizers.push(whenAllStable);
        }, BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
          if (null == elem)
            return null;
          var t = registry.getTestability(elem);
          return isPresent(t) ? t : findInAncestors ? getDOM().isShadowRoot(elem) ? this.findTestabilityInTree(registry, getDOM().getHost(elem), !0) : this.findTestabilityInTree(registry, getDOM().parentElement(elem), !0) : null;
        }, BrowserGetTestability;
      }(),
      BaseException$1 = function(_super) {
        function BaseException$1(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException$1, _super), BaseException$1.prototype.toString = function() {
          return this.message;
        }, BaseException$1;
      }(Error),
      DOCUMENT = new _angular_core.OpaqueToken("DocumentToken"),
      EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken("EventManagerPlugins"),
      EventManager = function() {
        function EventManager(plugins, _zone) {
          var _this = this;
          this._zone = _zone, plugins.forEach(function(p) {
            return p.manager = _this;
          }), this._plugins = ListWrapper.reversed(plugins);
        }
        return EventManager.prototype.addEventListener = function(element, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addEventListener(element, eventName, handler);
        }, EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
          var plugin = this._findPluginFor(eventName);
          return plugin.addGlobalEventListener(target, eventName, handler);
        }, EventManager.prototype.getZone = function() {
          return this._zone;
        }, EventManager.prototype._findPluginFor = function(eventName) {
          for (var plugins = this._plugins,
              i = 0; i < plugins.length; i++) {
            var plugin = plugins[i];
            if (plugin.supports(eventName))
              return plugin;
          }
          throw new BaseException$1("No event manager plugin found for event " + eventName);
        }, EventManager;
      }();
  EventManager.decorators = [{type: _angular_core.Injectable}], EventManager.ctorParameters = [{
    type: Array,
    decorators: [{
      type: _angular_core.Inject,
      args: [EVENT_MANAGER_PLUGINS]
    }]
  }, {type: _angular_core.NgZone}];
  var EventManagerPlugin = function() {
    function EventManagerPlugin() {}
    return EventManagerPlugin.prototype.supports = function(eventName) {
      return !1;
    }, EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {
      throw "not implemented";
    }, EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
      throw "not implemented";
    }, EventManagerPlugin;
  }(),
      SharedStylesHost = function() {
        function SharedStylesHost() {
          this._styles = [], this._stylesSet = new Set;
        }
        return SharedStylesHost.prototype.addStyles = function(styles) {
          var _this = this,
              additions = [];
          styles.forEach(function(style) {
            SetWrapper.has(_this._stylesSet, style) || (_this._stylesSet.add(style), _this._styles.push(style), additions.push(style));
          }), this.onStylesAdded(additions);
        }, SharedStylesHost.prototype.onStylesAdded = function(additions) {}, SharedStylesHost.prototype.getAllStyles = function() {
          return this._styles;
        }, SharedStylesHost;
      }();
  SharedStylesHost.decorators = [{type: _angular_core.Injectable}], SharedStylesHost.ctorParameters = [];
  var DomSharedStylesHost = function(_super) {
    function DomSharedStylesHost(doc) {
      _super.call(this), this._hostNodes = new Set, this._hostNodes.add(doc.head);
    }
    return __extends(DomSharedStylesHost, _super), DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
      for (var i = 0; i < styles.length; i++) {
        var style = styles[i];
        getDOM().appendChild(host, getDOM().createStyleElement(style));
      }
    }, DomSharedStylesHost.prototype.addHost = function(hostNode) {
      this._addStylesToHost(this._styles, hostNode), this._hostNodes.add(hostNode);
    }, DomSharedStylesHost.prototype.removeHost = function(hostNode) {
      SetWrapper.delete(this._hostNodes, hostNode);
    }, DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
      var _this = this;
      this._hostNodes.forEach(function(hostNode) {
        _this._addStylesToHost(additions, hostNode);
      });
    }, DomSharedStylesHost;
  }(SharedStylesHost);
  DomSharedStylesHost.decorators = [{type: _angular_core.Injectable}], DomSharedStylesHost.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Inject,
      args: [DOCUMENT]
    }]
  }];
  var NAMESPACE_URIS = {
    xlink: "http://www.w3.org/1999/xlink",
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml"
  },
      TEMPLATE_COMMENT_TEXT = "template bindings={}",
      TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/,
      DomRootRenderer = function() {
        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver) {
          this.document = document, this.eventManager = eventManager, this.sharedStylesHost = sharedStylesHost, this.animationDriver = animationDriver, this.registeredComponents = new Map;
        }
        return DomRootRenderer.prototype.renderComponent = function(componentProto) {
          var renderer = this.registeredComponents.get(componentProto.id);
          return isBlank(renderer) && (renderer = new DomRenderer(this, componentProto, this.animationDriver), this.registeredComponents.set(componentProto.id, renderer)), renderer;
        }, DomRootRenderer;
      }(),
      DomRootRenderer_ = function(_super) {
        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver) {
          _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver);
        }
        return __extends(DomRootRenderer_, _super), DomRootRenderer_;
      }(DomRootRenderer);
  DomRootRenderer_.decorators = [{type: _angular_core.Injectable}], DomRootRenderer_.ctorParameters = [{
    type: void 0,
    decorators: [{
      type: _angular_core.Inject,
      args: [DOCUMENT]
    }]
  }, {type: EventManager}, {type: DomSharedStylesHost}, {type: AnimationDriver}];
  var DomRenderer = function() {
    function DomRenderer(_rootRenderer, componentProto, _animationDriver) {
      this._rootRenderer = _rootRenderer, this.componentProto = componentProto, this._animationDriver = _animationDriver, this._styles = _flattenStyles(componentProto.id, componentProto.styles, []), componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native && this._rootRenderer.sharedStylesHost.addStyles(this._styles), this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated ? (this._contentAttr = _shimContentAttribute(componentProto.id), this._hostAttr = _shimHostAttribute(componentProto.id)) : (this._contentAttr = null, this._hostAttr = null);
    }
    return DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var el;
      if (isString(selectorOrNode)) {
        if (el = getDOM().querySelector(this._rootRenderer.document, selectorOrNode), isBlank(el))
          throw new BaseException$1('The selector "' + selectorOrNode + '" did not match any elements');
      } else
        el = selectorOrNode;
      return getDOM().clearNodes(el), el;
    }, DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
      var nsAndName = splitNamespace(name),
          el = isPresent(nsAndName[0]) ? getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : getDOM().createElement(nsAndName[1]);
      return isPresent(this._contentAttr) && getDOM().setAttribute(el, this._contentAttr, ""), isPresent(parent) && getDOM().appendChild(parent, el), el;
    }, DomRenderer.prototype.createViewRoot = function(hostElement) {
      var nodesParent;
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
        nodesParent = getDOM().createShadowRoot(hostElement), this._rootRenderer.sharedStylesHost.addHost(nodesParent);
        for (var i = 0; i < this._styles.length; i++)
          getDOM().appendChild(nodesParent, getDOM().createStyleElement(this._styles[i]));
      } else
        isPresent(this._hostAttr) && getDOM().setAttribute(hostElement, this._hostAttr, ""), nodesParent = hostElement;
      return nodesParent;
    }, DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = getDOM().createComment(TEMPLATE_COMMENT_TEXT);
      return isPresent(parentElement) && getDOM().appendChild(parentElement, comment), comment;
    }, DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var node = getDOM().createTextNode(value);
      return isPresent(parentElement) && getDOM().appendChild(parentElement, node), node;
    }, DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      isBlank(parentElement) || appendNodes(parentElement, nodes);
    }, DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      moveNodesAfterSibling(node, viewRootNodes);
    }, DomRenderer.prototype.detachView = function(viewRootNodes) {
      for (var i = 0; i < viewRootNodes.length; i++)
        getDOM().remove(viewRootNodes[i]);
    }, DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && isPresent(hostElement) && this._rootRenderer.sharedStylesHost.removeHost(getDOM().getShadowRoot(hostElement));
    }, DomRenderer.prototype.listen = function(renderElement, name, callback) {
      return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
    }, DomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
    }, DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      getDOM().setProperty(renderElement, propertyName, propertyValue);
    }, DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var attrNs,
          nsAndName = splitNamespace(attributeName);
      isPresent(nsAndName[0]) && (attributeName = nsAndName[0] + ":" + nsAndName[1], attrNs = NAMESPACE_URIS[nsAndName[0]]), isPresent(attributeValue) ? isPresent(attrNs) ? getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue) : getDOM().setAttribute(renderElement, attributeName, attributeValue) : isPresent(attrNs) ? getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]) : getDOM().removeAttribute(renderElement, attributeName);
    }, DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      var dashCasedPropertyName = camelCaseToDashCase(propertyName);
      if (getDOM().isCommentNode(renderElement)) {
        var existingBindings = StringWrapper.replaceAll(getDOM().getText(renderElement), /\n/g, "").match(TEMPLATE_BINDINGS_EXP),
            parsedBindings = Json.parse(existingBindings[1]);
        parsedBindings[dashCasedPropertyName] = propertyValue, getDOM().setText(renderElement, StringWrapper.replace(TEMPLATE_COMMENT_TEXT, "{}", Json.stringify(parsedBindings)));
      } else
        this.setElementAttribute(renderElement, propertyName, propertyValue);
    }, DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      isAdd ? getDOM().addClass(renderElement, className) : getDOM().removeClass(renderElement, className);
    }, DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      isPresent(styleValue) ? getDOM().setStyle(renderElement, styleName, stringify(styleValue)) : getDOM().removeStyle(renderElement, styleName);
    }, DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      getDOM().invoke(renderElement, methodName, args);
    }, DomRenderer.prototype.setText = function(renderNode, text) {
      getDOM().setText(renderNode, text);
    }, DomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
    }, DomRenderer;
  }(),
      COMPONENT_REGEX = /%COMP%/g,
      COMPONENT_VARIABLE = "%COMP%",
      HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE,
      CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE,
      NS_PREFIX_RE = /^:([^:]+):(.+)$/,
      CORE_TOKENS = {
        ApplicationRef: _angular_core.ApplicationRef,
        NgZone: _angular_core.NgZone
      },
      INSPECT_GLOBAL_NAME = "ng.probe",
      CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens",
      ELEMENT_PROBE_PROVIDERS = [{
        provide: _angular_core.RootRenderer,
        useFactory: _createConditionalRootRenderer,
        deps: [DomRootRenderer]
      }],
      DomEventsPlugin = function(_super) {
        function DomEventsPlugin() {
          _super.apply(this, arguments);
        }
        return __extends(DomEventsPlugin, _super), DomEventsPlugin.prototype.supports = function(eventName) {
          return !0;
        }, DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
          var zone = this.manager.getZone(),
              outsideHandler = function(event) {
                return zone.runGuarded(function() {
                  return handler(event);
                });
              };
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, eventName, outsideHandler);
          });
        }, DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler) {
          var element = getDOM().getGlobalEventTarget(target),
              zone = this.manager.getZone(),
              outsideHandler = function(event) {
                return zone.runGuarded(function() {
                  return handler(event);
                });
              };
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, eventName, outsideHandler);
          });
        }, DomEventsPlugin;
      }(EventManagerPlugin);
  DomEventsPlugin.decorators = [{type: _angular_core.Injectable}];
  var _eventNames = {
    pan: !0,
    panstart: !0,
    panmove: !0,
    panend: !0,
    pancancel: !0,
    panleft: !0,
    panright: !0,
    panup: !0,
    pandown: !0,
    pinch: !0,
    pinchstart: !0,
    pinchmove: !0,
    pinchend: !0,
    pinchcancel: !0,
    pinchin: !0,
    pinchout: !0,
    press: !0,
    pressup: !0,
    rotate: !0,
    rotatestart: !0,
    rotatemove: !0,
    rotateend: !0,
    rotatecancel: !0,
    swipe: !0,
    swipeleft: !0,
    swiperight: !0,
    swipeup: !0,
    swipedown: !0,
    tap: !0
  },
      HammerGesturesPluginCommon = function(_super) {
        function HammerGesturesPluginCommon() {
          _super.call(this);
        }
        return __extends(HammerGesturesPluginCommon, _super), HammerGesturesPluginCommon.prototype.supports = function(eventName) {
          return eventName = eventName.toLowerCase(), StringMapWrapper.contains(_eventNames, eventName);
        }, HammerGesturesPluginCommon;
      }(EventManagerPlugin),
      HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken("HammerGestureConfig"),
      HammerGestureConfig = function() {
        function HammerGestureConfig() {
          this.events = [], this.overrides = {};
        }
        return HammerGestureConfig.prototype.buildHammer = function(element) {
          var mc = new Hammer(element);
          mc.get("pinch").set({enable: !0}), mc.get("rotate").set({enable: !0});
          for (var eventName in this.overrides)
            mc.get(eventName).set(this.overrides[eventName]);
          return mc;
        }, HammerGestureConfig;
      }();
  HammerGestureConfig.decorators = [{type: _angular_core.Injectable}];
  var HammerGesturesPlugin = function(_super) {
    function HammerGesturesPlugin(_config) {
      _super.call(this), this._config = _config;
    }
    return __extends(HammerGesturesPlugin, _super), HammerGesturesPlugin.prototype.supports = function(eventName) {
      if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName))
        return !1;
      if (!isPresent(window.Hammer))
        throw new BaseException$1("Hammer.js is not loaded, can not bind " + eventName + " event");
      return !0;
    }, HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var _this = this,
          zone = this.manager.getZone();
      return eventName = eventName.toLowerCase(), zone.runOutsideAngular(function() {
        var mc = _this._config.buildHammer(element),
            callback = function(eventObj) {
              zone.runGuarded(function() {
                handler(eventObj);
              });
            };
        return mc.on(eventName, callback), function() {
          mc.off(eventName, callback);
        };
      });
    }, HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    }, HammerGesturesPlugin;
  }(HammerGesturesPluginCommon);
  HammerGesturesPlugin.decorators = [{type: _angular_core.Injectable}], HammerGesturesPlugin.ctorParameters = [{
    type: HammerGestureConfig,
    decorators: [{
      type: _angular_core.Inject,
      args: [HAMMER_GESTURE_CONFIG]
    }]
  }];
  var modifierKeys = ["alt", "control", "meta", "shift"],
      modifierKeyGetters = {
        alt: function(event) {
          return event.altKey;
        },
        control: function(event) {
          return event.ctrlKey;
        },
        meta: function(event) {
          return event.metaKey;
        },
        shift: function(event) {
          return event.shiftKey;
        }
      },
      KeyEventsPlugin = function(_super) {
        function KeyEventsPlugin() {
          _super.call(this);
        }
        return __extends(KeyEventsPlugin, _super), KeyEventsPlugin.prototype.supports = function(eventName) {
          return isPresent(KeyEventsPlugin.parseEventName(eventName));
        }, KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
          var parsedEvent = KeyEventsPlugin.parseEventName(eventName),
              outsideHandler = KeyEventsPlugin.eventCallback(element, StringMapWrapper.get(parsedEvent, "fullKey"), handler, this.manager.getZone());
          return this.manager.getZone().runOutsideAngular(function() {
            return getDOM().onAndCancel(element, StringMapWrapper.get(parsedEvent, "domEventName"), outsideHandler);
          });
        }, KeyEventsPlugin.parseEventName = function(eventName) {
          var parts = eventName.toLowerCase().split("."),
              domEventName = parts.shift();
          if (0 === parts.length || !StringWrapper.equals(domEventName, "keydown") && !StringWrapper.equals(domEventName, "keyup"))
            return null;
          var key = KeyEventsPlugin._normalizeKey(parts.pop()),
              fullKey = "";
          if (modifierKeys.forEach(function(modifierName) {
            ListWrapper.contains(parts, modifierName) && (ListWrapper.remove(parts, modifierName), fullKey += modifierName + ".");
          }), fullKey += key, 0 != parts.length || 0 === key.length)
            return null;
          var result = StringMapWrapper.create();
          return StringMapWrapper.set(result, "domEventName", domEventName), StringMapWrapper.set(result, "fullKey", fullKey), result;
        }, KeyEventsPlugin.getEventFullKey = function(event) {
          var fullKey = "",
              key = getDOM().getEventKey(event);
          return key = key.toLowerCase(), StringWrapper.equals(key, " ") ? key = "space" : StringWrapper.equals(key, ".") && (key = "dot"), modifierKeys.forEach(function(modifierName) {
            if (modifierName != key) {
              var modifierGetter = StringMapWrapper.get(modifierKeyGetters, modifierName);
              modifierGetter(event) && (fullKey += modifierName + ".");
            }
          }), fullKey += key;
        }, KeyEventsPlugin.eventCallback = function(element, fullKey, handler, zone) {
          return function(event) {
            StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey) && zone.runGuarded(function() {
              return handler(event);
            });
          };
        }, KeyEventsPlugin._normalizeKey = function(keyName) {
          switch (keyName) {
            case "esc":
              return "escape";
            default:
              return keyName;
          }
        }, KeyEventsPlugin;
      }(EventManagerPlugin);
  KeyEventsPlugin.decorators = [{type: _angular_core.Injectable}], KeyEventsPlugin.ctorParameters = [];
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi,
      DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i,
      inertElement = null,
      DOM = null,
      VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr"),
      OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
      OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt"),
      OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS),
      BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),
      INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),
      VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS),
      URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),
      SRCSET_ATTRS = tagSet("srcset"),
      HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),
      VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS),
      SanitizingHtmlSerializer = function() {
        function SanitizingHtmlSerializer() {
          this.sanitizedSomething = !1, this.buf = [];
        }
        return SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
          for (var current = el.firstChild; current; )
            if (DOM.isElementNode(current) ? this.startElement(current) : DOM.isTextNode(current) ? this.chars(DOM.nodeValue(current)) : this.sanitizedSomething = !0, DOM.firstChild(current))
              current = DOM.firstChild(current);
            else
              for (; current; ) {
                if (DOM.isElementNode(current) && this.endElement(current), DOM.nextSibling(current)) {
                  current = DOM.nextSibling(current);
                  break;
                }
                current = DOM.parentElement(current);
              }
          return this.buf.join("");
        }, SanitizingHtmlSerializer.prototype.startElement = function(element) {
          var _this = this,
              tagName = DOM.nodeName(element).toLowerCase();
          return VALID_ELEMENTS.hasOwnProperty(tagName) ? (this.buf.push("<"), this.buf.push(tagName), DOM.attributeMap(element).forEach(function(value, attrName) {
            var lower = attrName.toLowerCase();
            return VALID_ATTRS.hasOwnProperty(lower) ? (URI_ATTRS[lower] && (value = sanitizeUrl(value)), SRCSET_ATTRS[lower] && (value = sanitizeSrcset(value)), _this.buf.push(" "), _this.buf.push(attrName), _this.buf.push('="'), _this.buf.push(encodeEntities(value)), void _this.buf.push('"')) : void(_this.sanitizedSomething = !0);
          }), void this.buf.push(">")) : void(this.sanitizedSomething = !0);
        }, SanitizingHtmlSerializer.prototype.endElement = function(current) {
          var tagName = DOM.nodeName(current).toLowerCase();
          VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName) && (this.buf.push("</"), this.buf.push(tagName), this.buf.push(">"));
        }, SanitizingHtmlSerializer.prototype.chars = function(chars) {
          this.buf.push(encodeEntities(chars));
        }, SanitizingHtmlSerializer;
      }(),
      SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
      NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g,
      VALUES = "[-,.\"'%_!# a-zA-Z0-9]+",
      TRANSFORMATION_FNS = "(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?",
      COLOR_FNS = "(?:rgb|hsl)a?",
      FN_ARGS = "\\([-0-9.%, a-zA-Z]+\\)",
      SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", "g"),
      URL_RE = /^url\(([^)]+)\)$/,
      DomSanitizationService = function() {
        function DomSanitizationService() {}
        return DomSanitizationService;
      }(),
      DomSanitizationServiceImpl = function(_super) {
        function DomSanitizationServiceImpl() {
          _super.apply(this, arguments);
        }
        return __extends(DomSanitizationServiceImpl, _super), DomSanitizationServiceImpl.prototype.sanitize = function(ctx, value) {
          if (null == value)
            return null;
          switch (ctx) {
            case _angular_core.SecurityContext.NONE:
              return value;
            case _angular_core.SecurityContext.HTML:
              return value instanceof SafeHtmlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "HTML"), sanitizeHtml(String(value)));
            case _angular_core.SecurityContext.STYLE:
              return value instanceof SafeStyleImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "Style"), sanitizeStyle(value));
            case _angular_core.SecurityContext.SCRIPT:
              if (value instanceof SafeScriptImpl)
                return value.changingThisBreaksApplicationSecurity;
              throw this.checkNotSafeValue(value, "Script"), new Error("unsafe value used in a script context");
            case _angular_core.SecurityContext.URL:
              return value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl ? value.changingThisBreaksApplicationSecurity : (this.checkNotSafeValue(value, "URL"), sanitizeUrl(String(value)));
            case _angular_core.SecurityContext.RESOURCE_URL:
              if (value instanceof SafeResourceUrlImpl)
                return value.changingThisBreaksApplicationSecurity;
              throw this.checkNotSafeValue(value, "ResourceURL"), new Error("unsafe value used in a resource URL context (see http://g.co/ng/security#xss)");
            default:
              throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
          }
        }, DomSanitizationServiceImpl.prototype.checkNotSafeValue = function(value, expectedType) {
          if (value instanceof SafeValueImpl)
            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " (see http://g.co/ng/security#xss)");
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustHtml = function(value) {
          return new SafeHtmlImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustStyle = function(value) {
          return new SafeStyleImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustScript = function(value) {
          return new SafeScriptImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustUrl = function(value) {
          return new SafeUrlImpl(value);
        }, DomSanitizationServiceImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
          return new SafeResourceUrlImpl(value);
        }, DomSanitizationServiceImpl;
      }(DomSanitizationService);
  DomSanitizationServiceImpl.decorators = [{type: _angular_core.Injectable}];
  var SafeValueImpl = function() {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
      this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    return SafeValueImpl.prototype.toString = function() {
      return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity + " (see http://g.co/ng/security#xss)";
    }, SafeValueImpl;
  }(),
      SafeHtmlImpl = function(_super) {
        function SafeHtmlImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeHtmlImpl, _super), SafeHtmlImpl.prototype.getTypeName = function() {
          return "HTML";
        }, SafeHtmlImpl;
      }(SafeValueImpl),
      SafeStyleImpl = function(_super) {
        function SafeStyleImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeStyleImpl, _super), SafeStyleImpl.prototype.getTypeName = function() {
          return "Style";
        }, SafeStyleImpl;
      }(SafeValueImpl),
      SafeScriptImpl = function(_super) {
        function SafeScriptImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeScriptImpl, _super), SafeScriptImpl.prototype.getTypeName = function() {
          return "Script";
        }, SafeScriptImpl;
      }(SafeValueImpl),
      SafeUrlImpl = function(_super) {
        function SafeUrlImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeUrlImpl, _super), SafeUrlImpl.prototype.getTypeName = function() {
          return "URL";
        }, SafeUrlImpl;
      }(SafeValueImpl),
      SafeResourceUrlImpl = function(_super) {
        function SafeResourceUrlImpl() {
          _super.apply(this, arguments);
        }
        return __extends(SafeResourceUrlImpl, _super), SafeResourceUrlImpl.prototype.getTypeName = function() {
          return "ResourceURL";
        }, SafeResourceUrlImpl;
      }(SafeValueImpl),
      INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
        provide: _angular_core.PLATFORM_INITIALIZER,
        useValue: initDomAdapter,
        multi: !0
      }, {
        provide: _angular_common.PlatformLocation,
        useClass: BrowserPlatformLocation
      }],
      BROWSER_PLATFORM_PROVIDERS = [_angular_core.PLATFORM_COMMON_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS],
      BROWSER_SANITIZATION_PROVIDERS = [{
        provide: _angular_core.SanitizationService,
        useExisting: DomSanitizationService
      }, {
        provide: DomSanitizationService,
        useClass: DomSanitizationServiceImpl
      }],
      BROWSER_APP_PROVIDERS = [],
      platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS),
      browserPlatform = platformBrowser,
      BrowserModule = function() {
        function BrowserModule() {}
        return BrowserModule;
      }();
  BrowserModule.decorators = [{
    type: _angular_core.NgModule,
    args: [{
      providers: [BROWSER_SANITIZATION_PROVIDERS, {
        provide: _angular_core.ExceptionHandler,
        useFactory: _exceptionHandler,
        deps: []
      }, {
        provide: DOCUMENT,
        useFactory: _document,
        deps: []
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: DomEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: KeyEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: !0
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig
      }, {
        provide: DomRootRenderer,
        useClass: DomRootRenderer_
      }, {
        provide: _angular_core.RootRenderer,
        useExisting: DomRootRenderer
      }, {
        provide: SharedStylesHost,
        useExisting: DomSharedStylesHost
      }, {
        provide: AnimationDriver,
        useFactory: _resolveDefaultAnimationDriver
      }, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS],
      exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
    }]
  }];
  var Title = function() {
    function Title() {}
    return Title.prototype.getTitle = function() {
      return getDOM().getTitle();
    }, Title.prototype.setTitle = function(newTitle) {
      getDOM().setTitle(newTitle);
    }, Title;
  }(),
      win = "undefined" != typeof window && window || {},
      ChangeDetectionPerfRecord = function() {
        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
          this.msPerTick = msPerTick, this.numTicks = numTicks;
        }
        return ChangeDetectionPerfRecord;
      }(),
      AngularTools = function() {
        function AngularTools(ref) {
          this.profiler = new AngularProfiler(ref);
        }
        return AngularTools;
      }(),
      AngularProfiler = function() {
        function AngularProfiler(ref) {
          this.appRef = ref.injector.get(_angular_core.ApplicationRef);
        }
        return AngularProfiler.prototype.timeChangeDetection = function(config) {
          var record = isPresent(config) && config.record,
              profileName = "Change Detection",
              isProfilerAvailable = isPresent(win.console.profile);
          record && isProfilerAvailable && win.console.profile(profileName);
          for (var start = getDOM().performanceNow(),
              numTicks = 0; numTicks < 5 || getDOM().performanceNow() - start < 500; )
            this.appRef.tick(), numTicks++;
          var end = getDOM().performanceNow();
          record && isProfilerAvailable && win.console.profileEnd(profileName);
          var msPerTick = (end - start) / numTicks;
          return win.console.log("ran " + numTicks + " change detection cycles"), win.console.log(NumberWrapper.toFixed(msPerTick, 2) + " ms per check"), new ChangeDetectionPerfRecord(msPerTick, numTicks);
        }, AngularProfiler;
      }(),
      context = global$1,
      By = function() {
        function By() {}
        return By.all = function() {
          return function(debugElement) {
            return !0;
          };
        }, By.css = function(selector) {
          return function(debugElement) {
            return !!isPresent(debugElement.nativeElement) && getDOM().elementMatches(debugElement.nativeElement, selector);
          };
        }, By.directive = function(type) {
          return function(debugElement) {
            return debugElement.providerTokens.indexOf(type) !== -1;
          };
        }, By;
      }(),
      MessageBus = function() {
        function MessageBus() {}
        return MessageBus;
      }(),
      RenderStore = function() {
        function RenderStore() {
          this._nextIndex = 0, this._lookupById = new Map, this._lookupByObject = new Map;
        }
        return RenderStore.prototype.allocateId = function() {
          return this._nextIndex++;
        }, RenderStore.prototype.store = function(obj, id) {
          this._lookupById.set(id, obj), this._lookupByObject.set(obj, id);
        }, RenderStore.prototype.remove = function(obj) {
          var index = this._lookupByObject.get(obj);
          this._lookupByObject.delete(obj), this._lookupById.delete(index);
        }, RenderStore.prototype.deserialize = function(id) {
          return null == id ? null : this._lookupById.has(id) ? this._lookupById.get(id) : null;
        }, RenderStore.prototype.serialize = function(obj) {
          return null == obj ? null : this._lookupByObject.get(obj);
        }, RenderStore;
      }();
  RenderStore.decorators = [{type: _angular_core.Injectable}], RenderStore.ctorParameters = [];
  var LocationType = function() {
    function LocationType(href, protocol, host, hostname, port, pathname, search, hash, origin) {
      this.href = href, this.protocol = protocol, this.host = host, this.hostname = hostname, this.port = port, this.pathname = pathname, this.search = search, this.hash = hash, this.origin = origin;
    }
    return LocationType;
  }(),
      PRIMITIVE = String,
      Serializer = function() {
        function Serializer(_renderStore) {
          this._renderStore = _renderStore;
        }
        return Serializer.prototype.serialize = function(obj, type) {
          var _this = this;
          if (!isPresent(obj))
            return null;
          if (isArray(obj))
            return obj.map(function(v) {
              return _this.serialize(v, type);
            });
          if (type == PRIMITIVE)
            return obj;
          if (type == RenderStoreObject)
            return this._renderStore.serialize(obj);
          if (type === _angular_core.RenderComponentType)
            return this._serializeRenderComponentType(obj);
          if (type === _angular_core.ViewEncapsulation)
            return serializeEnum(obj);
          if (type === LocationType)
            return this._serializeLocation(obj);
          throw new BaseException$1("No serializer for " + type.toString());
        }, Serializer.prototype.deserialize = function(map, type, data) {
          var _this = this;
          if (!isPresent(map))
            return null;
          if (isArray(map)) {
            var obj = [];
            return map.forEach(function(val) {
              return obj.push(_this.deserialize(val, type, data));
            }), obj;
          }
          if (type == PRIMITIVE)
            return map;
          if (type == RenderStoreObject)
            return this._renderStore.deserialize(map);
          if (type === _angular_core.RenderComponentType)
            return this._deserializeRenderComponentType(map);
          if (type === _angular_core.ViewEncapsulation)
            return VIEW_ENCAPSULATION_VALUES[map];
          if (type === LocationType)
            return this._deserializeLocation(map);
          throw new BaseException$1("No deserializer for " + type.toString());
        }, Serializer.prototype._serializeLocation = function(loc) {
          return {
            href: loc.href,
            protocol: loc.protocol,
            host: loc.host,
            hostname: loc.hostname,
            port: loc.port,
            pathname: loc.pathname,
            search: loc.search,
            hash: loc.hash,
            origin: loc.origin
          };
        }, Serializer.prototype._deserializeLocation = function(loc) {
          return new LocationType(loc.href, loc.protocol, loc.host, loc.hostname, loc.port, loc.pathname, loc.search, loc.hash, loc.origin);
        }, Serializer.prototype._serializeRenderComponentType = function(obj) {
          return {
            id: obj.id,
            templateUrl: obj.templateUrl,
            slotCount: obj.slotCount,
            encapsulation: this.serialize(obj.encapsulation, _angular_core.ViewEncapsulation),
            styles: this.serialize(obj.styles, PRIMITIVE)
          };
        }, Serializer.prototype._deserializeRenderComponentType = function(map) {
          return new _angular_core.RenderComponentType(map.id, map.templateUrl, map.slotCount, this.deserialize(map.encapsulation, _angular_core.ViewEncapsulation), this.deserialize(map.styles, PRIMITIVE), {});
        }, Serializer;
      }();
  Serializer.decorators = [{type: _angular_core.Injectable}], Serializer.ctorParameters = [{type: RenderStore}];
  var RenderStoreObject = function() {
    function RenderStoreObject() {}
    return RenderStoreObject;
  }(),
      ClientMessageBrokerFactory = function() {
        function ClientMessageBrokerFactory() {}
        return ClientMessageBrokerFactory;
      }(),
      ClientMessageBrokerFactory_ = function(_super) {
        function ClientMessageBrokerFactory_(_messageBus, _serializer) {
          _super.call(this), this._messageBus = _messageBus, this._serializer = _serializer;
        }
        return __extends(ClientMessageBrokerFactory_, _super), ClientMessageBrokerFactory_.prototype.createMessageBroker = function(channel, runInZone) {
          return void 0 === runInZone && (runInZone = !0), this._messageBus.initChannel(channel, runInZone), new ClientMessageBroker_(this._messageBus, this._serializer, channel);
        }, ClientMessageBrokerFactory_;
      }(ClientMessageBrokerFactory);
  ClientMessageBrokerFactory_.decorators = [{type: _angular_core.Injectable}], ClientMessageBrokerFactory_.ctorParameters = [{type: MessageBus}, {type: Serializer}];
  var ClientMessageBroker = function() {
    function ClientMessageBroker() {}
    return ClientMessageBroker;
  }(),
      ClientMessageBroker_ = function(_super) {
        function ClientMessageBroker_(messageBus, _serializer, channel) {
          var _this = this;
          _super.call(this), this.channel = channel, this._pending = new Map, this._sink = messageBus.to(channel), this._serializer = _serializer;
          var source = messageBus.from(channel);
          source.subscribe({next: function(message) {
              return _this._handleMessage(message);
            }});
        }
        return __extends(ClientMessageBroker_, _super), ClientMessageBroker_.prototype._generateMessageId = function(name) {
          for (var time = stringify(DateWrapper.toMillis(DateWrapper.now())),
              iteration = 0,
              id = name + time + stringify(iteration); isPresent(this._pending[id]); )
            id = "" + name + time + iteration, iteration++;
          return id;
        }, ClientMessageBroker_.prototype.runOnService = function(args, returnType) {
          var _this = this,
              fnArgs = [];
          isPresent(args.args) && args.args.forEach(function(argument) {
            null != argument.type ? fnArgs.push(_this._serializer.serialize(argument.value, argument.type)) : fnArgs.push(argument.value);
          });
          var promise,
              id = null;
          if (null != returnType) {
            var completer_1;
            promise = new Promise(function(resolve, reject) {
              completer_1 = {
                resolve: resolve,
                reject: reject
              };
            }), id = this._generateMessageId(args.method), this._pending.set(id, completer_1), promise.catch(function(err) {
              print(err), completer_1.reject(err);
            }), promise = promise.then(function(value) {
              return null == _this._serializer ? value : _this._serializer.deserialize(value, returnType);
            });
          } else
            promise = null;
          var message = {
            method: args.method,
            args: fnArgs
          };
          return null != id && (message.id = id), this._sink.emit(message), promise;
        }, ClientMessageBroker_.prototype._handleMessage = function(message) {
          var data = new MessageData(message);
          if (StringWrapper.equals(data.type, "result") || StringWrapper.equals(data.type, "error")) {
            var id = data.id;
            this._pending.has(id) && (StringWrapper.equals(data.type, "result") ? this._pending.get(id).resolve(data.value) : this._pending.get(id).reject(data.value), this._pending.delete(id));
          }
        }, ClientMessageBroker_;
      }(ClientMessageBroker),
      MessageData = function() {
        function MessageData(data) {
          this.type = StringMapWrapper.get(data, "type"), this.id = this._getValueIfPresent(data, "id"), this.value = this._getValueIfPresent(data, "value");
        }
        return MessageData.prototype._getValueIfPresent = function(data, key) {
          return StringMapWrapper.contains(data, key) ? StringMapWrapper.get(data, key) : null;
        }, MessageData;
      }(),
      FnArg = function() {
        function FnArg(value, type) {
          this.value = value, this.type = type;
        }
        return FnArg;
      }(),
      UiArguments = function() {
        function UiArguments(method, args) {
          this.method = method, this.args = args;
        }
        return UiArguments;
      }(),
      ServiceMessageBrokerFactory = function() {
        function ServiceMessageBrokerFactory() {}
        return ServiceMessageBrokerFactory;
      }(),
      ServiceMessageBrokerFactory_ = function(_super) {
        function ServiceMessageBrokerFactory_(_messageBus, _serializer) {
          _super.call(this), this._messageBus = _messageBus, this._serializer = _serializer;
        }
        return __extends(ServiceMessageBrokerFactory_, _super), ServiceMessageBrokerFactory_.prototype.createMessageBroker = function(channel, runInZone) {
          return void 0 === runInZone && (runInZone = !0), this._messageBus.initChannel(channel, runInZone), new ServiceMessageBroker_(this._messageBus, this._serializer, channel);
        }, ServiceMessageBrokerFactory_;
      }(ServiceMessageBrokerFactory);
  ServiceMessageBrokerFactory_.decorators = [{type: _angular_core.Injectable}], ServiceMessageBrokerFactory_.ctorParameters = [{type: MessageBus}, {type: Serializer}];
  var ServiceMessageBroker = function() {
    function ServiceMessageBroker() {}
    return ServiceMessageBroker;
  }(),
      ServiceMessageBroker_ = function(_super) {
        function ServiceMessageBroker_(messageBus, _serializer, channel) {
          var _this = this;
          _super.call(this), this._serializer = _serializer, this.channel = channel, this._methods = new Map$1, this._sink = messageBus.to(channel);
          var source = messageBus.from(channel);
          source.subscribe({next: function(message) {
              return _this._handleMessage(message);
            }});
        }
        return __extends(ServiceMessageBroker_, _super), ServiceMessageBroker_.prototype.registerMethod = function(methodName, signature, method, returnType) {
          var _this = this;
          this._methods.set(methodName, function(message) {
            for (var serializedArgs = message.args,
                numArgs = null === signature ? 0 : signature.length,
                deserializedArgs = ListWrapper.createFixedSize(numArgs),
                i = 0; i < numArgs; i++) {
              var serializedArg = serializedArgs[i];
              deserializedArgs[i] = _this._serializer.deserialize(serializedArg, signature[i]);
            }
            var promise = FunctionWrapper.apply(method, deserializedArgs);
            isPresent(returnType) && isPresent(promise) && _this._wrapWebWorkerPromise(message.id, promise, returnType);
          });
        }, ServiceMessageBroker_.prototype._handleMessage = function(map) {
          var message = new ReceivedMessage(map);
          this._methods.has(message.method) && this._methods.get(message.method)(message);
        }, ServiceMessageBroker_.prototype._wrapWebWorkerPromise = function(id, promise, type) {
          var _this = this;
          promise.then(function(result) {
            _this._sink.emit({
              type: "result",
              value: _this._serializer.serialize(result, type),
              id: id
            });
          });
        }, ServiceMessageBroker_;
      }(ServiceMessageBroker),
      ReceivedMessage = function() {
        function ReceivedMessage(data) {
          this.method = data.method, this.args = data.args, this.id = data.id, this.type = data.type;
        }
        return ReceivedMessage;
      }(),
      RENDERER_CHANNEL = "ng-Renderer",
      EVENT_CHANNEL = "ng-Events",
      ROUTER_CHANNEL = "ng-Router",
      WebWorkerPlatformLocation = function(_super) {
        function WebWorkerPlatformLocation(brokerFactory, bus, _serializer) {
          var _this = this;
          _super.call(this), this._serializer = _serializer, this._popStateListeners = [], this._hashChangeListeners = [], this._location = null, this._broker = brokerFactory.createMessageBroker(ROUTER_CHANNEL), this._channelSource = bus.from(ROUTER_CHANNEL), this._channelSource.subscribe({next: function(msg) {
              var listeners = null;
              if (StringMapWrapper.contains(msg, "event")) {
                var type = msg.event.type;
                if (StringWrapper.equals(type, "popstate") ? listeners = _this._popStateListeners : StringWrapper.equals(type, "hashchange") && (listeners = _this._hashChangeListeners), null !== listeners) {
                  var e_1 = deserializeGenericEvent(msg.event);
                  _this._location = _this._serializer.deserialize(msg.location, LocationType), listeners.forEach(function(fn) {
                    return fn(e_1);
                  });
                }
              }
            }});
        }
        return __extends(WebWorkerPlatformLocation, _super), WebWorkerPlatformLocation.prototype.init = function() {
          var _this = this,
              args = new UiArguments("getLocation"),
              locationPromise = this._broker.runOnService(args, LocationType);
          return locationPromise.then(function(val) {
            return _this._location = val, !0;
          }, function(err) {
            throw new BaseException$1(err);
          });
        }, WebWorkerPlatformLocation.prototype.getBaseHrefFromDOM = function() {
          throw new BaseException$1("Attempt to get base href from DOM from WebWorker. You must either provide a value for the APP_BASE_HREF token through DI or use the hash location strategy.");
        }, WebWorkerPlatformLocation.prototype.onPopState = function(fn) {
          this._popStateListeners.push(fn);
        }, WebWorkerPlatformLocation.prototype.onHashChange = function(fn) {
          this._hashChangeListeners.push(fn);
        }, Object.defineProperty(WebWorkerPlatformLocation.prototype, "pathname", {
          get: function() {
            return null === this._location ? null : this._location.pathname;
          },
          set: function(newPath) {
            if (null === this._location)
              throw new BaseException$1("Attempt to set pathname before value is obtained from UI");
            this._location.pathname = newPath;
            var fnArgs = [new FnArg(newPath, PRIMITIVE)],
                args = new UiArguments("setPathname", fnArgs);
            this._broker.runOnService(args, null);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WebWorkerPlatformLocation.prototype, "search", {
          get: function() {
            return null === this._location ? null : this._location.search;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WebWorkerPlatformLocation.prototype, "hash", {
          get: function() {
            return null === this._location ? null : this._location.hash;
          },
          enumerable: !0,
          configurable: !0
        }), WebWorkerPlatformLocation.prototype.pushState = function(state, title, url) {
          var fnArgs = [new FnArg(state, PRIMITIVE), new FnArg(title, PRIMITIVE), new FnArg(url, PRIMITIVE)],
              args = new UiArguments("pushState", fnArgs);
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation.prototype.replaceState = function(state, title, url) {
          var fnArgs = [new FnArg(state, PRIMITIVE), new FnArg(title, PRIMITIVE), new FnArg(url, PRIMITIVE)],
              args = new UiArguments("replaceState", fnArgs);
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation.prototype.forward = function() {
          var args = new UiArguments("forward");
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation.prototype.back = function() {
          var args = new UiArguments("back");
          this._broker.runOnService(args, null);
        }, WebWorkerPlatformLocation;
      }(_angular_common.PlatformLocation);
  WebWorkerPlatformLocation.decorators = [{type: _angular_core.Injectable}], WebWorkerPlatformLocation.ctorParameters = [{type: ClientMessageBrokerFactory}, {type: MessageBus}, {type: Serializer}];
  var WORKER_APP_LOCATION_PROVIDERS = [{
    provide: _angular_common.PlatformLocation,
    useClass: WebWorkerPlatformLocation
  }, {
    provide: _angular_core.APP_INITIALIZER,
    useFactory: appInitFnFactory,
    multi: !0,
    deps: [_angular_common.PlatformLocation, _angular_core.NgZone]
  }],
      MessageBasedPlatformLocation = function() {
        function MessageBasedPlatformLocation(_brokerFactory, _platformLocation, bus, _serializer) {
          this._brokerFactory = _brokerFactory, this._platformLocation = _platformLocation, this._serializer = _serializer, this._platformLocation.onPopState(FunctionWrapper.bind(this._sendUrlChangeEvent, this)), this._platformLocation.onHashChange(FunctionWrapper.bind(this._sendUrlChangeEvent, this)), this._broker = this._brokerFactory.createMessageBroker(ROUTER_CHANNEL), this._channelSink = bus.to(ROUTER_CHANNEL);
        }
        return MessageBasedPlatformLocation.prototype.start = function() {
          this._broker.registerMethod("getLocation", null, FunctionWrapper.bind(this._getLocation, this), LocationType), this._broker.registerMethod("setPathname", [PRIMITIVE], FunctionWrapper.bind(this._setPathname, this)), this._broker.registerMethod("pushState", [PRIMITIVE, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._platformLocation.pushState, this._platformLocation)), this._broker.registerMethod("replaceState", [PRIMITIVE, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._platformLocation.replaceState, this._platformLocation)), this._broker.registerMethod("forward", null, FunctionWrapper.bind(this._platformLocation.forward, this._platformLocation)), this._broker.registerMethod("back", null, FunctionWrapper.bind(this._platformLocation.back, this._platformLocation));
        }, MessageBasedPlatformLocation.prototype._getLocation = function() {
          return Promise.resolve(this._platformLocation.location);
        }, MessageBasedPlatformLocation.prototype._sendUrlChangeEvent = function(e) {
          var loc = this._serializer.serialize(this._platformLocation.location, LocationType),
              serializedEvent = {type: e.type};
          this._channelSink.emit({
            event: serializedEvent,
            location: loc
          });
        }, MessageBasedPlatformLocation.prototype._setPathname = function(pathname) {
          this._platformLocation.pathname = pathname;
        }, MessageBasedPlatformLocation;
      }();
  MessageBasedPlatformLocation.decorators = [{type: _angular_core.Injectable}], MessageBasedPlatformLocation.ctorParameters = [{type: ServiceMessageBrokerFactory}, {type: BrowserPlatformLocation}, {type: MessageBus}, {type: Serializer}];
  var WORKER_UI_LOCATION_PROVIDERS = [MessageBasedPlatformLocation, BrowserPlatformLocation, {
    provide: _angular_core.PLATFORM_INITIALIZER,
    useFactory: initUiLocation,
    multi: !0,
    deps: [_angular_core.Injector]
  }],
      ON_WEB_WORKER = new _angular_core.OpaqueToken("WebWorker.onWebWorker"),
      EventEmitter = function(_super) {
        function EventEmitter(isAsync) {
          void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync;
        }
        return __extends(EventEmitter, _super), EventEmitter.prototype.emit = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.next = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
          var schedulerFn,
              errorFn = function(err) {
                return null;
              },
              completeFn = function() {
                return null;
              };
          return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext.next(value);
            });
          } : function(value) {
            generatorOrNext.next(value);
          }, generatorOrNext.error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          }), generatorOrNext.complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          })) : (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext(value);
            });
          } : function(value) {
            generatorOrNext(value);
          }, error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          }), complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        }, EventEmitter;
      }(rxjs_Subject.Subject),
      PostMessageBusSink = function() {
        function PostMessageBusSink(_postMessageTarget) {
          this._postMessageTarget = _postMessageTarget, this._channels = StringMapWrapper.create(), this._messageBuffer = [];
        }
        return PostMessageBusSink.prototype.attachToZone = function(zone) {
          var _this = this;
          this._zone = zone, this._zone.runOutsideAngular(function() {
            _this._zone.onStable.subscribe({next: function() {
                _this._handleOnEventDone();
              }});
          });
        }, PostMessageBusSink.prototype.initChannel = function(channel, runInZone) {
          var _this = this;
          if (void 0 === runInZone && (runInZone = !0), StringMapWrapper.contains(this._channels, channel))
            throw new BaseException$1(channel + " has already been initialized");
          var emitter = new EventEmitter((!1)),
              channelInfo = new _Channel(emitter, runInZone);
          this._channels[channel] = channelInfo, emitter.subscribe(function(data) {
            var message = {
              channel: channel,
              message: data
            };
            runInZone ? _this._messageBuffer.push(message) : _this._sendMessages([message]);
          });
        }, PostMessageBusSink.prototype.to = function(channel) {
          if (StringMapWrapper.contains(this._channels, channel))
            return this._channels[channel].emitter;
          throw new BaseException$1(channel + " is not set up. Did you forget to call initChannel?");
        }, PostMessageBusSink.prototype._handleOnEventDone = function() {
          this._messageBuffer.length > 0 && (this._sendMessages(this._messageBuffer), this._messageBuffer = []);
        }, PostMessageBusSink.prototype._sendMessages = function(messages) {
          this._postMessageTarget.postMessage(messages);
        }, PostMessageBusSink;
      }(),
      PostMessageBusSource = function() {
        function PostMessageBusSource(eventTarget) {
          var _this = this;
          if (this._channels = StringMapWrapper.create(), eventTarget)
            eventTarget.addEventListener("message", function(ev) {
              return _this._handleMessages(ev);
            });
          else {
            var workerScope = self;
            workerScope.addEventListener("message", function(ev) {
              return _this._handleMessages(ev);
            });
          }
        }
        return PostMessageBusSource.prototype.attachToZone = function(zone) {
          this._zone = zone;
        }, PostMessageBusSource.prototype.initChannel = function(channel, runInZone) {
          if (void 0 === runInZone && (runInZone = !0), StringMapWrapper.contains(this._channels, channel))
            throw new BaseException$1(channel + " has already been initialized");
          var emitter = new EventEmitter((!1)),
              channelInfo = new _Channel(emitter, runInZone);
          this._channels[channel] = channelInfo;
        }, PostMessageBusSource.prototype.from = function(channel) {
          if (StringMapWrapper.contains(this._channels, channel))
            return this._channels[channel].emitter;
          throw new BaseException$1(channel + " is not set up. Did you forget to call initChannel?");
        }, PostMessageBusSource.prototype._handleMessages = function(ev) {
          for (var messages = ev.data,
              i = 0; i < messages.length; i++)
            this._handleMessage(messages[i]);
        }, PostMessageBusSource.prototype._handleMessage = function(data) {
          var channel = data.channel;
          if (StringMapWrapper.contains(this._channels, channel)) {
            var channelInfo = this._channels[channel];
            channelInfo.runInZone ? this._zone.run(function() {
              channelInfo.emitter.emit(data.message);
            }) : channelInfo.emitter.emit(data.message);
          }
        }, PostMessageBusSource;
      }(),
      PostMessageBus = function() {
        function PostMessageBus(sink, source) {
          this.sink = sink, this.source = source;
        }
        return PostMessageBus.prototype.attachToZone = function(zone) {
          this.source.attachToZone(zone), this.sink.attachToZone(zone);
        }, PostMessageBus.prototype.initChannel = function(channel, runInZone) {
          void 0 === runInZone && (runInZone = !0), this.source.initChannel(channel, runInZone), this.sink.initChannel(channel, runInZone);
        }, PostMessageBus.prototype.from = function(channel) {
          return this.source.from(channel);
        }, PostMessageBus.prototype.to = function(channel) {
          return this.sink.to(channel);
        }, PostMessageBus;
      }();
  PostMessageBus.decorators = [{type: _angular_core.Injectable}], PostMessageBus.ctorParameters = [{type: PostMessageBusSink}, {type: PostMessageBusSource}];
  var _Channel = function() {
    function _Channel(emitter, runInZone) {
      this.emitter = emitter, this.runInZone = runInZone;
    }
    return _Channel;
  }(),
      MOUSE_EVENT_PROPERTIES = ["altKey", "button", "clientX", "clientY", "metaKey", "movementX", "movementY", "offsetX", "offsetY", "region", "screenX", "screenY", "shiftKey"],
      KEYBOARD_EVENT_PROPERTIES = ["altkey", "charCode", "code", "ctrlKey", "isComposing", "key", "keyCode", "location", "metaKey", "repeat", "shiftKey", "which"],
      TRANSITION_EVENT_PROPERTIES = ["propertyName", "elapsedTime", "pseudoElement"],
      EVENT_PROPERTIES = ["type", "bubbles", "cancelable"],
      NODES_WITH_VALUE = new Set$1(["input", "select", "option", "button", "li", "meter", "progress", "param", "textarea"]),
      EventDispatcher = function() {
        function EventDispatcher(_sink, _serializer) {
          this._sink = _sink, this._serializer = _serializer;
        }
        return EventDispatcher.prototype.dispatchRenderEvent = function(element, eventTarget, eventName, event) {
          var serializedEvent;
          switch (event.type) {
            case "click":
            case "mouseup":
            case "mousedown":
            case "dblclick":
            case "contextmenu":
            case "mouseenter":
            case "mouseleave":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "show":
              serializedEvent = serializeMouseEvent(event);
              break;
            case "keydown":
            case "keypress":
            case "keyup":
              serializedEvent = serializeKeyboardEvent(event);
              break;
            case "input":
            case "change":
            case "blur":
              serializedEvent = serializeEventWithTarget(event);
              break;
            case "abort":
            case "afterprint":
            case "beforeprint":
            case "cached":
            case "canplay":
            case "canplaythrough":
            case "chargingchange":
            case "chargingtimechange":
            case "close":
            case "dischargingtimechange":
            case "DOMContentLoaded":
            case "downloading":
            case "durationchange":
            case "emptied":
            case "ended":
            case "error":
            case "fullscreenchange":
            case "fullscreenerror":
            case "invalid":
            case "languagechange":
            case "levelfchange":
            case "loadeddata":
            case "loadedmetadata":
            case "obsolete":
            case "offline":
            case "online":
            case "open":
            case "orientatoinchange":
            case "pause":
            case "pointerlockchange":
            case "pointerlockerror":
            case "play":
            case "playing":
            case "ratechange":
            case "readystatechange":
            case "reset":
            case "scroll":
            case "seeked":
            case "seeking":
            case "stalled":
            case "submit":
            case "success":
            case "suspend":
            case "timeupdate":
            case "updateready":
            case "visibilitychange":
            case "volumechange":
            case "waiting":
              serializedEvent = serializeGenericEvent(event);
              break;
            case "transitionend":
              serializedEvent = serializeTransitionEvent(event);
              break;
            default:
              throw new BaseException$1(eventName + " not supported on WebWorkers");
          }
          return this._sink.emit({
            element: this._serializer.serialize(element, RenderStoreObject),
            eventName: eventName,
            eventTarget: eventTarget,
            event: serializedEvent
          }), !1;
        }, EventDispatcher;
      }(),
      MessageBasedRenderer = function() {
        function MessageBasedRenderer(_brokerFactory, _bus, _serializer, _renderStore, _rootRenderer) {
          this._brokerFactory = _brokerFactory, this._bus = _bus, this._serializer = _serializer, this._renderStore = _renderStore, this._rootRenderer = _rootRenderer;
        }
        return MessageBasedRenderer.prototype.start = function() {
          var broker = this._brokerFactory.createMessageBroker(RENDERER_CHANNEL);
          this._bus.initChannel(EVENT_CHANNEL), this._eventDispatcher = new EventDispatcher(this._bus.to(EVENT_CHANNEL), this._serializer), broker.registerMethod("renderComponent", [_angular_core.RenderComponentType, PRIMITIVE], FunctionWrapper.bind(this._renderComponent, this)), broker.registerMethod("selectRootElement", [RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._selectRootElement, this)), broker.registerMethod("createElement", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._createElement, this)), broker.registerMethod("createViewRoot", [RenderStoreObject, RenderStoreObject, PRIMITIVE], FunctionWrapper.bind(this._createViewRoot, this)), broker.registerMethod("createTemplateAnchor", [RenderStoreObject, RenderStoreObject, PRIMITIVE], FunctionWrapper.bind(this._createTemplateAnchor, this)), broker.registerMethod("createText", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._createText, this)), broker.registerMethod("projectNodes", [RenderStoreObject, RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._projectNodes, this)), broker.registerMethod("attachViewAfter", [RenderStoreObject, RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._attachViewAfter, this)), broker.registerMethod("detachView", [RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._detachView, this)), broker.registerMethod("destroyView", [RenderStoreObject, RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._destroyView, this)), broker.registerMethod("setElementProperty", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementProperty, this)), broker.registerMethod("setElementAttribute", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementAttribute, this)), broker.registerMethod("setBindingDebugInfo", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setBindingDebugInfo, this)), broker.registerMethod("setElementClass", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementClass, this)), broker.registerMethod("setElementStyle", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._setElementStyle, this)), broker.registerMethod("invokeElementMethod", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._invokeElementMethod, this)), broker.registerMethod("setText", [RenderStoreObject, RenderStoreObject, PRIMITIVE], FunctionWrapper.bind(this._setText, this)), broker.registerMethod("listen", [RenderStoreObject, RenderStoreObject, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._listen, this)), broker.registerMethod("listenGlobal", [RenderStoreObject, PRIMITIVE, PRIMITIVE, PRIMITIVE], FunctionWrapper.bind(this._listenGlobal, this)), broker.registerMethod("listenDone", [RenderStoreObject, RenderStoreObject], FunctionWrapper.bind(this._listenDone, this));
        }, MessageBasedRenderer.prototype._renderComponent = function(renderComponentType, rendererId) {
          var renderer = this._rootRenderer.renderComponent(renderComponentType);
          this._renderStore.store(renderer, rendererId);
        }, MessageBasedRenderer.prototype._selectRootElement = function(renderer, selector, elId) {
          this._renderStore.store(renderer.selectRootElement(selector, null), elId);
        }, MessageBasedRenderer.prototype._createElement = function(renderer, parentElement, name, elId) {
          this._renderStore.store(renderer.createElement(parentElement, name, null), elId);
        }, MessageBasedRenderer.prototype._createViewRoot = function(renderer, hostElement, elId) {
          var viewRoot = renderer.createViewRoot(hostElement);
          this._renderStore.serialize(hostElement) !== elId && this._renderStore.store(viewRoot, elId);
        }, MessageBasedRenderer.prototype._createTemplateAnchor = function(renderer, parentElement, elId) {
          this._renderStore.store(renderer.createTemplateAnchor(parentElement, null), elId);
        }, MessageBasedRenderer.prototype._createText = function(renderer, parentElement, value, elId) {
          this._renderStore.store(renderer.createText(parentElement, value, null), elId);
        }, MessageBasedRenderer.prototype._projectNodes = function(renderer, parentElement, nodes) {
          renderer.projectNodes(parentElement, nodes);
        }, MessageBasedRenderer.prototype._attachViewAfter = function(renderer, node, viewRootNodes) {
          renderer.attachViewAfter(node, viewRootNodes);
        }, MessageBasedRenderer.prototype._detachView = function(renderer, viewRootNodes) {
          renderer.detachView(viewRootNodes);
        }, MessageBasedRenderer.prototype._destroyView = function(renderer, hostElement, viewAllNodes) {
          renderer.destroyView(hostElement, viewAllNodes);
          for (var i = 0; i < viewAllNodes.length; i++)
            this._renderStore.remove(viewAllNodes[i]);
        }, MessageBasedRenderer.prototype._setElementProperty = function(renderer, renderElement, propertyName, propertyValue) {
          renderer.setElementProperty(renderElement, propertyName, propertyValue);
        }, MessageBasedRenderer.prototype._setElementAttribute = function(renderer, renderElement, attributeName, attributeValue) {
          renderer.setElementAttribute(renderElement, attributeName, attributeValue);
        }, MessageBasedRenderer.prototype._setBindingDebugInfo = function(renderer, renderElement, propertyName, propertyValue) {
          renderer.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        }, MessageBasedRenderer.prototype._setElementClass = function(renderer, renderElement, className, isAdd) {
          renderer.setElementClass(renderElement, className, isAdd);
        }, MessageBasedRenderer.prototype._setElementStyle = function(renderer, renderElement, styleName, styleValue) {
          renderer.setElementStyle(renderElement, styleName, styleValue);
        }, MessageBasedRenderer.prototype._invokeElementMethod = function(renderer, renderElement, methodName, args) {
          renderer.invokeElementMethod(renderElement, methodName, args);
        }, MessageBasedRenderer.prototype._setText = function(renderer, renderNode, text) {
          renderer.setText(renderNode, text);
        }, MessageBasedRenderer.prototype._listen = function(renderer, renderElement, eventName, unlistenId) {
          var _this = this,
              unregisterCallback = renderer.listen(renderElement, eventName, function(event) {
                return _this._eventDispatcher.dispatchRenderEvent(renderElement, null, eventName, event);
              });
          this._renderStore.store(unregisterCallback, unlistenId);
        }, MessageBasedRenderer.prototype._listenGlobal = function(renderer, eventTarget, eventName, unlistenId) {
          var _this = this,
              unregisterCallback = renderer.listenGlobal(eventTarget, eventName, function(event) {
                return _this._eventDispatcher.dispatchRenderEvent(null, eventTarget, eventName, event);
              });
          this._renderStore.store(unregisterCallback, unlistenId);
        }, MessageBasedRenderer.prototype._listenDone = function(renderer, unlistenCallback) {
          unlistenCallback();
        }, MessageBasedRenderer;
      }();
  MessageBasedRenderer.decorators = [{type: _angular_core.Injectable}], MessageBasedRenderer.ctorParameters = [{type: ServiceMessageBrokerFactory}, {type: MessageBus}, {type: Serializer}, {type: RenderStore}, {type: _angular_core.RootRenderer}];
  var WebWorkerInstance = function() {
    function WebWorkerInstance() {}
    return WebWorkerInstance.prototype.init = function(worker, bus) {
      this.worker = worker, this.bus = bus;
    }, WebWorkerInstance;
  }();
  WebWorkerInstance.decorators = [{type: _angular_core.Injectable}];
  var WORKER_SCRIPT = new _angular_core.OpaqueToken("WebWorkerScript"),
      WORKER_UI_STARTABLE_MESSAGING_SERVICE = new _angular_core.OpaqueToken("WorkerRenderStartableMsgService"),
      _WORKER_UI_PLATFORM_PROVIDERS = [{
        provide: _angular_core.NgZone,
        useFactory: createNgZone,
        deps: []
      }, MessageBasedRenderer, {
        provide: WORKER_UI_STARTABLE_MESSAGING_SERVICE,
        useExisting: MessageBasedRenderer,
        multi: !0
      }, BROWSER_SANITIZATION_PROVIDERS, {
        provide: _angular_core.ExceptionHandler,
        useFactory: _exceptionHandler$1,
        deps: []
      }, {
        provide: DOCUMENT,
        useFactory: _document$1,
        deps: []
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: DomEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: KeyEventsPlugin,
        multi: !0
      }, {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: !0
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig
      }, {
        provide: DomRootRenderer,
        useClass: DomRootRenderer_
      }, {
        provide: _angular_core.RootRenderer,
        useExisting: DomRootRenderer
      }, {
        provide: SharedStylesHost,
        useExisting: DomSharedStylesHost
      }, {
        provide: ServiceMessageBrokerFactory,
        useClass: ServiceMessageBrokerFactory_
      }, {
        provide: ClientMessageBrokerFactory,
        useClass: ClientMessageBrokerFactory_
      }, {
        provide: AnimationDriver,
        useFactory: _resolveDefaultAnimationDriver$1
      }, Serializer, {
        provide: ON_WEB_WORKER,
        useValue: !1
      }, RenderStore, DomSharedStylesHost, _angular_core.Testability, EventManager, WebWorkerInstance, {
        provide: _angular_core.PLATFORM_INITIALIZER,
        useFactory: initWebWorkerRenderPlatform,
        multi: !0,
        deps: [_angular_core.Injector]
      }, {
        provide: MessageBus,
        useFactory: messageBusFactory,
        deps: [WebWorkerInstance]
      }],
      WORKER_UI_PLATFORM_PROVIDERS = [_angular_core.PLATFORM_COMMON_PROVIDERS, _WORKER_UI_PLATFORM_PROVIDERS],
      WORKER_UI_APPLICATION_PROVIDERS = [],
      platformWorkerUi = _angular_core.createPlatformFactory(_angular_core.platformCore, "workerUi", _WORKER_UI_PLATFORM_PROVIDERS),
      workerUiPlatform = platformWorkerUi,
      WebWorkerRootRenderer = function() {
        function WebWorkerRootRenderer(messageBrokerFactory, bus, _serializer, _renderStore) {
          var _this = this;
          this._serializer = _serializer, this._renderStore = _renderStore, this.globalEvents = new NamedEventEmitter, this._componentRenderers = new Map, this._messageBroker = messageBrokerFactory.createMessageBroker(RENDERER_CHANNEL), bus.initChannel(EVENT_CHANNEL);
          var source = bus.from(EVENT_CHANNEL);
          source.subscribe({next: function(message) {
              return _this._dispatchEvent(message);
            }});
        }
        return WebWorkerRootRenderer.prototype._dispatchEvent = function(message) {
          var eventName = message.eventName,
              target = message.eventTarget,
              event = deserializeGenericEvent(message.event);
          if (isPresent(target))
            this.globalEvents.dispatchEvent(eventNameWithTarget(target, eventName), event);
          else {
            var element = this._serializer.deserialize(message.element, RenderStoreObject);
            element.events.dispatchEvent(eventName, event);
          }
        }, WebWorkerRootRenderer.prototype.renderComponent = function(componentType) {
          var result = this._componentRenderers.get(componentType.id);
          if (isBlank(result)) {
            result = new WebWorkerRenderer(this, componentType), this._componentRenderers.set(componentType.id, result);
            var id = this._renderStore.allocateId();
            this._renderStore.store(result, id), this.runOnService("renderComponent", [new FnArg(componentType, _angular_core.RenderComponentType), new FnArg(result, RenderStoreObject)]);
          }
          return result;
        }, WebWorkerRootRenderer.prototype.runOnService = function(fnName, fnArgs) {
          var args = new UiArguments(fnName, fnArgs);
          this._messageBroker.runOnService(args, null);
        }, WebWorkerRootRenderer.prototype.allocateNode = function() {
          var result = new WebWorkerRenderNode,
              id = this._renderStore.allocateId();
          return this._renderStore.store(result, id), result;
        }, WebWorkerRootRenderer.prototype.allocateId = function() {
          return this._renderStore.allocateId();
        }, WebWorkerRootRenderer.prototype.destroyNodes = function(nodes) {
          for (var i = 0; i < nodes.length; i++)
            this._renderStore.remove(nodes[i]);
        }, WebWorkerRootRenderer;
      }();
  WebWorkerRootRenderer.decorators = [{type: _angular_core.Injectable}], WebWorkerRootRenderer.ctorParameters = [{type: ClientMessageBrokerFactory}, {type: MessageBus}, {type: Serializer}, {type: RenderStore}];
  var WebWorkerRenderer = function() {
    function WebWorkerRenderer(_rootRenderer, _componentType) {
      this._rootRenderer = _rootRenderer, this._componentType = _componentType;
    }
    return WebWorkerRenderer.prototype._runOnService = function(fnName, fnArgs) {
      var fnArgsWithRenderer = [new FnArg(this, RenderStoreObject)].concat(fnArgs);
      this._rootRenderer.runOnService(fnName, fnArgsWithRenderer);
    }, WebWorkerRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("selectRootElement", [new FnArg(selectorOrNode, null), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("createElement", [new FnArg(parentElement, RenderStoreObject), new FnArg(name, null), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.createViewRoot = function(hostElement) {
      var viewRoot = this._componentType.encapsulation === _angular_core.ViewEncapsulation.Native ? this._rootRenderer.allocateNode() : hostElement;
      return this._runOnService("createViewRoot", [new FnArg(hostElement, RenderStoreObject), new FnArg(viewRoot, RenderStoreObject)]), viewRoot;
    }, WebWorkerRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("createTemplateAnchor", [new FnArg(parentElement, RenderStoreObject), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var node = this._rootRenderer.allocateNode();
      return this._runOnService("createText", [new FnArg(parentElement, RenderStoreObject), new FnArg(value, null), new FnArg(node, RenderStoreObject)]), node;
    }, WebWorkerRenderer.prototype.projectNodes = function(parentElement, nodes) {
      this._runOnService("projectNodes", [new FnArg(parentElement, RenderStoreObject), new FnArg(nodes, RenderStoreObject)]);
    }, WebWorkerRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      this._runOnService("attachViewAfter", [new FnArg(node, RenderStoreObject), new FnArg(viewRootNodes, RenderStoreObject)]);
    }, WebWorkerRenderer.prototype.detachView = function(viewRootNodes) {
      this._runOnService("detachView", [new FnArg(viewRootNodes, RenderStoreObject)]);
    }, WebWorkerRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      this._runOnService("destroyView", [new FnArg(hostElement, RenderStoreObject), new FnArg(viewAllNodes, RenderStoreObject)]), this._rootRenderer.destroyNodes(viewAllNodes);
    }, WebWorkerRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      this._runOnService("setElementProperty", [new FnArg(renderElement, RenderStoreObject), new FnArg(propertyName, null), new FnArg(propertyValue, null)]);
    }, WebWorkerRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      this._runOnService("setElementAttribute", [new FnArg(renderElement, RenderStoreObject), new FnArg(attributeName, null), new FnArg(attributeValue, null)]);
    }, WebWorkerRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      this._runOnService("setBindingDebugInfo", [new FnArg(renderElement, RenderStoreObject), new FnArg(propertyName, null), new FnArg(propertyValue, null)]);
    }, WebWorkerRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      this._runOnService("setElementClass", [new FnArg(renderElement, RenderStoreObject), new FnArg(className, null), new FnArg(isAdd, null)]);
    }, WebWorkerRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      this._runOnService("setElementStyle", [new FnArg(renderElement, RenderStoreObject), new FnArg(styleName, null), new FnArg(styleValue, null)]);
    }, WebWorkerRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      this._runOnService("invokeElementMethod", [new FnArg(renderElement, RenderStoreObject), new FnArg(methodName, null), new FnArg(args, null)]);
    }, WebWorkerRenderer.prototype.setText = function(renderNode, text) {
      this._runOnService("setText", [new FnArg(renderNode, RenderStoreObject), new FnArg(text, null)]);
    }, WebWorkerRenderer.prototype.listen = function(renderElement, name, callback) {
      var _this = this;
      renderElement.events.listen(name, callback);
      var unlistenCallbackId = this._rootRenderer.allocateId();
      return this._runOnService("listen", [new FnArg(renderElement, RenderStoreObject), new FnArg(name, null), new FnArg(unlistenCallbackId, null)]), function() {
        renderElement.events.unlisten(name, callback), _this._runOnService("listenDone", [new FnArg(unlistenCallbackId, null)]);
      };
    }, WebWorkerRenderer.prototype.listenGlobal = function(target, name, callback) {
      var _this = this;
      this._rootRenderer.globalEvents.listen(eventNameWithTarget(target, name), callback);
      var unlistenCallbackId = this._rootRenderer.allocateId();
      return this._runOnService("listenGlobal", [new FnArg(target, null), new FnArg(name, null), new FnArg(unlistenCallbackId, null)]), function() {
        _this._rootRenderer.globalEvents.unlisten(eventNameWithTarget(target, name), callback), _this._runOnService("listenDone", [new FnArg(unlistenCallbackId, null)]);
      };
    }, WebWorkerRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      return null;
    }, WebWorkerRenderer;
  }(),
      NamedEventEmitter = function() {
        function NamedEventEmitter() {}
        return NamedEventEmitter.prototype._getListeners = function(eventName) {
          isBlank(this._listeners) && (this._listeners = new Map);
          var listeners = this._listeners.get(eventName);
          return isBlank(listeners) && (listeners = [], this._listeners.set(eventName, listeners)), listeners;
        }, NamedEventEmitter.prototype.listen = function(eventName, callback) {
          this._getListeners(eventName).push(callback);
        }, NamedEventEmitter.prototype.unlisten = function(eventName, callback) {
          ListWrapper.remove(this._getListeners(eventName), callback);
        }, NamedEventEmitter.prototype.dispatchEvent = function(eventName, event) {
          for (var listeners = this._getListeners(eventName),
              i = 0; i < listeners.length; i++)
            listeners[i](event);
        }, NamedEventEmitter;
      }(),
      WebWorkerRenderNode = function() {
        function WebWorkerRenderNode() {
          this.events = new NamedEventEmitter;
        }
        return WebWorkerRenderNode;
      }(),
      WorkerDomAdapter = function(_super) {
        function WorkerDomAdapter() {
          _super.apply(this, arguments);
        }
        return __extends(WorkerDomAdapter, _super), WorkerDomAdapter.makeCurrent = function() {
          setRootDomAdapter(new WorkerDomAdapter);
        }, WorkerDomAdapter.prototype.logError = function(error) {
          console.error ? console.error(error) : console.log(error);
        }, WorkerDomAdapter.prototype.log = function(error) {
          console.log(error);
        }, WorkerDomAdapter.prototype.logGroup = function(error) {
          console.group ? (console.group(error), this.logError(error)) : console.log(error);
        }, WorkerDomAdapter.prototype.logGroupEnd = function() {
          console.groupEnd && console.groupEnd();
        }, WorkerDomAdapter.prototype.hasProperty = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setProperty = function(el, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getProperty = function(el, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.invoke = function(el, methodName, args) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getXHR = function() {
          throw "not implemented";
        }, Object.defineProperty(WorkerDomAdapter.prototype, "attrToPropMap", {
          get: function() {
            throw "not implemented";
          },
          set: function(value) {
            throw "not implemented";
          },
          enumerable: !0,
          configurable: !0
        }), WorkerDomAdapter.prototype.parse = function(templateHtml) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.query = function(selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.querySelector = function(el, selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.querySelectorAll = function(el, selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.on = function(el, evt, listener) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.dispatchEvent = function(el, evt) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createMouseEvent = function(eventType) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createEvent = function(eventType) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.preventDefault = function(evt) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isPrevented = function(evt) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getInnerHTML = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getTemplateContent = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getOuterHTML = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.nodeName = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.nodeValue = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.type = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.content = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.firstChild = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.nextSibling = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.parentElement = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.childNodes = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.childNodesAsList = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.clearNodes = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.appendChild = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeChild = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.remove = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.insertBefore = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.insertAllBefore = function(el, nodes) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.insertAfter = function(el, node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setInnerHTML = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getText = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setText = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getValue = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setValue = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getChecked = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setChecked = function(el, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createComment = function(text) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createTemplate = function(html) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createElement = function(tagName, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createTextNode = function(text, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createStyleElement = function(css, doc) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createShadowRoot = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getShadowRoot = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getHost = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getDistributedNodes = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.clone = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getElementsByClassName = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getElementsByTagName = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.classList = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.addClass = function(element, className) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeClass = function(element, className) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasClass = function(element, className) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeStyle = function(element, styleName) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getStyle = function(element, styleName) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.tagName = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.attributeMap = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasAttribute = function(element, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getAttribute = function(element, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getAttributeNS = function(element, ns, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setAttribute = function(element, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeAttribute = function(element, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.removeAttributeNS = function(element, ns, attribute) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.templateAwareRoot = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.createHtmlDocument = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.defaultDoc = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getBoundingClientRect = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getTitle = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setTitle = function(newTitle) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.elementMatches = function(n, selector) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isTemplateElement = function(el) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isTextNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isCommentNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isElementNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.hasShadowRoot = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.isShadowRoot = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.importIntoDoc = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.adoptNode = function(node) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getHref = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getEventKey = function(event) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.resolveAndSetHref = function(element, baseUrl, href) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsDOMEvents = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsNativeShadowDOM = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getGlobalEventTarget = function(target) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getHistory = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getLocation = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getBaseHref = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.resetBaseElement = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getUserAgent = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setData = function(element, name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getComputedStyle = function(element) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getData = function(element, name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setGlobalVar = function(name, value) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.requestAnimationFrame = function(callback) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.cancelAnimationFrame = function(id) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.performanceNow = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getAnimationPrefix = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.getTransitionEnd = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsAnimation = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsWebAnimation = function() {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.supportsCookies = function() {
          return !1;
        }, WorkerDomAdapter.prototype.getCookie = function(name) {
          throw "not implemented";
        }, WorkerDomAdapter.prototype.setCookie = function(name, value) {
          throw "not implemented";
        }, WorkerDomAdapter;
      }(DomAdapter),
      PrintLogger = function() {
        function PrintLogger() {
          this.log = print, this.logError = print, this.logGroup = print;
        }
        return PrintLogger.prototype.logGroupEnd = function() {}, PrintLogger;
      }(),
      WORKER_APP_PLATFORM_PROVIDERS = _angular_core.PLATFORM_COMMON_PROVIDERS,
      WORKER_APP_APPLICATION_PROVIDERS = [],
      platformWorkerApp = _angular_core.createPlatformFactory(_angular_core.platformCore, "workerApp"),
      workerAppPlatform = platformWorkerApp,
      _postMessage = {postMessage: function(message, transferrables) {
          postMessage(message, transferrables);
        }},
      WorkerAppModule = function() {
        function WorkerAppModule() {}
        return WorkerAppModule;
      }();
  WorkerAppModule.decorators = [{
    type: _angular_core.NgModule,
    args: [{
      providers: [_angular_common.FORM_PROVIDERS, BROWSER_SANITIZATION_PROVIDERS, Serializer, {
        provide: ClientMessageBrokerFactory,
        useClass: ClientMessageBrokerFactory_
      }, {
        provide: ServiceMessageBrokerFactory,
        useClass: ServiceMessageBrokerFactory_
      }, WebWorkerRootRenderer, {
        provide: _angular_core.RootRenderer,
        useExisting: WebWorkerRootRenderer
      }, {
        provide: ON_WEB_WORKER,
        useValue: !0
      }, RenderStore, {
        provide: _angular_core.ExceptionHandler,
        useFactory: _exceptionHandler$2,
        deps: []
      }, {
        provide: MessageBus,
        useFactory: createMessageBus,
        deps: [_angular_core.NgZone]
      }, {
        provide: _angular_core.APP_INITIALIZER,
        useValue: setupWebWorker,
        multi: !0
      }],
      exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
    }]
  }];
  var __platform_browser_private__ = {
    DomAdapter: DomAdapter,
    getDOM: getDOM,
    setRootDomAdapter: setRootDomAdapter,
    DomRootRenderer: DomRootRenderer,
    DomRootRenderer_: DomRootRenderer_,
    DomSharedStylesHost: DomSharedStylesHost,
    SharedStylesHost: SharedStylesHost,
    ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
    DomEventsPlugin: DomEventsPlugin,
    initDomAdapter: initDomAdapter,
    INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS
  };
  exports.BROWSER_APP_PROVIDERS = BROWSER_APP_PROVIDERS, exports.BROWSER_PLATFORM_PROVIDERS = BROWSER_PLATFORM_PROVIDERS, exports.BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS, exports.BrowserModule = BrowserModule, exports.browserPlatform = browserPlatform, exports.platformBrowser = platformBrowser, exports.BrowserPlatformLocation = BrowserPlatformLocation, exports.Title = Title, exports.disableDebugTools = disableDebugTools, exports.enableDebugTools = enableDebugTools, exports.AnimationDriver = AnimationDriver, exports.By = By, exports.DOCUMENT = DOCUMENT, exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS, exports.EventManager = EventManager, exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG, exports.HammerGestureConfig = HammerGestureConfig, exports.DomSanitizationService = DomSanitizationService, exports.ClientMessageBroker = ClientMessageBroker, exports.ClientMessageBrokerFactory = ClientMessageBrokerFactory, exports.FnArg = FnArg, exports.UiArguments = UiArguments, exports.PRIMITIVE = PRIMITIVE, exports.ReceivedMessage = ReceivedMessage, exports.ServiceMessageBroker = ServiceMessageBroker, exports.ServiceMessageBrokerFactory = ServiceMessageBrokerFactory, exports.WORKER_APP_LOCATION_PROVIDERS = WORKER_APP_LOCATION_PROVIDERS, exports.WORKER_UI_LOCATION_PROVIDERS = WORKER_UI_LOCATION_PROVIDERS, exports.MessageBus = MessageBus, exports.WebWorkerInstance = WebWorkerInstance, exports.WORKER_SCRIPT = WORKER_SCRIPT, exports.WORKER_UI_STARTABLE_MESSAGING_SERVICE = WORKER_UI_STARTABLE_MESSAGING_SERVICE, exports._WORKER_UI_PLATFORM_PROVIDERS = _WORKER_UI_PLATFORM_PROVIDERS, exports.WORKER_UI_PLATFORM_PROVIDERS = WORKER_UI_PLATFORM_PROVIDERS, exports.WORKER_UI_APPLICATION_PROVIDERS = WORKER_UI_APPLICATION_PROVIDERS, exports.platformWorkerUi = platformWorkerUi, exports.workerUiPlatform = workerUiPlatform, exports.WORKER_APP_PLATFORM_PROVIDERS = WORKER_APP_PLATFORM_PROVIDERS, exports.WORKER_APP_APPLICATION_PROVIDERS = WORKER_APP_APPLICATION_PROVIDERS, exports.platformWorkerApp = platformWorkerApp, exports.workerAppPlatform = workerAppPlatform, exports.WorkerAppModule = WorkerAppModule, exports.__platform_browser_private__ = __platform_browser_private__;
});

})();
$__System.registerDynamic("13", ["3", "5", "14", "15"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var platform_browser_1 = $__require('5');
  var block_slider_component_1 = $__require('14');
  var block_component_1 = $__require('15');
  var BlockSliderModule = (function() {
    function BlockSliderModule() {}
    BlockSliderModule = __decorate([core_1.NgModule({
      imports: [platform_browser_1.BrowserModule],
      declarations: [block_slider_component_1.BlockSliderComponent, block_component_1.BlockComponent],
      exports: [block_slider_component_1.BlockSliderComponent, block_component_1.BlockComponent],
      bootstrap: [block_slider_component_1.BlockSliderComponent]
    }), __metadata('design:paramtypes', [])], BlockSliderModule);
    return BlockSliderModule;
  }());
  exports.BlockSliderModule = BlockSliderModule;
  return module.exports;
});

$__System.registerDynamic("16", ["17"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Subscription_1 = $__require('17');
  var SubjectSubscription = (function(_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, observer) {
      _super.call(this);
      this.subject = subject;
      this.observer = observer;
      this.isUnsubscribed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function() {
      if (this.isUnsubscribed) {
        return;
      }
      this.isUnsubscribed = true;
      var subject = this.subject;
      var observers = subject.observers;
      this.subject = null;
      if (!observers || observers.length === 0 || subject.isUnsubscribed) {
        return;
      }
      var subscriberIndex = observers.indexOf(this.observer);
      if (subscriberIndex !== -1) {
        observers.splice(subscriberIndex, 1);
      }
    };
    return SubjectSubscription;
  }(Subscription_1.Subscription));
  exports.SubjectSubscription = SubjectSubscription;
  return module.exports;
});

$__System.registerDynamic("18", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  function throwError(e) {
    throw e;
  }
  exports.throwError = throwError;
  return module.exports;
});

$__System.registerDynamic("19", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ObjectUnsubscribedError = (function(_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
      _super.call(this, 'object unsubscribed');
      this.name = 'ObjectUnsubscribedError';
    }
    return ObjectUnsubscribedError;
  }(Error));
  exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
  return module.exports;
});

$__System.registerDynamic("12", ["10", "1a", "17", "16", "1b", "18", "19"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Observable_1 = $__require('10');
  var Subscriber_1 = $__require('1a');
  var Subscription_1 = $__require('17');
  var SubjectSubscription_1 = $__require('16');
  var rxSubscriber_1 = $__require('1b');
  var throwError_1 = $__require('18');
  var ObjectUnsubscribedError_1 = $__require('19');
  var Subject = (function(_super) {
    __extends(Subject, _super);
    function Subject(destination, source) {
      _super.call(this);
      this.destination = destination;
      this.source = source;
      this.observers = [];
      this.isUnsubscribed = false;
      this.isStopped = false;
      this.hasErrored = false;
      this.dispatching = false;
      this.hasCompleted = false;
      this.source = source;
    }
    Subject.prototype.lift = function(operator) {
      var subject = new Subject(this.destination || this, this);
      subject.operator = operator;
      return subject;
    };
    Subject.prototype.add = function(subscription) {
      return Subscription_1.Subscription.prototype.add.call(this, subscription);
    };
    Subject.prototype.remove = function(subscription) {
      Subscription_1.Subscription.prototype.remove.call(this, subscription);
    };
    Subject.prototype.unsubscribe = function() {
      Subscription_1.Subscription.prototype.unsubscribe.call(this);
    };
    Subject.prototype._subscribe = function(subscriber) {
      if (this.source) {
        return this.source.subscribe(subscriber);
      } else {
        if (subscriber.isUnsubscribed) {
          return;
        } else if (this.hasErrored) {
          return subscriber.error(this.errorValue);
        } else if (this.hasCompleted) {
          return subscriber.complete();
        }
        this.throwIfUnsubscribed();
        var subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        this.observers.push(subscriber);
        return subscription;
      }
    };
    Subject.prototype._unsubscribe = function() {
      this.source = null;
      this.isStopped = true;
      this.observers = null;
      this.destination = null;
    };
    Subject.prototype.next = function(value) {
      this.throwIfUnsubscribed();
      if (this.isStopped) {
        return;
      }
      this.dispatching = true;
      this._next(value);
      this.dispatching = false;
      if (this.hasErrored) {
        this._error(this.errorValue);
      } else if (this.hasCompleted) {
        this._complete();
      }
    };
    Subject.prototype.error = function(err) {
      this.throwIfUnsubscribed();
      if (this.isStopped) {
        return;
      }
      this.isStopped = true;
      this.hasErrored = true;
      this.errorValue = err;
      if (this.dispatching) {
        return;
      }
      this._error(err);
    };
    Subject.prototype.complete = function() {
      this.throwIfUnsubscribed();
      if (this.isStopped) {
        return;
      }
      this.isStopped = true;
      this.hasCompleted = true;
      if (this.dispatching) {
        return;
      }
      this._complete();
    };
    Subject.prototype.asObservable = function() {
      var observable = new SubjectObservable(this);
      return observable;
    };
    Subject.prototype._next = function(value) {
      if (this.destination) {
        this.destination.next(value);
      } else {
        this._finalNext(value);
      }
    };
    Subject.prototype._finalNext = function(value) {
      var index = -1;
      var observers = this.observers.slice(0);
      var len = observers.length;
      while (++index < len) {
        observers[index].next(value);
      }
    };
    Subject.prototype._error = function(err) {
      if (this.destination) {
        this.destination.error(err);
      } else {
        this._finalError(err);
      }
    };
    Subject.prototype._finalError = function(err) {
      var index = -1;
      var observers = this.observers;
      this.observers = null;
      this.isUnsubscribed = true;
      if (observers) {
        var len = observers.length;
        while (++index < len) {
          observers[index].error(err);
        }
      }
      this.isUnsubscribed = false;
      this.unsubscribe();
    };
    Subject.prototype._complete = function() {
      if (this.destination) {
        this.destination.complete();
      } else {
        this._finalComplete();
      }
    };
    Subject.prototype._finalComplete = function() {
      var index = -1;
      var observers = this.observers;
      this.observers = null;
      this.isUnsubscribed = true;
      if (observers) {
        var len = observers.length;
        while (++index < len) {
          observers[index].complete();
        }
      }
      this.isUnsubscribed = false;
      this.unsubscribe();
    };
    Subject.prototype.throwIfUnsubscribed = function() {
      if (this.isUnsubscribed) {
        throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
      }
    };
    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
      return new Subscriber_1.Subscriber(this);
    };
    Subject.create = function(destination, source) {
      return new Subject(destination, source);
    };
    return Subject;
  }(Observable_1.Observable));
  exports.Subject = Subject;
  var SubjectObservable = (function(_super) {
    __extends(SubjectObservable, _super);
    function SubjectObservable(source) {
      _super.call(this);
      this.source = source;
    }
    return SubjectObservable;
  }(Observable_1.Observable));
  return module.exports;
});

$__System.registerDynamic("1c", ["e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  var Symbol = root_1.root.Symbol;
  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      exports.$$observable = Symbol.observable;
    } else {
      if (typeof Symbol.for === 'function') {
        exports.$$observable = Symbol.for('observable');
      } else {
        exports.$$observable = Symbol('observable');
      }
      Symbol.observable = exports.$$observable;
    }
  } else {
    exports.$$observable = '@@observable';
  }
  return module.exports;
});

$__System.registerDynamic("1d", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || (function(x) {
    return x && typeof x.length === 'number';
  });
  return module.exports;
});

$__System.registerDynamic("1e", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  function isObject(x) {
    return x != null && typeof x === 'object';
  }
  exports.isObject = isObject;
  return module.exports;
});

$__System.registerDynamic("1f", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  function isFunction(x) {
    return typeof x === 'function';
  }
  exports.isFunction = isFunction;
  return module.exports;
});

$__System.registerDynamic("20", ["21"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var errorObject_1 = $__require('21');
  var tryCatchTarget;
  function tryCatcher() {
    try {
      return tryCatchTarget.apply(this, arguments);
    } catch (e) {
      errorObject_1.errorObject.e = e;
      return errorObject_1.errorObject;
    }
  }
  function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
  }
  exports.tryCatch = tryCatch;
  ;
  return module.exports;
});

$__System.registerDynamic("21", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  exports.errorObject = {e: {}};
  return module.exports;
});

$__System.registerDynamic("22", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var UnsubscriptionError = (function(_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
      _super.call(this);
      this.errors = errors;
      this.name = 'UnsubscriptionError';
      this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
        return ((i + 1) + ") " + err.toString());
      }).join('\n') : '';
    }
    return UnsubscriptionError;
  }(Error));
  exports.UnsubscriptionError = UnsubscriptionError;
  return module.exports;
});

$__System.registerDynamic("17", ["1d", "1e", "1f", "20", "21", "22"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var isArray_1 = $__require('1d');
  var isObject_1 = $__require('1e');
  var isFunction_1 = $__require('1f');
  var tryCatch_1 = $__require('20');
  var errorObject_1 = $__require('21');
  var UnsubscriptionError_1 = $__require('22');
  var Subscription = (function() {
    function Subscription(unsubscribe) {
      this.isUnsubscribed = false;
      if (unsubscribe) {
        this._unsubscribe = unsubscribe;
      }
    }
    Subscription.prototype.unsubscribe = function() {
      var hasErrors = false;
      var errors;
      if (this.isUnsubscribed) {
        return;
      }
      this.isUnsubscribed = true;
      var _a = this,
          _unsubscribe = _a._unsubscribe,
          _subscriptions = _a._subscriptions;
      this._subscriptions = null;
      if (isFunction_1.isFunction(_unsubscribe)) {
        var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
        if (trial === errorObject_1.errorObject) {
          hasErrors = true;
          (errors = errors || []).push(errorObject_1.errorObject.e);
        }
      }
      if (isArray_1.isArray(_subscriptions)) {
        var index = -1;
        var len = _subscriptions.length;
        while (++index < len) {
          var sub = _subscriptions[index];
          if (isObject_1.isObject(sub)) {
            var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
            if (trial === errorObject_1.errorObject) {
              hasErrors = true;
              errors = errors || [];
              var err = errorObject_1.errorObject.e;
              if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                errors = errors.concat(err.errors);
              } else {
                errors.push(err);
              }
            }
          }
        }
      }
      if (hasErrors) {
        throw new UnsubscriptionError_1.UnsubscriptionError(errors);
      }
    };
    Subscription.prototype.add = function(teardown) {
      if (!teardown || (teardown === this) || (teardown === Subscription.EMPTY)) {
        return;
      }
      var sub = teardown;
      switch (typeof teardown) {
        case 'function':
          sub = new Subscription(teardown);
        case 'object':
          if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {
            break;
          } else if (this.isUnsubscribed) {
            sub.unsubscribe();
          } else {
            (this._subscriptions || (this._subscriptions = [])).push(sub);
          }
          break;
        default:
          throw new Error('Unrecognized teardown ' + teardown + ' added to Subscription.');
      }
      return sub;
    };
    Subscription.prototype.remove = function(subscription) {
      if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
        return;
      }
      var subscriptions = this._subscriptions;
      if (subscriptions) {
        var subscriptionIndex = subscriptions.indexOf(subscription);
        if (subscriptionIndex !== -1) {
          subscriptions.splice(subscriptionIndex, 1);
        }
      }
    };
    Subscription.EMPTY = (function(empty) {
      empty.isUnsubscribed = true;
      return empty;
    }(new Subscription()));
    return Subscription;
  }());
  exports.Subscription = Subscription;
  return module.exports;
});

$__System.registerDynamic("23", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  exports.empty = {
    isUnsubscribed: true,
    next: function(value) {},
    error: function(err) {
      throw err;
    },
    complete: function() {}
  };
  return module.exports;
});

$__System.registerDynamic("1a", ["1f", "17", "1b", "23"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var isFunction_1 = $__require('1f');
  var Subscription_1 = $__require('17');
  var rxSubscriber_1 = $__require('1b');
  var Observer_1 = $__require('23');
  var Subscriber = (function(_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
      _super.call(this);
      this.syncErrorValue = null;
      this.syncErrorThrown = false;
      this.syncErrorThrowable = false;
      this.isStopped = false;
      switch (arguments.length) {
        case 0:
          this.destination = Observer_1.empty;
          break;
        case 1:
          if (!destinationOrNext) {
            this.destination = Observer_1.empty;
            break;
          }
          if (typeof destinationOrNext === 'object') {
            if (destinationOrNext instanceof Subscriber) {
              this.destination = destinationOrNext;
              this.destination.add(this);
            } else {
              this.syncErrorThrowable = true;
              this.destination = new SafeSubscriber(this, destinationOrNext);
            }
            break;
          }
        default:
          this.syncErrorThrowable = true;
          this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
          break;
      }
    }
    Subscriber.create = function(next, error, complete) {
      var subscriber = new Subscriber(next, error, complete);
      subscriber.syncErrorThrowable = false;
      return subscriber;
    };
    Subscriber.prototype.next = function(value) {
      if (!this.isStopped) {
        this._next(value);
      }
    };
    Subscriber.prototype.error = function(err) {
      if (!this.isStopped) {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber.prototype.complete = function() {
      if (!this.isStopped) {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber.prototype.unsubscribe = function() {
      if (this.isUnsubscribed) {
        return;
      }
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber.prototype._error = function(err) {
      this.destination.error(err);
      this.unsubscribe();
    };
    Subscriber.prototype._complete = function() {
      this.destination.complete();
      this.unsubscribe();
    };
    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
      return this;
    };
    return Subscriber;
  }(Subscription_1.Subscription));
  exports.Subscriber = Subscriber;
  var SafeSubscriber = (function(_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parent, observerOrNext, error, complete) {
      _super.call(this);
      this._parent = _parent;
      var next;
      var context = this;
      if (isFunction_1.isFunction(observerOrNext)) {
        next = observerOrNext;
      } else if (observerOrNext) {
        context = observerOrNext;
        next = observerOrNext.next;
        error = observerOrNext.error;
        complete = observerOrNext.complete;
        if (isFunction_1.isFunction(context.unsubscribe)) {
          this.add(context.unsubscribe.bind(context));
        }
        context.unsubscribe = this.unsubscribe.bind(this);
      }
      this._context = context;
      this._next = next;
      this._error = error;
      this._complete = complete;
    }
    SafeSubscriber.prototype.next = function(value) {
      if (!this.isStopped && this._next) {
        var _parent = this._parent;
        if (!_parent.syncErrorThrowable) {
          this.__tryOrUnsub(this._next, value);
        } else if (this.__tryOrSetError(_parent, this._next, value)) {
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.error = function(err) {
      if (!this.isStopped) {
        var _parent = this._parent;
        if (this._error) {
          if (!_parent.syncErrorThrowable) {
            this.__tryOrUnsub(this._error, err);
            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parent, this._error, err);
            this.unsubscribe();
          }
        } else if (!_parent.syncErrorThrowable) {
          this.unsubscribe();
          throw err;
        } else {
          _parent.syncErrorValue = err;
          _parent.syncErrorThrown = true;
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.complete = function() {
      if (!this.isStopped) {
        var _parent = this._parent;
        if (this._complete) {
          if (!_parent.syncErrorThrowable) {
            this.__tryOrUnsub(this._complete);
            this.unsubscribe();
          } else {
            this.__tryOrSetError(_parent, this._complete);
            this.unsubscribe();
          }
        } else {
          this.unsubscribe();
        }
      }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function(fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        this.unsubscribe();
        throw err;
      }
    };
    SafeSubscriber.prototype.__tryOrSetError = function(parent, fn, value) {
      try {
        fn.call(this._context, value);
      } catch (err) {
        parent.syncErrorValue = err;
        parent.syncErrorThrown = true;
        return true;
      }
      return false;
    };
    SafeSubscriber.prototype._unsubscribe = function() {
      var _parent = this._parent;
      this._context = null;
      this._parent = null;
      _parent.unsubscribe();
    };
    return SafeSubscriber;
  }(Subscriber));
  return module.exports;
});

$__System.registerDynamic("e", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };
  exports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    exports.root = freeGlobal;
  }
  return module.exports;
});

$__System.registerDynamic("1b", ["e"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  var Symbol = root_1.root.Symbol;
  exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
  return module.exports;
});

$__System.registerDynamic("24", ["1a", "1b"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var Subscriber_1 = $__require('1a');
  var rxSubscriber_1 = $__require('1b');
  function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver && typeof nextOrObserver === 'object') {
      if (nextOrObserver instanceof Subscriber_1.Subscriber) {
        return nextOrObserver;
      } else if (typeof nextOrObserver[rxSubscriber_1.$$rxSubscriber] === 'function') {
        return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
      }
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
  }
  exports.toSubscriber = toSubscriber;
  return module.exports;
});

$__System.registerDynamic("10", ["e", "1c", "24"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var root_1 = $__require('e');
  var observable_1 = $__require('1c');
  var toSubscriber_1 = $__require('24');
  var Observable = (function() {
    function Observable(subscribe) {
      this._isScalar = false;
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable.prototype.lift = function(operator) {
      var observable = new Observable();
      observable.source = this;
      observable.operator = operator;
      return observable;
    };
    Observable.prototype.subscribe = function(observerOrNext, error, complete) {
      var operator = this.operator;
      var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
      sink.add(operator ? operator.call(sink, this) : this._subscribe(sink));
      if (sink.syncErrorThrowable) {
        sink.syncErrorThrowable = false;
        if (sink.syncErrorThrown) {
          throw sink.syncErrorValue;
        }
      }
      return sink;
    };
    Observable.prototype.forEach = function(next, PromiseCtor) {
      var _this = this;
      if (!PromiseCtor) {
        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
          PromiseCtor = root_1.root.Rx.config.Promise;
        } else if (root_1.root.Promise) {
          PromiseCtor = root_1.root.Promise;
        }
      }
      if (!PromiseCtor) {
        throw new Error('no Promise impl found');
      }
      return new PromiseCtor(function(resolve, reject) {
        var subscription = _this.subscribe(function(value) {
          if (subscription) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscription.unsubscribe();
            }
          } else {
            next(value);
          }
        }, reject, resolve);
      });
    };
    Observable.prototype._subscribe = function(subscriber) {
      return this.source.subscribe(subscriber);
    };
    Observable.prototype[observable_1.$$observable] = function() {
      return this;
    };
    Observable.create = function(subscribe) {
      return new Observable(subscribe);
    };
    return Observable;
  }());
  exports.Observable = Observable;
  return module.exports;
});

(function() {
var define = $__System.amdDefine;
var __extends = this && this.__extends || function(d, b) {
  function __() {
    this.constructor = d;
  }
  for (var p in b)
    b.hasOwnProperty(p) && (d[p] = b[p]);
  d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __);
};
!function(global, factory) {
  "object" == typeof exports && "undefined" != typeof module ? factory(exports, require("rxjs/Subject"), require("rxjs/Observable")) : "function" == typeof define && define.amd ? define("3", ["exports", "12", "10"], factory) : factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx);
}(this, function(exports, rxjs_Subject, rxjs_Observable) {
  "use strict";
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
  }
  function getTypeNameForDebugging(type) {
    return type.name ? type.name : typeof type;
  }
  function isPresent(obj) {
    return void 0 !== obj && null !== obj;
  }
  function isBlank(obj) {
    return void 0 === obj || null === obj;
  }
  function isString(obj) {
    return "string" == typeof obj;
  }
  function isFunction(obj) {
    return "function" == typeof obj;
  }
  function isType(obj) {
    return isFunction(obj);
  }
  function isPromise(obj) {
    return isPresent(obj) && isFunction(obj.then);
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function stringify(token) {
    if ("string" == typeof token)
      return token;
    if (void 0 === token || null === token)
      return "" + token;
    if (token.overriddenName)
      return token.overriddenName;
    if (token.name)
      return token.name;
    var res = token.toString(),
        newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || "number" == typeof a && "number" == typeof b && isNaN(a) && isNaN(b);
  }
  function getMapKey(value) {
    return value;
  }
  function normalizeBool(obj) {
    return !isBlank(obj) && obj;
  }
  function isJsObject(o) {
    return null !== o && ("function" == typeof o || "object" == typeof o);
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  function getSymbolIterator() {
    if (isBlank(_symbolIterator))
      if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator))
        _symbolIterator = Symbol.iterator;
      else
        for (var keys = Object.getOwnPropertyNames(Map.prototype),
            i = 0; i < keys.length; ++i) {
          var key = keys[i];
          "entries" !== key && "size" !== key && Map.prototype[key] === Map.prototype.entries && (_symbolIterator = key);
        }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function forwardRef(forwardRefFn) {
    return forwardRefFn.__forward_ref__ = forwardRef, forwardRefFn.toString = function() {
      return stringify(this());
    }, forwardRefFn;
  }
  function resolveForwardRef(type) {
    return isFunction(type) && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef ? type() : type;
  }
  function extractAnnotation(annotation) {
    return isFunction(annotation) && annotation.hasOwnProperty("annotation") && (annotation = annotation.annotation), annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array)
      throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    if (isFunction(fnOrArray))
      return fnOrArray;
    if (fnOrArray instanceof Array) {
      var annotations = fnOrArray,
          annoLength = annotations.length - 1,
          fn = fnOrArray[annoLength];
      if (!isFunction(fn))
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
      if (annoLength != fn.length)
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
      for (var paramsAnnotations = [],
          i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (annotation instanceof Array)
          for (var j = 0; j < annotation.length; j++)
            paramAnnotations.push(extractAnnotation(annotation[j]));
        else
          isFunction(annotation) ? paramAnnotations.push(extractAnnotation(annotation)) : paramAnnotations.push(annotation);
      }
      return Reflect.defineMetadata("parameters", paramsAnnotations, fn), fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : void 0, "constructor"),
        proto = constructor.prototype;
    if (clsDef.hasOwnProperty("extends")) {
      if (!isFunction(clsDef.extends))
        throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
      constructor.prototype = proto = Object.create(clsDef.extends.prototype);
    }
    for (var key in clsDef)
      "extends" != key && "prototype" != key && clsDef.hasOwnProperty(key) && (proto[key] = applyParams(clsDef[key], key));
    return this && this.annotations instanceof Array && Reflect.defineMetadata("annotations", this.annotations, constructor), constructor.name || (constructor.overriddenName = "class" + _nextClassId++), constructor;
  }
  function makeDecorator(annotationCls, chainFn) {
    function DecoratorFactory(objOrType) {
      var annotationInstance = new annotationCls(objOrType);
      if (this instanceof annotationCls)
        return annotationInstance;
      var chainAnnotation = isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
      chainAnnotation.push(annotationInstance);
      var TypeDecorator = function(cls) {
        var annotations = Reflect.getOwnMetadata("annotations", cls) || [];
        return annotations.push(annotationInstance), Reflect.defineMetadata("annotations", annotations, cls), cls;
      };
      return TypeDecorator.annotations = chainAnnotation, TypeDecorator.Class = Class, chainFn && chainFn(TypeDecorator), TypeDecorator;
    }
    return void 0 === chainFn && (chainFn = null), DecoratorFactory.prototype = Object.create(annotationCls.prototype), DecoratorFactory.annotationCls = annotationCls, DecoratorFactory;
  }
  function makeParamDecorator(annotationCls) {
    function ParamDecoratorFactory() {
      function ParamDecorator(cls, unusedKey, index) {
        for (var parameters = Reflect.getMetadata("parameters", cls) || []; parameters.length <= index; )
          parameters.push(null);
        parameters[index] = parameters[index] || [];
        var annotationsForParam = parameters[index];
        return annotationsForParam.push(annotationInstance), Reflect.defineMetadata("parameters", parameters, cls), cls;
      }
      for (var args = [],
          _i = 0; _i < arguments.length; _i++)
        args[_i - 0] = arguments[_i];
      var annotationInstance = Object.create(annotationCls.prototype);
      return annotationCls.apply(annotationInstance, args), this instanceof annotationCls ? annotationInstance : (ParamDecorator.annotation = annotationInstance, ParamDecorator);
    }
    return ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype), ParamDecoratorFactory.annotationCls = annotationCls, ParamDecoratorFactory;
  }
  function makePropDecorator(annotationCls) {
    function PropDecoratorFactory() {
      for (var args = [],
          _i = 0; _i < arguments.length; _i++)
        args[_i - 0] = arguments[_i];
      var decoratorInstance = Object.create(annotationCls.prototype);
      return annotationCls.apply(decoratorInstance, args), this instanceof annotationCls ? decoratorInstance : function(target, name) {
        var meta = Reflect.getOwnMetadata("propMetadata", target.constructor) || {};
        meta[name] = meta[name] || [], meta[name].unshift(decoratorInstance), Reflect.defineMetadata("propMetadata", meta, target.constructor);
      };
    }
    return PropDecoratorFactory.prototype = Object.create(annotationCls.prototype), PropDecoratorFactory.annotationCls = annotationCls, PropDecoratorFactory;
  }
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) || changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
  }
  function _flattenArray(source, target) {
    if (isPresent(source))
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        isArray(item) ? _flattenArray(item, target) : target.push(item);
      }
    return target;
  }
  function isListLikeIterable(obj) {
    return !!isJsObject(obj) && (isArray(obj) || !(obj instanceof Map$1) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    for (var iterator1 = a[getSymbolIterator()](),
        iterator2 = b[getSymbolIterator()](); ; ) {
      var item1 = iterator1.next(),
          item2 = iterator2.next();
      if (item1.done && item2.done)
        return !0;
      if (item1.done || item2.done)
        return !1;
      if (!comparator(item1.value, item2.value))
        return !1;
    }
  }
  function iterateListLike(obj, fn) {
    if (isArray(obj))
      for (var i = 0; i < obj.length; i++)
        fn(obj[i]);
    else
      for (var item,
          iterator = obj[getSymbolIterator()](); !(item = iterator.next()).done; )
        fn(item.value);
  }
  function unimplemented() {
    throw new BaseException("unimplemented");
  }
  function findFirstClosedCycle(keys) {
    for (var res = [],
        i = 0; i < keys.length; ++i) {
      if (ListWrapper.contains(res, keys[i]))
        return res.push(keys[i]), res;
      res.push(keys[i]);
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(ListWrapper.reversed(keys)),
          tokenStrs = reversed.map(function(k) {
            return stringify(k.token);
          });
      return " (" + tokenStrs.join(" -> ") + ")";
    }
    return "";
  }
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    return decoratorInvocations ? decoratorInvocations.map(function(decoratorInvocation) {
      var decoratorType = decoratorInvocation.type,
          annotationCls = decoratorType.annotationCls,
          annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [],
          annotation = Object.create(annotationCls.prototype);
      return annotationCls.apply(annotation, annotationArgs), annotation;
    }) : [];
  }
  function _mergeMaps(target, config) {
    StringMapWrapper.forEach(config, function(v, k) {
      return target.set(k, v);
    });
  }
  function bind(token) {
    return new ProviderBuilder(token);
  }
  function provide(token, _a) {
    var useClass = _a.useClass,
        useValue = _a.useValue,
        useExisting = _a.useExisting,
        useFactory = _a.useFactory,
        deps = _a.deps,
        multi = _a.multi;
    return new Provider(token, {
      useClass: useClass,
      useValue: useValue,
      useExisting: useExisting,
      useFactory: useFactory,
      deps: deps,
      multi: multi
    });
  }
  function isProviderLiteral(obj) {
    return obj && "object" == typeof obj && obj.provide;
  }
  function createProvider(obj) {
    return new Provider(obj.provide, obj);
  }
  function resolveReflectiveFactory(provider) {
    var factoryFn,
        resolvedDeps;
    if (isPresent(provider.useClass)) {
      var useClass = resolveForwardRef(provider.useClass);
      factoryFn = reflector.factory(useClass), resolvedDeps = _dependenciesFor(useClass);
    } else
      isPresent(provider.useExisting) ? (factoryFn = function(aliasInstance) {
        return aliasInstance;
      }, resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))]) : isPresent(provider.useFactory) ? (factoryFn = provider.useFactory, resolvedDeps = constructDependencies(provider.useFactory, provider.dependencies)) : (factoryFn = function() {
        return provider.useValue;
      }, resolvedDeps = _EMPTY_LIST);
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.token), [resolveReflectiveFactory(provider)], provider.multi);
  }
  function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []),
        resolved = normalized.map(resolveReflectiveProvider);
    return MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map));
  }
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i],
          existing = normalizedProvidersMap.get(provider.key.id);
      if (isPresent(existing)) {
        if (provider.multiProvider !== existing.multiProvider)
          throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
        if (provider.multiProvider)
          for (var j = 0; j < provider.resolvedFactories.length; j++)
            existing.resolvedFactories.push(provider.resolvedFactories[j]);
        else
          normalizedProvidersMap.set(provider.key.id, provider);
      } else {
        var resolvedProvider;
        resolvedProvider = provider.multiProvider ? new ResolvedReflectiveProvider_(provider.key, ListWrapper.clone(provider.resolvedFactories), provider.multiProvider) : provider, normalizedProvidersMap.set(provider.key.id, resolvedProvider);
      }
    }
    return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
    return providers.forEach(function(b) {
      if (b instanceof Type)
        res.push(provide(b, {useClass: b}));
      else if (b instanceof Provider)
        res.push(b);
      else if (isProviderLiteral(b))
        res.push(createProvider(b));
      else {
        if (!(b instanceof Array))
          throw new InvalidProviderError(b instanceof ProviderBuilder ? b.token : b);
        _normalizeProviders(b, res);
      }
    }), res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
    if (isBlank(dependencies))
      return _dependenciesFor(typeOrFunc);
    var params = dependencies.map(function(t) {
      return [t];
    });
    return dependencies.map(function(t) {
      return _extractToken(typeOrFunc, t, params);
    });
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflector.parameters(typeOrFunc);
    if (isBlank(params))
      return [];
    if (params.some(isBlank))
      throw new NoAnnotationError(typeOrFunc, params);
    return params.map(function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, metadata, params) {
    var depProps = [],
        token = null,
        optional = !1;
    if (!isArray(metadata))
      return metadata instanceof InjectMetadata ? _createDependency(metadata.token, optional, null, null, depProps) : _createDependency(metadata, optional, null, null, depProps);
    for (var lowerBoundVisibility = null,
        upperBoundVisibility = null,
        i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];
      paramMetadata instanceof Type ? token = paramMetadata : paramMetadata instanceof InjectMetadata ? token = paramMetadata.token : paramMetadata instanceof OptionalMetadata ? optional = !0 : paramMetadata instanceof SelfMetadata ? upperBoundVisibility = paramMetadata : paramMetadata instanceof HostMetadata ? upperBoundVisibility = paramMetadata : paramMetadata instanceof SkipSelfMetadata ? lowerBoundVisibility = paramMetadata : paramMetadata instanceof DependencyMetadata && (isPresent(paramMetadata.token) && (token = paramMetadata.token), depProps.push(paramMetadata));
    }
    if (token = resolveForwardRef(token), isPresent(token))
      return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    throw new NoAnnotationError(typeOrFunc, params);
  }
  function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
  }
  function _mapProviders(injector, fn) {
    for (var res = new Array(injector._proto.numberOfProviders),
        i = 0; i < injector._proto.numberOfProviders; ++i)
      res[i] = fn(injector._proto.getProviderAtIndex(i));
    return res;
  }
  function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }
  function _randomChar() {
    return StringWrapper.fromCharCode(97 + Math.floor(25 * Math.random()));
  }
  function _throwError() {
    throw new BaseException("Runtime compiler is not loaded");
  }
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var previousIndex = item.previousIndex;
    if (null === previousIndex)
      return previousIndex;
    var moveOffset = 0;
    return moveOffsets && previousIndex < moveOffsets.length && (moveOffset = moveOffsets[previousIndex]), previousIndex + addRemoveOffset + moveOffset;
  }
  function devModeEqual(a, b) {
    return isListLikeIterable(a) && isListLikeIterable(b) ? areIterablesEqual(a, b, devModeEqual) : !(isListLikeIterable(a) || isPrimitive(a) || isListLikeIterable(b) || isPrimitive(b)) || looseIdentical(a, b);
  }
  function detectWTF() {
    var wtf = global$1.wtf;
    return !(!wtf || !(trace = wtf.trace)) && (events = trace.events, !0);
  }
  function createScope(signature, flags) {
    return void 0 === flags && (flags = null), events.createScope(signature, flags);
  }
  function leave(scope, returnValue) {
    return trace.leaveScope(scope, returnValue), returnValue;
  }
  function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }
  function endTimeRange(range) {
    trace.endTimeRange(range);
  }
  function noopScope(arg0, arg1) {
    return null;
  }
  function flattenNestedViewRenderNodes(nodes) {
    return _flattenNestedViewRenderNodes(nodes, []);
  }
  function _flattenNestedViewRenderNodes(nodes, renderNodes) {
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (node instanceof AppElement) {
        var appEl = node;
        if (renderNodes.push(appEl.nativeElement), isPresent(appEl.nestedViews))
          for (var k = 0; k < appEl.nestedViews.length; k++)
            _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
      } else
        renderNodes.push(node);
    }
    return renderNodes;
  }
  function ensureSlotCount(projectableNodes, expectedSlotCount) {
    var res;
    if (isBlank(projectableNodes))
      res = EMPTY_ARR;
    else if (projectableNodes.length < expectedSlotCount) {
      var givenSlotCount = projectableNodes.length;
      res = ListWrapper.createFixedSize(expectedSlotCount);
      for (var i = 0; i < expectedSlotCount; i++)
        res[i] = i < givenSlotCount ? projectableNodes[i] : EMPTY_ARR;
    } else
      res = projectableNodes;
    return res;
  }
  function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
      case 1:
        return c0 + _toStringWithNull(a1) + c1;
      case 2:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
      case 3:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
      case 4:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
      case 5:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
      case 6:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
      case 7:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
      case 8:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
      case 9:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
      default:
        throw new BaseException("Does not support more than 9 expressions");
    }
  }
  function _toStringWithNull(v) {
    return null != v ? v.toString() : "";
  }
  function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
      if (!devModeEqual(oldValue, newValue))
        throw new ExpressionChangedAfterItHasBeenCheckedException(oldValue, newValue, null);
      return !1;
    }
    return !looseIdentical(oldValue, newValue);
  }
  function castByValue(input, value) {
    return input;
  }
  function pureProxy1(fn) {
    var result,
        v0 = UNINITIALIZED;
    return function(p0) {
      return looseIdentical(v0, p0) || (v0 = p0, result = fn(p0)), result;
    };
  }
  function pureProxy2(fn) {
    var result,
        v0 = UNINITIALIZED,
        v1 = UNINITIALIZED;
    return function(p0, p1) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) || (v0 = p0, v1 = p1, result = fn(p0, p1)), result;
    };
  }
  function pureProxy3(fn) {
    var result,
        v0 = UNINITIALIZED,
        v1 = UNINITIALIZED,
        v2 = UNINITIALIZED;
    return function(p0, p1, p2) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) || (v0 = p0, v1 = p1, v2 = p2, result = fn(p0, p1, p2)), result;
    };
  }
  function pureProxy4(fn) {
    var result,
        v0,
        v1,
        v2,
        v3;
    return v0 = v1 = v2 = v3 = UNINITIALIZED, function(p0, p1, p2, p3) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, result = fn(p0, p1, p2, p3)), result;
    };
  }
  function pureProxy5(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4;
    return v0 = v1 = v2 = v3 = v4 = UNINITIALIZED, function(p0, p1, p2, p3, p4) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, result = fn(p0, p1, p2, p3, p4)), result;
    };
  }
  function pureProxy6(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5;
    return v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED, function(p0, p1, p2, p3, p4, p5) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, result = fn(p0, p1, p2, p3, p4, p5)), result;
    };
  }
  function pureProxy7(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED, function(p0, p1, p2, p3, p4, p5, p6) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, result = fn(p0, p1, p2, p3, p4, p5, p6)), result;
    };
  }
  function pureProxy8(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED, function(p0, p1, p2, p3, p4, p5, p6, p7) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, result = fn(p0, p1, p2, p3, p4, p5, p6, p7)), result;
    };
  }
  function pureProxy9(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED, function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) && looseIdentical(v8, p8) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, v8 = p8, result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8)), result;
    };
  }
  function pureProxy10(fn) {
    var result,
        v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        v9;
    return v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED, function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
      return looseIdentical(v0, p0) && looseIdentical(v1, p1) && looseIdentical(v2, p2) && looseIdentical(v3, p3) && looseIdentical(v4, p4) && looseIdentical(v5, p5) && looseIdentical(v6, p6) && looseIdentical(v7, p7) && looseIdentical(v8, p8) && looseIdentical(v9, p9) || (v0 = p0, v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, v8 = p8, v9 = p9, result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)), result;
    };
  }
  function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }
  function enableProdMode() {
    if (_runModeLocked)
      throw new BaseException("Cannot enable prod mode after platform setup.");
    _devMode = !1;
  }
  function lockRunMode() {
    console.warn("lockRunMode() is deprecated and not needed any more.");
  }
  function isDevMode() {
    return _runModeLocked = !0, _devMode;
  }
  function createPlatform(injector) {
    if (isPresent(_platform) && !_platform.disposed)
      throw new BaseException("There can be only one platform. Destroy the previous one to create a new one.");
    _platform = injector.get(PlatformRef);
    var inits = injector.get(PLATFORM_INITIALIZER, null);
    return isPresent(inits) && inits.forEach(function(init) {
      return init();
    }), _platform;
  }
  function createPlatformFactory(parentPlaformFactory, name, providers) {
    void 0 === providers && (providers = []);
    var marker = new OpaqueToken("Platform: " + name);
    return function(extraProviders) {
      return void 0 === extraProviders && (extraProviders = []), getPlatform() || (parentPlaformFactory ? parentPlaformFactory(providers.concat(extraProviders).concat({
        provide: marker,
        useValue: !0
      })) : createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
        provide: marker,
        useValue: !0
      })))), assertPlatform(marker);
    };
  }
  function assertPlatform(requiredToken) {
    var platform = getPlatform();
    if (isBlank(platform))
      throw new BaseException("No platform exists!");
    if (isPresent(platform) && isBlank(platform.injector.get(requiredToken, null)))
      throw new BaseException("A platform with a different configuration has been created. Please destroy it first.");
    return platform;
  }
  function disposePlatform() {
    destroyPlatform();
  }
  function destroyPlatform() {
    isPresent(_platform) && !_platform.destroyed && _platform.destroy();
  }
  function getPlatform() {
    return isPresent(_platform) && !_platform.disposed ? _platform : null;
  }
  function coreBootstrap(componentFactory, injector) {
    throw new BaseException("coreBootstrap is deprecated. Use bootstrapModuleFactory instead.");
  }
  function coreLoadAndBootstrap(componentType, injector) {
    throw new BaseException("coreLoadAndBootstrap is deprecated. Use bootstrapModule instead.");
  }
  function _callAndReportToExceptionHandler(exceptionHandler, callback) {
    try {
      var result = callback();
      return isPromise(result) ? result.catch(function(e) {
        throw exceptionHandler.call(e), e;
      }) : result;
    } catch (e) {
      throw exceptionHandler.call(e), e;
    }
  }
  function checkNotEmpty(value, modulePath, exportName) {
    if (!value)
      throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    return value;
  }
  function asNativeElements(debugEls) {
    return debugEls.map(function(el) {
      return el.nativeElement;
    });
  }
  function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function(node) {
      node instanceof DebugElement && (predicate(node) && matches.push(node), _queryElementChildren(node, predicate, matches));
    });
  }
  function _queryNodeChildren(parentNode, predicate, matches) {
    parentNode instanceof DebugElement && parentNode.childNodes.forEach(function(node) {
      predicate(node) && matches.push(node), node instanceof DebugElement && _queryNodeChildren(node, predicate, matches);
    });
  }
  function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
  }
  function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
  }
  function _reflector() {
    return reflector;
  }
  function _iterableDiffersFactory() {
    return defaultIterableDiffers;
  }
  function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
  }
  function animate(timing, styles) {
    void 0 === styles && (styles = null);
    var stylesEntry = styles;
    if (!isPresent(stylesEntry)) {
      var EMPTY_STYLE = {};
      stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
    }
    return new AnimationAnimateMetadata(timing, stylesEntry);
  }
  function group(steps) {
    return new AnimationGroupMetadata(steps);
  }
  function sequence(steps) {
    return new AnimationSequenceMetadata(steps);
  }
  function style(tokens) {
    var input,
        offset = null;
    return isString(tokens) ? input = [tokens] : (input = isArray(tokens) ? tokens : [tokens], input.forEach(function(entry) {
      var entryOffset = entry.offset;
      isPresent(entryOffset) && (offset = null == offset ? NumberWrapper.parseFloat(entryOffset) : offset);
    })), new AnimationStyleMetadata(input, offset);
  }
  function state(stateNameExpr, styles) {
    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
  }
  function keyframes(steps) {
    return new AnimationKeyframesSequenceMetadata(steps);
  }
  function transition(stateChangeExpr, steps) {
    var animationData = isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
  }
  function trigger(name, animation) {
    return new AnimationEntryMetadata(name, animation);
  }
  function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    void 0 === nullValue && (nullValue = null);
    var finalStyles = {};
    return StringMapWrapper.forEach(newStyles, function(value, prop) {
      finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
    }), StringMapWrapper.forEach(previousStyles, function(value, prop) {
      isPresent(finalStyles[prop]) || (finalStyles[prop] = nullValue);
    }), finalStyles;
  }
  function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
    var limit = keyframes.length - 1,
        firstKeyframe = keyframes[0],
        flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles),
        extraFirstKeyframeStyles = {},
        hasExtraFirstStyles = !1;
    StringMapWrapper.forEach(collectedStyles, function(value, prop) {
      flatenedFirstKeyframeStyles[prop] || (flatenedFirstKeyframeStyles[prop] = value, extraFirstKeyframeStyles[prop] = value, hasExtraFirstStyles = !0);
    });
    var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles),
        finalKeyframe = keyframes[limit];
    ListWrapper.insert(finalKeyframe.styles.styles, 0, finalStateStyles);
    var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles),
        extraFinalKeyframeStyles = {},
        hasExtraFinalStyles = !1;
    return StringMapWrapper.forEach(keyframeCollectedStyles, function(value, prop) {
      isPresent(flatenedFinalKeyframeStyles[prop]) || (extraFinalKeyframeStyles[prop] = AUTO_STYLE, hasExtraFinalStyles = !0);
    }), hasExtraFinalStyles && finalKeyframe.styles.styles.push(extraFinalKeyframeStyles), StringMapWrapper.forEach(flatenedFinalKeyframeStyles, function(value, prop) {
      isPresent(flatenedFirstKeyframeStyles[prop]) || (extraFirstKeyframeStyles[prop] = AUTO_STYLE, hasExtraFirstStyles = !0);
    }), hasExtraFirstStyles && firstKeyframe.styles.styles.push(extraFirstKeyframeStyles), keyframes;
  }
  function clearStyles(styles) {
    var finalStyles = {};
    return StringMapWrapper.keys(styles).forEach(function(key) {
      finalStyles[key] = null;
    }), finalStyles;
  }
  function collectAndResolveStyles(collection, styles) {
    return styles.map(function(entry) {
      var stylesObj = {};
      return StringMapWrapper.forEach(entry, function(value, prop) {
        value == FILL_STYLE_FLAG && (value = collection[prop], isPresent(value) || (value = AUTO_STYLE)), collection[prop] = value, stylesObj[prop] = value;
      }), stylesObj;
    });
  }
  function renderStyles(element, renderer, styles) {
    StringMapWrapper.forEach(styles, function(value, prop) {
      renderer.setElementStyle(element, prop, value);
    });
  }
  function flattenStyles(styles) {
    var finalStyles = {};
    return styles.forEach(function(entry) {
      StringMapWrapper.forEach(entry, function(value, prop) {
        finalStyles[prop] = value;
      });
    }), finalStyles;
  }
  function _findLastRenderNode(node) {
    var lastNode;
    if (node instanceof AppElement) {
      var appEl = node;
      if (lastNode = appEl.nativeElement, isPresent(appEl.nestedViews))
        for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
          var nestedView = appEl.nestedViews[i];
          nestedView.rootNodesOrAppElements.length > 0 && (lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]));
        }
    } else
      lastNode = node;
    return lastNode;
  }
  function wtfInit() {}
  var globalScope;
  globalScope = "undefined" == typeof window ? "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : global : window;
  var global$1 = globalScope,
      Type = Function,
      Math = global$1.Math;
  global$1.assert = function(condition) {};
  var StringWrapper = function() {
    function StringWrapper() {}
    return StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    }, StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    }, StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    }, StringWrapper.equals = function(s, s2) {
      return s === s2;
    }, StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        for (var pos = 0,
            i = 0; i < s.length && s[i] == charVal; i++)
          pos++;
        s = s.substring(pos);
      }
      return s;
    }, StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        for (var pos = s.length,
            i = s.length - 1; i >= 0 && s[i] == charVal; i--)
          pos--;
        s = s.substring(0, pos);
      }
      return s;
    }, StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    }, StringWrapper.slice = function(s, from, to) {
      return void 0 === from && (from = 0), void 0 === to && (to = null), s.slice(from, null === to ? void 0 : to);
    }, StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        for (var matches = [],
            _i = 0; _i < arguments.length; _i++)
          matches[_i - 0] = arguments[_i];
        return matches.splice(-2, 2), cb(matches);
      });
    }, StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    }, StringWrapper.compare = function(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }, StringWrapper;
  }(),
      NumberParseError = function(_super) {
        function NumberParseError(message) {
          _super.call(this), this.message = message;
        }
        return __extends(NumberParseError, _super), NumberParseError.prototype.toString = function() {
          return this.message;
        }, NumberParseError;
      }(Error),
      NumberWrapper = function() {
        function NumberWrapper() {}
        return NumberWrapper.toFixed = function(n, fractionDigits) {
          return n.toFixed(fractionDigits);
        }, NumberWrapper.equal = function(a, b) {
          return a === b;
        }, NumberWrapper.parseIntAutoRadix = function(text) {
          var result = parseInt(text);
          if (isNaN(result))
            throw new NumberParseError("Invalid integer literal when parsing " + text);
          return result;
        }, NumberWrapper.parseInt = function(text, radix) {
          if (10 == radix) {
            if (/^(\-|\+)?[0-9]+$/.test(text))
              return parseInt(text, radix);
          } else if (16 == radix) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text))
              return parseInt(text, radix);
          } else {
            var result = parseInt(text, radix);
            if (!isNaN(result))
              return result;
          }
          throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
        }, NumberWrapper.parseFloat = function(text) {
          return parseFloat(text);
        }, Object.defineProperty(NumberWrapper, "NaN", {
          get: function() {
            return NaN;
          },
          enumerable: !0,
          configurable: !0
        }), NumberWrapper.isNumeric = function(value) {
          return !isNaN(value - parseFloat(value));
        }, NumberWrapper.isNaN = function(value) {
          return isNaN(value);
        }, NumberWrapper.isInteger = function(value) {
          return Number.isInteger(value);
        }, NumberWrapper;
      }(),
      _symbolIterator = null,
      InjectMetadata = function() {
        function InjectMetadata(token) {
          this.token = token;
        }
        return InjectMetadata.prototype.toString = function() {
          return "@Inject(" + stringify(this.token) + ")";
        }, InjectMetadata;
      }(),
      OptionalMetadata = function() {
        function OptionalMetadata() {}
        return OptionalMetadata.prototype.toString = function() {
          return "@Optional()";
        }, OptionalMetadata;
      }(),
      DependencyMetadata = function() {
        function DependencyMetadata() {}
        return Object.defineProperty(DependencyMetadata.prototype, "token", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), DependencyMetadata;
      }(),
      InjectableMetadata = function() {
        function InjectableMetadata() {}
        return InjectableMetadata;
      }(),
      SelfMetadata = function() {
        function SelfMetadata() {}
        return SelfMetadata.prototype.toString = function() {
          return "@Self()";
        }, SelfMetadata;
      }(),
      SkipSelfMetadata = function() {
        function SkipSelfMetadata() {}
        return SkipSelfMetadata.prototype.toString = function() {
          return "@SkipSelf()";
        }, SkipSelfMetadata;
      }(),
      HostMetadata = function() {
        function HostMetadata() {}
        return HostMetadata.prototype.toString = function() {
          return "@Host()";
        }, HostMetadata;
      }(),
      _nextClassId = 0,
      Reflect = global$1.Reflect,
      Inject = makeParamDecorator(InjectMetadata),
      Optional = makeParamDecorator(OptionalMetadata),
      Injectable = makeDecorator(InjectableMetadata),
      Self = makeParamDecorator(SelfMetadata),
      Host = makeParamDecorator(HostMetadata),
      SkipSelf = makeParamDecorator(SkipSelfMetadata),
      OpaqueToken = function() {
        function OpaqueToken(_desc) {
          this._desc = _desc;
        }
        return OpaqueToken.prototype.toString = function() {
          return "Token " + this._desc;
        }, OpaqueToken;
      }();
  OpaqueToken.decorators = [{type: Injectable}], OpaqueToken.ctorParameters = [null];
  var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken("AnalyzeForEntryComponents"),
      AttributeMetadata = function(_super) {
        function AttributeMetadata(attributeName) {
          _super.call(this), this.attributeName = attributeName;
        }
        return __extends(AttributeMetadata, _super), Object.defineProperty(AttributeMetadata.prototype, "token", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), AttributeMetadata.prototype.toString = function() {
          return "@Attribute(" + stringify(this.attributeName) + ")";
        }, AttributeMetadata;
      }(DependencyMetadata),
      QueryMetadata = function(_super) {
        function QueryMetadata(_selector, _a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.descendants,
              descendants = void 0 !== _c && _c,
              _d = _b.first,
              first = void 0 !== _d && _d,
              _e = _b.read,
              read = void 0 === _e ? null : _e;
          _super.call(this), this._selector = _selector, this.descendants = descendants, this.first = first, this.read = read;
        }
        return __extends(QueryMetadata, _super), Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
          get: function() {
            return !1;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryMetadata.prototype, "selector", {
          get: function() {
            return resolveForwardRef(this._selector);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
          get: function() {
            return isString(this.selector);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryMetadata.prototype, "varBindings", {
          get: function() {
            return StringWrapper.split(this.selector, /\s*,\s*/g);
          },
          enumerable: !0,
          configurable: !0
        }), QueryMetadata.prototype.toString = function() {
          return "@Query(" + stringify(this.selector) + ")";
        }, QueryMetadata;
      }(DependencyMetadata),
      ContentChildrenMetadata = function(_super) {
        function ContentChildrenMetadata(_selector, _a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.descendants,
              descendants = void 0 !== _c && _c,
              _d = _b.read,
              read = void 0 === _d ? null : _d;
          _super.call(this, _selector, {
            descendants: descendants,
            read: read
          });
        }
        return __extends(ContentChildrenMetadata, _super), ContentChildrenMetadata;
      }(QueryMetadata),
      ContentChildMetadata = function(_super) {
        function ContentChildMetadata(_selector, _a) {
          var _b = (void 0 === _a ? {} : _a).read,
              read = void 0 === _b ? null : _b;
          _super.call(this, _selector, {
            descendants: !0,
            first: !0,
            read: read
          });
        }
        return __extends(ContentChildMetadata, _super), ContentChildMetadata;
      }(QueryMetadata),
      ViewQueryMetadata = function(_super) {
        function ViewQueryMetadata(_selector, _a) {
          var _b = void 0 === _a ? {} : _a,
              _c = _b.descendants,
              descendants = void 0 !== _c && _c,
              _d = _b.first,
              first = void 0 !== _d && _d,
              _e = _b.read,
              read = void 0 === _e ? null : _e;
          _super.call(this, _selector, {
            descendants: descendants,
            first: first,
            read: read
          });
        }
        return __extends(ViewQueryMetadata, _super), Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
          get: function() {
            return !0;
          },
          enumerable: !0,
          configurable: !0
        }), ViewQueryMetadata.prototype.toString = function() {
          return "@ViewQuery(" + stringify(this.selector) + ")";
        }, ViewQueryMetadata;
      }(QueryMetadata),
      ViewChildrenMetadata = function(_super) {
        function ViewChildrenMetadata(_selector, _a) {
          var _b = (void 0 === _a ? {} : _a).read,
              read = void 0 === _b ? null : _b;
          _super.call(this, _selector, {
            descendants: !0,
            read: read
          });
        }
        return __extends(ViewChildrenMetadata, _super), ViewChildrenMetadata;
      }(ViewQueryMetadata),
      ViewChildMetadata = function(_super) {
        function ViewChildMetadata(_selector, _a) {
          var _b = (void 0 === _a ? {} : _a).read,
              read = void 0 === _b ? null : _b;
          _super.call(this, _selector, {
            descendants: !0,
            first: !0,
            read: read
          });
        }
        return __extends(ViewChildMetadata, _super), ViewChildMetadata;
      }(ViewQueryMetadata);
  exports.ChangeDetectionStrategy, function(ChangeDetectionStrategy) {
    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush = 0] = "OnPush", ChangeDetectionStrategy[ChangeDetectionStrategy.Default = 1] = "Default";
  }(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
  var ChangeDetectorStatus;
  !function(ChangeDetectorStatus) {
    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce = 0] = "CheckOnce", ChangeDetectorStatus[ChangeDetectorStatus.Checked = 1] = "Checked", ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways = 2] = "CheckAlways", ChangeDetectorStatus[ChangeDetectorStatus.Detached = 3] = "Detached", ChangeDetectorStatus[ChangeDetectorStatus.Errored = 4] = "Errored", ChangeDetectorStatus[ChangeDetectorStatus.Destroyed = 5] = "Destroyed";
  }(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
  var LifecycleHooks,
      CHANGE_DETECTION_STRATEGY_VALUES = [exports.ChangeDetectionStrategy.OnPush, exports.ChangeDetectionStrategy.Default],
      DirectiveMetadata = function(_super) {
        function DirectiveMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              selector = _b.selector,
              inputs = _b.inputs,
              outputs = _b.outputs,
              properties = _b.properties,
              events = _b.events,
              host = _b.host,
              providers = _b.providers,
              exportAs = _b.exportAs,
              queries = _b.queries;
          _super.call(this), this.selector = selector, this._inputs = inputs, this._properties = properties, this._outputs = outputs, this._events = events, this.host = host, this.exportAs = exportAs, this.queries = queries, this._providers = providers;
        }
        return __extends(DirectiveMetadata, _super), Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
          get: function() {
            return isPresent(this._properties) && this._properties.length > 0 ? this._properties : this._inputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "properties", {
          get: function() {
            return this.inputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
          get: function() {
            return isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "events", {
          get: function() {
            return this.outputs;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DirectiveMetadata.prototype, "providers", {
          get: function() {
            return this._providers;
          },
          enumerable: !0,
          configurable: !0
        }), DirectiveMetadata;
      }(InjectableMetadata),
      ComponentMetadata = function(_super) {
        function ComponentMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              selector = _b.selector,
              inputs = _b.inputs,
              outputs = _b.outputs,
              properties = _b.properties,
              events = _b.events,
              host = _b.host,
              exportAs = _b.exportAs,
              moduleId = _b.moduleId,
              providers = _b.providers,
              viewProviders = _b.viewProviders,
              _c = _b.changeDetection,
              changeDetection = void 0 === _c ? exports.ChangeDetectionStrategy.Default : _c,
              queries = _b.queries,
              templateUrl = _b.templateUrl,
              template = _b.template,
              styleUrls = _b.styleUrls,
              styles = _b.styles,
              animations = _b.animations,
              directives = _b.directives,
              pipes = _b.pipes,
              encapsulation = _b.encapsulation,
              interpolation = _b.interpolation,
              entryComponents = _b.entryComponents;
          _super.call(this, {
            selector: selector,
            inputs: inputs,
            outputs: outputs,
            properties: properties,
            events: events,
            host: host,
            exportAs: exportAs,
            providers: providers,
            queries: queries
          }), this.changeDetection = changeDetection, this._viewProviders = viewProviders, this.templateUrl = templateUrl, this.template = template, this.styleUrls = styleUrls, this.styles = styles, this.directives = directives, this.pipes = pipes, this.encapsulation = encapsulation, this.moduleId = moduleId, this.animations = animations, this.interpolation = interpolation, this.entryComponents = entryComponents;
        }
        return __extends(ComponentMetadata, _super), Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
          get: function() {
            return this._viewProviders;
          },
          enumerable: !0,
          configurable: !0
        }), ComponentMetadata;
      }(DirectiveMetadata),
      PipeMetadata = function(_super) {
        function PipeMetadata(_a) {
          var name = _a.name,
              pure = _a.pure;
          _super.call(this), this.name = name, this._pure = pure;
        }
        return __extends(PipeMetadata, _super), Object.defineProperty(PipeMetadata.prototype, "pure", {
          get: function() {
            return !isPresent(this._pure) || this._pure;
          },
          enumerable: !0,
          configurable: !0
        }), PipeMetadata;
      }(InjectableMetadata),
      InputMetadata = function() {
        function InputMetadata(bindingPropertyName) {
          this.bindingPropertyName = bindingPropertyName;
        }
        return InputMetadata;
      }(),
      OutputMetadata = function() {
        function OutputMetadata(bindingPropertyName) {
          this.bindingPropertyName = bindingPropertyName;
        }
        return OutputMetadata;
      }(),
      HostBindingMetadata = function() {
        function HostBindingMetadata(hostPropertyName) {
          this.hostPropertyName = hostPropertyName;
        }
        return HostBindingMetadata;
      }(),
      HostListenerMetadata = function() {
        function HostListenerMetadata(eventName, args) {
          this.eventName = eventName, this.args = args;
        }
        return HostListenerMetadata;
      }(),
      CUSTOM_ELEMENTS_SCHEMA = {name: "custom-elements"},
      NgModuleMetadata = function(_super) {
        function NgModuleMetadata(options) {
          void 0 === options && (options = {}), _super.call(this), this._providers = options.providers, this.declarations = options.declarations, this.imports = options.imports, this.exports = options.exports, this.entryComponents = options.entryComponents, this.bootstrap = options.bootstrap, this.schemas = options.schemas;
        }
        return __extends(NgModuleMetadata, _super), Object.defineProperty(NgModuleMetadata.prototype, "providers", {
          get: function() {
            return this._providers;
          },
          enumerable: !0,
          configurable: !0
        }), NgModuleMetadata;
      }(InjectableMetadata);
  !function(LifecycleHooks) {
    LifecycleHooks[LifecycleHooks.OnInit = 0] = "OnInit", LifecycleHooks[LifecycleHooks.OnDestroy = 1] = "OnDestroy", LifecycleHooks[LifecycleHooks.DoCheck = 2] = "DoCheck", LifecycleHooks[LifecycleHooks.OnChanges = 3] = "OnChanges", LifecycleHooks[LifecycleHooks.AfterContentInit = 4] = "AfterContentInit", LifecycleHooks[LifecycleHooks.AfterContentChecked = 5] = "AfterContentChecked", LifecycleHooks[LifecycleHooks.AfterViewInit = 6] = "AfterViewInit", LifecycleHooks[LifecycleHooks.AfterViewChecked = 7] = "AfterViewChecked";
  }(LifecycleHooks || (LifecycleHooks = {}));
  var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked],
      OnChanges = function() {
        function OnChanges() {}
        return OnChanges;
      }(),
      OnInit = function() {
        function OnInit() {}
        return OnInit;
      }(),
      DoCheck = function() {
        function DoCheck() {}
        return DoCheck;
      }(),
      OnDestroy = function() {
        function OnDestroy() {}
        return OnDestroy;
      }(),
      AfterContentInit = function() {
        function AfterContentInit() {}
        return AfterContentInit;
      }(),
      AfterContentChecked = function() {
        function AfterContentChecked() {}
        return AfterContentChecked;
      }(),
      AfterViewInit = function() {
        function AfterViewInit() {}
        return AfterViewInit;
      }(),
      AfterViewChecked = function() {
        function AfterViewChecked() {}
        return AfterViewChecked;
      }();
  exports.ViewEncapsulation, function(ViewEncapsulation) {
    ViewEncapsulation[ViewEncapsulation.Emulated = 0] = "Emulated", ViewEncapsulation[ViewEncapsulation.Native = 1] = "Native", ViewEncapsulation[ViewEncapsulation.None = 2] = "None";
  }(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
  var VIEW_ENCAPSULATION_VALUES = [exports.ViewEncapsulation.Emulated, exports.ViewEncapsulation.Native, exports.ViewEncapsulation.None],
      ViewMetadata = function() {
        function ViewMetadata(_a) {
          var _b = void 0 === _a ? {} : _a,
              templateUrl = _b.templateUrl,
              template = _b.template,
              directives = _b.directives,
              pipes = _b.pipes,
              encapsulation = _b.encapsulation,
              styles = _b.styles,
              styleUrls = _b.styleUrls,
              animations = _b.animations,
              interpolation = _b.interpolation;
          this.templateUrl = templateUrl, this.template = template, this.styleUrls = styleUrls, this.styles = styles, this.directives = directives, this.pipes = pipes, this.encapsulation = encapsulation, this.animations = animations, this.interpolation = interpolation;
        }
        return ViewMetadata;
      }(),
      Component = makeDecorator(ComponentMetadata),
      Directive = makeDecorator(DirectiveMetadata),
      Attribute = makeParamDecorator(AttributeMetadata),
      Query = makeParamDecorator(QueryMetadata),
      ContentChildren = makePropDecorator(ContentChildrenMetadata),
      ContentChild = makePropDecorator(ContentChildMetadata),
      ViewChildren = makePropDecorator(ViewChildrenMetadata),
      ViewChild = makePropDecorator(ViewChildMetadata),
      ViewQuery = makeParamDecorator(ViewQueryMetadata),
      Pipe = makeDecorator(PipeMetadata),
      Input = makePropDecorator(InputMetadata),
      Output = makePropDecorator(OutputMetadata),
      HostBinding = makePropDecorator(HostBindingMetadata),
      HostListener = makePropDecorator(HostListenerMetadata),
      NgModule = makeDecorator(NgModuleMetadata),
      BaseWrappedException = function(_super) {
        function BaseWrappedException(message) {
          _super.call(this, message);
        }
        return __extends(BaseWrappedException, _super), Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
          get: function() {
            return "";
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "originalException", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "context", {
          get: function() {
            return null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(BaseWrappedException.prototype, "message", {
          get: function() {
            return "";
          },
          enumerable: !0,
          configurable: !0
        }), BaseWrappedException;
      }(Error),
      Map$1 = global$1.Map,
      Set = global$1.Set,
      createMapFromPairs = function() {
        try {
          if (1 === new Map$1([[1, 2]]).size)
            return function(pairs) {
              return new Map$1(pairs);
            };
        } catch (e) {}
        return function(pairs) {
          for (var map = new Map$1,
              i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
          }
          return map;
        };
      }(),
      createMapFromMap = function() {
        try {
          if (new Map$1(new Map$1))
            return function(m) {
              return new Map$1(m);
            };
        } catch (e) {}
        return function(m) {
          var map = new Map$1;
          return m.forEach(function(v, k) {
            map.set(k, v);
          }), map;
        };
      }(),
      _clearValues = function() {
        return (new Map$1).keys().next ? function(m) {
          for (var k,
              keyIterator = m.keys(); !(k = keyIterator.next()).done; )
            m.set(k.value, null);
        } : function(m) {
          m.forEach(function(v, k) {
            m.set(k, null);
          });
        };
      }(),
      _arrayFromMap = function() {
        try {
          if ((new Map$1).values().next)
            return function(m, getValues) {
              return getValues ? Array.from(m.values()) : Array.from(m.keys());
            };
        } catch (e) {}
        return function(m, getValues) {
          var res = ListWrapper.createFixedSize(m.size),
              i = 0;
          return m.forEach(function(v, k) {
            res[i] = getValues ? v : k, i++;
          }), res;
        };
      }(),
      MapWrapper = function() {
        function MapWrapper() {}
        return MapWrapper.clone = function(m) {
          return createMapFromMap(m);
        }, MapWrapper.createFromStringMap = function(stringMap) {
          var result = new Map$1;
          for (var prop in stringMap)
            result.set(prop, stringMap[prop]);
          return result;
        }, MapWrapper.toStringMap = function(m) {
          var r = {};
          return m.forEach(function(v, k) {
            return r[k] = v;
          }), r;
        }, MapWrapper.createFromPairs = function(pairs) {
          return createMapFromPairs(pairs);
        }, MapWrapper.clearValues = function(m) {
          _clearValues(m);
        }, MapWrapper.iterable = function(m) {
          return m;
        }, MapWrapper.keys = function(m) {
          return _arrayFromMap(m, !1);
        }, MapWrapper.values = function(m) {
          return _arrayFromMap(m, !0);
        }, MapWrapper;
      }(),
      StringMapWrapper = function() {
        function StringMapWrapper() {}
        return StringMapWrapper.create = function() {
          return {};
        }, StringMapWrapper.contains = function(map, key) {
          return map.hasOwnProperty(key);
        }, StringMapWrapper.get = function(map, key) {
          return map.hasOwnProperty(key) ? map[key] : void 0;
        }, StringMapWrapper.set = function(map, key, value) {
          map[key] = value;
        }, StringMapWrapper.keys = function(map) {
          return Object.keys(map);
        }, StringMapWrapper.values = function(map) {
          return Object.keys(map).map(function(k) {
            return map[k];
          });
        }, StringMapWrapper.isEmpty = function(map) {
          for (var prop in map)
            return !1;
          return !0;
        }, StringMapWrapper.delete = function(map, key) {
          delete map[key];
        }, StringMapWrapper.forEach = function(map, callback) {
          for (var _i = 0,
              _a = Object.keys(map); _i < _a.length; _i++) {
            var k = _a[_i];
            callback(map[k], k);
          }
        }, StringMapWrapper.merge = function(m1, m2) {
          for (var m = {},
              _i = 0,
              _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
          }
          for (var _b = 0,
              _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
          }
          return m;
        }, StringMapWrapper.equals = function(m1, m2) {
          var k1 = Object.keys(m1),
              k2 = Object.keys(m2);
          if (k1.length != k2.length)
            return !1;
          for (var key,
              i = 0; i < k1.length; i++)
            if (key = k1[i], m1[key] !== m2[key])
              return !1;
          return !0;
        }, StringMapWrapper;
      }(),
      ListWrapper = function() {
        function ListWrapper() {}
        return ListWrapper.createFixedSize = function(size) {
          return new Array(size);
        }, ListWrapper.createGrowableSize = function(size) {
          return new Array(size);
        }, ListWrapper.clone = function(array) {
          return array.slice(0);
        }, ListWrapper.forEachWithIndex = function(array, fn) {
          for (var i = 0; i < array.length; i++)
            fn(array[i], i);
        }, ListWrapper.first = function(array) {
          return array ? array[0] : null;
        }, ListWrapper.last = function(array) {
          return array && 0 != array.length ? array[array.length - 1] : null;
        }, ListWrapper.indexOf = function(array, value, startIndex) {
          return void 0 === startIndex && (startIndex = 0), array.indexOf(value, startIndex);
        }, ListWrapper.contains = function(list, el) {
          return list.indexOf(el) !== -1;
        }, ListWrapper.reversed = function(array) {
          var a = ListWrapper.clone(array);
          return a.reverse();
        }, ListWrapper.concat = function(a, b) {
          return a.concat(b);
        }, ListWrapper.insert = function(list, index, value) {
          list.splice(index, 0, value);
        }, ListWrapper.removeAt = function(list, index) {
          var res = list[index];
          return list.splice(index, 1), res;
        }, ListWrapper.removeAll = function(list, items) {
          for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
          }
        }, ListWrapper.remove = function(list, el) {
          var index = list.indexOf(el);
          return index > -1 && (list.splice(index, 1), !0);
        }, ListWrapper.clear = function(list) {
          list.length = 0;
        }, ListWrapper.isEmpty = function(list) {
          return 0 == list.length;
        }, ListWrapper.fill = function(list, value, start, end) {
          void 0 === start && (start = 0), void 0 === end && (end = null), list.fill(value, start, null === end ? list.length : end);
        }, ListWrapper.equals = function(a, b) {
          if (a.length != b.length)
            return !1;
          for (var i = 0; i < a.length; ++i)
            if (a[i] !== b[i])
              return !1;
          return !0;
        }, ListWrapper.slice = function(l, from, to) {
          return void 0 === from && (from = 0), void 0 === to && (to = null), l.slice(from, null === to ? void 0 : to);
        }, ListWrapper.splice = function(l, from, length) {
          return l.splice(from, length);
        }, ListWrapper.sort = function(l, compareFn) {
          isPresent(compareFn) ? l.sort(compareFn) : l.sort();
        }, ListWrapper.toString = function(l) {
          return l.toString();
        }, ListWrapper.toJSON = function(l) {
          return JSON.stringify(l);
        }, ListWrapper.maximum = function(list, predicate) {
          if (0 == list.length)
            return null;
          for (var solution = null,
              maxValue = -(1 / 0),
              index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (!isBlank(candidate)) {
              var candidateValue = predicate(candidate);
              candidateValue > maxValue && (solution = candidate, maxValue = candidateValue);
            }
          }
          return solution;
        }, ListWrapper.flatten = function(list) {
          var target = [];
          return _flattenArray(list, target), target;
        }, ListWrapper.addAll = function(list, source) {
          for (var i = 0; i < source.length; i++)
            list.push(source[i]);
        }, ListWrapper;
      }(),
      createSetFromList = function() {
        var test = new Set([1, 2, 3]);
        return 3 === test.size ? function(lst) {
          return new Set(lst);
        } : function(lst) {
          var res = new Set(lst);
          if (res.size !== lst.length)
            for (var i = 0; i < lst.length; i++)
              res.add(lst[i]);
          return res;
        };
      }(),
      SetWrapper = function() {
        function SetWrapper() {}
        return SetWrapper.createFromList = function(lst) {
          return createSetFromList(lst);
        }, SetWrapper.has = function(s, key) {
          return s.has(key);
        }, SetWrapper.delete = function(m, k) {
          m.delete(k);
        }, SetWrapper;
      }(),
      _ArrayLogger = function() {
        function _ArrayLogger() {
          this.res = [];
        }
        return _ArrayLogger.prototype.log = function(s) {
          this.res.push(s);
        }, _ArrayLogger.prototype.logError = function(s) {
          this.res.push(s);
        }, _ArrayLogger.prototype.logGroup = function(s) {
          this.res.push(s);
        }, _ArrayLogger.prototype.logGroupEnd = function() {}, _ArrayLogger;
      }(),
      ExceptionHandler = function() {
        function ExceptionHandler(_logger, _rethrowException) {
          void 0 === _rethrowException && (_rethrowException = !0), this._logger = _logger, this._rethrowException = _rethrowException;
        }
        return ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
          void 0 === stackTrace && (stackTrace = null), void 0 === reason && (reason = null);
          var l = new _ArrayLogger,
              e = new ExceptionHandler(l, (!1));
          return e.call(exception, stackTrace, reason), l.res.join("\n");
        }, ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
          void 0 === stackTrace && (stackTrace = null), void 0 === reason && (reason = null);
          var originalException = this._findOriginalException(exception),
              originalStack = this._findOriginalStack(exception),
              context = this._findContext(exception);
          if (this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception)), isPresent(stackTrace) && isBlank(originalStack) && (this._logger.logError("STACKTRACE:"), this._logger.logError(this._longStackTrace(stackTrace))), isPresent(reason) && this._logger.logError("REASON: " + reason), isPresent(originalException) && this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException)), isPresent(originalStack) && (this._logger.logError("ORIGINAL STACKTRACE:"), this._logger.logError(this._longStackTrace(originalStack))), isPresent(context) && (this._logger.logError("ERROR CONTEXT:"), this._logger.logError(context)), this._logger.logGroupEnd(), this._rethrowException)
            throw exception;
        }, ExceptionHandler.prototype._extractMessage = function(exception) {
          return exception instanceof BaseWrappedException ? exception.wrapperMessage : exception.toString();
        }, ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
          return isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
        }, ExceptionHandler.prototype._findContext = function(exception) {
          try {
            return exception instanceof BaseWrappedException ? isPresent(exception.context) ? exception.context : this._findContext(exception.originalException) : null;
          } catch (e) {
            return null;
          }
        }, ExceptionHandler.prototype._findOriginalException = function(exception) {
          if (!(exception instanceof BaseWrappedException))
            return null;
          for (var e = exception.originalException; e instanceof BaseWrappedException && isPresent(e.originalException); )
            e = e.originalException;
          return e;
        }, ExceptionHandler.prototype._findOriginalStack = function(exception) {
          if (!(exception instanceof BaseWrappedException))
            return null;
          for (var e = exception,
              stack = exception.originalStack; e instanceof BaseWrappedException && isPresent(e.originalException); )
            e = e.originalException, e instanceof BaseWrappedException && isPresent(e.originalException) && (stack = e.originalStack);
          return stack;
        }, ExceptionHandler;
      }(),
      BaseException = function(_super) {
        function BaseException(message) {
          void 0 === message && (message = "--"), _super.call(this, message), this.message = message, this.stack = new Error(message).stack;
        }
        return __extends(BaseException, _super), BaseException.prototype.toString = function() {
          return this.message;
        }, BaseException;
      }(Error),
      WrappedException = function(_super) {
        function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
          _super.call(this, _wrapperMessage), this._wrapperMessage = _wrapperMessage, this._originalException = _originalException, this._originalStack = _originalStack, this._context = _context, this._wrapperStack = new Error(_wrapperMessage).stack;
        }
        return __extends(WrappedException, _super), Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
          get: function() {
            return this._wrapperMessage;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "wrapperStack", {
          get: function() {
            return this._wrapperStack;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "originalException", {
          get: function() {
            return this._originalException;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "originalStack", {
          get: function() {
            return this._originalStack;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "context", {
          get: function() {
            return this._context;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(WrappedException.prototype, "message", {
          get: function() {
            return ExceptionHandler.exceptionToString(this);
          },
          enumerable: !0,
          configurable: !0
        }), WrappedException.prototype.toString = function() {
          return this.message;
        }, WrappedException;
      }(BaseWrappedException),
      _THROW_IF_NOT_FOUND = new Object,
      THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND,
      _NullInjector = function() {
        function _NullInjector() {}
        return _NullInjector.prototype.get = function(token, notFoundValue) {
          if (void 0 === notFoundValue && (notFoundValue = _THROW_IF_NOT_FOUND), notFoundValue === _THROW_IF_NOT_FOUND)
            throw new BaseException("No provider for " + stringify(token) + "!");
          return notFoundValue;
        }, _NullInjector;
      }(),
      Injector = function() {
        function Injector() {}
        return Injector.prototype.get = function(token, notFoundValue) {
          return unimplemented();
        }, Injector;
      }();
  Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND, Injector.NULL = new _NullInjector;
  var AbstractProviderError = function(_super) {
    function AbstractProviderError(injector, key, constructResolvingMessage) {
      _super.call(this, "DI Exception"), this.keys = [key], this.injectors = [injector], this.constructResolvingMessage = constructResolvingMessage, this.message = this.constructResolvingMessage(this.keys);
    }
    return __extends(AbstractProviderError, _super), AbstractProviderError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector), this.keys.push(key), this.message = this.constructResolvingMessage(this.keys);
    }, Object.defineProperty(AbstractProviderError.prototype, "context", {
      get: function() {
        return this.injectors[this.injectors.length - 1].debugContext();
      },
      enumerable: !0,
      configurable: !0
    }), AbstractProviderError;
  }(BaseException),
      NoProviderError = function(_super) {
        function NoProviderError(injector, key) {
          _super.call(this, injector, key, function(keys) {
            var first = stringify(ListWrapper.first(keys).token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
          });
        }
        return __extends(NoProviderError, _super), NoProviderError;
      }(AbstractProviderError),
      CyclicDependencyError = function(_super) {
        function CyclicDependencyError(injector, key) {
          _super.call(this, injector, key, function(keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
          });
        }
        return __extends(CyclicDependencyError, _super), CyclicDependencyError;
      }(AbstractProviderError),
      InstantiationError = function(_super) {
        function InstantiationError(injector, originalException, originalStack, key) {
          _super.call(this, "DI Exception", originalException, originalStack, null), this.keys = [key], this.injectors = [injector];
        }
        return __extends(InstantiationError, _super), InstantiationError.prototype.addKey = function(injector, key) {
          this.injectors.push(injector), this.keys.push(key);
        }, Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
          get: function() {
            var first = stringify(ListWrapper.first(this.keys).token);
            return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(InstantiationError.prototype, "causeKey", {
          get: function() {
            return this.keys[0];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(InstantiationError.prototype, "context", {
          get: function() {
            return this.injectors[this.injectors.length - 1].debugContext();
          },
          enumerable: !0,
          configurable: !0
        }), InstantiationError;
      }(WrappedException),
      InvalidProviderError = function(_super) {
        function InvalidProviderError(provider) {
          _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
        }
        return __extends(InvalidProviderError, _super), InvalidProviderError;
      }(BaseException),
      NoAnnotationError = function(_super) {
        function NoAnnotationError(typeOrFunc, params) {
          _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
        }
        return __extends(NoAnnotationError, _super), NoAnnotationError._genMessage = function(typeOrFunc, params) {
          for (var signature = [],
              i = 0,
              ii = params.length; i < ii; i++) {
            var parameter = params[i];
            isBlank(parameter) || 0 == parameter.length ? signature.push("?") : signature.push(parameter.map(stringify).join(" "));
          }
          return "Cannot resolve all parameters for '" + stringify(typeOrFunc) + "'(" + signature.join(", ") + "). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + stringify(typeOrFunc) + "' is decorated with Injectable.";
        }, NoAnnotationError;
      }(BaseException),
      OutOfBoundsError = function(_super) {
        function OutOfBoundsError(index) {
          _super.call(this, "Index " + index + " is out-of-bounds.");
        }
        return __extends(OutOfBoundsError, _super), OutOfBoundsError;
      }(BaseException),
      MixingMultiProvidersWithRegularProvidersError = function(_super) {
        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
          _super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " + provider2.toString());
        }
        return __extends(MixingMultiProvidersWithRegularProvidersError, _super), MixingMultiProvidersWithRegularProvidersError;
      }(BaseException),
      ReflectiveKey = function() {
        function ReflectiveKey(token, id) {
          if (this.token = token, this.id = id, isBlank(token))
            throw new BaseException("Token must be defined!");
        }
        return Object.defineProperty(ReflectiveKey.prototype, "displayName", {
          get: function() {
            return stringify(this.token);
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveKey.get = function(token) {
          return _globalKeyRegistry.get(resolveForwardRef(token));
        }, Object.defineProperty(ReflectiveKey, "numberOfKeys", {
          get: function() {
            return _globalKeyRegistry.numberOfKeys;
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveKey;
      }(),
      KeyRegistry = function() {
        function KeyRegistry() {
          this._allKeys = new Map;
        }
        return KeyRegistry.prototype.get = function(token) {
          if (token instanceof ReflectiveKey)
            return token;
          if (this._allKeys.has(token))
            return this._allKeys.get(token);
          var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
          return this._allKeys.set(token, newKey), newKey;
        }, Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
          get: function() {
            return this._allKeys.size;
          },
          enumerable: !0,
          configurable: !0
        }), KeyRegistry;
      }(),
      _globalKeyRegistry = new KeyRegistry,
      ReflectionCapabilities = function() {
        function ReflectionCapabilities(reflect) {
          this._reflect = isPresent(reflect) ? reflect : global$1.Reflect;
        }
        return ReflectionCapabilities.prototype.isReflectionEnabled = function() {
          return !0;
        }, ReflectionCapabilities.prototype.factory = function(t) {
          switch (t.length) {
            case 0:
              return function() {
                return new t;
              };
            case 1:
              return function(a1) {
                return new t(a1);
              };
            case 2:
              return function(a1, a2) {
                return new t(a1, a2);
              };
            case 3:
              return function(a1, a2, a3) {
                return new t(a1, a2, a3);
              };
            case 4:
              return function(a1, a2, a3, a4) {
                return new t(a1, a2, a3, a4);
              };
            case 5:
              return function(a1, a2, a3, a4, a5) {
                return new t(a1, a2, a3, a4, a5);
              };
            case 6:
              return function(a1, a2, a3, a4, a5, a6) {
                return new t(a1, a2, a3, a4, a5, a6);
              };
            case 7:
              return function(a1, a2, a3, a4, a5, a6, a7) {
                return new t(a1, a2, a3, a4, a5, a6, a7);
              };
            case 8:
              return function(a1, a2, a3, a4, a5, a6, a7, a8) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8);
              };
            case 9:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
              };
            case 10:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
              };
            case 11:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
              };
            case 12:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              };
            case 13:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
              };
            case 14:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
              };
            case 15:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
              };
            case 16:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
              };
            case 17:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
              };
            case 18:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
              };
            case 19:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
              };
            case 20:
              return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
              };
          }
          throw new Error("Cannot create a factory for '" + stringify(t) + "' because its constructor has more than 20 arguments");
        }, ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
          var result;
          result = "undefined" == typeof paramTypes ? new Array(paramAnnotations.length) : new Array(paramTypes.length);
          for (var i = 0; i < result.length; i++)
            "undefined" == typeof paramTypes ? result[i] = [] : paramTypes[i] != Object ? result[i] = [paramTypes[i]] : result[i] = [], isPresent(paramAnnotations) && isPresent(paramAnnotations[i]) && (result[i] = result[i].concat(paramAnnotations[i]));
          return result;
        }, ReflectionCapabilities.prototype.parameters = function(typeOrFunc) {
          if (isPresent(typeOrFunc.parameters))
            return typeOrFunc.parameters;
          if (isPresent(typeOrFunc.ctorParameters)) {
            var ctorParameters = typeOrFunc.ctorParameters,
                paramTypes_1 = ctorParameters.map(function(ctorParam) {
                  return ctorParam && ctorParam.type;
                }),
                paramAnnotations_1 = ctorParameters.map(function(ctorParam) {
                  return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
                });
            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
          }
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var paramAnnotations = this._reflect.getMetadata("parameters", typeOrFunc),
                paramTypes = this._reflect.getMetadata("design:paramtypes", typeOrFunc);
            if (isPresent(paramTypes) || isPresent(paramAnnotations))
              return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          var parameters = new Array(typeOrFunc.length);
          return parameters.fill(void 0), parameters;
        }, ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
          if (isPresent(typeOrFunc.annotations)) {
            var annotations = typeOrFunc.annotations;
            return isFunction(annotations) && annotations.annotations && (annotations = annotations.annotations), annotations;
          }
          if (isPresent(typeOrFunc.decorators))
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var annotations = this._reflect.getMetadata("annotations", typeOrFunc);
            if (isPresent(annotations))
              return annotations;
          }
          return [];
        }, ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
          if (isPresent(typeOrFunc.propMetadata)) {
            var propMetadata = typeOrFunc.propMetadata;
            return isFunction(propMetadata) && propMetadata.propMetadata && (propMetadata = propMetadata.propMetadata), propMetadata;
          }
          if (isPresent(typeOrFunc.propDecorators)) {
            var propDecorators_1 = typeOrFunc.propDecorators,
                propMetadata_1 = {};
            return Object.keys(propDecorators_1).forEach(function(prop) {
              propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            }), propMetadata_1;
          }
          if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
            var propMetadata = this._reflect.getMetadata("propMetadata", typeOrFunc);
            if (isPresent(propMetadata))
              return propMetadata;
          }
          return {};
        }, ReflectionCapabilities.prototype.interfaces = function(type) {
          return [];
        }, ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcInterface, lcProperty) {
          if (!(type instanceof Type))
            return !1;
          var proto = type.prototype;
          return !!proto[lcProperty];
        }, ReflectionCapabilities.prototype.getter = function(name) {
          return new Function("o", "return o." + name + ";");
        }, ReflectionCapabilities.prototype.setter = function(name) {
          return new Function("o", "v", "return o." + name + " = v;");
        }, ReflectionCapabilities.prototype.method = function(name) {
          var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
          return new Function("o", "args", functionBody);
        }, ReflectionCapabilities.prototype.importUri = function(type) {
          return "object" == typeof type && type.filePath ? type.filePath : "./" + stringify(type);
        }, ReflectionCapabilities;
      }(),
      ReflectorReader = function() {
        function ReflectorReader() {}
        return ReflectorReader;
      }(),
      Reflector = function(_super) {
        function Reflector(reflectionCapabilities) {
          _super.call(this), this._injectableInfo = new Map$1, this._getters = new Map$1, this._setters = new Map$1, this._methods = new Map$1, this._usedKeys = null, this.reflectionCapabilities = reflectionCapabilities;
        }
        return __extends(Reflector, _super), Reflector.prototype.updateCapabilities = function(caps) {
          this.reflectionCapabilities = caps;
        }, Reflector.prototype.isReflectionEnabled = function() {
          return this.reflectionCapabilities.isReflectionEnabled();
        }, Reflector.prototype.trackUsage = function() {
          this._usedKeys = new Set;
        }, Reflector.prototype.listUnusedKeys = function() {
          var _this = this;
          if (null == this._usedKeys)
            throw new BaseException("Usage tracking is disabled");
          var allTypes = MapWrapper.keys(this._injectableInfo);
          return allTypes.filter(function(key) {
            return !SetWrapper.has(_this._usedKeys, key);
          });
        }, Reflector.prototype.registerFunction = function(func, funcInfo) {
          this._injectableInfo.set(func, funcInfo);
        }, Reflector.prototype.registerType = function(type, typeInfo) {
          this._injectableInfo.set(type, typeInfo);
        }, Reflector.prototype.registerGetters = function(getters) {
          _mergeMaps(this._getters, getters);
        }, Reflector.prototype.registerSetters = function(setters) {
          _mergeMaps(this._setters, setters);
        }, Reflector.prototype.registerMethods = function(methods) {
          _mergeMaps(this._methods, methods);
        }, Reflector.prototype.factory = function(type) {
          if (this._containsReflectionInfo(type)) {
            var res = this._getReflectionInfo(type).factory;
            return isPresent(res) ? res : null;
          }
          return this.reflectionCapabilities.factory(type);
        }, Reflector.prototype.parameters = function(typeOrFunc) {
          if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).parameters;
            return isPresent(res) ? res : [];
          }
          return this.reflectionCapabilities.parameters(typeOrFunc);
        }, Reflector.prototype.annotations = function(typeOrFunc) {
          if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).annotations;
            return isPresent(res) ? res : [];
          }
          return this.reflectionCapabilities.annotations(typeOrFunc);
        }, Reflector.prototype.propMetadata = function(typeOrFunc) {
          if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).propMetadata;
            return isPresent(res) ? res : {};
          }
          return this.reflectionCapabilities.propMetadata(typeOrFunc);
        }, Reflector.prototype.interfaces = function(type) {
          if (this._injectableInfo.has(type)) {
            var res = this._getReflectionInfo(type).interfaces;
            return isPresent(res) ? res : [];
          }
          return this.reflectionCapabilities.interfaces(type);
        }, Reflector.prototype.hasLifecycleHook = function(type, lcInterface, lcProperty) {
          var interfaces = this.interfaces(type);
          return interfaces.indexOf(lcInterface) !== -1 || this.reflectionCapabilities.hasLifecycleHook(type, lcInterface, lcProperty);
        }, Reflector.prototype.getter = function(name) {
          return this._getters.has(name) ? this._getters.get(name) : this.reflectionCapabilities.getter(name);
        }, Reflector.prototype.setter = function(name) {
          return this._setters.has(name) ? this._setters.get(name) : this.reflectionCapabilities.setter(name);
        }, Reflector.prototype.method = function(name) {
          return this._methods.has(name) ? this._methods.get(name) : this.reflectionCapabilities.method(name);
        }, Reflector.prototype._getReflectionInfo = function(typeOrFunc) {
          return isPresent(this._usedKeys) && this._usedKeys.add(typeOrFunc), this._injectableInfo.get(typeOrFunc);
        }, Reflector.prototype._containsReflectionInfo = function(typeOrFunc) {
          return this._injectableInfo.has(typeOrFunc);
        }, Reflector.prototype.importUri = function(type) {
          return this.reflectionCapabilities.importUri(type);
        }, Reflector;
      }(ReflectorReader),
      reflector = new Reflector(new ReflectionCapabilities),
      Provider = function() {
        function Provider(token, _a) {
          var useClass = _a.useClass,
              useValue = _a.useValue,
              useExisting = _a.useExisting,
              useFactory = _a.useFactory,
              deps = _a.deps,
              multi = _a.multi;
          this.token = token, this.useClass = useClass, this.useValue = useValue, this.useExisting = useExisting, this.useFactory = useFactory, this.dependencies = deps, this._multi = multi;
        }
        return Object.defineProperty(Provider.prototype, "multi", {
          get: function() {
            return normalizeBool(this._multi);
          },
          enumerable: !0,
          configurable: !0
        }), Provider;
      }(),
      Binding = function(_super) {
        function Binding(token, _a) {
          var toClass = _a.toClass,
              toValue = _a.toValue,
              toAlias = _a.toAlias,
              toFactory = _a.toFactory,
              deps = _a.deps,
              multi = _a.multi;
          _super.call(this, token, {
            useClass: toClass,
            useValue: toValue,
            useExisting: toAlias,
            useFactory: toFactory,
            deps: deps,
            multi: multi
          });
        }
        return __extends(Binding, _super), Object.defineProperty(Binding.prototype, "toClass", {
          get: function() {
            return this.useClass;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(Binding.prototype, "toAlias", {
          get: function() {
            return this.useExisting;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(Binding.prototype, "toFactory", {
          get: function() {
            return this.useFactory;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(Binding.prototype, "toValue", {
          get: function() {
            return this.useValue;
          },
          enumerable: !0,
          configurable: !0
        }), Binding;
      }(Provider),
      ProviderBuilder = function() {
        function ProviderBuilder(token) {
          this.token = token;
        }
        return ProviderBuilder.prototype.toClass = function(type) {
          if (!isType(type))
            throw new BaseException('Trying to create a class provider but "' + stringify(type) + '" is not a class!');
          return new Provider(this.token, {useClass: type});
        }, ProviderBuilder.prototype.toValue = function(value) {
          return new Provider(this.token, {useValue: value});
        }, ProviderBuilder.prototype.toAlias = function(aliasToken) {
          if (isBlank(aliasToken))
            throw new BaseException("Can not alias " + stringify(this.token) + " to a blank value!");
          return new Provider(this.token, {useExisting: aliasToken});
        }, ProviderBuilder.prototype.toFactory = function(factory, dependencies) {
          if (!isFunction(factory))
            throw new BaseException('Trying to create a factory provider but "' + stringify(factory) + '" is not a function!');
          return new Provider(this.token, {
            useFactory: factory,
            deps: dependencies
          });
        }, ProviderBuilder;
      }(),
      ReflectiveDependency = function() {
        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
          this.key = key, this.optional = optional, this.lowerBoundVisibility = lowerBoundVisibility, this.upperBoundVisibility = upperBoundVisibility, this.properties = properties;
        }
        return ReflectiveDependency.fromKey = function(key) {
          return new ReflectiveDependency(key, (!1), null, null, []);
        }, ReflectiveDependency;
      }(),
      _EMPTY_LIST = [],
      ResolvedReflectiveProvider_ = function() {
        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
          this.key = key, this.resolvedFactories = resolvedFactories, this.multiProvider = multiProvider;
        }
        return Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
          get: function() {
            return this.resolvedFactories[0];
          },
          enumerable: !0,
          configurable: !0
        }), ResolvedReflectiveProvider_;
      }(),
      ResolvedReflectiveFactory = function() {
        function ResolvedReflectiveFactory(factory, dependencies) {
          this.factory = factory, this.dependencies = dependencies;
        }
        return ResolvedReflectiveFactory;
      }(),
      _MAX_CONSTRUCTION_COUNTER = 10,
      UNDEFINED = new Object,
      ReflectiveProtoInjectorInlineStrategy = function() {
        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
          this.provider0 = null, this.provider1 = null, this.provider2 = null, this.provider3 = null, this.provider4 = null, this.provider5 = null, this.provider6 = null, this.provider7 = null, this.provider8 = null, this.provider9 = null, this.keyId0 = null, this.keyId1 = null, this.keyId2 = null, this.keyId3 = null, this.keyId4 = null, this.keyId5 = null, this.keyId6 = null, this.keyId7 = null, this.keyId8 = null, this.keyId9 = null;
          var length = providers.length;
          length > 0 && (this.provider0 = providers[0], this.keyId0 = providers[0].key.id), length > 1 && (this.provider1 = providers[1], this.keyId1 = providers[1].key.id), length > 2 && (this.provider2 = providers[2], this.keyId2 = providers[2].key.id), length > 3 && (this.provider3 = providers[3], this.keyId3 = providers[3].key.id), length > 4 && (this.provider4 = providers[4], this.keyId4 = providers[4].key.id), length > 5 && (this.provider5 = providers[5], this.keyId5 = providers[5].key.id), length > 6 && (this.provider6 = providers[6], this.keyId6 = providers[6].key.id), length > 7 && (this.provider7 = providers[7], this.keyId7 = providers[7].key.id), length > 8 && (this.provider8 = providers[8], this.keyId8 = providers[8].key.id), length > 9 && (this.provider9 = providers[9], this.keyId9 = providers[9].key.id);
        }
        return ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
          if (0 == index)
            return this.provider0;
          if (1 == index)
            return this.provider1;
          if (2 == index)
            return this.provider2;
          if (3 == index)
            return this.provider3;
          if (4 == index)
            return this.provider4;
          if (5 == index)
            return this.provider5;
          if (6 == index)
            return this.provider6;
          if (7 == index)
            return this.provider7;
          if (8 == index)
            return this.provider8;
          if (9 == index)
            return this.provider9;
          throw new OutOfBoundsError(index);
        }, ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
          return new ReflectiveInjectorInlineStrategy(injector, this);
        }, ReflectiveProtoInjectorInlineStrategy;
      }(),
      ReflectiveProtoInjectorDynamicStrategy = function() {
        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
          this.providers = providers;
          var len = providers.length;
          this.keyIds = ListWrapper.createFixedSize(len);
          for (var i = 0; i < len; i++)
            this.keyIds[i] = providers[i].key.id;
        }
        return ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
          if (index < 0 || index >= this.providers.length)
            throw new OutOfBoundsError(index);
          return this.providers[index];
        }, ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
          return new ReflectiveInjectorDynamicStrategy(this, ei);
        }, ReflectiveProtoInjectorDynamicStrategy;
      }(),
      ReflectiveProtoInjector = function() {
        function ReflectiveProtoInjector(providers) {
          this.numberOfProviders = providers.length, this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
        }
        return ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
          return new ReflectiveProtoInjector(providers);
        }, ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
          return this._strategy.getProviderAtIndex(index);
        }, ReflectiveProtoInjector;
      }(),
      ReflectiveInjectorInlineStrategy = function() {
        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
          this.injector = injector, this.protoStrategy = protoStrategy, this.obj0 = UNDEFINED, this.obj1 = UNDEFINED, this.obj2 = UNDEFINED, this.obj3 = UNDEFINED, this.obj4 = UNDEFINED, this.obj5 = UNDEFINED, this.obj6 = UNDEFINED, this.obj7 = UNDEFINED, this.obj8 = UNDEFINED, this.obj9 = UNDEFINED;
        }
        return ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
          this.injector._constructionCounter = 0;
        }, ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
          return this.injector._new(provider);
        }, ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
          var p = this.protoStrategy,
              inj = this.injector;
          return p.keyId0 === keyId ? (this.obj0 === UNDEFINED && (this.obj0 = inj._new(p.provider0)), this.obj0) : p.keyId1 === keyId ? (this.obj1 === UNDEFINED && (this.obj1 = inj._new(p.provider1)), this.obj1) : p.keyId2 === keyId ? (this.obj2 === UNDEFINED && (this.obj2 = inj._new(p.provider2)), this.obj2) : p.keyId3 === keyId ? (this.obj3 === UNDEFINED && (this.obj3 = inj._new(p.provider3)), this.obj3) : p.keyId4 === keyId ? (this.obj4 === UNDEFINED && (this.obj4 = inj._new(p.provider4)), this.obj4) : p.keyId5 === keyId ? (this.obj5 === UNDEFINED && (this.obj5 = inj._new(p.provider5)), this.obj5) : p.keyId6 === keyId ? (this.obj6 === UNDEFINED && (this.obj6 = inj._new(p.provider6)), this.obj6) : p.keyId7 === keyId ? (this.obj7 === UNDEFINED && (this.obj7 = inj._new(p.provider7)), this.obj7) : p.keyId8 === keyId ? (this.obj8 === UNDEFINED && (this.obj8 = inj._new(p.provider8)), this.obj8) : p.keyId9 === keyId ? (this.obj9 === UNDEFINED && (this.obj9 = inj._new(p.provider9)), this.obj9) : UNDEFINED;
        }, ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
          if (0 == index)
            return this.obj0;
          if (1 == index)
            return this.obj1;
          if (2 == index)
            return this.obj2;
          if (3 == index)
            return this.obj3;
          if (4 == index)
            return this.obj4;
          if (5 == index)
            return this.obj5;
          if (6 == index)
            return this.obj6;
          if (7 == index)
            return this.obj7;
          if (8 == index)
            return this.obj8;
          if (9 == index)
            return this.obj9;
          throw new OutOfBoundsError(index);
        }, ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
          return _MAX_CONSTRUCTION_COUNTER;
        }, ReflectiveInjectorInlineStrategy;
      }(),
      ReflectiveInjectorDynamicStrategy = function() {
        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
          this.protoStrategy = protoStrategy, this.injector = injector, this.objs = ListWrapper.createFixedSize(protoStrategy.providers.length), ListWrapper.fill(this.objs, UNDEFINED);
        }
        return ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
          this.injector._constructionCounter = 0;
        }, ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
          return this.injector._new(provider);
        }, ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
          for (var p = this.protoStrategy,
              i = 0; i < p.keyIds.length; i++)
            if (p.keyIds[i] === keyId)
              return this.objs[i] === UNDEFINED && (this.objs[i] = this.injector._new(p.providers[i])), this.objs[i];
          return UNDEFINED;
        }, ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
          if (index < 0 || index >= this.objs.length)
            throw new OutOfBoundsError(index);
          return this.objs[index];
        }, ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
          return this.objs.length;
        }, ReflectiveInjectorDynamicStrategy;
      }(),
      ReflectiveInjector = function() {
        function ReflectiveInjector() {}
        return ReflectiveInjector.resolve = function(providers) {
          return resolveReflectiveProviders(providers);
        }, ReflectiveInjector.resolveAndCreate = function(providers, parent) {
          void 0 === parent && (parent = null);
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        }, ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
          return void 0 === parent && (parent = null), new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
        }, ReflectiveInjector.fromResolvedBindings = function(providers) {
          return ReflectiveInjector.fromResolvedProviders(providers);
        }, Object.defineProperty(ReflectiveInjector.prototype, "parent", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveInjector.prototype.debugContext = function() {
          return null;
        }, ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
          return unimplemented();
        }, ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
          return unimplemented();
        }, ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
          return unimplemented();
        }, ReflectiveInjector.prototype.instantiateResolved = function(provider) {
          return unimplemented();
        }, ReflectiveInjector;
      }(),
      ReflectiveInjector_ = function() {
        function ReflectiveInjector_(_proto, _parent, _debugContext) {
          void 0 === _parent && (_parent = null), void 0 === _debugContext && (_debugContext = null), this._debugContext = _debugContext, this._constructionCounter = 0, this._proto = _proto, this._parent = _parent, this._strategy = _proto._strategy.createInjectorStrategy(this);
        }
        return ReflectiveInjector_.prototype.debugContext = function() {
          return this._debugContext();
        }, ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
          return void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
        }, ReflectiveInjector_.prototype.getAt = function(index) {
          return this._strategy.getObjAtIndex(index);
        }, Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
          get: function() {
            return this._parent;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
          get: function() {
            return this._strategy;
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return this.createChildFromResolved(ResolvedReflectiveProviders);
        }, ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
          var proto = new ReflectiveProtoInjector(providers),
              inj = new ReflectiveInjector_(proto);
          return inj._parent = this, inj;
        }, ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
          return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        }, ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
          return this._instantiateProvider(provider);
        }, ReflectiveInjector_.prototype._new = function(provider) {
          if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects())
            throw new CyclicDependencyError(this, provider.key);
          return this._instantiateProvider(provider);
        }, ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
          if (provider.multiProvider) {
            for (var res = ListWrapper.createFixedSize(provider.resolvedFactories.length),
                i = 0; i < provider.resolvedFactories.length; ++i)
              res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            return res;
          }
          return this._instantiate(provider, provider.resolvedFactories[0]);
        }, ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
          var d0,
              d1,
              d2,
              d3,
              d4,
              d5,
              d6,
              d7,
              d8,
              d9,
              d10,
              d11,
              d12,
              d13,
              d14,
              d15,
              d16,
              d17,
              d18,
              d19,
              factory = ResolvedReflectiveFactory.factory,
              deps = ResolvedReflectiveFactory.dependencies,
              length = deps.length;
          try {
            d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null, d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null, d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null, d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null, d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null, d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null, d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null, d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null, d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null, d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null, d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null, d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null, d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null, d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null, d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null, d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null, d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null, d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null, d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null, d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
          } catch (e) {
            throw (e instanceof AbstractProviderError || e instanceof InstantiationError) && e.addKey(this, provider.key), e;
          }
          var obj;
          try {
            switch (length) {
              case 0:
                obj = factory();
                break;
              case 1:
                obj = factory(d0);
                break;
              case 2:
                obj = factory(d0, d1);
                break;
              case 3:
                obj = factory(d0, d1, d2);
                break;
              case 4:
                obj = factory(d0, d1, d2, d3);
                break;
              case 5:
                obj = factory(d0, d1, d2, d3, d4);
                break;
              case 6:
                obj = factory(d0, d1, d2, d3, d4, d5);
                break;
              case 7:
                obj = factory(d0, d1, d2, d3, d4, d5, d6);
                break;
              case 8:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                break;
              case 9:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                break;
              case 10:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                break;
              case 11:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                break;
              case 12:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                break;
              case 13:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                break;
              case 14:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                break;
              case 15:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                break;
              case 16:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                break;
              case 17:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                break;
              case 18:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                break;
              case 19:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                break;
              case 20:
                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                break;
              default:
                throw new BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
            }
          } catch (e) {
            throw new InstantiationError(this, e, e.stack, provider.key);
          }
          return obj;
        }, ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
          return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
        }, ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
          return key === INJECTOR_KEY ? this : upperBoundVisibility instanceof SelfMetadata ? this._getByKeySelf(key, notFoundValue) : this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
        }, ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
          if (notFoundValue !== THROW_IF_NOT_FOUND)
            return notFoundValue;
          throw new NoProviderError(this, key);
        }, ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
          var obj = this._strategy.getObjByKeyId(key.id);
          return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
        }, ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
          var inj;
          for (inj = lowerBoundVisibility instanceof SkipSelfMetadata ? this._parent : this; inj instanceof ReflectiveInjector_; ) {
            var inj_ = inj,
                obj = inj_._strategy.getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
              return obj;
            inj = inj_._parent;
          }
          return null !== inj ? inj.get(key.token, notFoundValue) : this._throwOrNull(key, notFoundValue);
        }, Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
          get: function() {
            var providers = _mapProviders(this, function(b) {
              return ' "' + b.key.displayName + '" ';
            }).join(", ");
            return "ReflectiveInjector(providers: [" + providers + "])";
          },
          enumerable: !0,
          configurable: !0
        }), ReflectiveInjector_.prototype.toString = function() {
          return this.displayName;
        }, ReflectiveInjector_;
      }(),
      INJECTOR_KEY = ReflectiveKey.get(Injector),
      APP_INITIALIZER = new OpaqueToken("Application Initializer"),
      ApplicationInitStatus = function() {
        function ApplicationInitStatus(appInits) {
          var _this = this;
          this._done = !1;
          var asyncInitPromises = [];
          if (appInits)
            for (var i = 0; i < appInits.length; i++) {
              var initResult = appInits[i]();
              isPromise(initResult) && asyncInitPromises.push(initResult);
            }
          this._donePromise = Promise.all(asyncInitPromises).then(function() {
            _this._done = !0;
          }), 0 === asyncInitPromises.length && (this._done = !0);
        }
        return Object.defineProperty(ApplicationInitStatus.prototype, "done", {
          get: function() {
            return this._done;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
          get: function() {
            return this._donePromise;
          },
          enumerable: !0,
          configurable: !0
        }), ApplicationInitStatus;
      }();
  ApplicationInitStatus.decorators = [{type: Injectable}], ApplicationInitStatus.ctorParameters = [{
    type: Array,
    decorators: [{
      type: Inject,
      args: [APP_INITIALIZER]
    }, {type: Optional}]
  }];
  var APP_ID = new OpaqueToken("AppId"),
      APP_ID_RANDOM_PROVIDER = {
        provide: APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: []
      },
      PLATFORM_INITIALIZER = new OpaqueToken("Platform Initializer"),
      APP_BOOTSTRAP_LISTENER = new OpaqueToken("appBootstrapListener"),
      PACKAGE_ROOT_URL = new OpaqueToken("Application Packages Root URL"),
      Console = function() {
        function Console() {}
        return Console.prototype.log = function(message) {
          print(message);
        }, Console.prototype.warn = function(message) {
          warn(message);
        }, Console;
      }();
  Console.decorators = [{type: Injectable}];
  var ComponentStillLoadingError = function(_super) {
    function ComponentStillLoadingError(compType) {
      _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!"), this.compType = compType;
    }
    return __extends(ComponentStillLoadingError, _super), ComponentStillLoadingError;
  }(BaseException),
      ModuleWithComponentFactories = function() {
        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
          this.ngModuleFactory = ngModuleFactory, this.componentFactories = componentFactories;
        }
        return ModuleWithComponentFactories;
      }(),
      Compiler = function() {
        function Compiler() {}
        return Compiler.prototype.compileComponentAsync = function(component, ngModule) {
          throw void 0 === ngModule && (ngModule = null), _throwError();
        }, Compiler.prototype.compileComponentSync = function(component, ngModule) {
          throw void 0 === ngModule && (ngModule = null), _throwError();
        }, Compiler.prototype.compileModuleSync = function(moduleType) {
          throw _throwError();
        }, Compiler.prototype.compileModuleAsync = function(moduleType) {
          throw _throwError();
        }, Compiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
          throw _throwError();
        }, Compiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
          throw _throwError();
        }, Compiler.prototype.clearCache = function() {}, Compiler.prototype.clearCacheFor = function(type) {}, Compiler;
      }(),
      COMPILER_OPTIONS = new OpaqueToken("compilerOptions"),
      CompilerFactory = function() {
        function CompilerFactory() {}
        return CompilerFactory;
      }(),
      DefaultIterableDifferFactory = function() {
        function DefaultIterableDifferFactory() {}
        return DefaultIterableDifferFactory.prototype.supports = function(obj) {
          return isListLikeIterable(obj);
        }, DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
          return new DefaultIterableDiffer(trackByFn);
        }, DefaultIterableDifferFactory;
      }(),
      trackByIdentity = function(index, item) {
        return item;
      },
      DefaultIterableDiffer = function() {
        function DefaultIterableDiffer(_trackByFn) {
          this._trackByFn = _trackByFn, this._length = null, this._collection = null, this._linkedRecords = null, this._unlinkedRecords = null, this._previousItHead = null, this._itHead = null, this._itTail = null, this._additionsHead = null, this._additionsTail = null, this._movesHead = null, this._movesTail = null, this._removalsHead = null, this._removalsTail = null, this._identityChangesHead = null, this._identityChangesTail = null, this._trackByFn = isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
        }
        return Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
          get: function() {
            return this._collection;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
          get: function() {
            return this._length;
          },
          enumerable: !0,
          configurable: !0
        }), DefaultIterableDiffer.prototype.forEachItem = function(fn) {
          var record;
          for (record = this._itHead; null !== record; record = record._next)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachOperation = function(fn) {
          for (var nextIt = this._itHead,
              nextRemove = this._removalsHead,
              addRemoveOffset = 0,
              moveOffsets = null; nextIt || nextRemove; ) {
            var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove,
                adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets),
                currentIndex = record.currentIndex;
            if (record === nextRemove)
              addRemoveOffset--, nextRemove = nextRemove._nextRemoved;
            else if (nextIt = nextIt._next, null == record.previousIndex)
              addRemoveOffset++;
            else {
              moveOffsets || (moveOffsets = []);
              var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset,
                  localCurrentIndex = currentIndex - addRemoveOffset;
              if (localMovePreviousIndex != localCurrentIndex) {
                for (var i = 0; i < localMovePreviousIndex; i++) {
                  var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0,
                      index = offset + i;
                  localCurrentIndex <= index && index < localMovePreviousIndex && (moveOffsets[i] = offset + 1);
                }
                var previousIndex = record.previousIndex;
                moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
              }
            }
            adjPreviousIndex !== currentIndex && fn(record, adjPreviousIndex, currentIndex);
          }
        }, DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
          var record;
          for (record = this._previousItHead; null !== record; record = record._nextPrevious)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
          var record;
          for (record = this._additionsHead; null !== record; record = record._nextAdded)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
          var record;
          for (record = this._movesHead; null !== record; record = record._nextMoved)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
          var record;
          for (record = this._removalsHead; null !== record; record = record._nextRemoved)
            fn(record);
        }, DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
          var record;
          for (record = this._identityChangesHead; null !== record; record = record._nextIdentityChange)
            fn(record);
        }, DefaultIterableDiffer.prototype.diff = function(collection) {
          if (isBlank(collection) && (collection = []), !isListLikeIterable(collection))
            throw new BaseException("Error trying to diff '" + collection + "'");
          return this.check(collection) ? this : null;
        }, DefaultIterableDiffer.prototype.onDestroy = function() {}, DefaultIterableDiffer.prototype.check = function(collection) {
          var _this = this;
          this._reset();
          var index,
              item,
              itemTrackBy,
              record = this._itHead,
              mayBeDirty = !1;
          if (isArray(collection)) {
            var list = collection;
            for (this._length = collection.length, index = 0; index < this._length; index++)
              item = list[index], itemTrackBy = this._trackByFn(index, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = this._verifyReinsertion(record, item, itemTrackBy, index)), looseIdentical(record.item, item) || this._addIdentityChange(record, item)) : (record = this._mismatch(record, item, itemTrackBy, index), mayBeDirty = !0), record = record._next;
          } else
            index = 0, iterateListLike(collection, function(item) {
              itemTrackBy = _this._trackByFn(index, item), null !== record && looseIdentical(record.trackById, itemTrackBy) ? (mayBeDirty && (record = _this._verifyReinsertion(record, item, itemTrackBy, index)), looseIdentical(record.item, item) || _this._addIdentityChange(record, item)) : (record = _this._mismatch(record, item, itemTrackBy, index), mayBeDirty = !0), record = record._next, index++;
            }), this._length = index;
          return this._truncate(record), this._collection = collection, this.isDirty;
        }, Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
          get: function() {
            return null !== this._additionsHead || null !== this._movesHead || null !== this._removalsHead || null !== this._identityChangesHead;
          },
          enumerable: !0,
          configurable: !0
        }), DefaultIterableDiffer.prototype._reset = function() {
          if (this.isDirty) {
            var record,
                nextRecord;
            for (record = this._previousItHead = this._itHead; null !== record; record = record._next)
              record._nextPrevious = record._next;
            for (record = this._additionsHead; null !== record; record = record._nextAdded)
              record.previousIndex = record.currentIndex;
            for (this._additionsHead = this._additionsTail = null, record = this._movesHead; null !== record; record = nextRecord)
              record.previousIndex = record.currentIndex, nextRecord = record._nextMoved;
            this._movesHead = this._movesTail = null, this._removalsHead = this._removalsTail = null, this._identityChangesHead = this._identityChangesTail = null;
          }
        }, DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
          var previousRecord;
          return null === record ? previousRecord = this._itTail : (previousRecord = record._prev, this._remove(record)), record = null === this._linkedRecords ? null : this._linkedRecords.get(itemTrackBy, index), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._moveAfter(record, previousRecord, index)) : (record = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy), null !== record ? (looseIdentical(record.item, item) || this._addIdentityChange(record, item), this._reinsertAfter(record, previousRecord, index)) : record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index)), record;
        }, DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
          var reinsertRecord = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(itemTrackBy);
          return null !== reinsertRecord ? record = this._reinsertAfter(reinsertRecord, record._prev, index) : record.currentIndex != index && (record.currentIndex = index, this._addToMoves(record, index)), record;
        }, DefaultIterableDiffer.prototype._truncate = function(record) {
          for (; null !== record; ) {
            var nextRecord = record._next;
            this._addToRemovals(this._unlink(record)), record = nextRecord;
          }
          null !== this._unlinkedRecords && this._unlinkedRecords.clear(), null !== this._additionsTail && (this._additionsTail._nextAdded = null), null !== this._movesTail && (this._movesTail._nextMoved = null), null !== this._itTail && (this._itTail._next = null), null !== this._removalsTail && (this._removalsTail._nextRemoved = null), null !== this._identityChangesTail && (this._identityChangesTail._nextIdentityChange = null);
        }, DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
          null !== this._unlinkedRecords && this._unlinkedRecords.remove(record);
          var prev = record._prevRemoved,
              next = record._nextRemoved;
          return null === prev ? this._removalsHead = next : prev._nextRemoved = next, null === next ? this._removalsTail = prev : next._prevRemoved = prev, this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record;
        }, DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
          return this._unlink(record), this._insertAfter(record, prevRecord, index), this._addToMoves(record, index), record;
        }, DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
          return this._insertAfter(record, prevRecord, index), null === this._additionsTail ? this._additionsTail = this._additionsHead = record : this._additionsTail = this._additionsTail._nextAdded = record, record;
        }, DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
          var next = null === prevRecord ? this._itHead : prevRecord._next;
          return record._next = next, record._prev = prevRecord, null === next ? this._itTail = record : next._prev = record, null === prevRecord ? this._itHead = record : prevRecord._next = record, null === this._linkedRecords && (this._linkedRecords = new _DuplicateMap), this._linkedRecords.put(record), record.currentIndex = index, record;
        }, DefaultIterableDiffer.prototype._remove = function(record) {
          return this._addToRemovals(this._unlink(record));
        }, DefaultIterableDiffer.prototype._unlink = function(record) {
          null !== this._linkedRecords && this._linkedRecords.remove(record);
          var prev = record._prev,
              next = record._next;
          return null === prev ? this._itHead = next : prev._next = next, null === next ? this._itTail = prev : next._prev = prev, record;
        }, DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
          return record.previousIndex === toIndex ? record : (null === this._movesTail ? this._movesTail = this._movesHead = record : this._movesTail = this._movesTail._nextMoved = record, record);
        }, DefaultIterableDiffer.prototype._addToRemovals = function(record) {
          return null === this._unlinkedRecords && (this._unlinkedRecords = new _DuplicateMap), this._unlinkedRecords.put(record), record.currentIndex = null, record._nextRemoved = null, null === this._removalsTail ? (this._removalsTail = this._removalsHead = record, record._prevRemoved = null) : (record._prevRemoved = this._removalsTail, this._removalsTail = this._removalsTail._nextRemoved = record), record;
        }, DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
          return record.item = item, null === this._identityChangesTail ? this._identityChangesTail = this._identityChangesHead = record : this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record, record;
        }, DefaultIterableDiffer.prototype.toString = function() {
          var list = [];
          this.forEachItem(function(record) {
            return list.push(record);
          });
          var previous = [];
          this.forEachPreviousItem(function(record) {
            return previous.push(record);
          });
          var additions = [];
          this.forEachAddedItem(function(record) {
            return additions.push(record);
          });
          var moves = [];
          this.forEachMovedItem(function(record) {
            return moves.push(record);
          });
          var removals = [];
          this.forEachRemovedItem(function(record) {
            return removals.push(record);
          });
          var identityChanges = [];
          return this.forEachIdentityChange(function(record) {
            return identityChanges.push(record);
          }), "collection: " + list.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nmoves: " + moves.join(", ") + "\nremovals: " + removals.join(", ") + "\nidentityChanges: " + identityChanges.join(", ") + "\n";
        }, DefaultIterableDiffer;
      }(),
      CollectionChangeRecord = function() {
        function CollectionChangeRecord(item, trackById) {
          this.item = item, this.trackById = trackById, this.currentIndex = null, this.previousIndex = null, this._nextPrevious = null, this._prev = null, this._next = null, this._prevDup = null, this._nextDup = null, this._prevRemoved = null, this._nextRemoved = null, this._nextAdded = null, this._nextMoved = null, this._nextIdentityChange = null;
        }
        return CollectionChangeRecord.prototype.toString = function() {
          return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + "[" + stringify(this.previousIndex) + "->" + stringify(this.currentIndex) + "]";
        }, CollectionChangeRecord;
      }(),
      _DuplicateItemRecordList = function() {
        function _DuplicateItemRecordList() {
          this._head = null, this._tail = null;
        }
        return _DuplicateItemRecordList.prototype.add = function(record) {
          null === this._head ? (this._head = this._tail = record, record._nextDup = null, record._prevDup = null) : (this._tail._nextDup = record, record._prevDup = this._tail, record._nextDup = null, this._tail = record);
        }, _DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
          var record;
          for (record = this._head; null !== record; record = record._nextDup)
            if ((null === afterIndex || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById))
              return record;
          return null;
        }, _DuplicateItemRecordList.prototype.remove = function(record) {
          var prev = record._prevDup,
              next = record._nextDup;
          return null === prev ? this._head = next : prev._nextDup = next, null === next ? this._tail = prev : next._prevDup = prev, null === this._head;
        }, _DuplicateItemRecordList;
      }(),
      _DuplicateMap = function() {
        function _DuplicateMap() {
          this.map = new Map;
        }
        return _DuplicateMap.prototype.put = function(record) {
          var key = getMapKey(record.trackById),
              duplicates = this.map.get(key);
          isPresent(duplicates) || (duplicates = new _DuplicateItemRecordList, this.map.set(key, duplicates)), duplicates.add(record);
        }, _DuplicateMap.prototype.get = function(trackById, afterIndex) {
          void 0 === afterIndex && (afterIndex = null);
          var key = getMapKey(trackById),
              recordList = this.map.get(key);
          return isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
        }, _DuplicateMap.prototype.remove = function(record) {
          var key = getMapKey(record.trackById),
              recordList = this.map.get(key);
          return recordList.remove(record) && this.map.delete(key), record;
        }, Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
          get: function() {
            return 0 === this.map.size;
          },
          enumerable: !0,
          configurable: !0
        }), _DuplicateMap.prototype.clear = function() {
          this.map.clear();
        }, _DuplicateMap.prototype.toString = function() {
          return "_DuplicateMap(" + stringify(this.map) + ")";
        }, _DuplicateMap;
      }(),
      DefaultKeyValueDifferFactory = function() {
        function DefaultKeyValueDifferFactory() {}
        return DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
          return obj instanceof Map || isJsObject(obj);
        }, DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
          return new DefaultKeyValueDiffer;
        }, DefaultKeyValueDifferFactory;
      }(),
      DefaultKeyValueDiffer = function() {
        function DefaultKeyValueDiffer() {
          this._records = new Map, this._mapHead = null, this._previousMapHead = null, this._changesHead = null, this._changesTail = null, this._additionsHead = null, this._additionsTail = null, this._removalsHead = null, this._removalsTail = null;
        }
        return Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
          get: function() {
            return null !== this._additionsHead || null !== this._changesHead || null !== this._removalsHead;
          },
          enumerable: !0,
          configurable: !0
        }), DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
          var record;
          for (record = this._mapHead; null !== record; record = record._next)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
          var record;
          for (record = this._previousMapHead; null !== record; record = record._nextPrevious)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
          var record;
          for (record = this._changesHead; null !== record; record = record._nextChanged)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
          var record;
          for (record = this._additionsHead; null !== record; record = record._nextAdded)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
          var record;
          for (record = this._removalsHead; null !== record; record = record._nextRemoved)
            fn(record);
        }, DefaultKeyValueDiffer.prototype.diff = function(map) {
          if (map) {
            if (!(map instanceof Map || isJsObject(map)))
              throw new BaseException("Error trying to diff '" + map + "'");
          } else
            map = new Map;
          return this.check(map) ? this : null;
        }, DefaultKeyValueDiffer.prototype.onDestroy = function() {}, DefaultKeyValueDiffer.prototype.check = function(map) {
          var _this = this;
          this._reset();
          var records = this._records,
              oldSeqRecord = this._mapHead,
              lastOldSeqRecord = null,
              lastNewSeqRecord = null,
              seqChanged = !1;
          return this._forEach(map, function(value, key) {
            var newSeqRecord;
            oldSeqRecord && key === oldSeqRecord.key ? (newSeqRecord = oldSeqRecord, _this._maybeAddToChanges(newSeqRecord, value)) : (seqChanged = !0, null !== oldSeqRecord && (_this._removeFromSeq(lastOldSeqRecord, oldSeqRecord), _this._addToRemovals(oldSeqRecord)), records.has(key) ? (newSeqRecord = records.get(key), _this._maybeAddToChanges(newSeqRecord, value)) : (newSeqRecord = new KeyValueChangeRecord(key), records.set(key, newSeqRecord), newSeqRecord.currentValue = value, _this._addToAdditions(newSeqRecord))), seqChanged && (_this._isInRemovals(newSeqRecord) && _this._removeFromRemovals(newSeqRecord), null == lastNewSeqRecord ? _this._mapHead = newSeqRecord : lastNewSeqRecord._next = newSeqRecord), lastOldSeqRecord = oldSeqRecord, lastNewSeqRecord = newSeqRecord, oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
          }), this._truncate(lastOldSeqRecord, oldSeqRecord), this.isDirty;
        }, DefaultKeyValueDiffer.prototype._reset = function() {
          if (this.isDirty) {
            var record = void 0;
            for (record = this._previousMapHead = this._mapHead; null !== record; record = record._next)
              record._nextPrevious = record._next;
            for (record = this._changesHead; null !== record; record = record._nextChanged)
              record.previousValue = record.currentValue;
            for (record = this._additionsHead; null != record; record = record._nextAdded)
              record.previousValue = record.currentValue;
            this._changesHead = this._changesTail = null, this._additionsHead = this._additionsTail = null, this._removalsHead = this._removalsTail = null;
          }
        }, DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
          for (; null !== record; ) {
            null === lastRecord ? this._mapHead = null : lastRecord._next = null;
            var nextRecord = record._next;
            this._addToRemovals(record), lastRecord = record, record = nextRecord;
          }
          for (var rec = this._removalsHead; null !== rec; rec = rec._nextRemoved)
            rec.previousValue = rec.currentValue, rec.currentValue = null, this._records.delete(rec.key);
        }, DefaultKeyValueDiffer.prototype._maybeAddToChanges = function(record, newValue) {
          looseIdentical(newValue, record.currentValue) || (record.previousValue = record.currentValue, record.currentValue = newValue, this._addToChanges(record));
        }, DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
          return record === this._removalsHead || null !== record._nextRemoved || null !== record._prevRemoved;
        }, DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
          null === this._removalsHead ? this._removalsHead = this._removalsTail = record : (this._removalsTail._nextRemoved = record, record._prevRemoved = this._removalsTail, this._removalsTail = record);
        }, DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
          var next = record._next;
          null === prev ? this._mapHead = next : prev._next = next, record._next = null;
        }, DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
          var prev = record._prevRemoved,
              next = record._nextRemoved;
          null === prev ? this._removalsHead = next : prev._nextRemoved = next, null === next ? this._removalsTail = prev : next._prevRemoved = prev, record._prevRemoved = record._nextRemoved = null;
        }, DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
          null === this._additionsHead ? this._additionsHead = this._additionsTail = record : (this._additionsTail._nextAdded = record, this._additionsTail = record);
        }, DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
          null === this._changesHead ? this._changesHead = this._changesTail = record : (this._changesTail._nextChanged = record, this._changesTail = record);
        }, DefaultKeyValueDiffer.prototype.toString = function() {
          var record,
              items = [],
              previous = [],
              changes = [],
              additions = [],
              removals = [];
          for (record = this._mapHead; null !== record; record = record._next)
            items.push(stringify(record));
          for (record = this._previousMapHead; null !== record; record = record._nextPrevious)
            previous.push(stringify(record));
          for (record = this._changesHead; null !== record; record = record._nextChanged)
            changes.push(stringify(record));
          for (record = this._additionsHead; null !== record; record = record._nextAdded)
            additions.push(stringify(record));
          for (record = this._removalsHead; null !== record; record = record._nextRemoved)
            removals.push(stringify(record));
          return "map: " + items.join(", ") + "\nprevious: " + previous.join(", ") + "\nadditions: " + additions.join(", ") + "\nchanges: " + changes.join(", ") + "\nremovals: " + removals.join(", ") + "\n";
        }, DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
          obj instanceof Map ? obj.forEach(fn) : StringMapWrapper.forEach(obj, fn);
        }, DefaultKeyValueDiffer;
      }(),
      KeyValueChangeRecord = function() {
        function KeyValueChangeRecord(key) {
          this.key = key, this.previousValue = null, this.currentValue = null, this._nextPrevious = null, this._next = null, this._nextAdded = null, this._nextRemoved = null, this._prevRemoved = null, this._nextChanged = null;
        }
        return KeyValueChangeRecord.prototype.toString = function() {
          return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + "[" + stringify(this.previousValue) + "->" + stringify(this.currentValue) + "]";
        }, KeyValueChangeRecord;
      }(),
      IterableDiffers = function() {
        function IterableDiffers(factories) {
          this.factories = factories;
        }
        return IterableDiffers.create = function(factories, parent) {
          if (isPresent(parent)) {
            var copied = ListWrapper.clone(parent.factories);
            return factories = factories.concat(copied), new IterableDiffers(factories);
          }
          return new IterableDiffers(factories);
        }, IterableDiffers.extend = function(factories) {
          return new Provider(IterableDiffers, {
            useFactory: function(parent) {
              if (isBlank(parent))
                throw new BaseException("Cannot extend IterableDiffers without a parent injector");
              return IterableDiffers.create(factories, parent);
            },
            deps: [[IterableDiffers, new SkipSelfMetadata, new OptionalMetadata]]
          });
        }, IterableDiffers.prototype.find = function(iterable) {
          var factory = this.factories.find(function(f) {
            return f.supports(iterable);
          });
          if (isPresent(factory))
            return factory;
          throw new BaseException("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
        }, IterableDiffers;
      }(),
      KeyValueDiffers = function() {
        function KeyValueDiffers(factories) {
          this.factories = factories;
        }
        return KeyValueDiffers.create = function(factories, parent) {
          if (isPresent(parent)) {
            var copied = ListWrapper.clone(parent.factories);
            return factories = factories.concat(copied), new KeyValueDiffers(factories);
          }
          return new KeyValueDiffers(factories);
        }, KeyValueDiffers.extend = function(factories) {
          return new Provider(KeyValueDiffers, {
            useFactory: function(parent) {
              if (isBlank(parent))
                throw new BaseException("Cannot extend KeyValueDiffers without a parent injector");
              return KeyValueDiffers.create(factories, parent);
            },
            deps: [[KeyValueDiffers, new SkipSelfMetadata, new OptionalMetadata]]
          });
        }, KeyValueDiffers.prototype.find = function(kv) {
          var factory = this.factories.find(function(f) {
            return f.supports(kv);
          });
          if (isPresent(factory))
            return factory;
          throw new BaseException("Cannot find a differ supporting object '" + kv + "'");
        }, KeyValueDiffers;
      }(),
      UNINITIALIZED = {toString: function() {
          return "CD_INIT_VALUE";
        }},
      WrappedValue = function() {
        function WrappedValue(wrapped) {
          this.wrapped = wrapped;
        }
        return WrappedValue.wrap = function(value) {
          return new WrappedValue(value);
        }, WrappedValue;
      }(),
      ValueUnwrapper = function() {
        function ValueUnwrapper() {
          this.hasWrappedValue = !1;
        }
        return ValueUnwrapper.prototype.unwrap = function(value) {
          return value instanceof WrappedValue ? (this.hasWrappedValue = !0, value.wrapped) : value;
        }, ValueUnwrapper.prototype.reset = function() {
          this.hasWrappedValue = !1;
        }, ValueUnwrapper;
      }(),
      SimpleChange = function() {
        function SimpleChange(previousValue, currentValue) {
          this.previousValue = previousValue, this.currentValue = currentValue;
        }
        return SimpleChange.prototype.isFirstChange = function() {
          return this.previousValue === UNINITIALIZED;
        }, SimpleChange;
      }(),
      ChangeDetectorRef = function() {
        function ChangeDetectorRef() {}
        return ChangeDetectorRef;
      }(),
      keyValDiff = [new DefaultKeyValueDifferFactory],
      iterableDiff = [new DefaultIterableDifferFactory],
      defaultIterableDiffers = new IterableDiffers(iterableDiff),
      defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff),
      RenderComponentType = function() {
        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
          this.id = id, this.templateUrl = templateUrl, this.slotCount = slotCount, this.encapsulation = encapsulation, this.styles = styles, this.animations = animations;
        }
        return RenderComponentType;
      }(),
      RenderDebugInfo = function() {
        function RenderDebugInfo() {}
        return Object.defineProperty(RenderDebugInfo.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "component", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "references", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "context", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(RenderDebugInfo.prototype, "source", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), RenderDebugInfo;
      }(),
      Renderer = function() {
        function Renderer() {}
        return Renderer;
      }(),
      RootRenderer = function() {
        function RootRenderer() {}
        return RootRenderer;
      }();
  exports.SecurityContext, function(SecurityContext) {
    SecurityContext[SecurityContext.NONE = 0] = "NONE", SecurityContext[SecurityContext.HTML = 1] = "HTML", SecurityContext[SecurityContext.STYLE = 2] = "STYLE", SecurityContext[SecurityContext.SCRIPT = 3] = "SCRIPT", SecurityContext[SecurityContext.URL = 4] = "URL", SecurityContext[SecurityContext.RESOURCE_URL = 5] = "RESOURCE_URL";
  }(exports.SecurityContext || (exports.SecurityContext = {}));
  var trace,
      events,
      ViewType,
      SanitizationService = function() {
        function SanitizationService() {}
        return SanitizationService;
      }(),
      ElementRef = function() {
        function ElementRef(nativeElement) {
          this.nativeElement = nativeElement;
        }
        return ElementRef;
      }(),
      wtfEnabled = detectWTF(),
      wtfCreateScope = wtfEnabled ? createScope : function(signature, flags) {
        return noopScope;
      },
      wtfLeave = wtfEnabled ? leave : function(s, r) {
        return r;
      },
      wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
        return null;
      },
      wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
        return null;
      },
      ViewContainerRef = function() {
        function ViewContainerRef() {}
        return Object.defineProperty(ViewContainerRef.prototype, "element", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef.prototype, "length", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ViewContainerRef;
      }(),
      ViewContainerRef_ = function() {
        function ViewContainerRef_(_element) {
          this._element = _element, this._createComponentInContainerScope = wtfCreateScope("ViewContainerRef#createComponent()"), this._insertScope = wtfCreateScope("ViewContainerRef#insert()"), this._removeScope = wtfCreateScope("ViewContainerRef#remove()"), this._detachScope = wtfCreateScope("ViewContainerRef#detach()");
        }
        return ViewContainerRef_.prototype.get = function(index) {
          return this._element.nestedViews[index].ref;
        }, Object.defineProperty(ViewContainerRef_.prototype, "length", {
          get: function() {
            var views = this._element.nestedViews;
            return isPresent(views) ? views.length : 0;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef_.prototype, "element", {
          get: function() {
            return this._element.elementRef;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef_.prototype, "injector", {
          get: function() {
            return this._element.injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
          get: function() {
            return this._element.parentInjector;
          },
          enumerable: !0,
          configurable: !0
        }), ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
          void 0 === context && (context = null), void 0 === index && (index = -1);
          var viewRef = templateRef.createEmbeddedView(context);
          return this.insert(viewRef, index), viewRef;
        }, ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
          void 0 === index && (index = -1), void 0 === injector && (injector = null), void 0 === projectableNodes && (projectableNodes = null);
          var s = this._createComponentInContainerScope(),
              contextInjector = isPresent(injector) ? injector : this._element.parentInjector,
              componentRef = componentFactory.create(contextInjector, projectableNodes);
          return this.insert(componentRef.hostView, index), wtfLeave(s, componentRef);
        }, ViewContainerRef_.prototype.insert = function(viewRef, index) {
          void 0 === index && (index = -1);
          var s = this._insertScope();
          index == -1 && (index = this.length);
          var viewRef_ = viewRef;
          return this._element.attachView(viewRef_.internalView, index), wtfLeave(s, viewRef_);
        }, ViewContainerRef_.prototype.move = function(viewRef, currentIndex) {
          var s = this._insertScope();
          if (currentIndex != -1) {
            var viewRef_ = viewRef;
            return this._element.moveView(viewRef_.internalView, currentIndex), wtfLeave(s, viewRef_);
          }
        }, ViewContainerRef_.prototype.indexOf = function(viewRef) {
          return ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
        }, ViewContainerRef_.prototype.remove = function(index) {
          void 0 === index && (index = -1);
          var s = this._removeScope();
          index == -1 && (index = this.length - 1);
          var view = this._element.detachView(index);
          view.destroy(), wtfLeave(s);
        }, ViewContainerRef_.prototype.detach = function(index) {
          void 0 === index && (index = -1);
          var s = this._detachScope();
          index == -1 && (index = this.length - 1);
          var view = this._element.detachView(index);
          return wtfLeave(s, view.ref);
        }, ViewContainerRef_.prototype.clear = function() {
          for (var i = this.length - 1; i >= 0; i--)
            this.remove(i);
        }, ViewContainerRef_;
      }();
  !function(ViewType) {
    ViewType[ViewType.HOST = 0] = "HOST", ViewType[ViewType.COMPONENT = 1] = "COMPONENT", ViewType[ViewType.EMBEDDED = 2] = "EMBEDDED";
  }(ViewType || (ViewType = {}));
  var AppElement = function() {
    function AppElement(index, parentIndex, parentView, nativeElement) {
      this.index = index, this.parentIndex = parentIndex, this.parentView = parentView, this.nativeElement = nativeElement, this.nestedViews = null, this.componentView = null;
    }
    return Object.defineProperty(AppElement.prototype, "elementRef", {
      get: function() {
        return new ElementRef(this.nativeElement);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AppElement.prototype, "vcRef", {
      get: function() {
        return new ViewContainerRef_(this);
      },
      enumerable: !0,
      configurable: !0
    }), AppElement.prototype.initComponent = function(component, componentConstructorViewQueries, view) {
      this.component = component, this.componentConstructorViewQueries = componentConstructorViewQueries, this.componentView = view;
    }, Object.defineProperty(AppElement.prototype, "parentInjector", {
      get: function() {
        return this.parentView.injector(this.parentIndex);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(AppElement.prototype, "injector", {
      get: function() {
        return this.parentView.injector(this.index);
      },
      enumerable: !0,
      configurable: !0
    }), AppElement.prototype.mapNestedViews = function(nestedViewClass, callback) {
      var result = [];
      return isPresent(this.nestedViews) && this.nestedViews.forEach(function(nestedView) {
        nestedView.clazz === nestedViewClass && result.push(callback(nestedView));
      }), result;
    }, AppElement.prototype.moveView = function(view, currentIndex) {
      var previousIndex = this.nestedViews.indexOf(view);
      if (view.type === ViewType.COMPONENT)
        throw new BaseException("Component views can't be moved!");
      var nestedViews = this.nestedViews;
      null == nestedViews && (nestedViews = [], this.nestedViews = nestedViews), ListWrapper.removeAt(nestedViews, previousIndex), ListWrapper.insert(nestedViews, currentIndex, view);
      var refRenderNode;
      if (currentIndex > 0) {
        var prevView = nestedViews[currentIndex - 1];
        refRenderNode = prevView.lastRootNode;
      } else
        refRenderNode = this.nativeElement;
      isPresent(refRenderNode) && view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes), view.markContentChildAsMoved(this);
    }, AppElement.prototype.attachView = function(view, viewIndex) {
      if (view.type === ViewType.COMPONENT)
        throw new BaseException("Component views can't be moved!");
      var nestedViews = this.nestedViews;
      null == nestedViews && (nestedViews = [], this.nestedViews = nestedViews), ListWrapper.insert(nestedViews, viewIndex, view);
      var refRenderNode;
      if (viewIndex > 0) {
        var prevView = nestedViews[viewIndex - 1];
        refRenderNode = prevView.lastRootNode;
      } else
        refRenderNode = this.nativeElement;
      isPresent(refRenderNode) && view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes), view.addToContentChildren(this);
    }, AppElement.prototype.detachView = function(viewIndex) {
      var view = ListWrapper.removeAt(this.nestedViews, viewIndex);
      if (view.type === ViewType.COMPONENT)
        throw new BaseException("Component views can't be moved!");
      return view.detach(), view.removeFromContentChildren(this), view;
    }, AppElement;
  }(),
      ExpressionChangedAfterItHasBeenCheckedException = function(_super) {
        function ExpressionChangedAfterItHasBeenCheckedException(oldValue, currValue, context) {
          var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
          oldValue === UNINITIALIZED && (msg += " It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook ?"), _super.call(this, msg);
        }
        return __extends(ExpressionChangedAfterItHasBeenCheckedException, _super), ExpressionChangedAfterItHasBeenCheckedException;
      }(BaseException),
      ViewWrappedException = function(_super) {
        function ViewWrappedException(originalException, originalStack, context) {
          _super.call(this, "Error in " + context.source, originalException, originalStack, context);
        }
        return __extends(ViewWrappedException, _super), ViewWrappedException;
      }(WrappedException),
      ViewDestroyedException = function(_super) {
        function ViewDestroyedException(details) {
          _super.call(this, "Attempt to use a destroyed view: " + details);
        }
        return __extends(ViewDestroyedException, _super), ViewDestroyedException;
      }(BaseException),
      ViewUtils = function() {
        function ViewUtils(_renderer, _appId, sanitizer) {
          this._renderer = _renderer, this._appId = _appId, this._nextCompTypeId = 0, this.sanitizer = sanitizer;
        }
        return ViewUtils.prototype.createRenderComponentType = function(templateUrl, slotCount, encapsulation, styles, animations) {
          return new RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
        }, ViewUtils.prototype.renderComponent = function(renderComponentType) {
          return this._renderer.renderComponent(renderComponentType);
        }, ViewUtils;
      }();
  ViewUtils.decorators = [{type: Injectable}], ViewUtils.ctorParameters = [{type: RootRenderer}, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {type: SanitizationService}];
  var EMPTY_ARR = [],
      MAX_INTERPOLATION_VALUES = 9,
      EMPTY_ARRAY = [],
      EMPTY_MAP = {},
      ComponentRef = function() {
        function ComponentRef() {}
        return Object.defineProperty(ComponentRef.prototype, "location", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "injector", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "instance", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "hostView", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef.prototype, "componentType", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ComponentRef;
      }(),
      ComponentRef_ = function(_super) {
        function ComponentRef_(_hostElement, _componentType) {
          _super.call(this), this._hostElement = _hostElement, this._componentType = _componentType;
        }
        return __extends(ComponentRef_, _super), Object.defineProperty(ComponentRef_.prototype, "location", {
          get: function() {
            return this._hostElement.elementRef;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "injector", {
          get: function() {
            return this._hostElement.injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "instance", {
          get: function() {
            return this._hostElement.component;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "hostView", {
          get: function() {
            return this._hostElement.parentView.ref;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
          get: function() {
            return this._hostElement.parentView.ref;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ComponentRef_.prototype, "componentType", {
          get: function() {
            return this._componentType;
          },
          enumerable: !0,
          configurable: !0
        }), ComponentRef_.prototype.destroy = function() {
          this._hostElement.parentView.destroy();
        }, ComponentRef_.prototype.onDestroy = function(callback) {
          this.hostView.onDestroy(callback);
        }, ComponentRef_;
      }(ComponentRef),
      EMPTY_CONTEXT = new Object,
      ComponentFactory = function() {
        function ComponentFactory(selector, _viewFactory, _componentType) {
          this.selector = selector, this._viewFactory = _viewFactory, this._componentType = _componentType;
        }
        return Object.defineProperty(ComponentFactory.prototype, "componentType", {
          get: function() {
            return this._componentType;
          },
          enumerable: !0,
          configurable: !0
        }), ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
          void 0 === projectableNodes && (projectableNodes = null), void 0 === rootSelectorOrNode && (rootSelectorOrNode = null);
          var vu = injector.get(ViewUtils);
          isBlank(projectableNodes) && (projectableNodes = []);
          var hostView = this._viewFactory(vu, injector, null),
              hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
          return new ComponentRef_(hostElement, this._componentType);
        }, ComponentFactory;
      }(),
      NoComponentFactoryError = function(_super) {
        function NoComponentFactoryError(component) {
          _super.call(this, "No component factory found for " + stringify(component)), this.component = component;
        }
        return __extends(NoComponentFactoryError, _super), NoComponentFactoryError;
      }(BaseException),
      _NullComponentFactoryResolver = function() {
        function _NullComponentFactoryResolver() {}
        return _NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
          throw new NoComponentFactoryError(component);
        }, _NullComponentFactoryResolver;
      }(),
      ComponentFactoryResolver = function() {
        function ComponentFactoryResolver() {}
        return ComponentFactoryResolver;
      }();
  ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver;
  var CodegenComponentFactoryResolver = function() {
    function CodegenComponentFactoryResolver(factories, _parent) {
      this._parent = _parent, this._factories = new Map;
      for (var i = 0; i < factories.length; i++) {
        var factory = factories[i];
        this._factories.set(factory.componentType, factory);
      }
    }
    return CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      var result = this._factories.get(component);
      return result || (result = this._parent.resolveComponentFactory(component)), result;
    }, CodegenComponentFactoryResolver;
  }(),
      EventEmitter = function(_super) {
        function EventEmitter(isAsync) {
          void 0 === isAsync && (isAsync = !1), _super.call(this), this.__isAsync = isAsync;
        }
        return __extends(EventEmitter, _super), EventEmitter.prototype.emit = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.next = function(value) {
          _super.prototype.next.call(this, value);
        }, EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
          var schedulerFn,
              errorFn = function(err) {
                return null;
              },
              completeFn = function() {
                return null;
              };
          return generatorOrNext && "object" == typeof generatorOrNext ? (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext.next(value);
            });
          } : function(value) {
            generatorOrNext.next(value);
          }, generatorOrNext.error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          }), generatorOrNext.complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          })) : (schedulerFn = this.__isAsync ? function(value) {
            setTimeout(function() {
              return generatorOrNext(value);
            });
          } : function(value) {
            generatorOrNext(value);
          }, error && (errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          }), complete && (completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          })), _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        }, EventEmitter;
      }(rxjs_Subject.Subject),
      NgZoneError = function() {
        function NgZoneError(error, stackTrace) {
          this.error = error, this.stackTrace = stackTrace;
        }
        return NgZoneError;
      }(),
      NgZoneImpl = function() {
        function NgZoneImpl(_a) {
          var _this = this,
              trace = _a.trace,
              onEnter = _a.onEnter,
              onLeave = _a.onLeave,
              setMicrotask = _a.setMicrotask,
              setMacrotask = _a.setMacrotask,
              onError = _a.onError;
          if (this.onEnter = onEnter, this.onLeave = onLeave, this.setMicrotask = setMicrotask, this.setMacrotask = setMacrotask, this.onError = onError, !Zone)
            throw new Error("Angular requires Zone.js polyfill.");
          this.outer = this.inner = Zone.current, Zone.wtfZoneSpec && (this.inner = this.inner.fork(Zone.wtfZoneSpec)), trace && Zone.longStackTraceZoneSpec && (this.inner = this.inner.fork(Zone.longStackTraceZoneSpec)), this.inner = this.inner.fork({
            name: "angular",
            properties: {isAngularZone: !0},
            onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
              try {
                return _this.onEnter(), delegate.invokeTask(target, task, applyThis, applyArgs);
              } finally {
                _this.onLeave();
              }
            },
            onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
              try {
                return _this.onEnter(), delegate.invoke(target, callback, applyThis, applyArgs, source);
              } finally {
                _this.onLeave();
              }
            },
            onHasTask: function(delegate, current, target, hasTaskState) {
              delegate.hasTask(target, hasTaskState), current == target && ("microTask" == hasTaskState.change ? _this.setMicrotask(hasTaskState.microTask) : "macroTask" == hasTaskState.change && _this.setMacrotask(hasTaskState.macroTask));
            },
            onHandleError: function(delegate, current, target, error) {
              return delegate.handleError(target, error), _this.onError(new NgZoneError(error, error.stack)), !1;
            }
          });
        }
        return NgZoneImpl.isInAngularZone = function() {
          return Zone.current.get("isAngularZone") === !0;
        }, NgZoneImpl.prototype.runInner = function(fn) {
          return this.inner.run(fn);
        }, NgZoneImpl.prototype.runInnerGuarded = function(fn) {
          return this.inner.runGuarded(fn);
        }, NgZoneImpl.prototype.runOuter = function(fn) {
          return this.outer.run(fn);
        }, NgZoneImpl;
      }(),
      NgZone = function() {
        function NgZone(_a) {
          var _this = this,
              _b = _a.enableLongStackTrace,
              enableLongStackTrace = void 0 !== _b && _b;
          this._hasPendingMicrotasks = !1, this._hasPendingMacrotasks = !1, this._isStable = !0, this._nesting = 0, this._onUnstable = new EventEmitter((!1)), this._onMicrotaskEmpty = new EventEmitter((!1)), this._onStable = new EventEmitter((!1)), this._onErrorEvents = new EventEmitter((!1)), this._zoneImpl = new NgZoneImpl({
            trace: enableLongStackTrace,
            onEnter: function() {
              _this._nesting++, _this._isStable && (_this._isStable = !1, _this._onUnstable.emit(null));
            },
            onLeave: function() {
              _this._nesting--, _this._checkStable();
            },
            setMicrotask: function(hasMicrotasks) {
              _this._hasPendingMicrotasks = hasMicrotasks, _this._checkStable();
            },
            setMacrotask: function(hasMacrotasks) {
              _this._hasPendingMacrotasks = hasMacrotasks;
            },
            onError: function(error) {
              return _this._onErrorEvents.emit(error);
            }
          });
        }
        return NgZone.isInAngularZone = function() {
          return NgZoneImpl.isInAngularZone();
        }, NgZone.assertInAngularZone = function() {
          if (!NgZoneImpl.isInAngularZone())
            throw new BaseException("Expected to be in Angular Zone, but it is not!");
        }, NgZone.assertNotInAngularZone = function() {
          if (NgZoneImpl.isInAngularZone())
            throw new BaseException("Expected to not be in Angular Zone, but it is!");
        }, NgZone.prototype._checkStable = function() {
          var _this = this;
          if (0 == this._nesting && !this._hasPendingMicrotasks && !this._isStable)
            try {
              this._nesting++, this._onMicrotaskEmpty.emit(null);
            } finally {
              if (this._nesting--, !this._hasPendingMicrotasks)
                try {
                  this.runOutsideAngular(function() {
                    return _this._onStable.emit(null);
                  });
                } finally {
                  this._isStable = !0;
                }
            }
        }, Object.defineProperty(NgZone.prototype, "onUnstable", {
          get: function() {
            return this._onUnstable;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
          get: function() {
            return this._onMicrotaskEmpty;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "onStable", {
          get: function() {
            return this._onStable;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "onError", {
          get: function() {
            return this._onErrorEvents;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "isStable", {
          get: function() {
            return this._isStable;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
          get: function() {
            return this._hasPendingMicrotasks;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
          get: function() {
            return this._hasPendingMacrotasks;
          },
          enumerable: !0,
          configurable: !0
        }), NgZone.prototype.run = function(fn) {
          return this._zoneImpl.runInner(fn);
        }, NgZone.prototype.runGuarded = function(fn) {
          return this._zoneImpl.runInnerGuarded(fn);
        }, NgZone.prototype.runOutsideAngular = function(fn) {
          return this._zoneImpl.runOuter(fn);
        }, NgZone;
      }(),
      Testability = function() {
        function Testability(_ngZone) {
          this._ngZone = _ngZone, this._pendingCount = 0, this._isZoneStable = !0, this._didWork = !1, this._callbacks = [], this._watchAngularEvents();
        }
        return Testability.prototype._watchAngularEvents = function() {
          var _this = this;
          this._ngZone.onUnstable.subscribe({next: function() {
              _this._didWork = !0, _this._isZoneStable = !1;
            }}), this._ngZone.runOutsideAngular(function() {
            _this._ngZone.onStable.subscribe({next: function() {
                NgZone.assertNotInAngularZone(), scheduleMicroTask(function() {
                  _this._isZoneStable = !0, _this._runCallbacksIfReady();
                });
              }});
          });
        }, Testability.prototype.increasePendingRequestCount = function() {
          return this._pendingCount += 1, this._didWork = !0, this._pendingCount;
        }, Testability.prototype.decreasePendingRequestCount = function() {
          if (this._pendingCount -= 1, this._pendingCount < 0)
            throw new BaseException("pending async requests below zero");
          return this._runCallbacksIfReady(), this._pendingCount;
        }, Testability.prototype.isStable = function() {
          return this._isZoneStable && 0 == this._pendingCount && !this._ngZone.hasPendingMacrotasks;
        }, Testability.prototype._runCallbacksIfReady = function() {
          var _this = this;
          this.isStable() ? scheduleMicroTask(function() {
            for (; 0 !== _this._callbacks.length; )
              _this._callbacks.pop()(_this._didWork);
            _this._didWork = !1;
          }) : this._didWork = !0;
        }, Testability.prototype.whenStable = function(callback) {
          this._callbacks.push(callback), this._runCallbacksIfReady();
        }, Testability.prototype.getPendingRequestCount = function() {
          return this._pendingCount;
        }, Testability.prototype.findBindings = function(using, provider, exactMatch) {
          return [];
        }, Testability.prototype.findProviders = function(using, provider, exactMatch) {
          return [];
        }, Testability;
      }();
  Testability.decorators = [{type: Injectable}], Testability.ctorParameters = [{type: NgZone}];
  var TestabilityRegistry = function() {
    function TestabilityRegistry() {
      this._applications = new Map$1, _testabilityGetter.addToWindow(this);
    }
    return TestabilityRegistry.prototype.registerApplication = function(token, testability) {
      this._applications.set(token, testability);
    }, TestabilityRegistry.prototype.getTestability = function(elem) {
      return this._applications.get(elem);
    }, TestabilityRegistry.prototype.getAllTestabilities = function() {
      return MapWrapper.values(this._applications);
    }, TestabilityRegistry.prototype.getAllRootElements = function() {
      return MapWrapper.keys(this._applications);
    }, TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
      return void 0 === findInAncestors && (findInAncestors = !0), _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    }, TestabilityRegistry;
  }();
  TestabilityRegistry.decorators = [{type: Injectable}], TestabilityRegistry.ctorParameters = [];
  var _platform,
      _NoopGetTestability = function() {
        function _NoopGetTestability() {}
        return _NoopGetTestability.prototype.addToWindow = function(registry) {}, _NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
          return null;
        }, _NoopGetTestability;
      }(),
      _testabilityGetter = new _NoopGetTestability,
      _devMode = !0,
      _runModeLocked = !1,
      PlatformRef = function() {
        function PlatformRef() {}
        return PlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
          throw unimplemented();
        }, PlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
          throw void 0 === compilerOptions && (compilerOptions = []), unimplemented();
        }, Object.defineProperty(PlatformRef.prototype, "injector", {
          get: function() {
            throw unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformRef.prototype, "disposed", {
          get: function() {
            throw unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformRef.prototype, "destroyed", {
          get: function() {
            throw unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), PlatformRef;
      }(),
      PlatformRef_ = function(_super) {
        function PlatformRef_(_injector) {
          _super.call(this), this._injector = _injector, this._modules = [], this._destroyListeners = [], this._destroyed = !1;
        }
        return __extends(PlatformRef_, _super), PlatformRef_.prototype.registerDisposeListener = function(dispose) {
          this.onDestroy(dispose);
        }, PlatformRef_.prototype.onDestroy = function(callback) {
          this._destroyListeners.push(callback);
        }, Object.defineProperty(PlatformRef_.prototype, "injector", {
          get: function() {
            return this._injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformRef_.prototype, "disposed", {
          get: function() {
            return this.destroyed;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(PlatformRef_.prototype, "destroyed", {
          get: function() {
            return this._destroyed;
          },
          enumerable: !0,
          configurable: !0
        }), PlatformRef_.prototype.destroy = function() {
          if (this._destroyed)
            throw new BaseException("The platform has already been destroyed!");
          ListWrapper.clone(this._modules).forEach(function(app) {
            return app.destroy();
          }), this._destroyListeners.forEach(function(dispose) {
            return dispose();
          }), this._destroyed = !0;
        }, PlatformRef_.prototype.dispose = function() {
          this.destroy();
        }, PlatformRef_.prototype.bootstrapModuleFactory = function(moduleFactory) {
          return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
        }, PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function(moduleFactory, ngZone) {
          var _this = this;
          return ngZone || (ngZone = new NgZone({enableLongStackTrace: isDevMode()})), ngZone.run(function() {
            var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{
              provide: NgZone,
              useValue: ngZone
            }], _this.injector),
                moduleRef = moduleFactory.create(ngZoneInjector),
                exceptionHandler = moduleRef.injector.get(ExceptionHandler, null);
            if (!exceptionHandler)
              throw new Error("No ExceptionHandler. Is platform module (BrowserModule) included?");
            return moduleRef.onDestroy(function() {
              return ListWrapper.remove(_this._modules, moduleRef);
            }), ngZone.onError.subscribe({next: function(error) {
                exceptionHandler.call(error.error, error.stackTrace);
              }}), _callAndReportToExceptionHandler(exceptionHandler, function() {
              var initStatus = moduleRef.injector.get(ApplicationInitStatus);
              return initStatus.donePromise.then(function() {
                return _this._moduleDoBootstrap(moduleRef), moduleRef;
              });
            });
          });
        }, PlatformRef_.prototype.bootstrapModule = function(moduleType, compilerOptions) {
          return void 0 === compilerOptions && (compilerOptions = []), this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
        }, PlatformRef_.prototype._bootstrapModuleWithZone = function(moduleType, compilerOptions, ngZone) {
          var _this = this;
          void 0 === compilerOptions && (compilerOptions = []);
          var compilerFactory = this.injector.get(CompilerFactory),
              compiler = compilerFactory.createCompiler(compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);
          return compiler.compileModuleAsync(moduleType).then(function(moduleFactory) {
            return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
          });
        }, PlatformRef_.prototype._moduleDoBootstrap = function(moduleRef) {
          var appRef = moduleRef.injector.get(ApplicationRef);
          if (moduleRef.bootstrapFactories.length > 0)
            moduleRef.bootstrapFactories.forEach(function(compFactory) {
              return appRef.bootstrap(compFactory);
            });
          else {
            if (!moduleRef.instance.ngDoBootstrap)
              throw new BaseException("The module " + stringify(moduleRef.instance.constructor) + ' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.');
            moduleRef.instance.ngDoBootstrap(appRef);
          }
        }, PlatformRef_;
      }(PlatformRef);
  PlatformRef_.decorators = [{type: Injectable}], PlatformRef_.ctorParameters = [{type: Injector}];
  var ApplicationRef = function() {
    function ApplicationRef() {}
    return Object.defineProperty(ApplicationRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(ApplicationRef.prototype, "zone", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(ApplicationRef.prototype, "components", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), ApplicationRef;
  }(),
      ApplicationRef_ = function(_super) {
        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
          var _this = this;
          _super.call(this), this._zone = _zone, this._console = _console, this._injector = _injector, this._exceptionHandler = _exceptionHandler, this._componentFactoryResolver = _componentFactoryResolver, this._initStatus = _initStatus, this._testabilityRegistry = _testabilityRegistry, this._testability = _testability, this._bootstrapListeners = [], this._disposeListeners = [], this._rootComponents = [], this._rootComponentTypes = [], this._changeDetectorRefs = [], this._runningTick = !1, this._enforceNoNewChanges = !1, this._enforceNoNewChanges = isDevMode(), this._zone.onMicrotaskEmpty.subscribe({next: function() {
              _this._zone.run(function() {
                _this.tick();
              });
            }});
        }
        return __extends(ApplicationRef_, _super), ApplicationRef_.prototype.registerBootstrapListener = function(listener) {
          this._bootstrapListeners.push(listener);
        }, ApplicationRef_.prototype.registerDisposeListener = function(dispose) {
          this._disposeListeners.push(dispose);
        }, ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
          this._changeDetectorRefs.push(changeDetector);
        }, ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
          ListWrapper.remove(this._changeDetectorRefs, changeDetector);
        }, ApplicationRef_.prototype.waitForAsyncInitializers = function() {
          return this._initStatus.donePromise;
        }, ApplicationRef_.prototype.run = function(callback) {
          var _this = this;
          return this._zone.run(function() {
            return _callAndReportToExceptionHandler(_this._exceptionHandler, callback);
          });
        }, ApplicationRef_.prototype.bootstrap = function(componentOrFactory) {
          var _this = this;
          if (!this._initStatus.done)
            throw new BaseException("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");
          var componentFactory;
          componentFactory = componentOrFactory instanceof ComponentFactory ? componentOrFactory : this._componentFactoryResolver.resolveComponentFactory(componentOrFactory), this._rootComponentTypes.push(componentFactory.componentType);
          var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
          compRef.onDestroy(function() {
            _this._unloadComponent(compRef);
          });
          var testability = compRef.injector.get(Testability, null);
          return isPresent(testability) && compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability), this._loadComponent(compRef), isDevMode() && this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode."), compRef;
        }, ApplicationRef_.prototype._loadComponent = function(componentRef) {
          this._changeDetectorRefs.push(componentRef.changeDetectorRef), this.tick(), this._rootComponents.push(componentRef);
          var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
          listeners.forEach(function(listener) {
            return listener(componentRef);
          });
        }, ApplicationRef_.prototype._unloadComponent = function(componentRef) {
          ListWrapper.contains(this._rootComponents, componentRef) && (this.unregisterChangeDetector(componentRef.changeDetectorRef), ListWrapper.remove(this._rootComponents, componentRef));
        }, Object.defineProperty(ApplicationRef_.prototype, "injector", {
          get: function() {
            return this._injector;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ApplicationRef_.prototype, "zone", {
          get: function() {
            return this._zone;
          },
          enumerable: !0,
          configurable: !0
        }), ApplicationRef_.prototype.tick = function() {
          if (this._runningTick)
            throw new BaseException("ApplicationRef.tick is called recursively");
          var s = ApplicationRef_._tickScope();
          try {
            this._runningTick = !0, this._changeDetectorRefs.forEach(function(detector) {
              return detector.detectChanges();
            }), this._enforceNoNewChanges && this._changeDetectorRefs.forEach(function(detector) {
              return detector.checkNoChanges();
            });
          } finally {
            this._runningTick = !1, wtfLeave(s);
          }
        }, ApplicationRef_.prototype.ngOnDestroy = function() {
          ListWrapper.clone(this._rootComponents).forEach(function(ref) {
            return ref.destroy();
          }), this._disposeListeners.forEach(function(dispose) {
            return dispose();
          });
        }, ApplicationRef_.prototype.dispose = function() {
          this.ngOnDestroy();
        }, Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
          get: function() {
            return this._rootComponentTypes;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ApplicationRef_.prototype, "components", {
          get: function() {
            return this._rootComponents;
          },
          enumerable: !0,
          configurable: !0
        }), ApplicationRef_;
      }(ApplicationRef);
  ApplicationRef_._tickScope = wtfCreateScope("ApplicationRef#tick()"), ApplicationRef_.decorators = [{type: Injectable}], ApplicationRef_.ctorParameters = [{type: NgZone}, {type: Console}, {type: Injector}, {type: ExceptionHandler}, {type: ComponentFactoryResolver}, {type: ApplicationInitStatus}, {
    type: TestabilityRegistry,
    decorators: [{type: Optional}]
  }, {
    type: Testability,
    decorators: [{type: Optional}]
  }];
  var ComponentResolver = function() {
    function ComponentResolver() {}
    return ComponentResolver;
  }();
  ComponentResolver.DynamicCompilationDeprecationMsg = "ComponentResolver is deprecated for dynamic compilation. Use ComponentFactoryResolver together with @NgModule/@Component.entryComponents or ANALYZE_FOR_ENTRY_COMPONENTS provider instead. For runtime compile only, you can also use Compiler.compileComponentSync/Async.", ComponentResolver.LazyLoadingDeprecationMsg = "ComponentResolver is deprecated for lazy loading. Use NgModuleFactoryLoader instead.";
  var DynamicComponentLoader = function() {
    function DynamicComponentLoader() {}
    return DynamicComponentLoader;
  }(),
      DynamicComponentLoader_ = function(_super) {
        function DynamicComponentLoader_(_compiler) {
          _super.call(this), this._compiler = _compiler;
        }
        return __extends(DynamicComponentLoader_, _super), DynamicComponentLoader_.prototype.loadAsRoot = function(type, overrideSelectorOrNode, injector, onDispose, projectableNodes) {
          return this._compiler.compileComponentAsync(type).then(function(componentFactory) {
            var componentRef = componentFactory.create(injector, projectableNodes, isPresent(overrideSelectorOrNode) ? overrideSelectorOrNode : componentFactory.selector);
            return isPresent(onDispose) && componentRef.onDestroy(onDispose), componentRef;
          });
        }, DynamicComponentLoader_.prototype.loadNextToLocation = function(type, location, providers, projectableNodes) {
          return void 0 === providers && (providers = null), void 0 === projectableNodes && (projectableNodes = null), this._compiler.compileComponentAsync(type).then(function(componentFactory) {
            var contextInjector = location.parentInjector,
                childInjector = isPresent(providers) && providers.length > 0 ? ReflectiveInjector.fromResolvedProviders(providers, contextInjector) : contextInjector;
            return location.createComponent(componentFactory, location.length, childInjector, projectableNodes);
          });
        }, DynamicComponentLoader_;
      }(DynamicComponentLoader);
  DynamicComponentLoader_.decorators = [{type: Injectable}], DynamicComponentLoader_.ctorParameters = [{type: Compiler}];
  var NgModuleRef = function() {
    function NgModuleRef() {}
    return Object.defineProperty(NgModuleRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(NgModuleRef.prototype, "instance", {
      get: function() {
        return unimplemented();
      },
      enumerable: !0,
      configurable: !0
    }), NgModuleRef;
  }(),
      NgModuleFactory = function() {
        function NgModuleFactory(_injectorClass, _moduleype) {
          this._injectorClass = _injectorClass, this._moduleype = _moduleype;
        }
        return Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
          get: function() {
            return this._moduleype;
          },
          enumerable: !0,
          configurable: !0
        }), NgModuleFactory.prototype.create = function(parentInjector) {
          parentInjector || (parentInjector = Injector.NULL);
          var instance = new this._injectorClass(parentInjector);
          return instance.create(), instance;
        }, NgModuleFactory;
      }(),
      _UNDEFINED = new Object,
      NgModuleInjector = function(_super) {
        function NgModuleInjector(parent, factories, bootstrapFactories) {
          _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL)), this.parent = parent, this.bootstrapFactories = bootstrapFactories, this._destroyListeners = [], this._destroyed = !1;
        }
        return __extends(NgModuleInjector, _super), NgModuleInjector.prototype.create = function() {
          this.instance = this.createInternal();
        }, NgModuleInjector.prototype.get = function(token, notFoundValue) {
          if (void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND), token === Injector || token === ComponentFactoryResolver)
            return this;
          var result = this.getInternal(token, _UNDEFINED);
          return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
        }, Object.defineProperty(NgModuleInjector.prototype, "injector", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
          get: function() {
            return this;
          },
          enumerable: !0,
          configurable: !0
        }), NgModuleInjector.prototype.destroy = function() {
          if (this._destroyed)
            throw new BaseException("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
          this._destroyed = !0, this.destroyInternal(), this._destroyListeners.forEach(function(listener) {
            return listener();
          });
        }, NgModuleInjector.prototype.onDestroy = function(callback) {
          this._destroyListeners.push(callback);
        }, NgModuleInjector;
      }(CodegenComponentFactoryResolver),
      NgModuleFactoryLoader = function() {
        function NgModuleFactoryLoader() {}
        return NgModuleFactoryLoader;
      }(),
      QueryList = function() {
        function QueryList() {
          this._dirty = !0, this._results = [], this._emitter = new EventEmitter;
        }
        return Object.defineProperty(QueryList.prototype, "changes", {
          get: function() {
            return this._emitter;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryList.prototype, "length", {
          get: function() {
            return this._results.length;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryList.prototype, "first", {
          get: function() {
            return this._results[0];
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(QueryList.prototype, "last", {
          get: function() {
            return this._results[this.length - 1];
          },
          enumerable: !0,
          configurable: !0
        }), QueryList.prototype.map = function(fn) {
          return this._results.map(fn);
        }, QueryList.prototype.filter = function(fn) {
          return this._results.filter(fn);
        }, QueryList.prototype.reduce = function(fn, init) {
          return this._results.reduce(fn, init);
        }, QueryList.prototype.forEach = function(fn) {
          this._results.forEach(fn);
        }, QueryList.prototype.some = function(fn) {
          return this._results.some(fn);
        }, QueryList.prototype.toArray = function() {
          return this._results.slice();
        }, QueryList.prototype[getSymbolIterator()] = function() {
          return this._results[getSymbolIterator()]();
        }, QueryList.prototype.toString = function() {
          return this._results.toString();
        }, QueryList.prototype.reset = function(res) {
          this._results = ListWrapper.flatten(res), this._dirty = !1;
        }, QueryList.prototype.notifyOnChanges = function() {
          this._emitter.emit(this);
        }, QueryList.prototype.setDirty = function() {
          this._dirty = !0;
        }, Object.defineProperty(QueryList.prototype, "dirty", {
          get: function() {
            return this._dirty;
          },
          enumerable: !0,
          configurable: !0
        }), QueryList;
      }(),
      _SEPARATOR = "#",
      FACTORY_MODULE_SUFFIX = ".ngfactory",
      FACTORY_CLASS_SUFFIX = "NgFactory",
      SystemJsNgModuleLoader = function() {
        function SystemJsNgModuleLoader(_compiler) {
          this._compiler = _compiler;
        }
        return SystemJsNgModuleLoader.prototype.load = function(path) {
          var offlineMode = this._compiler instanceof Compiler;
          return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
        }, SystemJsNgModuleLoader.prototype.loadAndCompile = function(path) {
          var _this = this,
              _a = path.split(_SEPARATOR),
              module = _a[0],
              exportName = _a[1];
          return void 0 === exportName && (exportName = "default"), global$1.System.import(module).then(function(module) {
            return module[exportName];
          }).then(function(type) {
            return checkNotEmpty(type, module, exportName);
          }).then(function(type) {
            return _this._compiler.compileModuleAsync(type);
          });
        }, SystemJsNgModuleLoader.prototype.loadFactory = function(path) {
          var _a = path.split(_SEPARATOR),
              module = _a[0],
              exportName = _a[1];
          return void 0 === exportName && (exportName = "default"), global$1.System.import(module + FACTORY_MODULE_SUFFIX).then(function(module) {
            return module[exportName + FACTORY_CLASS_SUFFIX];
          }).then(function(factory) {
            return checkNotEmpty(factory, module, exportName);
          });
        }, SystemJsNgModuleLoader;
      }();
  SystemJsNgModuleLoader.decorators = [{type: Injectable}], SystemJsNgModuleLoader.ctorParameters = [{type: Compiler}];
  var _SEPARATOR$1 = "#",
      SystemJsComponentResolver = function() {
        function SystemJsComponentResolver(_resolver, _console) {
          this._resolver = _resolver, this._console = _console;
        }
        return SystemJsComponentResolver.prototype.resolveComponent = function(componentType) {
          var _this = this;
          if (isString(componentType)) {
            this._console.warn(ComponentResolver.LazyLoadingDeprecationMsg);
            var _a = componentType.split(_SEPARATOR$1),
                module = _a[0],
                component_1 = _a[1];
            return void 0 === component_1 && (component_1 = "default"), global$1.System.import(module).then(function(module) {
              return _this._resolver.resolveComponent(module[component_1]);
            });
          }
          return this._resolver.resolveComponent(componentType);
        }, SystemJsComponentResolver.prototype.clearCache = function() {}, SystemJsComponentResolver;
      }();
  SystemJsComponentResolver.decorators = [{type: Injectable}], SystemJsComponentResolver.ctorParameters = [{type: ComponentResolver}, {type: Console}];
  var FACTORY_MODULE_SUFFIX$1 = ".ngfactory",
      FACTORY_CLASS_SUFFIX$1 = "NgFactory",
      SystemJsCmpFactoryResolver = function() {
        function SystemJsCmpFactoryResolver(_console) {
          this._console = _console;
        }
        return SystemJsCmpFactoryResolver.prototype.resolveComponent = function(componentType) {
          if (isString(componentType)) {
            this._console.warn(ComponentResolver.LazyLoadingDeprecationMsg);
            var _a = componentType.split(_SEPARATOR$1),
                module = _a[0],
                factory_1 = _a[1];
            return global$1.System.import(module + FACTORY_MODULE_SUFFIX$1).then(function(module) {
              return module[factory_1 + FACTORY_CLASS_SUFFIX$1];
            });
          }
          return Promise.resolve(null);
        }, SystemJsCmpFactoryResolver.prototype.clearCache = function() {}, SystemJsCmpFactoryResolver;
      }();
  SystemJsCmpFactoryResolver.decorators = [{type: Injectable}], SystemJsCmpFactoryResolver.ctorParameters = [{type: Console}];
  var TemplateRef = function() {
    function TemplateRef() {}
    return Object.defineProperty(TemplateRef.prototype, "elementRef", {
      get: function() {
        return null;
      },
      enumerable: !0,
      configurable: !0
    }), TemplateRef;
  }(),
      TemplateRef_ = function(_super) {
        function TemplateRef_(_appElement, _viewFactory) {
          _super.call(this), this._appElement = _appElement, this._viewFactory = _viewFactory;
        }
        return __extends(TemplateRef_, _super), TemplateRef_.prototype.createEmbeddedView = function(context) {
          var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);
          return view.create(context || {}, null, null), view.ref;
        }, Object.defineProperty(TemplateRef_.prototype, "elementRef", {
          get: function() {
            return this._appElement.elementRef;
          },
          enumerable: !0,
          configurable: !0
        }), TemplateRef_;
      }(TemplateRef),
      ViewRef = function() {
        function ViewRef() {}
        return Object.defineProperty(ViewRef.prototype, "destroyed", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), ViewRef;
      }(),
      EmbeddedViewRef = function(_super) {
        function EmbeddedViewRef() {
          _super.apply(this, arguments);
        }
        return __extends(EmbeddedViewRef, _super), Object.defineProperty(EmbeddedViewRef.prototype, "context", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
          get: function() {
            return unimplemented();
          },
          enumerable: !0,
          configurable: !0
        }), EmbeddedViewRef;
      }(ViewRef),
      ViewRef_ = function() {
        function ViewRef_(_view) {
          this._view = _view, this._view = _view, this._originalMode = this._view.cdMode;
        }
        return Object.defineProperty(ViewRef_.prototype, "internalView", {
          get: function() {
            return this._view;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewRef_.prototype, "rootNodes", {
          get: function() {
            return this._view.flatRootNodes;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewRef_.prototype, "context", {
          get: function() {
            return this._view.context;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(ViewRef_.prototype, "destroyed", {
          get: function() {
            return this._view.destroyed;
          },
          enumerable: !0,
          configurable: !0
        }), ViewRef_.prototype.markForCheck = function() {
          this._view.markPathToRootAsCheckOnce();
        }, ViewRef_.prototype.detach = function() {
          this._view.cdMode = ChangeDetectorStatus.Detached;
        }, ViewRef_.prototype.detectChanges = function() {
          this._view.detectChanges(!1);
        }, ViewRef_.prototype.checkNoChanges = function() {
          this._view.detectChanges(!0);
        }, ViewRef_.prototype.reattach = function() {
          this._view.cdMode = this._originalMode, this.markForCheck();
        }, ViewRef_.prototype.onDestroy = function(callback) {
          this._view.disposables.push(callback);
        }, ViewRef_.prototype.destroy = function() {
          this._view.destroy();
        }, ViewRef_;
      }(),
      EventListener = function() {
        function EventListener(name, callback) {
          this.name = name, this.callback = callback;
        }
        return EventListener;
      }(),
      DebugNode = function() {
        function DebugNode(nativeNode, parent, _debugInfo) {
          this._debugInfo = _debugInfo, this.nativeNode = nativeNode, isPresent(parent) && parent instanceof DebugElement ? parent.addChild(this) : this.parent = null, this.listeners = [];
        }
        return Object.defineProperty(DebugNode.prototype, "injector", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.injector : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "componentInstance", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.component : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "context", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.context : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "references", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.references : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "providerTokens", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugNode.prototype, "source", {
          get: function() {
            return isPresent(this._debugInfo) ? this._debugInfo.source : null;
          },
          enumerable: !0,
          configurable: !0
        }), DebugNode.prototype.inject = function(token) {
          return this.injector.get(token);
        }, DebugNode;
      }(),
      DebugElement = function(_super) {
        function DebugElement(nativeNode, parent, _debugInfo) {
          _super.call(this, nativeNode, parent, _debugInfo), this.properties = {}, this.attributes = {}, this.classes = {}, this.styles = {}, this.childNodes = [], this.nativeElement = nativeNode;
        }
        return __extends(DebugElement, _super), DebugElement.prototype.addChild = function(child) {
          isPresent(child) && (this.childNodes.push(child), child.parent = this);
        }, DebugElement.prototype.removeChild = function(child) {
          var childIndex = this.childNodes.indexOf(child);
          childIndex !== -1 && (child.parent = null, this.childNodes.splice(childIndex, 1));
        }, DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
          var siblingIndex = this.childNodes.indexOf(child);
          if (siblingIndex !== -1) {
            var previousChildren = this.childNodes.slice(0, siblingIndex + 1),
                nextChildren = this.childNodes.slice(siblingIndex + 1);
            this.childNodes = ListWrapper.concat(ListWrapper.concat(previousChildren, newChildren), nextChildren);
            for (var i = 0; i < newChildren.length; ++i) {
              var newChild = newChildren[i];
              isPresent(newChild.parent) && newChild.parent.removeChild(newChild), newChild.parent = this;
            }
          }
        }, DebugElement.prototype.query = function(predicate) {
          var results = this.queryAll(predicate);
          return results.length > 0 ? results[0] : null;
        }, DebugElement.prototype.queryAll = function(predicate) {
          var matches = [];
          return _queryElementChildren(this, predicate, matches), matches;
        }, DebugElement.prototype.queryAllNodes = function(predicate) {
          var matches = [];
          return _queryNodeChildren(this, predicate, matches), matches;
        }, Object.defineProperty(DebugElement.prototype, "children", {
          get: function() {
            var children = [];
            return this.childNodes.forEach(function(node) {
              node instanceof DebugElement && children.push(node);
            }), children;
          },
          enumerable: !0,
          configurable: !0
        }), DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
          this.listeners.forEach(function(listener) {
            listener.name == eventName && listener.callback(eventObj);
          });
        }, DebugElement;
      }(DebugNode),
      _nativeNodeToDebugNode = new Map,
      PLATFORM_DIRECTIVES = new OpaqueToken("Platform Directives"),
      PLATFORM_PIPES = new OpaqueToken("Platform Pipes"),
      _CORE_PLATFORM_PROVIDERS = [PlatformRef_, {
        provide: PlatformRef,
        useExisting: PlatformRef_
      }, {
        provide: Reflector,
        useFactory: _reflector,
        deps: []
      }, {
        provide: ReflectorReader,
        useExisting: Reflector
      }, TestabilityRegistry, Console],
      platformCore = createPlatformFactory(null, "core", _CORE_PLATFORM_PROVIDERS),
      PLATFORM_COMMON_PROVIDERS = _CORE_PLATFORM_PROVIDERS,
      APPLICATION_COMMON_PROVIDERS = [],
      ApplicationModule = function() {
        function ApplicationModule() {}
        return ApplicationModule;
      }();
  ApplicationModule.decorators = [{
    type: NgModule,
    args: [{providers: [ApplicationRef_, {
        provide: ApplicationRef,
        useExisting: ApplicationRef_
      }, ApplicationInitStatus, Compiler, {
        provide: ComponentResolver,
        useExisting: Compiler
      }, APP_ID_RANDOM_PROVIDER, ViewUtils, {
        provide: IterableDiffers,
        useFactory: _iterableDiffersFactory
      }, {
        provide: KeyValueDiffers,
        useFactory: _keyValueDiffersFactory
      }, {
        provide: DynamicComponentLoader,
        useClass: DynamicComponentLoader_
      }]}]
  }];
  var FILL_STYLE_FLAG = "true",
      ANY_STATE = "*",
      DEFAULT_STATE = "*",
      EMPTY_STATE = "void",
      Math$1 = global$1.Math,
      AnimationGroupPlayer = function() {
        function AnimationGroupPlayer(_players) {
          var _this = this;
          this._players = _players, this._subscriptions = [], this._finished = !1, this._started = !1, this.parentPlayer = null;
          var count = 0,
              total = this._players.length;
          0 == total ? scheduleMicroTask(function() {
            return _this._onFinish();
          }) : this._players.forEach(function(player) {
            player.parentPlayer = _this, player.onDone(function() {
              ++count >= total && _this._onFinish();
            });
          });
        }
        return AnimationGroupPlayer.prototype._onFinish = function() {
          this._finished || (this._finished = !0, isPresent(this.parentPlayer) || this.destroy(), this._subscriptions.forEach(function(subscription) {
            return subscription();
          }), this._subscriptions = []);
        }, AnimationGroupPlayer.prototype.init = function() {
          this._players.forEach(function(player) {
            return player.init();
          });
        }, AnimationGroupPlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, AnimationGroupPlayer.prototype.hasStarted = function() {
          return this._started;
        }, AnimationGroupPlayer.prototype.play = function() {
          isPresent(this.parentPlayer) || this.init(), this._started = !0, this._players.forEach(function(player) {
            return player.play();
          });
        }, AnimationGroupPlayer.prototype.pause = function() {
          this._players.forEach(function(player) {
            return player.pause();
          });
        }, AnimationGroupPlayer.prototype.restart = function() {
          this._players.forEach(function(player) {
            return player.restart();
          });
        }, AnimationGroupPlayer.prototype.finish = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.finish();
          });
        }, AnimationGroupPlayer.prototype.destroy = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.destroy();
          });
        }, AnimationGroupPlayer.prototype.reset = function() {
          this._players.forEach(function(player) {
            return player.reset();
          });
        }, AnimationGroupPlayer.prototype.setPosition = function(p) {
          this._players.forEach(function(player) {
            player.setPosition(p);
          });
        }, AnimationGroupPlayer.prototype.getPosition = function() {
          var min = 0;
          return this._players.forEach(function(player) {
            var p = player.getPosition();
            min = Math$1.min(p, min);
          }), min;
        }, AnimationGroupPlayer;
      }(),
      AnimationKeyframe = function() {
        function AnimationKeyframe(offset, styles) {
          this.offset = offset, this.styles = styles;
        }
        return AnimationKeyframe;
      }(),
      AnimationPlayer = function() {
        function AnimationPlayer() {}
        return Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
          get: function() {
            throw new BaseException("NOT IMPLEMENTED: Base Class");
          },
          set: function(player) {
            throw new BaseException("NOT IMPLEMENTED: Base Class");
          },
          enumerable: !0,
          configurable: !0
        }), AnimationPlayer;
      }(),
      NoOpAnimationPlayer = function() {
        function NoOpAnimationPlayer() {
          var _this = this;
          this._subscriptions = [], this._started = !1, this.parentPlayer = null, scheduleMicroTask(function() {
            return _this._onFinish();
          });
        }
        return NoOpAnimationPlayer.prototype._onFinish = function() {
          this._subscriptions.forEach(function(entry) {
            entry();
          }), this._subscriptions = [];
        }, NoOpAnimationPlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, NoOpAnimationPlayer.prototype.hasStarted = function() {
          return this._started;
        }, NoOpAnimationPlayer.prototype.init = function() {}, NoOpAnimationPlayer.prototype.play = function() {
          this._started = !0;
        }, NoOpAnimationPlayer.prototype.pause = function() {}, NoOpAnimationPlayer.prototype.restart = function() {}, NoOpAnimationPlayer.prototype.finish = function() {
          this._onFinish();
        }, NoOpAnimationPlayer.prototype.destroy = function() {}, NoOpAnimationPlayer.prototype.reset = function() {}, NoOpAnimationPlayer.prototype.setPosition = function(p) {}, NoOpAnimationPlayer.prototype.getPosition = function() {
          return 0;
        }, NoOpAnimationPlayer;
      }(),
      AnimationSequencePlayer = function() {
        function AnimationSequencePlayer(_players) {
          var _this = this;
          this._players = _players, this._currentIndex = 0, this._subscriptions = [], this._finished = !1, this._started = !1, this.parentPlayer = null, this._players.forEach(function(player) {
            player.parentPlayer = _this;
          }), this._onNext(!1);
        }
        return AnimationSequencePlayer.prototype._onNext = function(start) {
          var _this = this;
          if (!this._finished)
            if (0 == this._players.length)
              this._activePlayer = new NoOpAnimationPlayer, scheduleMicroTask(function() {
                return _this._onFinish();
              });
            else if (this._currentIndex >= this._players.length)
              this._activePlayer = new NoOpAnimationPlayer, this._onFinish();
            else {
              var player = this._players[this._currentIndex++];
              player.onDone(function() {
                return _this._onNext(!0);
              }), this._activePlayer = player, start && player.play();
            }
        }, AnimationSequencePlayer.prototype._onFinish = function() {
          this._finished || (this._finished = !0, isPresent(this.parentPlayer) || this.destroy(), this._subscriptions.forEach(function(subscription) {
            return subscription();
          }), this._subscriptions = []);
        }, AnimationSequencePlayer.prototype.init = function() {
          this._players.forEach(function(player) {
            return player.init();
          });
        }, AnimationSequencePlayer.prototype.onDone = function(fn) {
          this._subscriptions.push(fn);
        }, AnimationSequencePlayer.prototype.hasStarted = function() {
          return this._started;
        }, AnimationSequencePlayer.prototype.play = function() {
          isPresent(this.parentPlayer) || this.init(), this._started = !0, this._activePlayer.play();
        }, AnimationSequencePlayer.prototype.pause = function() {
          this._activePlayer.pause();
        }, AnimationSequencePlayer.prototype.restart = function() {
          this._players.length > 0 && (this.reset(), this._players[0].restart());
        }, AnimationSequencePlayer.prototype.reset = function() {
          this._players.forEach(function(player) {
            return player.reset();
          });
        }, AnimationSequencePlayer.prototype.finish = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.finish();
          });
        }, AnimationSequencePlayer.prototype.destroy = function() {
          this._onFinish(), this._players.forEach(function(player) {
            return player.destroy();
          });
        }, AnimationSequencePlayer.prototype.setPosition = function(p) {
          this._players[0].setPosition(p);
        }, AnimationSequencePlayer.prototype.getPosition = function() {
          return this._players[0].getPosition();
        }, AnimationSequencePlayer;
      }(),
      AUTO_STYLE = "*",
      AnimationEntryMetadata = function() {
        function AnimationEntryMetadata(name, definitions) {
          this.name = name, this.definitions = definitions;
        }
        return AnimationEntryMetadata;
      }(),
      AnimationStateMetadata = function() {
        function AnimationStateMetadata() {}
        return AnimationStateMetadata;
      }(),
      AnimationStateDeclarationMetadata = function(_super) {
        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
          _super.call(this), this.stateNameExpr = stateNameExpr, this.styles = styles;
        }
        return __extends(AnimationStateDeclarationMetadata, _super), AnimationStateDeclarationMetadata;
      }(AnimationStateMetadata),
      AnimationStateTransitionMetadata = function(_super) {
        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
          _super.call(this), this.stateChangeExpr = stateChangeExpr, this.steps = steps;
        }
        return __extends(AnimationStateTransitionMetadata, _super), AnimationStateTransitionMetadata;
      }(AnimationStateMetadata),
      AnimationMetadata = function() {
        function AnimationMetadata() {}
        return AnimationMetadata;
      }(),
      AnimationKeyframesSequenceMetadata = function(_super) {
        function AnimationKeyframesSequenceMetadata(steps) {
          _super.call(this), this.steps = steps;
        }
        return __extends(AnimationKeyframesSequenceMetadata, _super), AnimationKeyframesSequenceMetadata;
      }(AnimationMetadata),
      AnimationStyleMetadata = function(_super) {
        function AnimationStyleMetadata(styles, offset) {
          void 0 === offset && (offset = null), _super.call(this), this.styles = styles, this.offset = offset;
        }
        return __extends(AnimationStyleMetadata, _super), AnimationStyleMetadata;
      }(AnimationMetadata),
      AnimationAnimateMetadata = function(_super) {
        function AnimationAnimateMetadata(timings, styles) {
          _super.call(this), this.timings = timings, this.styles = styles;
        }
        return __extends(AnimationAnimateMetadata, _super), AnimationAnimateMetadata;
      }(AnimationMetadata),
      AnimationWithStepsMetadata = function(_super) {
        function AnimationWithStepsMetadata() {
          _super.call(this);
        }
        return __extends(AnimationWithStepsMetadata, _super), Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
          get: function() {
            throw new BaseException("NOT IMPLEMENTED: Base Class");
          },
          enumerable: !0,
          configurable: !0
        }), AnimationWithStepsMetadata;
      }(AnimationMetadata),
      AnimationSequenceMetadata = function(_super) {
        function AnimationSequenceMetadata(_steps) {
          _super.call(this), this._steps = _steps;
        }
        return __extends(AnimationSequenceMetadata, _super), Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
          get: function() {
            return this._steps;
          },
          enumerable: !0,
          configurable: !0
        }), AnimationSequenceMetadata;
      }(AnimationWithStepsMetadata),
      AnimationGroupMetadata = function(_super) {
        function AnimationGroupMetadata(_steps) {
          _super.call(this), this._steps = _steps;
        }
        return __extends(AnimationGroupMetadata, _super), Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
          get: function() {
            return this._steps;
          },
          enumerable: !0,
          configurable: !0
        }), AnimationGroupMetadata;
      }(AnimationWithStepsMetadata),
      AnimationStyles = function() {
        function AnimationStyles(styles) {
          this.styles = styles;
        }
        return AnimationStyles;
      }(),
      DebugDomRootRenderer = function() {
        function DebugDomRootRenderer(_delegate) {
          this._delegate = _delegate;
        }
        return DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
          return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
        }, DebugDomRootRenderer;
      }(),
      DebugDomRenderer = function() {
        function DebugDomRenderer(_delegate) {
          this._delegate = _delegate;
        }
        return DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
          var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo),
              debugEl = new DebugElement(nativeEl, null, debugInfo);
          return indexDebugNode(debugEl), nativeEl;
        }, DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
          var nativeEl = this._delegate.createElement(parentElement, name, debugInfo),
              debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
          return debugEl.name = name, indexDebugNode(debugEl), nativeEl;
        }, DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
          return this._delegate.createViewRoot(hostElement);
        }, DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
          var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo),
              debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
          return indexDebugNode(debugEl), comment;
        }, DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
          var text = this._delegate.createText(parentElement, value, debugInfo),
              debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
          return indexDebugNode(debugEl), text;
        }, DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
          var debugParent = getDebugNode(parentElement);
          if (isPresent(debugParent) && debugParent instanceof DebugElement) {
            var debugElement_1 = debugParent;
            nodes.forEach(function(node) {
              debugElement_1.addChild(getDebugNode(node));
            });
          }
          this._delegate.projectNodes(parentElement, nodes);
        }, DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
          var debugNode = getDebugNode(node);
          if (isPresent(debugNode)) {
            var debugParent = debugNode.parent;
            if (viewRootNodes.length > 0 && isPresent(debugParent)) {
              var debugViewRootNodes = [];
              viewRootNodes.forEach(function(rootNode) {
                return debugViewRootNodes.push(getDebugNode(rootNode));
              }), debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
            }
          }
          this._delegate.attachViewAfter(node, viewRootNodes);
        }, DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
          viewRootNodes.forEach(function(node) {
            var debugNode = getDebugNode(node);
            isPresent(debugNode) && isPresent(debugNode.parent) && debugNode.parent.removeChild(debugNode);
          }), this._delegate.detachView(viewRootNodes);
        }, DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
          viewAllNodes.forEach(function(node) {
            removeDebugNodeFromIndex(getDebugNode(node));
          }), this._delegate.destroyView(hostElement, viewAllNodes);
        }, DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
          var debugEl = getDebugNode(renderElement);
          return isPresent(debugEl) && debugEl.listeners.push(new EventListener(name, callback)), this._delegate.listen(renderElement, name, callback);
        }, DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
          return this._delegate.listenGlobal(target, name, callback);
        }, DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.properties[propertyName] = propertyValue), this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
        }, DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.attributes[attributeName] = attributeValue), this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
        }, DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
          this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
        }, DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.classes[className] = isAdd), this._delegate.setElementClass(renderElement, className, isAdd);
        }, DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
          var debugEl = getDebugNode(renderElement);
          isPresent(debugEl) && debugEl instanceof DebugElement && (debugEl.styles[styleName] = styleValue), this._delegate.setElementStyle(renderElement, styleName, styleValue);
        }, DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
          this._delegate.invokeElementMethod(renderElement, methodName, args);
        }, DebugDomRenderer.prototype.setText = function(renderNode, text) {
          this._delegate.setText(renderNode, text);
        }, DebugDomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
          return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing);
        }, DebugDomRenderer;
      }(),
      StaticNodeDebugInfo = function() {
        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
          this.providerTokens = providerTokens, this.componentToken = componentToken, this.refTokens = refTokens;
        }
        return StaticNodeDebugInfo;
      }(),
      DebugContext = function() {
        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
          this._view = _view, this._nodeIndex = _nodeIndex, this._tplRow = _tplRow, this._tplCol = _tplCol;
        }
        return Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
          get: function() {
            return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "context", {
          get: function() {
            return this._view.context;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "component", {
          get: function() {
            var staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken) ? this.injector.get(staticNodeInfo.componentToken) : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
          get: function() {
            for (var componentView = this._view; isPresent(componentView.declarationAppElement) && componentView.type !== ViewType.COMPONENT; )
              componentView = componentView.declarationAppElement.parentView;
            return isPresent(componentView.declarationAppElement) ? componentView.declarationAppElement.nativeElement : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "injector", {
          get: function() {
            return this._view.injector(this._nodeIndex);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "renderNode", {
          get: function() {
            return isPresent(this._nodeIndex) && this._view.allNodes ? this._view.allNodes[this._nodeIndex] : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "providerTokens", {
          get: function() {
            var staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "source", {
          get: function() {
            return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(DebugContext.prototype, "references", {
          get: function() {
            var _this = this,
                varValues = {},
                staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo)) {
              var refs = staticNodeInfo.refTokens;
              StringMapWrapper.forEach(refs, function(refToken, refName) {
                var varValue;
                varValue = isBlank(refToken) ? _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null : _this._view.injectorGet(refToken, _this._nodeIndex, null), varValues[refName] = varValue;
              });
            }
            return varValues;
          },
          enumerable: !0,
          configurable: !0
        }), DebugContext;
      }(),
      ViewAnimationMap = function() {
        function ViewAnimationMap() {
          this._map = new Map$1, this._allPlayers = [];
        }
        return Object.defineProperty(ViewAnimationMap.prototype, "length", {
          get: function() {
            return this.getAllPlayers().length;
          },
          enumerable: !0,
          configurable: !0
        }), ViewAnimationMap.prototype.find = function(element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (isPresent(playersByAnimation))
            return playersByAnimation[animationName];
        }, ViewAnimationMap.prototype.findAllPlayersByElement = function(element) {
          var el = this._map.get(element);
          return el ? StringMapWrapper.values(el) : [];
        }, ViewAnimationMap.prototype.set = function(element, animationName, player) {
          var playersByAnimation = this._map.get(element);
          isPresent(playersByAnimation) || (playersByAnimation = {});
          var existingEntry = playersByAnimation[animationName];
          isPresent(existingEntry) && this.remove(element, animationName), playersByAnimation[animationName] = player, this._allPlayers.push(player), this._map.set(element, playersByAnimation);
        }, ViewAnimationMap.prototype.getAllPlayers = function() {
          return this._allPlayers;
        }, ViewAnimationMap.prototype.remove = function(element, animationName) {
          var playersByAnimation = this._map.get(element);
          if (isPresent(playersByAnimation)) {
            var player = playersByAnimation[animationName];
            delete playersByAnimation[animationName];
            var index = this._allPlayers.indexOf(player);
            ListWrapper.removeAt(this._allPlayers, index), StringMapWrapper.isEmpty(playersByAnimation) && this._map.delete(element);
          }
        }, ViewAnimationMap;
      }(),
      _UNDEFINED$1 = new Object,
      ElementInjector = function(_super) {
        function ElementInjector(_view, _nodeIndex) {
          _super.call(this), this._view = _view, this._nodeIndex = _nodeIndex;
        }
        return __extends(ElementInjector, _super), ElementInjector.prototype.get = function(token, notFoundValue) {
          void 0 === notFoundValue && (notFoundValue = THROW_IF_NOT_FOUND);
          var result = _UNDEFINED$1;
          return result === _UNDEFINED$1 && (result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED$1)), result === _UNDEFINED$1 && (result = this._view.parentInjector.get(token, notFoundValue)), result;
        }, ElementInjector;
      }(Injector),
      _scope_check = wtfCreateScope("AppView#check(ascii id)"),
      AppView = function() {
        function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
          this.clazz = clazz, this.componentType = componentType, this.type = type, this.viewUtils = viewUtils, this.parentInjector = parentInjector, this.declarationAppElement = declarationAppElement, this.cdMode = cdMode, this.contentChildren = [], this.viewChildren = [], this.viewContainerElement = null, this.numberOfChecks = 0, this.animationPlayers = new ViewAnimationMap, this.ref = new ViewRef_(this), type === ViewType.COMPONENT || type === ViewType.HOST ? this.renderer = viewUtils.renderComponent(componentType) : this.renderer = declarationAppElement.parentView.renderer;
        }
        return Object.defineProperty(AppView.prototype, "destroyed", {
          get: function() {
            return this.cdMode === ChangeDetectorStatus.Destroyed;
          },
          enumerable: !0,
          configurable: !0
        }), AppView.prototype.cancelActiveAnimation = function(element, animationName, removeAllAnimations) {
          if (void 0 === removeAllAnimations && (removeAllAnimations = !1), removeAllAnimations)
            this.animationPlayers.findAllPlayersByElement(element).forEach(function(player) {
              return player.destroy();
            });
          else {
            var player = this.animationPlayers.find(element, animationName);
            isPresent(player) && player.destroy();
          }
        }, AppView.prototype.queueAnimation = function(element, animationName, player) {
          var _this = this;
          this.animationPlayers.set(element, animationName, player), player.onDone(function() {
            _this.animationPlayers.remove(element, animationName);
          });
        }, AppView.prototype.triggerQueuedAnimations = function() {
          this.animationPlayers.getAllPlayers().forEach(function(player) {
            player.hasStarted() || player.play();
          });
        }, AppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
          this.context = context;
          var projectableNodes;
          switch (this.type) {
            case ViewType.COMPONENT:
              projectableNodes = ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
              break;
            case ViewType.EMBEDDED:
              projectableNodes = this.declarationAppElement.parentView.projectableNodes;
              break;
            case ViewType.HOST:
              projectableNodes = givenProjectableNodes;
          }
          return this._hasExternalHostElement = isPresent(rootSelectorOrNode), this.projectableNodes = projectableNodes, this.createInternal(rootSelectorOrNode);
        }, AppView.prototype.createInternal = function(rootSelectorOrNode) {
          return null;
        }, AppView.prototype.init = function(rootNodesOrAppElements, allNodes, disposables, subscriptions) {
          this.rootNodesOrAppElements = rootNodesOrAppElements, this.allNodes = allNodes, this.disposables = disposables, this.subscriptions = subscriptions, this.type === ViewType.COMPONENT && (this.declarationAppElement.parentView.viewChildren.push(this), this.dirtyParentQueriesInternal());
        }, AppView.prototype.selectOrCreateHostElement = function(elementName, rootSelectorOrNode, debugInfo) {
          var hostElement;
          return hostElement = isPresent(rootSelectorOrNode) ? this.renderer.selectRootElement(rootSelectorOrNode, debugInfo) : this.renderer.createElement(null, elementName, debugInfo);
        }, AppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
          return this.injectorGetInternal(token, nodeIndex, notFoundResult);
        }, AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
          return notFoundResult;
        }, AppView.prototype.injector = function(nodeIndex) {
          return isPresent(nodeIndex) ? new ElementInjector(this, nodeIndex) : this.parentInjector;
        }, AppView.prototype.destroy = function() {
          this._hasExternalHostElement ? this.renderer.detachView(this.flatRootNodes) : isPresent(this.viewContainerElement) && this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this)), this._destroyRecurse();
        }, AppView.prototype._destroyRecurse = function() {
          if (this.cdMode !== ChangeDetectorStatus.Destroyed) {
            for (var children = this.contentChildren,
                i = 0; i < children.length; i++)
              children[i]._destroyRecurse();
            children = this.viewChildren;
            for (var i = 0; i < children.length; i++)
              children[i]._destroyRecurse();
            this.destroyLocal(), this.cdMode = ChangeDetectorStatus.Destroyed;
          }
        }, AppView.prototype.destroyLocal = function() {
          for (var _this = this,
              hostElement = this.type === ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null,
              i = 0; i < this.disposables.length; i++)
            this.disposables[i]();
          for (var i = 0; i < this.subscriptions.length; i++)
            this.subscriptions[i].unsubscribe();
          if (this.destroyInternal(), this.dirtyParentQueriesInternal(), 0 == this.animationPlayers.length)
            this.renderer.destroyView(hostElement, this.allNodes);
          else {
            var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
            player.onDone(function() {
              _this.renderer.destroyView(hostElement, _this.allNodes);
            });
          }
        }, AppView.prototype.destroyInternal = function() {}, AppView.prototype.detachInternal = function() {}, AppView.prototype.detach = function() {
          var _this = this;
          if (this.detachInternal(), 0 == this.animationPlayers.length)
            this.renderer.detachView(this.flatRootNodes);
          else {
            var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
            player.onDone(function() {
              _this.renderer.detachView(_this.flatRootNodes);
            });
          }
        }, Object.defineProperty(AppView.prototype, "changeDetectorRef", {
          get: function() {
            return this.ref;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AppView.prototype, "parent", {
          get: function() {
            return isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AppView.prototype, "flatRootNodes", {
          get: function() {
            return flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(AppView.prototype, "lastRootNode", {
          get: function() {
            var lastNode = this.rootNodesOrAppElements.length > 0 ? this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] : null;
            return _findLastRenderNode(lastNode);
          },
          enumerable: !0,
          configurable: !0
        }), AppView.prototype.dirtyParentQueriesInternal = function() {}, AppView.prototype.detectChanges = function(throwOnChange) {
          var s = _scope_check(this.clazz);
          this.cdMode !== ChangeDetectorStatus.Checked && this.cdMode !== ChangeDetectorStatus.Errored && (this.cdMode === ChangeDetectorStatus.Destroyed && this.throwDestroyedError("detectChanges"), this.detectChangesInternal(throwOnChange), this.cdMode === ChangeDetectorStatus.CheckOnce && (this.cdMode = ChangeDetectorStatus.Checked), this.numberOfChecks++, wtfLeave(s));
        }, AppView.prototype.detectChangesInternal = function(throwOnChange) {
          this.detectContentChildrenChanges(throwOnChange), this.detectViewChildrenChanges(throwOnChange);
        }, AppView.prototype.detectContentChildrenChanges = function(throwOnChange) {
          for (var i = 0; i < this.contentChildren.length; ++i) {
            var child = this.contentChildren[i];
            child.cdMode !== ChangeDetectorStatus.Detached && child.detectChanges(throwOnChange);
          }
        }, AppView.prototype.detectViewChildrenChanges = function(throwOnChange) {
          for (var i = 0; i < this.viewChildren.length; ++i) {
            var child = this.viewChildren[i];
            child.cdMode !== ChangeDetectorStatus.Detached && child.detectChanges(throwOnChange);
          }
        }, AppView.prototype.markContentChildAsMoved = function(renderAppElement) {
          this.dirtyParentQueriesInternal();
        }, AppView.prototype.addToContentChildren = function(renderAppElement) {
          renderAppElement.parentView.contentChildren.push(this), this.viewContainerElement = renderAppElement, this.dirtyParentQueriesInternal();
        }, AppView.prototype.removeFromContentChildren = function(renderAppElement) {
          ListWrapper.remove(renderAppElement.parentView.contentChildren, this), this.dirtyParentQueriesInternal(), this.viewContainerElement = null;
        }, AppView.prototype.markAsCheckOnce = function() {
          this.cdMode = ChangeDetectorStatus.CheckOnce;
        }, AppView.prototype.markPathToRootAsCheckOnce = function() {
          for (var c = this; isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached; ) {
            c.cdMode === ChangeDetectorStatus.Checked && (c.cdMode = ChangeDetectorStatus.CheckOnce);
            var parentEl = c.type === ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
            c = isPresent(parentEl) ? parentEl.parentView : null;
          }
        }, AppView.prototype.eventHandler = function(cb) {
          return cb;
        }, AppView.prototype.throwDestroyedError = function(details) {
          throw new ViewDestroyedException(details);
        }, AppView;
      }(),
      DebugAppView = function(_super) {
        function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
          _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode), this.staticNodeDebugInfos = staticNodeDebugInfos, this._currentDebugContext = null;
        }
        return __extends(DebugAppView, _super), DebugAppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
          this._resetDebug();
          try {
            return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
          this._resetDebug();
          try {
            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.detach = function() {
          this._resetDebug();
          try {
            _super.prototype.detach.call(this);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.destroyLocal = function() {
          this._resetDebug();
          try {
            _super.prototype.destroyLocal.call(this);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype.detectChanges = function(throwOnChange) {
          this._resetDebug();
          try {
            _super.prototype.detectChanges.call(this, throwOnChange);
          } catch (e) {
            throw this._rethrowWithContext(e, e.stack), e;
          }
        }, DebugAppView.prototype._resetDebug = function() {
          this._currentDebugContext = null;
        }, DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
          return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
        }, DebugAppView.prototype._rethrowWithContext = function(e, stack) {
          if (!(e instanceof ViewWrappedException) && (e instanceof ExpressionChangedAfterItHasBeenCheckedException || (this.cdMode = ChangeDetectorStatus.Errored), isPresent(this._currentDebugContext)))
            throw new ViewWrappedException(e, stack, this._currentDebugContext);
        }, DebugAppView.prototype.eventHandler = function(cb) {
          var _this = this,
              superHandler = _super.prototype.eventHandler.call(this, cb);
          return function(event) {
            _this._resetDebug();
            try {
              return superHandler(event);
            } catch (e) {
              throw _this._rethrowWithContext(e, e.stack), e;
            }
          };
        }, DebugAppView;
      }(AppView),
      __core_private__ = {
        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
        ChangeDetectorStatus: ChangeDetectorStatus,
        CHANGE_DETECTION_STRATEGY_VALUES: CHANGE_DETECTION_STRATEGY_VALUES,
        constructDependencies: constructDependencies,
        LifecycleHooks: LifecycleHooks,
        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
        ReflectorReader: ReflectorReader,
        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
        AppElement: AppElement,
        AppView: AppView,
        DebugAppView: DebugAppView,
        NgModuleInjector: NgModuleInjector,
        ViewType: ViewType,
        MAX_INTERPOLATION_VALUES: MAX_INTERPOLATION_VALUES,
        checkBinding: checkBinding,
        flattenNestedViewRenderNodes: flattenNestedViewRenderNodes,
        interpolate: interpolate,
        ViewUtils: ViewUtils,
        VIEW_ENCAPSULATION_VALUES: VIEW_ENCAPSULATION_VALUES,
        DebugContext: DebugContext,
        StaticNodeDebugInfo: StaticNodeDebugInfo,
        devModeEqual: devModeEqual,
        UNINITIALIZED: UNINITIALIZED,
        ValueUnwrapper: ValueUnwrapper,
        RenderDebugInfo: RenderDebugInfo,
        TemplateRef_: TemplateRef_,
        wtfInit: wtfInit,
        ReflectionCapabilities: ReflectionCapabilities,
        makeDecorator: makeDecorator,
        DebugDomRootRenderer: DebugDomRootRenderer,
        createProvider: createProvider,
        isProviderLiteral: isProviderLiteral,
        EMPTY_ARRAY: EMPTY_ARRAY,
        EMPTY_MAP: EMPTY_MAP,
        pureProxy1: pureProxy1,
        pureProxy2: pureProxy2,
        pureProxy3: pureProxy3,
        pureProxy4: pureProxy4,
        pureProxy5: pureProxy5,
        pureProxy6: pureProxy6,
        pureProxy7: pureProxy7,
        pureProxy8: pureProxy8,
        pureProxy9: pureProxy9,
        pureProxy10: pureProxy10,
        castByValue: castByValue,
        Console: Console,
        reflector: reflector,
        Reflector: Reflector,
        NoOpAnimationPlayer: NoOpAnimationPlayer,
        AnimationPlayer: AnimationPlayer,
        AnimationSequencePlayer: AnimationSequencePlayer,
        AnimationGroupPlayer: AnimationGroupPlayer,
        AnimationKeyframe: AnimationKeyframe,
        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
        balanceAnimationKeyframes: balanceAnimationKeyframes,
        flattenStyles: flattenStyles,
        clearStyles: clearStyles,
        renderStyles: renderStyles,
        collectAndResolveStyles: collectAndResolveStyles,
        AnimationStyles: AnimationStyles,
        ANY_STATE: ANY_STATE,
        DEFAULT_STATE: DEFAULT_STATE,
        EMPTY_STATE: EMPTY_STATE,
        FILL_STYLE_FLAG: FILL_STYLE_FLAG
      };
  exports.createPlatform = createPlatform, exports.assertPlatform = assertPlatform, exports.disposePlatform = disposePlatform, exports.getPlatform = getPlatform, exports.coreBootstrap = coreBootstrap, exports.coreLoadAndBootstrap = coreLoadAndBootstrap, exports.PlatformRef = PlatformRef, exports.ApplicationRef = ApplicationRef, exports.enableProdMode = enableProdMode, exports.lockRunMode = lockRunMode, exports.isDevMode = isDevMode, exports.createPlatformFactory = createPlatformFactory, exports.APP_ID = APP_ID, exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL, exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER, exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER, exports.APP_INITIALIZER = APP_INITIALIZER, exports.ApplicationInitStatus = ApplicationInitStatus, exports.DebugElement = DebugElement, exports.DebugNode = DebugNode, exports.asNativeElements = asNativeElements, exports.getDebugNode = getDebugNode, exports.APPLICATION_COMMON_PROVIDERS = APPLICATION_COMMON_PROVIDERS, exports.ApplicationModule = ApplicationModule, exports.wtfCreateScope = wtfCreateScope, exports.wtfLeave = wtfLeave, exports.wtfStartTimeRange = wtfStartTimeRange, exports.wtfEndTimeRange = wtfEndTimeRange, exports.Type = Type, exports.EventEmitter = EventEmitter, exports.ExceptionHandler = ExceptionHandler, exports.WrappedException = WrappedException, exports.BaseException = BaseException, exports.AnimationPlayer = AnimationPlayer, exports.SanitizationService = SanitizationService, exports.Component = Component, exports.Directive = Directive, exports.Attribute = Attribute, exports.Query = Query, exports.ContentChildren = ContentChildren, exports.ContentChild = ContentChild, exports.ViewChildren = ViewChildren, exports.ViewChild = ViewChild, exports.ViewQuery = ViewQuery, exports.Pipe = Pipe, exports.Input = Input, exports.Output = Output, exports.HostBinding = HostBinding, exports.HostListener = HostListener, exports.NgModule = NgModule, exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS, exports.AttributeMetadata = AttributeMetadata, exports.ContentChildMetadata = ContentChildMetadata, exports.ContentChildrenMetadata = ContentChildrenMetadata, exports.QueryMetadata = QueryMetadata, exports.ViewChildMetadata = ViewChildMetadata, exports.ViewChildrenMetadata = ViewChildrenMetadata, exports.ViewQueryMetadata = ViewQueryMetadata, exports.ComponentMetadata = ComponentMetadata, exports.DirectiveMetadata = DirectiveMetadata, exports.HostBindingMetadata = HostBindingMetadata, exports.HostListenerMetadata = HostListenerMetadata, exports.InputMetadata = InputMetadata, exports.OutputMetadata = OutputMetadata, exports.PipeMetadata = PipeMetadata, exports.AfterContentChecked = AfterContentChecked, exports.AfterContentInit = AfterContentInit, exports.AfterViewChecked = AfterViewChecked, exports.AfterViewInit = AfterViewInit, exports.DoCheck = DoCheck, exports.OnChanges = OnChanges, exports.OnDestroy = OnDestroy, exports.OnInit = OnInit, exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA, exports.NgModuleMetadata = NgModuleMetadata, exports.ViewMetadata = ViewMetadata, exports.Class = Class, exports.HostMetadata = HostMetadata, exports.InjectMetadata = InjectMetadata, exports.InjectableMetadata = InjectableMetadata, exports.OptionalMetadata = OptionalMetadata, exports.SelfMetadata = SelfMetadata, exports.SkipSelfMetadata = SkipSelfMetadata, exports.forwardRef = forwardRef, exports.resolveForwardRef = resolveForwardRef, exports.Injector = Injector, exports.ReflectiveInjector = ReflectiveInjector, exports.Binding = Binding, exports.ProviderBuilder = ProviderBuilder, exports.bind = bind, exports.Provider = Provider, exports.provide = provide, exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory, exports.ReflectiveKey = ReflectiveKey, exports.NoProviderError = NoProviderError, exports.AbstractProviderError = AbstractProviderError, exports.CyclicDependencyError = CyclicDependencyError, exports.InstantiationError = InstantiationError, exports.InvalidProviderError = InvalidProviderError, exports.NoAnnotationError = NoAnnotationError, exports.OutOfBoundsError = OutOfBoundsError, exports.OpaqueToken = OpaqueToken, exports.Inject = Inject, exports.Optional = Optional, exports.Injectable = Injectable, exports.Self = Self, exports.Host = Host, exports.SkipSelf = SkipSelf, exports.NgZone = NgZone, exports.NgZoneError = NgZoneError, exports.RenderComponentType = RenderComponentType, exports.Renderer = Renderer, exports.RootRenderer = RootRenderer, exports.COMPILER_OPTIONS = COMPILER_OPTIONS, exports.Compiler = Compiler, exports.CompilerFactory = CompilerFactory, exports.ComponentStillLoadingError = ComponentStillLoadingError, exports.ModuleWithComponentFactories = ModuleWithComponentFactories, exports.ComponentFactory = ComponentFactory, exports.ComponentRef = ComponentRef, exports.ComponentFactoryResolver = ComponentFactoryResolver, exports.NoComponentFactoryError = NoComponentFactoryError, exports.ComponentResolver = ComponentResolver, exports.DynamicComponentLoader = DynamicComponentLoader, exports.ElementRef = ElementRef, exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException, exports.NgModuleFactory = NgModuleFactory, exports.NgModuleRef = NgModuleRef, exports.NgModuleFactoryLoader = NgModuleFactoryLoader, exports.QueryList = QueryList, exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader, exports.SystemJsCmpFactoryResolver = SystemJsCmpFactoryResolver, exports.SystemJsComponentResolver = SystemJsComponentResolver, exports.TemplateRef = TemplateRef, exports.ViewContainerRef = ViewContainerRef, exports.EmbeddedViewRef = EmbeddedViewRef, exports.ViewRef = ViewRef, exports.Testability = Testability, exports.TestabilityRegistry = TestabilityRegistry, exports.setTestabilityGetter = setTestabilityGetter, exports.ChangeDetectorRef = ChangeDetectorRef, exports.CollectionChangeRecord = CollectionChangeRecord, exports.DefaultIterableDiffer = DefaultIterableDiffer, exports.IterableDiffers = IterableDiffers, exports.KeyValueChangeRecord = KeyValueChangeRecord, exports.KeyValueDiffers = KeyValueDiffers, exports.SimpleChange = SimpleChange, exports.WrappedValue = WrappedValue, exports.PLATFORM_DIRECTIVES = PLATFORM_DIRECTIVES, exports.PLATFORM_PIPES = PLATFORM_PIPES, exports.platformCore = platformCore, exports.PLATFORM_COMMON_PROVIDERS = PLATFORM_COMMON_PROVIDERS, exports.__core_private__ = __core_private__, exports.AUTO_STYLE = AUTO_STYLE, exports.AnimationEntryMetadata = AnimationEntryMetadata, exports.AnimationStateMetadata = AnimationStateMetadata, exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata, exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata, exports.AnimationMetadata = AnimationMetadata, exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata, exports.AnimationStyleMetadata = AnimationStyleMetadata, exports.AnimationAnimateMetadata = AnimationAnimateMetadata, exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata, exports.AnimationSequenceMetadata = AnimationSequenceMetadata, exports.AnimationGroupMetadata = AnimationGroupMetadata, exports.animate = animate, exports.group = group, exports.sequence = sequence, exports.style = style, exports.state = state, exports.keyframes = keyframes, exports.transition = transition, exports.trigger = trigger;
});

})();
$__System.registerDynamic("14", ["3"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var BlockSliderComponent = (function() {
    function BlockSliderComponent() {
      this.blockCount = 4;
      this.startingPosition = 0;
      this.blocks = [];
      this.position = 0;
      this.positionStyle = '0';
    }
    BlockSliderComponent.prototype.ngOnInit = function() {
      this.position = this.startingPosition;
      this.positionStyle = "-" + this.position * this.blockWidth() + "%";
    };
    BlockSliderComponent.prototype.blockWidth = function() {
      return 100 / this.blockCount;
    };
    BlockSliderComponent.prototype.addBlock = function(block) {
      this.blocks.push(block);
      this._segments = this.blocks.length / this.blockCount;
      this._lastSegment = [(this._segments - 1) * this.blockCount, this._segments * this.blockCount];
    };
    BlockSliderComponent.prototype.moveLeft = function() {
      if (!this.position)
        this.position = this._lastSegment[0];
      else
        this.position--;
      this.positionStyle = "-" + this.position * this.blockWidth() + "%";
    };
    BlockSliderComponent.prototype.moveRight = function() {
      if (this.position >= this._lastSegment[0] && this.position <= this._lastSegment[1])
        this.position = 0;
      else
        this.position++;
      this.positionStyle = "-" + this.position * this.blockWidth() + "%";
    };
    __decorate([core_1.Input(), __metadata('design:type', Number)], BlockSliderComponent.prototype, "blockCount", void 0);
    __decorate([core_1.Input(), __metadata('design:type', Number)], BlockSliderComponent.prototype, "startingPosition", void 0);
    BlockSliderComponent = __decorate([core_1.Component({
      selector: 'sc-block-slider',
      styles: ["\n        :host {\n            display: block;\n            width: 100%;\n            position: relative;\n            box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12);\n        }\n        \n        .arrow {\n            height: 100%;\n            position: absolute;\n            width: 5%;\n            top: 0;\n            cursor: pointer;\n        }\n        \n        .arrow.right {\n            right: 0;\n            border-left: 1px solid rgba(0, 0, 0, 0.12);\n        }\n       .arrow.left {\n            left: 0;\n            border-right: 1px solid rgba(0, 0, 0, 0.12);\n        } \n        \n        .arrow .line {\n            position: absolute;\n            top: 50%;\n            width: 3px;\n            height: 14px;\n            transform-origin: 50% 0;\n        }\n        \n        .arrow.right .line { \n            transform: rotate(45deg);\n            left: 60%;\n        }\n        .arrow.right .line:nth-child(2) { transform: translateY(1px) rotate(135deg) }\n        \n        .arrow.left .line { \n            transform: rotate(-45deg);\n            right: 60%;\n        }\n        .arrow.left .line:nth-child(2) { transform: translateY(1px) rotate(-135deg) }\n        \n        .arrow .line:after {\n            content: \"\";\n            position: absolute;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n            background-color: #888;\n            transition: background-color 0.3s;\n        }       \n        \n        .block-wrapper {\n            width: 90%;\n            display: block;\n            margin: 0 5%;\n            height: 100%;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .slide-wrapper {\n            width: 100%;\n            position: absolute;\n            top: 0;\n            transition: all 0.3s ease-in-out;\n            left: 0;\n            height: 100%;\n        }\n    "],
      template: "\n        <div class=\"arrow right\" (click)=\"moveRight()\">\n            <span class=\"line\"></span>    \n            <span class=\"line\"></span>    \n        </div>\n        <div class=\"arrow left\" (click)=\"moveLeft()\">\n            <span class=\"line\"></span>    \n            <span class=\"line\"></span>    \n        </div>\n        <div class=\"block-wrapper\">\n            <div class=\"slide-wrapper\" [style.left]=\"positionStyle\" [ngStyle]=\"{'width': blockWidth() * blockCount + '%'}\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    "
    }), __metadata('design:paramtypes', [])], BlockSliderComponent);
    return BlockSliderComponent;
  }());
  exports.BlockSliderComponent = BlockSliderComponent;
  return module.exports;
});

$__System.registerDynamic("15", ["3", "14"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var block_slider_component_1 = $__require('14');
  var BlockComponent = (function() {
    function BlockComponent(_blocksSliderComp) {
      this._blocksSliderComp = _blocksSliderComp;
    }
    Object.defineProperty(BlockComponent.prototype, "w", {
      get: function() {
        return this.width + "%";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BlockComponent.prototype, "l", {
      get: function() {
        return this.width * this.index + "%";
      },
      enumerable: true,
      configurable: true
    });
    BlockComponent.prototype.ngOnInit = function() {
      this.width = this._blocksSliderComp.blockWidth();
      this.index = this._blocksSliderComp.blocks.length;
      this._blocksSliderComp.addBlock(this);
    };
    __decorate([core_1.HostBinding('style.width'), __metadata('design:type', Object)], BlockComponent.prototype, "w", null);
    __decorate([core_1.HostBinding('style.left'), __metadata('design:type', Object)], BlockComponent.prototype, "l", null);
    BlockComponent = __decorate([core_1.Component({
      selector: 'sc-block',
      styles: ["\n        :host {\n            height: 100%;\n            position: absolute;\n        }\n    "],
      template: "\n        <ng-content></ng-content>\n    "
    }), __metadata('design:paramtypes', [block_slider_component_1.BlockSliderComponent])], BlockComponent);
    return BlockComponent;
  }());
  exports.BlockComponent = BlockComponent;
  return module.exports;
});

$__System.registerDynamic("25", ["7", "8", "9", "a", "b", "c", "13", "14", "15"], true, function($__require, exports, module) {
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  exports.TabsModule = $__require('7').TabsModule;
  exports.TabsComponent = $__require('8').TabsComponent;
  exports.TabComponent = $__require('9').TabComponent;
  exports.AccordionModule = $__require('a').AccordionModule;
  exports.AccordionComponent = $__require('b').AccordionComponent;
  exports.AccordComponent = $__require('c').AccordComponent;
  exports.BlockSliderModule = $__require('13').BlockSliderModule;
  exports.BlockSliderComponent = $__require('14').BlockSliderComponent;
  exports.BlockComponent = $__require('15').BlockComponent;
  return module.exports;
});

$__System.registerDynamic("26", ["3", "5", "6", "25"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var core_1 = $__require('3');
  var platform_browser_1 = $__require('5');
  var app_component_1 = $__require('6');
  var ng2_simple_components_1 = $__require('25');
  var AppModule = (function() {
    function AppModule() {}
    AppModule = __decorate([core_1.NgModule({
      imports: [platform_browser_1.BrowserModule, ng2_simple_components_1.TabsModule, ng2_simple_components_1.AccordionModule, ng2_simple_components_1.BlockSliderModule],
      declarations: [app_component_1.AppComponent],
      bootstrap: [app_component_1.AppComponent]
    }), __metadata('design:paramtypes', [])], AppModule);
    return AppModule;
  }());
  exports.AppModule = AppModule;
  return module.exports;
});

$__System.registerDynamic("1", ["4", "26"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this || self,
      GLOBAL = global;
  var platform_browser_dynamic_1 = $__require('4');
  var app_module_1 = $__require('26');
  platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);
  return module.exports;
});

})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});